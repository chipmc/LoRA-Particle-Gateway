
c:/Users/alexb/OneDrive/Desktop/Orbit/LoRA-Particle-Gateway/target/4.2.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00015760  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c9780  000c9780  00019780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c97a4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000017c  2003abd8  000c97a8  0002abd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003a9c  2003ad58  2003ad58  0003ad58  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c9924  000c9924  00039924  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c9950  000c9950  00039950  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   002df40c  00000000  00000000  00039954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002f9ed  00000000  00000000  00318d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0007907c  00000000  00000000  0034874d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00005558  00000000  00000000  003c17c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00014288  00000000  00000000  003c6d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00066bb1  00000000  00000000  003dafa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000a5761  00000000  00000000  00441b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00181503  00000000  00000000  004e72bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00010360  00000000  00000000  006687c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f011 f9c5 	bl	c53c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f011 f9e7 	bl	c5410 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003abd8 	.word	0x2003abd8
   b404c:	000c97a8 	.word	0x000c97a8
   b4050:	2003ad54 	.word	0x2003ad54
   b4054:	2003ad58 	.word	0x2003ad58
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00e f9e7 	bl	c2434 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c9734 	.word	0x000c9734
   b4080:	000c977c 	.word	0x000c977c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bd90 	b.w	b4ba8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fe71 	bl	b4d70 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00e b987 	b.w	c23a4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f00c b967 	b.w	c0368 <malloc>

000b409a <_Znaj>:
   b409a:	f00c b965 	b.w	c0368 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f00c b96b 	b.w	c0378 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f00b fffc 	bl	c00a8 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bfbf9 	.word	0x000bfbf9
   b40b8:	000c5a04 	.word	0x000c5a04

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40cc:	b40e      	push	{r1, r2, r3}
   b40ce:	b500      	push	{lr}
   b40d0:	b08c      	sub	sp, #48	; 0x30
   b40d2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40d4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40d8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40dc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40de:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40e2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40e4:	6801      	ldr	r1, [r0, #0]
   b40e6:	aa04      	add	r2, sp, #16
   b40e8:	201e      	movs	r0, #30
    attr.flags = 0;
   b40ea:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ee:	f00b ffeb 	bl	c00c8 <log_message_v>
}
   b40f2:	b00c      	add	sp, #48	; 0x30
   b40f4:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f8:	b003      	add	sp, #12
   b40fa:	4770      	bx	lr

000b40fc <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b40fc:	ee07 0a90 	vmov	s15, r0
   b4100:	ed9f 7a09 	vldr	s14, [pc, #36]	; b4128 <_Z17tmp36TemperatureCi+0x2c>
   b4104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4108:	ee67 7a87 	vmul.f32	s15, s15, s14
   b410c:	ed9f 7a07 	vldr	s14, [pc, #28]	; b412c <_Z17tmp36TemperatureCi+0x30>
   b4110:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b4114:	eddf 7a06 	vldr	s15, [pc, #24]	; b4130 <_Z17tmp36TemperatureCi+0x34>
   b4118:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b411c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b4120:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b4124:	4770      	bx	lr
   b4126:	bf00      	nop
   b4128:	454e4000 	.word	0x454e4000
   b412c:	457ff000 	.word	0x457ff000
   b4130:	43fa0000 	.word	0x43fa0000

000b4134 <_Z12batteryStatev>:


bool batteryState() {
   b4134:	b538      	push	{r3, r4, r5, lr}

  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b4136:	480e      	ldr	r0, [pc, #56]	; (b4170 <_Z12batteryStatev+0x3c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4138:	4d0e      	ldr	r5, [pc, #56]	; (b4174 <_Z12batteryStatev+0x40>)
   b413a:	f00e f907 	bl	c234c <_ZN9FuelGauge10quickStartEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b413e:	f00b fd63 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
   b4142:	4604      	mov	r4, r0
   b4144:	f00b fd60 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
 * 
 * @details takes a single unsigned long input in millis
 * 
 */
inline void softDelay(uint32_t t) {
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
   b4148:	1b00      	subs	r0, r0, r4
   b414a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b414e:	d205      	bcs.n	b415c <_Z12batteryStatev+0x28>
		return HAL_Timer_Get_Milli_Seconds();
   b4150:	f00b fd5a 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4154:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b4156:	f00c f8b7 	bl	c02c8 <spark_process>
   b415a:	e7f3      	b.n	b4144 <_Z12batteryStatev+0x10>
  if (current.get_stateOfCharge() > 60) return true;
   b415c:	f003 faee 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4160:	f003 fb3b 	bl	b77da <_ZNK17currentStatusData17get_stateOfChargeEv>
}
   b4164:	283c      	cmp	r0, #60	; 0x3c
   b4166:	bfd4      	ite	le
   b4168:	2000      	movle	r0, #0
   b416a:	2001      	movgt	r0, #1
   b416c:	bd38      	pop	{r3, r4, r5, pc}
   b416e:	bf00      	nop
   b4170:	2003ad58 	.word	0x2003ad58
   b4174:	2003e728 	.word	0x2003e728

000b4178 <_Z16isItSafeToChargev>:
{
   b4178:	b513      	push	{r0, r1, r4, lr}
    PMIC pmic(true);
   b417a:	2101      	movs	r1, #1
   b417c:	a801      	add	r0, sp, #4
   b417e:	f00c f97a 	bl	c0476 <_ZN4PMICC1Eb>
    if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b4182:	f003 fadb 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4186:	f003 fc99 	bl	b7abc <_ZNK17currentStatusData17get_internalTempCEv>
   b418a:	f003 fad7 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b418e:	f003 fc95 	bl	b7abc <_ZNK17currentStatusData17get_internalTempCEv>
   b4192:	2825      	cmp	r0, #37	; 0x25
      pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b4194:	a801      	add	r0, sp, #4
    if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b4196:	d90d      	bls.n	b41b4 <_Z16isItSafeToChargev+0x3c>
      pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b4198:	f00c fa00 	bl	c059c <_ZN4PMIC15disableChargingEv>
      current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b419c:	f003 face 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b41a0:	2101      	movs	r1, #1
   b41a2:	f003 fd7d 	bl	b7ca0 <_ZN17currentStatusData16set_batteryStateEh>
      return false;
   b41a6:	2400      	movs	r4, #0
    PMIC pmic(true);
   b41a8:	a801      	add	r0, sp, #4
   b41aa:	f00c f973 	bl	c0494 <_ZN4PMICD1Ev>
}
   b41ae:	4620      	mov	r0, r4
   b41b0:	b002      	add	sp, #8
   b41b2:	bd10      	pop	{r4, pc}
      pmic.enableCharging();                          // It is safe to charge the battery
   b41b4:	f00c f9d7 	bl	c0566 <_ZN4PMIC14enableChargingEv>
      return true;
   b41b8:	2401      	movs	r4, #1
   b41ba:	e7f5      	b.n	b41a8 <_Z16isItSafeToChargev+0x30>

000b41bc <_Z17getSignalStrengthv>:
void getSignalStrength() {
   b41bc:	b530      	push	{r4, r5, lr}
    const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b41be:	4d1b      	ldr	r5, [pc, #108]	; (b422c <_Z17getSignalStrengthv+0x70>)
   b41c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b41c2:	b09b      	sub	sp, #108	; 0x6c
    const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b41c4:	ac10      	add	r4, sp, #64	; 0x40
   b41c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b41c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b41ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b41cc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b41d0:	e884 0003 	stmia.w	r4, {r0, r1}
    CellularSignal sig = Cellular.RSSI();
   b41d4:	4916      	ldr	r1, [pc, #88]	; (b4230 <_Z17getSignalStrengthv+0x74>)
   b41d6:	a808      	add	r0, sp, #32
   b41d8:	f00e fd96 	bl	c2d08 <_ZN5spark13CellularClass4RSSIEv>
    auto rat = sig.getAccessTechnology();
   b41dc:	a808      	add	r0, sp, #32
   b41de:	f00d ffc0 	bl	c2162 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b41e2:	4604      	mov	r4, r0
    float strengthPercentage = sig.getStrength();
   b41e4:	a808      	add	r0, sp, #32
   b41e6:	f00d fff5 	bl	c21d4 <_ZNK14CellularSignal11getStrengthEv>
    float qualityPercentage = sig.getQuality();
   b41ea:	a808      	add	r0, sp, #32
    float strengthPercentage = sig.getStrength();
   b41ec:	ee10 5a10 	vmov	r5, s0
    float qualityPercentage = sig.getQuality();
   b41f0:	f00e f820 	bl	c2234 <_ZNK14CellularSignal10getQualityEv>
    snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b41f4:	ab1a      	add	r3, sp, #104	; 0x68
    float qualityPercentage = sig.getQuality();
   b41f6:	ee10 0a10 	vmov	r0, s0
    snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b41fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b41fe:	f010 fce5 	bl	c4bcc <__aeabi_f2d>
   b4202:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4206:	4628      	mov	r0, r5
   b4208:	f010 fce0 	bl	c4bcc <__aeabi_f2d>
   b420c:	e9cd 0100 	strd	r0, r1, [sp]
   b4210:	2110      	movs	r1, #16
   b4212:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b4216:	4a07      	ldr	r2, [pc, #28]	; (b4234 <_Z17getSignalStrengthv+0x78>)
   b4218:	eb0d 0001 	add.w	r0, sp, r1
   b421c:	f00c f8cc 	bl	c03b8 <snprintf>
    Log.info(signalStr);
   b4220:	4805      	ldr	r0, [pc, #20]	; (b4238 <_Z17getSignalStrengthv+0x7c>)
   b4222:	a904      	add	r1, sp, #16
   b4224:	f7ff ff52 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
}
   b4228:	b01b      	add	sp, #108	; 0x6c
   b422a:	bd30      	pop	{r4, r5, pc}
   b422c:	000c5aac 	.word	0x000c5aac
   b4230:	2003e6d8 	.word	0x2003e6d8
   b4234:	000c5a92 	.word	0x000c5a92
   b4238:	2003e634 	.word	0x2003e634

000b423c <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b423c:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b423e:	f003 fa7d 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4242:	4b0f      	ldr	r3, [pc, #60]	; (b4280 <_Z16takeMeasurementsv+0x44>)
   b4244:	4604      	mov	r4, r0
   b4246:	8818      	ldrh	r0, [r3, #0]
   b4248:	f00f f9f1 	bl	c362e <analogRead>
   b424c:	f7ff ff56 	bl	b40fc <_Z17tmp36TemperatureCi>
   b4250:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b4254:	4620      	mov	r0, r4
   b4256:	edcd 7a01 	vstr	s15, [sp, #4]
   b425a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b425e:	f003 fd19 	bl	b7c94 <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b4262:	f7ff ff67 	bl	b4134 <_Z12batteryStatev>
    isItSafeToCharge();
   b4266:	f7ff ff87 	bl	b4178 <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b426a:	f003 fa2d 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b426e:	f003 fbb7 	bl	b79e0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4272:	b908      	cbnz	r0, b4278 <_Z16takeMeasurementsv+0x3c>
   b4274:	f7ff ffa2 	bl	b41bc <_Z17getSignalStrengthv>
}
   b4278:	2001      	movs	r0, #1
   b427a:	b002      	add	sp, #8
   b427c:	bd10      	pop	{r4, pc}
   b427e:	bf00      	nop
   b4280:	000c6a28 	.word	0x000c6a28

000b4284 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b4284:	4801      	ldr	r0, [pc, #4]	; (b428c <_GLOBAL__sub_I_batteryContext+0x8>)
   b4286:	2100      	movs	r1, #0
   b4288:	f00e b81c 	b.w	c22c4 <_ZN9FuelGaugeC1Eb>
   b428c:	2003ad58 	.word	0x2003ad58

000b4290 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b4290:	4b01      	ldr	r3, [pc, #4]	; (b4298 <_Z18outOfMemoryHandleryi+0x8>)
   b4292:	601a      	str	r2, [r3, #0]
}
   b4294:	4770      	bx	lr
   b4296:	bf00      	nop
   b4298:	2003abd8 	.word	0x2003abd8

000b429c <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b429c:	4b01      	ldr	r3, [pc, #4]	; (b42a4 <_Z13userSwitchISRv+0x8>)
   b429e:	2201      	movs	r2, #1
   b42a0:	701a      	strb	r2, [r3, #0]
}
   b42a2:	4770      	bx	lr
   b42a4:	2003aeaa 	.word	0x2003aeaa

000b42a8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b42a8:	b530      	push	{r4, r5, lr}
   b42aa:	b085      	sub	sp, #20
   b42ac:	4604      	mov	r4, r0
   b42ae:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b42b0:	b160      	cbz	r0, b42cc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b42b2:	6840      	ldr	r0, [r0, #4]
   b42b4:	b150      	cbz	r0, b42cc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b42b6:	6885      	ldr	r5, [r0, #8]
   b42b8:	b145      	cbz	r5, b42cc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b42ba:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b42be:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b42c2:	68c4      	ldr	r4, [r0, #12]
   b42c4:	ab01      	add	r3, sp, #4
   b42c6:	466a      	mov	r2, sp
   b42c8:	a902      	add	r1, sp, #8
   b42ca:	47a0      	blx	r4
    }
   b42cc:	b005      	add	sp, #20
   b42ce:	bd30      	pop	{r4, r5, pc}

000b42d0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b42d0:	b530      	push	{r4, r5, lr}
   b42d2:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b42d4:	6800      	ldr	r0, [r0, #0]
   b42d6:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b42d8:	9301      	str	r3, [sp, #4]
   b42da:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b42de:	6883      	ldr	r3, [r0, #8]
   b42e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b42e4:	b90b      	cbnz	r3, b42ea <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b42e6:	f00f fa81 	bl	c37ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b42ea:	68c3      	ldr	r3, [r0, #12]
   b42ec:	aa01      	add	r2, sp, #4
   b42ee:	a902      	add	r1, sp, #8
   b42f0:	4798      	blx	r3
      }
   b42f2:	b005      	add	sp, #20
   b42f4:	bd30      	pop	{r4, r5, pc}

000b42f6 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b42f6:	2a01      	cmp	r2, #1
   b42f8:	d102      	bne.n	b4300 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b42fa:	6001      	str	r1, [r0, #0]
      }
   b42fc:	2000      	movs	r0, #0
   b42fe:	4770      	bx	lr
	  switch (__op)
   b4300:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4302:	bf04      	itt	eq
   b4304:	680b      	ldreq	r3, [r1, #0]
   b4306:	6003      	streq	r3, [r0, #0]
	      break;
   b4308:	e7f8      	b.n	b42fc <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b430a <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b430a:	6803      	ldr	r3, [r0, #0]
   b430c:	6812      	ldr	r2, [r2, #0]
   b430e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4312:	4718      	bx	r3

000b4314 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b4314:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4316:	6804      	ldr	r4, [r0, #0]
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b4318:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   b431c:	f88d 3000 	strb.w	r3, [sp]
   b4320:	f88d 5004 	strb.w	r5, [sp, #4]
   b4324:	6824      	ldr	r4, [r4, #0]
   b4326:	233c      	movs	r3, #60	; 0x3c
   b4328:	47a0      	blx	r4
	}
   b432a:	b003      	add	sp, #12
   b432c:	bd30      	pop	{r4, r5, pc}

000b432e <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b432e:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4330:	2000      	movs	r0, #0
   b4332:	f00b fff9 	bl	c0328 <spark_sync_time_pending>
   b4336:	b128      	cbz	r0, b4344 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4338:	f00b ffd6 	bl	c02e8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b433c:	f080 0001 	eor.w	r0, r0, #1
   b4340:	b2c0      	uxtb	r0, r0
    }
   b4342:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4344:	2001      	movs	r0, #1
   b4346:	e7fc      	b.n	b4342 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b4348 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4348:	b510      	push	{r4, lr}
      if (_M_manager)
   b434a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b434c:	4604      	mov	r4, r0
      if (_M_manager)
   b434e:	b113      	cbz	r3, b4356 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4350:	2203      	movs	r2, #3
   b4352:	4601      	mov	r1, r0
   b4354:	4798      	blx	r3
    }
   b4356:	4620      	mov	r0, r4
   b4358:	bd10      	pop	{r4, pc}

000b435a <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b435a:	b510      	push	{r4, lr}
            delete callableWrapper;
   b435c:	4604      	mov	r4, r0
   b435e:	b138      	cbz	r0, b4370 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4360:	f7ff fff2 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   b4364:	4620      	mov	r0, r4
   b4366:	2110      	movs	r1, #16
        };
   b4368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b436c:	f7ff be97 	b.w	b409e <_ZdlPvj>
        };
   b4370:	bd10      	pop	{r4, pc}
	...

000b4374 <_Z22publishStateTransitionv>:
{
   b4374:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4376:	4c14      	ldr	r4, [pc, #80]	; (b43c8 <_Z22publishStateTransitionv+0x54>)
   b4378:	4d14      	ldr	r5, [pc, #80]	; (b43cc <_Z22publishStateTransitionv+0x58>)
   b437a:	7823      	ldrb	r3, [r4, #0]
   b437c:	4e14      	ldr	r6, [pc, #80]	; (b43d0 <_Z22publishStateTransitionv+0x5c>)
   b437e:	2b02      	cmp	r3, #2
{
   b4380:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4382:	d117      	bne.n	b43b4 <_Z22publishStateTransitionv+0x40>
   b4384:	f00d fe86 	bl	c2094 <_ZN9TimeClass7isValidEv>
   b4388:	b9a0      	cbnz	r0, b43b4 <_Z22publishStateTransitionv+0x40>
   b438a:	7822      	ldrb	r2, [r4, #0]
   b438c:	7833      	ldrb	r3, [r6, #0]
   b438e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b4392:	9200      	str	r2, [sp, #0]
   b4394:	4a0f      	ldr	r2, [pc, #60]	; (b43d4 <_Z22publishStateTransitionv+0x60>)
   b4396:	eb05 1303 	add.w	r3, r5, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b439a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b439e:	a802      	add	r0, sp, #8
   b43a0:	f00c f80a 	bl	c03b8 <snprintf>
	oldState = state;
   b43a4:	7823      	ldrb	r3, [r4, #0]
	Log.info(stateTransitionString);
   b43a6:	480c      	ldr	r0, [pc, #48]	; (b43d8 <_Z22publishStateTransitionv+0x64>)
	oldState = state;
   b43a8:	7033      	strb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b43aa:	a902      	add	r1, sp, #8
   b43ac:	f7ff fe8e 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
}
   b43b0:	b042      	add	sp, #264	; 0x108
   b43b2:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b43b4:	7822      	ldrb	r2, [r4, #0]
   b43b6:	7833      	ldrb	r3, [r6, #0]
   b43b8:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b43bc:	9200      	str	r2, [sp, #0]
   b43be:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   b43c2:	4a06      	ldr	r2, [pc, #24]	; (b43dc <_Z22publishStateTransitionv+0x68>)
   b43c4:	e7e9      	b.n	b439a <_Z22publishStateTransitionv+0x26>
   b43c6:	bf00      	nop
   b43c8:	2003aea9 	.word	0x2003aea9
   b43cc:	2003abdc 	.word	0x2003abdc
   b43d0:	2003aea8 	.word	0x2003aea8
   b43d4:	000c5ad4 	.word	0x000c5ad4
   b43d8:	2003e634 	.word	0x2003e634
   b43dc:	000c5af4 	.word	0x000c5af4

000b43e0 <_Z14publishWebhookh>:
 * 
 * See this article for details including the device type definitions:
 * @link https://seeinsights.freshdesk.com/support/solutions/articles/154000101712-sensor-types-and-identifiers
 * 
 */
void publishWebhook(uint8_t nodeNumber) {							
   b43e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b43e4:	b0e9      	sub	sp, #420	; 0x1a4
	char data[256];                             						// Store the date in this character array - not global
	// Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b43e6:	2300      	movs	r3, #0
   b43e8:	9327      	str	r3, [sp, #156]	; 0x9c
   b43ea:	4b9f      	ldr	r3, [pc, #636]	; (b4668 <_Z14publishWebhookh+0x288>)
   b43ec:	9321      	str	r3, [sp, #132]	; 0x84
   b43ee:	4b9f      	ldr	r3, [pc, #636]	; (b466c <_Z14publishWebhookh+0x28c>)
   b43f0:	9322      	str	r3, [sp, #136]	; 0x88
   b43f2:	4b9f      	ldr	r3, [pc, #636]	; (b4670 <_Z14publishWebhookh+0x290>)
   b43f4:	9323      	str	r3, [sp, #140]	; 0x8c
   b43f6:	4b9f      	ldr	r3, [pc, #636]	; (b4674 <_Z14publishWebhookh+0x294>)
   b43f8:	9324      	str	r3, [sp, #144]	; 0x90
   b43fa:	4b9f      	ldr	r3, [pc, #636]	; (b4678 <_Z14publishWebhookh+0x298>)
   b43fc:	4f9f      	ldr	r7, [pc, #636]	; (b467c <_Z14publishWebhookh+0x29c>)
	Log.info("Publishing webhook for node %d", nodeNumber);
   b43fe:	49a0      	ldr	r1, [pc, #640]	; (b4680 <_Z14publishWebhookh+0x2a0>)
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b4400:	9325      	str	r3, [sp, #148]	; 0x94
	Log.info("Publishing webhook for node %d", nodeNumber);
   b4402:	4602      	mov	r2, r0
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b4404:	4b9f      	ldr	r3, [pc, #636]	; (b4684 <_Z14publishWebhookh+0x2a4>)
   b4406:	9326      	str	r3, [sp, #152]	; 0x98
void publishWebhook(uint8_t nodeNumber) {							
   b4408:	4605      	mov	r5, r0
	Log.info("Publishing webhook for node %d", nodeNumber);
   b440a:	489f      	ldr	r0, [pc, #636]	; (b4688 <_Z14publishWebhookh+0x2a8>)
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b440c:	9720      	str	r7, [sp, #128]	; 0x80
   b440e:	ac20      	add	r4, sp, #128	; 0x80
	Log.info("Publishing webhook for node %d", nodeNumber);
   b4410:	f7ff fe5c 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>

	if (!Time.isValid()) {
   b4414:	f00d fe3e 	bl	c2094 <_ZN9TimeClass7isValidEv>
   b4418:	2800      	cmp	r0, #0
   b441a:	d051      	beq.n	b44c0 <_Z14publishWebhookh+0xe0>
		return;															// A webhook without a valid timestamp is worthless
		Log.info("Time is not valid - not publishing webhook");
	}
	unsigned long endTimePeriod = Time.now() - (Time.second() + 1);		// Moves the timestamp within the reporting boundary - so 18:00:14 becomes 17:59:59 - helps in Ubidots reporting
   b441c:	f00d fe57 	bl	c20ce <_ZN9TimeClass3nowEv>
   b4420:	4606      	mov	r6, r0
   b4422:	f00d fe71 	bl	c2108 <_ZN9TimeClass6secondEv>
   b4426:	1c43      	adds	r3, r0, #1
   b4428:	1af3      	subs	r3, r6, r3
   b442a:	9312      	str	r3, [sp, #72]	; 0x48

	if (nodeNumber == 0) {												// Webhook for the Gateway					
   b442c:	2d00      	cmp	r5, #0
   b442e:	d14a      	bne.n	b44c6 <_Z14publishWebhookh+0xe6>
		Log.info("Publishing for Gateway");
   b4430:	4996      	ldr	r1, [pc, #600]	; (b468c <_Z14publishWebhookh+0x2ac>)
   b4432:	4895      	ldr	r0, [pc, #596]	; (b4688 <_Z14publishWebhookh+0x2a8>)
   b4434:	f7ff fe4a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		takeMeasurements();												// Loads the current values for the Gateway
   b4438:	f7ff ff00 	bl	b423c <_Z16takeMeasurementsv>
        return spark_deviceID();
   b443c:	a81c      	add	r0, sp, #112	; 0x70
   b443e:	f00b ff5b 	bl	c02f8 <spark_deviceID>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b4442:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b4444:	9313      	str	r3, [sp, #76]	; 0x4c
		// Gateway reporting
		// The first webhook could be sent once a day or so it would give the health of the gateway
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"alerts\": %d, \"msg\":%d, \"timestamp\":%lu000}",\
		Particle.deviceID().c_str(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4446:	f003 f979 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b444a:	f003 f9c6 	bl	b77da <_ZNK17currentStatusData17get_stateOfChargeEv>
   b444e:	4606      	mov	r6, r0
   b4450:	f003 f974 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4454:	f003 fb37 	bl	b7ac6 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"alerts\": %d, \"msg\":%d, \"timestamp\":%lu000}",\
   b4458:	f854 9020 	ldr.w	r9, [r4, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_alertCodeGateway(), sysStatus.get_messageCount(), endTimePeriod);
   b445c:	f003 f96e 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4460:	f003 fb2c 	bl	b7abc <_ZNK17currentStatusData17get_internalTempCEv>
   b4464:	4604      	mov	r4, r0
   b4466:	f003 f92f 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b446a:	f003 fac3 	bl	b79f4 <_ZNK13sysStatusData14get_resetCountEv>
   b446e:	4607      	mov	r7, r0
   b4470:	f003 f92a 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b4474:	f003 fac3 	bl	b79fe <_ZNK13sysStatusData20get_alertCodeGatewayEv>
   b4478:	4680      	mov	r8, r0
   b447a:	f003 f925 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b447e:	f003 fc56 	bl	b7d2e <_ZNK13sysStatusData16get_messageCountEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"alerts\": %d, \"msg\":%d, \"timestamp\":%lu000}",\
   b4482:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4484:	4a82      	ldr	r2, [pc, #520]	; (b4690 <_Z14publishWebhookh+0x2b0>)
   b4486:	9600      	str	r6, [sp, #0]
   b4488:	f44f 7180 	mov.w	r1, #256	; 0x100
   b448c:	e9cd 0305 	strd	r0, r3, [sp, #20]
   b4490:	e9cd 7803 	strd	r7, r8, [sp, #12]
   b4494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4496:	e9cd 9401 	strd	r9, r4, [sp, #4]
   b449a:	a828      	add	r0, sp, #160	; 0xa0
   b449c:	f00b ff8c 	bl	c03b8 <snprintf>
		Particle.deviceID().c_str(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b44a0:	a81c      	add	r0, sp, #112	; 0x70
   b44a2:	f00c fa5d 	bl	c0960 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b44a6:	f006 fa03 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b44aa:	4b7a      	ldr	r3, [pc, #488]	; (b4694 <_Z14publishWebhookh+0x2b4>)
   b44ac:	497a      	ldr	r1, [pc, #488]	; (b4698 <_Z14publishWebhookh+0x2b8>)
   b44ae:	781a      	ldrb	r2, [r3, #0]
   b44b0:	4b7a      	ldr	r3, [pc, #488]	; (b469c <_Z14publishWebhookh+0x2bc>)
   b44b2:	781b      	ldrb	r3, [r3, #0]
   b44b4:	f88d 5000 	strb.w	r5, [sp]
   b44b8:	4313      	orrs	r3, r2
   b44ba:	aa28      	add	r2, sp, #160	; 0xa0
				PublishQueuePosix::instance().publish("Ubidots-LoRA-Sensor-v1", data, PRIVATE | WITH_ACK);
			} break;

			default: {														// Unknown
				Log.info("Unknown sensor type in gateway publish %d", current.get_sensorType());
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert","Unknown sensor type in gateway publish", PRIVATE);
   b44bc:	f7ff ff2a 	bl	b4314 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
			} break;
		}
	}

	return;
}
   b44c0:	b069      	add	sp, #420	; 0x1a4
   b44c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Log.info("Publishing for nodeNumber is %i of sensorType of %s", nodeNumber, (nodeNumber == 0) ? "Gateway" : (current.get_sensorType() <= 9) ? "Visitation Counter" : (current.get_sensorType() <= 19) ? "Occupancy Counter" : (current.get_sensorType() <= 29) ? "Sensor" : "Unknown");
   b44c6:	f003 f939 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b44ca:	f003 faca 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b44ce:	2809      	cmp	r0, #9
   b44d0:	d937      	bls.n	b4542 <_Z14publishWebhookh+0x162>
   b44d2:	f003 f933 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b44d6:	f003 fac4 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b44da:	2813      	cmp	r0, #19
   b44dc:	d933      	bls.n	b4546 <_Z14publishWebhookh+0x166>
   b44de:	f003 f92d 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b44e2:	f003 fabe 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b44e6:	4b6e      	ldr	r3, [pc, #440]	; (b46a0 <_Z14publishWebhookh+0x2c0>)
   b44e8:	281d      	cmp	r0, #29
   b44ea:	bf88      	it	hi
   b44ec:	463b      	movhi	r3, r7
   b44ee:	496d      	ldr	r1, [pc, #436]	; (b46a4 <_Z14publishWebhookh+0x2c4>)
   b44f0:	4865      	ldr	r0, [pc, #404]	; (b4688 <_Z14publishWebhookh+0x2a8>)
   b44f2:	462a      	mov	r2, r5
   b44f4:	f7ff fdea 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		switch (current.get_sensorType()) {
   b44f8:	f003 f920 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b44fc:	f003 fab1 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4500:	2813      	cmp	r0, #19
   b4502:	d822      	bhi.n	b454a <_Z14publishWebhookh+0x16a>
   b4504:	2809      	cmp	r0, #9
   b4506:	f200 8158 	bhi.w	b47ba <_Z14publishWebhookh+0x3da>
   b450a:	3801      	subs	r0, #1
   b450c:	b2c0      	uxtb	r0, r0
   b450e:	2808      	cmp	r0, #8
   b4510:	f240 80da 	bls.w	b46c8 <_Z14publishWebhookh+0x2e8>
				Log.info("Unknown sensor type in gateway publish %d", current.get_sensorType());
   b4514:	f003 f912 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4518:	f003 faa3 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b451c:	4962      	ldr	r1, [pc, #392]	; (b46a8 <_Z14publishWebhookh+0x2c8>)
   b451e:	4602      	mov	r2, r0
   b4520:	4859      	ldr	r0, [pc, #356]	; (b4688 <_Z14publishWebhookh+0x2a8>)
   b4522:	f7ff fdd3 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4526:	f00b fedf 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert","Unknown sensor type in gateway publish", PRIVATE);
   b452a:	2800      	cmp	r0, #0
   b452c:	d0c8      	beq.n	b44c0 <_Z14publishWebhookh+0xe0>
   b452e:	f006 f9bf 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   b4532:	2300      	movs	r3, #0
   b4534:	f88d 3000 	strb.w	r3, [sp]
   b4538:	4b56      	ldr	r3, [pc, #344]	; (b4694 <_Z14publishWebhookh+0x2b4>)
   b453a:	4a5c      	ldr	r2, [pc, #368]	; (b46ac <_Z14publishWebhookh+0x2cc>)
   b453c:	781b      	ldrb	r3, [r3, #0]
   b453e:	495c      	ldr	r1, [pc, #368]	; (b46b0 <_Z14publishWebhookh+0x2d0>)
   b4540:	e7bc      	b.n	b44bc <_Z14publishWebhookh+0xdc>
	Log.info("Publishing for nodeNumber is %i of sensorType of %s", nodeNumber, (nodeNumber == 0) ? "Gateway" : (current.get_sensorType() <= 9) ? "Visitation Counter" : (current.get_sensorType() <= 19) ? "Occupancy Counter" : (current.get_sensorType() <= 29) ? "Sensor" : "Unknown");
   b4542:	4b5c      	ldr	r3, [pc, #368]	; (b46b4 <_Z14publishWebhookh+0x2d4>)
   b4544:	e7d3      	b.n	b44ee <_Z14publishWebhookh+0x10e>
   b4546:	4b5c      	ldr	r3, [pc, #368]	; (b46b8 <_Z14publishWebhookh+0x2d8>)
   b4548:	e7d1      	b.n	b44ee <_Z14publishWebhookh+0x10e>
		switch (current.get_sensorType()) {
   b454a:	3814      	subs	r0, #20
   b454c:	b2c0      	uxtb	r0, r0
   b454e:	2809      	cmp	r0, #9
   b4550:	d8e0      	bhi.n	b4514 <_Z14publishWebhookh+0x134>
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (current.get_payload3() << 8 | current.get_payload4()), current.get_payload5() + 1, current.get_payload6(),current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4552:	f003 f8f3 	bl	b773c <_ZN17currentStatusData8instanceEv>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"soilvwc\":%u, \"soiltemp\":%u, \"space\":%d, \"placement\":%d, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d,\"timestamp\":%lu000}",\
   b4556:	f003 f918 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b455a:	9018      	str	r0, [sp, #96]	; 0x60
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (current.get_payload3() << 8 | current.get_payload4()), current.get_payload5() + 1, current.get_payload6(),current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b455c:	f003 f8ee 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4560:	f003 fa84 	bl	b7a6c <_ZNK17currentStatusData12get_payload1Ev>
   b4564:	4604      	mov	r4, r0
   b4566:	f003 f8e9 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b456a:	f003 fa84 	bl	b7a76 <_ZNK17currentStatusData12get_payload2Ev>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"soilvwc\":%u, \"soiltemp\":%u, \"space\":%d, \"placement\":%d, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d,\"timestamp\":%lu000}",\
   b456e:	ea40 2304 	orr.w	r3, r0, r4, lsl #8
   b4572:	9313      	str	r3, [sp, #76]	; 0x4c
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (current.get_payload3() << 8 | current.get_payload4()), current.get_payload5() + 1, current.get_payload6(),current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4574:	f003 f8e2 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4578:	f003 fa82 	bl	b7a80 <_ZNK17currentStatusData12get_payload3Ev>
   b457c:	4604      	mov	r4, r0
   b457e:	f003 f8dd 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4582:	f003 fa82 	bl	b7a8a <_ZNK17currentStatusData12get_payload4Ev>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"soilvwc\":%u, \"soiltemp\":%u, \"space\":%d, \"placement\":%d, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d,\"timestamp\":%lu000}",\
   b4586:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (current.get_payload3() << 8 | current.get_payload4()), current.get_payload5() + 1, current.get_payload6(),current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b458a:	f003 f8d7 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b458e:	f003 fa81 	bl	b7a94 <_ZNK17currentStatusData12get_payload5Ev>
   b4592:	4680      	mov	r8, r0
   b4594:	f003 f8d2 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4598:	f003 fa81 	bl	b7a9e <_ZNK17currentStatusData12get_payload6Ev>
   b459c:	9014      	str	r0, [sp, #80]	; 0x50
   b459e:	f003 f8cd 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b45a2:	f003 fa5e 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b45a6:	4605      	mov	r5, r0
   b45a8:	f003 f8c8 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b45ac:	f003 f915 	bl	b77da <_ZNK17currentStatusData17get_stateOfChargeEv>
   b45b0:	4606      	mov	r6, r0
   b45b2:	f003 f8c3 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b45b6:	f003 fa86 	bl	b7ac6 <_ZNK17currentStatusData16get_batteryStateEv>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"soilvwc\":%u, \"soiltemp\":%u, \"space\":%d, \"placement\":%d, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d,\"timestamp\":%lu000}",\
   b45ba:	aa20      	add	r2, sp, #128	; 0x80
   b45bc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   b45c0:	9117      	str	r1, [sp, #92]	; 0x5c
				current.get_internalTempC(), current.get_resetCount(), current.get_alertCodeNode(), current.get_nodeNumber(), current.get_RSSI(), current.get_SNR(), current.get_hops(), endTimePeriod);
   b45c2:	f003 f8bb 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b45c6:	f003 fa79 	bl	b7abc <_ZNK17currentStatusData17get_internalTempCEv>
   b45ca:	4607      	mov	r7, r0
   b45cc:	f003 f8b6 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b45d0:	f003 fa7e 	bl	b7ad0 <_ZNK17currentStatusData14get_resetCountEv>
   b45d4:	9015      	str	r0, [sp, #84]	; 0x54
   b45d6:	f003 f8b1 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b45da:	f003 fa7e 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b45de:	4681      	mov	r9, r0
   b45e0:	f003 f8ac 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b45e4:	f003 fa33 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b45e8:	4682      	mov	sl, r0
   b45ea:	f003 f8a7 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b45ee:	f003 fd0d 	bl	b800c <_ZNK17currentStatusData8get_RSSIEv>
   b45f2:	4683      	mov	fp, r0
   b45f4:	f003 f8a2 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b45f8:	f003 fd0d 	bl	b8016 <_ZNK17currentStatusData7get_SNREv>
   b45fc:	9016      	str	r0, [sp, #88]	; 0x58
   b45fe:	f003 f89d 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4602:	f003 fa79 	bl	b7af8 <_ZNK17currentStatusData8get_hopsEv>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"soilvwc\":%u, \"soiltemp\":%u, \"space\":%d, \"placement\":%d, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d,\"timestamp\":%lu000}",\
   b4606:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4608:	9a16      	ldr	r2, [sp, #88]	; 0x58
   b460a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b460c:	9504      	str	r5, [sp, #16]
   b460e:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
   b4612:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b4614:	e9cd 7307 	strd	r7, r3, [sp, #28]
   b4618:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b461a:	9303      	str	r3, [sp, #12]
   b461c:	f108 0001 	add.w	r0, r8, #1
   b4620:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4622:	9300      	str	r3, [sp, #0]
   b4624:	e9cd b20b 	strd	fp, r2, [sp, #44]	; 0x2c
   b4628:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b462a:	4a24      	ldr	r2, [pc, #144]	; (b46bc <_Z14publishWebhookh+0x2dc>)
   b462c:	e9cd 6105 	strd	r6, r1, [sp, #20]
   b4630:	e9cd 4001 	strd	r4, r0, [sp, #4]
   b4634:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4638:	e9cd 9a09 	strd	r9, sl, [sp, #36]	; 0x24
   b463c:	a828      	add	r0, sp, #160	; 0xa0
   b463e:	f00b febb 	bl	c03b8 <snprintf>
				Log.info("Data is %s", data);
   b4642:	491f      	ldr	r1, [pc, #124]	; (b46c0 <_Z14publishWebhookh+0x2e0>)
   b4644:	4810      	ldr	r0, [pc, #64]	; (b4688 <_Z14publishWebhookh+0x2a8>)
   b4646:	aa28      	add	r2, sp, #160	; 0xa0
   b4648:	f7ff fd40 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				PublishQueuePosix::instance().publish("Ubidots-LoRA-Sensor-v1", data, PRIVATE | WITH_ACK);
   b464c:	f006 f930 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4650:	4b12      	ldr	r3, [pc, #72]	; (b469c <_Z14publishWebhookh+0x2bc>)
   b4652:	781a      	ldrb	r2, [r3, #0]
   b4654:	4b0f      	ldr	r3, [pc, #60]	; (b4694 <_Z14publishWebhookh+0x2b4>)
   b4656:	781b      	ldrb	r3, [r3, #0]
        val_(0) {
   b4658:	2100      	movs	r1, #0
   b465a:	f88d 1000 	strb.w	r1, [sp]
   b465e:	4313      	orrs	r3, r2
   b4660:	4918      	ldr	r1, [pc, #96]	; (b46c4 <_Z14publishWebhookh+0x2e4>)
   b4662:	aa28      	add	r2, sp, #160	; 0xa0
   b4664:	e72a      	b.n	b44bc <_Z14publishWebhookh+0xdc>
   b4666:	bf00      	nop
   b4668:	000c5a5f 	.word	0x000c5a5f
   b466c:	000c5a63 	.word	0x000c5a63
   b4670:	000c5a6c 	.word	0x000c5a6c
   b4674:	000c5a74 	.word	0x000c5a74
   b4678:	000c5a80 	.word	0x000c5a80
   b467c:	000c5a19 	.word	0x000c5a19
   b4680:	000c5b2e 	.word	0x000c5b2e
   b4684:	000c5a86 	.word	0x000c5a86
   b4688:	2003e634 	.word	0x2003e634
   b468c:	000c5b4d 	.word	0x000c5b4d
   b4690:	000c5b64 	.word	0x000c5b64
   b4694:	2003ad64 	.word	0x2003ad64
   b4698:	000c5bd3 	.word	0x000c5bd3
   b469c:	2003ad65 	.word	0x2003ad65
   b46a0:	000c5b02 	.word	0x000c5b02
   b46a4:	000c5beb 	.word	0x000c5beb
   b46a8:	000c5f4b 	.word	0x000c5f4b
   b46ac:	000c5f75 	.word	0x000c5f75
   b46b0:	000c5f9c 	.word	0x000c5f9c
   b46b4:	000c5b09 	.word	0x000c5b09
   b46b8:	000c5b1c 	.word	0x000c5b1c
   b46bc:	000c5e59 	.word	0x000c5e59
   b46c0:	000c5cda 	.word	0x000c5cda
   b46c4:	000c5f34 	.word	0x000c5f34
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (current.get_payload3() << 8 | current.get_payload4()), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b46c8:	f003 f838 	bl	b773c <_ZN17currentStatusData8instanceEv>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d,\"timestamp\":%lu000}",\
   b46cc:	f003 f85d 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b46d0:	9016      	str	r0, [sp, #88]	; 0x58
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (current.get_payload3() << 8 | current.get_payload4()), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b46d2:	f003 f833 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b46d6:	f003 f9c9 	bl	b7a6c <_ZNK17currentStatusData12get_payload1Ev>
   b46da:	4604      	mov	r4, r0
   b46dc:	f003 f82e 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b46e0:	f003 f9c9 	bl	b7a76 <_ZNK17currentStatusData12get_payload2Ev>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d,\"timestamp\":%lu000}",\
   b46e4:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (current.get_payload3() << 8 | current.get_payload4()), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b46e8:	f003 f828 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b46ec:	f003 f9c8 	bl	b7a80 <_ZNK17currentStatusData12get_payload3Ev>
   b46f0:	4605      	mov	r5, r0
   b46f2:	f003 f823 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b46f6:	f003 f9c8 	bl	b7a8a <_ZNK17currentStatusData12get_payload4Ev>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d,\"timestamp\":%lu000}",\
   b46fa:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (current.get_payload3() << 8 | current.get_payload4()), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b46fe:	f003 f81d 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4702:	f003 f9ae 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4706:	9013      	str	r0, [sp, #76]	; 0x4c
   b4708:	f003 f818 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b470c:	f003 f865 	bl	b77da <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4710:	4606      	mov	r6, r0
   b4712:	f003 f813 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4716:	f003 f9d6 	bl	b7ac6 <_ZNK17currentStatusData16get_batteryStateEv>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d,\"timestamp\":%lu000}",\
   b471a:	aa20      	add	r2, sp, #128	; 0x80
   b471c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   b4720:	9115      	str	r1, [sp, #84]	; 0x54
				current.get_internalTempC(), current.get_resetCount(), current.get_alertCodeNode(), current.get_nodeNumber(), current.get_RSSI(), current.get_SNR(), current.get_hops(), endTimePeriod);
   b4722:	f003 f80b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4726:	f003 f9c9 	bl	b7abc <_ZNK17currentStatusData17get_internalTempCEv>
   b472a:	4607      	mov	r7, r0
   b472c:	f003 f806 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4730:	f003 f9ce 	bl	b7ad0 <_ZNK17currentStatusData14get_resetCountEv>
   b4734:	4680      	mov	r8, r0
   b4736:	f003 f801 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b473a:	f003 f9ce 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b473e:	4681      	mov	r9, r0
   b4740:	f002 fffc 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4744:	f003 f983 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4748:	4682      	mov	sl, r0
   b474a:	f002 fff7 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b474e:	f003 fc5d 	bl	b800c <_ZNK17currentStatusData8get_RSSIEv>
   b4752:	4683      	mov	fp, r0
   b4754:	f002 fff2 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4758:	f003 fc5d 	bl	b8016 <_ZNK17currentStatusData7get_SNREv>
   b475c:	9014      	str	r0, [sp, #80]	; 0x50
   b475e:	f002 ffed 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4762:	f003 f9c9 	bl	b7af8 <_ZNK17currentStatusData8get_hopsEv>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d,\"timestamp\":%lu000}",\
   b4766:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4768:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b476a:	9915      	ldr	r1, [sp, #84]	; 0x54
   b476c:	9400      	str	r4, [sp, #0]
   b476e:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
   b4772:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4774:	e9cd b209 	strd	fp, r2, [sp, #36]	; 0x24
   b4778:	e9cd 6103 	strd	r6, r1, [sp, #12]
   b477c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   b4780:	4a7c      	ldr	r2, [pc, #496]	; (b4974 <_Z14publishWebhookh+0x594>)
   b4782:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b4784:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4788:	e9cd 9a07 	strd	r9, sl, [sp, #28]
   b478c:	e9cd 7805 	strd	r7, r8, [sp, #20]
   b4790:	a828      	add	r0, sp, #160	; 0xa0
   b4792:	f00b fe11 	bl	c03b8 <snprintf>
				Log.info("Data is %s", data);
   b4796:	4978      	ldr	r1, [pc, #480]	; (b4978 <_Z14publishWebhookh+0x598>)
   b4798:	4878      	ldr	r0, [pc, #480]	; (b497c <_Z14publishWebhookh+0x59c>)
   b479a:	aa28      	add	r2, sp, #160	; 0xa0
   b479c:	f7ff fc96 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				PublishQueuePosix::instance().publish("Ubidots-LoRA-Counter-v1", data, PRIVATE | WITH_ACK);
   b47a0:	f006 f886 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b47a4:	4b76      	ldr	r3, [pc, #472]	; (b4980 <_Z14publishWebhookh+0x5a0>)
   b47a6:	781a      	ldrb	r2, [r3, #0]
   b47a8:	4b76      	ldr	r3, [pc, #472]	; (b4984 <_Z14publishWebhookh+0x5a4>)
   b47aa:	781b      	ldrb	r3, [r3, #0]
        val_(0) {
   b47ac:	2100      	movs	r1, #0
   b47ae:	f88d 1000 	strb.w	r1, [sp]
   b47b2:	4313      	orrs	r3, r2
   b47b4:	4974      	ldr	r1, [pc, #464]	; (b4988 <_Z14publishWebhookh+0x5a8>)
   b47b6:	aa28      	add	r2, sp, #160	; 0xa0
   b47b8:	e680      	b.n	b44bc <_Z14publishWebhookh+0xdc>
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (int16_t)(current.get_payload3() << 8 | current.get_payload4()), current.get_payload5() + 1, current.get_payload6(), current.get_payload7(), current.get_payload8(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b47ba:	f002 ffbf 	bl	b773c <_ZN17currentStatusData8instanceEv>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"gross\":%u, \"net\":%i, \"space\":%d, \"placement\":%d, \"multi\":%d, \"zoneMode\":%d, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\":%d, \"node\":%d, \"rssi\":%d, \"snr\":%d,\"hops\":%d,\"timestamp\":%lu000}",\
   b47be:	f002 ffe4 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b47c2:	901b      	str	r0, [sp, #108]	; 0x6c
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (int16_t)(current.get_payload3() << 8 | current.get_payload4()), current.get_payload5() + 1, current.get_payload6(), current.get_payload7(), current.get_payload8(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b47c4:	f002 ffba 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b47c8:	f003 f950 	bl	b7a6c <_ZNK17currentStatusData12get_payload1Ev>
   b47cc:	4604      	mov	r4, r0
   b47ce:	f002 ffb5 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b47d2:	f003 f950 	bl	b7a76 <_ZNK17currentStatusData12get_payload2Ev>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"gross\":%u, \"net\":%i, \"space\":%d, \"placement\":%d, \"multi\":%d, \"zoneMode\":%d, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\":%d, \"node\":%d, \"rssi\":%d, \"snr\":%d,\"hops\":%d,\"timestamp\":%lu000}",\
   b47d6:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (int16_t)(current.get_payload3() << 8 | current.get_payload4()), current.get_payload5() + 1, current.get_payload6(), current.get_payload7(), current.get_payload8(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b47da:	f002 ffaf 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b47de:	f003 f94f 	bl	b7a80 <_ZNK17currentStatusData12get_payload3Ev>
   b47e2:	4681      	mov	r9, r0
   b47e4:	f002 ffaa 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b47e8:	f003 f94f 	bl	b7a8a <_ZNK17currentStatusData12get_payload4Ev>
   b47ec:	4680      	mov	r8, r0
   b47ee:	f002 ffa5 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b47f2:	f003 f94f 	bl	b7a94 <_ZNK17currentStatusData12get_payload5Ev>
   b47f6:	4682      	mov	sl, r0
   b47f8:	f002 ffa0 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b47fc:	f003 f94f 	bl	b7a9e <_ZNK17currentStatusData12get_payload6Ev>
   b4800:	9013      	str	r0, [sp, #76]	; 0x4c
   b4802:	f002 ff9b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4806:	f003 f94f 	bl	b7aa8 <_ZNK17currentStatusData12get_payload7Ev>
   b480a:	9014      	str	r0, [sp, #80]	; 0x50
   b480c:	f002 ff96 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4810:	f003 f94f 	bl	b7ab2 <_ZNK17currentStatusData12get_payload8Ev>
   b4814:	901a      	str	r0, [sp, #104]	; 0x68
   b4816:	f002 ff91 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b481a:	f003 f922 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b481e:	9015      	str	r0, [sp, #84]	; 0x54
   b4820:	f002 ff8c 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4824:	f002 ffd9 	bl	b77da <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4828:	4605      	mov	r5, r0
   b482a:	f002 ff87 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b482e:	f003 f94a 	bl	b7ac6 <_ZNK17currentStatusData16get_batteryStateEv>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"gross\":%u, \"net\":%i, \"space\":%d, \"placement\":%d, \"multi\":%d, \"zoneMode\":%d, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\":%d, \"node\":%d, \"rssi\":%d, \"snr\":%d,\"hops\":%d,\"timestamp\":%lu000}",\
   b4832:	aa20      	add	r2, sp, #128	; 0x80
   b4834:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   b4838:	9219      	str	r2, [sp, #100]	; 0x64
				current.get_internalTempC(), current.get_resetCount(), current.get_alertCodeNode(), current.get_nodeNumber(), current.get_RSSI(), current.get_SNR(), current.get_hops(), endTimePeriod);
   b483a:	f002 ff7f 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b483e:	f003 f93d 	bl	b7abc <_ZNK17currentStatusData17get_internalTempCEv>
   b4842:	4606      	mov	r6, r0
   b4844:	f002 ff7a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4848:	f003 f942 	bl	b7ad0 <_ZNK17currentStatusData14get_resetCountEv>
   b484c:	4607      	mov	r7, r0
   b484e:	f002 ff75 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4852:	f003 f942 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4856:	9016      	str	r0, [sp, #88]	; 0x58
   b4858:	f002 ff70 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b485c:	f003 f8f7 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4860:	9017      	str	r0, [sp, #92]	; 0x5c
   b4862:	f002 ff6b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4866:	f003 fbd1 	bl	b800c <_ZNK17currentStatusData8get_RSSIEv>
   b486a:	9018      	str	r0, [sp, #96]	; 0x60
   b486c:	f002 ff66 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4870:	f003 fbd1 	bl	b8016 <_ZNK17currentStatusData7get_SNREv>
   b4874:	4683      	mov	fp, r0
   b4876:	f002 ff61 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b487a:	f003 f93d 	bl	b7af8 <_ZNK17currentStatusData8get_hopsEv>
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"gross\":%u, \"net\":%i, \"space\":%d, \"placement\":%d, \"multi\":%d, \"zoneMode\":%d, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\":%d, \"node\":%d, \"rssi\":%d, \"snr\":%d,\"hops\":%d,\"timestamp\":%lu000}",\
   b487e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4880:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b4882:	991a      	ldr	r1, [sp, #104]	; 0x68
   b4884:	9105      	str	r1, [sp, #20]
   b4886:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
   b488a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b488c:	930d      	str	r3, [sp, #52]	; 0x34
   b488e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b4890:	930c      	str	r3, [sp, #48]	; 0x30
   b4892:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b4894:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b4898:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
   b489c:	f10a 0001 	add.w	r0, sl, #1
   b48a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b48a2:	9306      	str	r3, [sp, #24]
   b48a4:	9002      	str	r0, [sp, #8]
   b48a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b48a8:	9304      	str	r3, [sp, #16]
				current.get_uniqueID(), (current.get_payload1() << 8 | current.get_payload2()), (int16_t)(current.get_payload3() << 8 | current.get_payload4()), current.get_payload5() + 1, current.get_payload6(), current.get_payload7(), current.get_payload8(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b48aa:	ea48 2009 	orr.w	r0, r8, r9, lsl #8
				snprintf(data, sizeof(data), "{\"uniqueid\":\"%lu\", \"gross\":%u, \"net\":%i, \"space\":%d, \"placement\":%d, \"multi\":%d, \"zoneMode\":%d, \"sensortype\":%d, \"battery\":%d,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\":%d, \"node\":%d, \"rssi\":%d, \"snr\":%d,\"hops\":%d,\"timestamp\":%lu000}",\
   b48ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b48b0:	9303      	str	r3, [sp, #12]
   b48b2:	b200      	sxth	r0, r0
   b48b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b48b6:	9609      	str	r6, [sp, #36]	; 0x24
   b48b8:	e9cd 5207 	strd	r5, r2, [sp, #28]
   b48bc:	e9cd 4000 	strd	r4, r0, [sp]
   b48c0:	4a32      	ldr	r2, [pc, #200]	; (b498c <_Z14publishWebhookh+0x5ac>)
   b48c2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; b4980 <_Z14publishWebhookh+0x5a0>
   b48c6:	f44f 7180 	mov.w	r1, #256	; 0x100
   b48ca:	a828      	add	r0, sp, #160	; 0xa0
   b48cc:	f00b fd74 	bl	c03b8 <snprintf>
				Log.info("Data is %s", data);
   b48d0:	4929      	ldr	r1, [pc, #164]	; (b4978 <_Z14publishWebhookh+0x598>)
   b48d2:	482a      	ldr	r0, [pc, #168]	; (b497c <_Z14publishWebhookh+0x59c>)
   b48d4:	aa28      	add	r2, sp, #160	; 0xa0
   b48d6:	f7ff fbf9 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b48da:	f00b fd05 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b48de:	b150      	cbz	r0, b48f6 <_Z14publishWebhookh+0x516>
					PublishQueuePosix::instance().publish("Node Data", data, PRIVATE);
   b48e0:	f005 ffe6 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b48e4:	2300      	movs	r3, #0
   b48e6:	f88d 3000 	strb.w	r3, [sp]
   b48ea:	f898 3000 	ldrb.w	r3, [r8]
   b48ee:	4928      	ldr	r1, [pc, #160]	; (b4990 <_Z14publishWebhookh+0x5b0>)
   b48f0:	aa28      	add	r2, sp, #160	; 0xa0
   b48f2:	f7ff fd0f 	bl	b4314 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
				current.get_uniqueID(), current.get_stateOfCharge(), current.get_payload5() + 1, Room_Occupancy::instance().getRoomNet(current.get_payload5()), Room_Occupancy::instance().getRoomGross(current.get_payload5()));
   b48f6:	f002 ff21 	bl	b773c <_ZN17currentStatusData8instanceEv>
				snprintf(data, sizeof(data), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   b48fa:	f002 ff46 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b48fe:	9012      	str	r0, [sp, #72]	; 0x48
				current.get_uniqueID(), current.get_stateOfCharge(), current.get_payload5() + 1, Room_Occupancy::instance().getRoomNet(current.get_payload5()), Room_Occupancy::instance().getRoomGross(current.get_payload5()));
   b4900:	f002 ff1c 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4904:	f002 ff69 	bl	b77da <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4908:	4605      	mov	r5, r0
   b490a:	f002 ff17 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b490e:	f003 f8c1 	bl	b7a94 <_ZNK17currentStatusData12get_payload5Ev>
   b4912:	4604      	mov	r4, r0
   b4914:	f009 f874 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
   b4918:	4606      	mov	r6, r0
   b491a:	f002 ff0f 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b491e:	f003 f8b9 	bl	b7a94 <_ZNK17currentStatusData12get_payload5Ev>
   b4922:	4601      	mov	r1, r0
				snprintf(data, sizeof(data), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   b4924:	4630      	mov	r0, r6
   b4926:	f009 f897 	bl	bda58 <_ZN14Room_Occupancy10getRoomNetEi>
   b492a:	4606      	mov	r6, r0
				current.get_uniqueID(), current.get_stateOfCharge(), current.get_payload5() + 1, Room_Occupancy::instance().getRoomNet(current.get_payload5()), Room_Occupancy::instance().getRoomGross(current.get_payload5()));
   b492c:	f009 f868 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
   b4930:	4607      	mov	r7, r0
   b4932:	f002 ff03 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4936:	f003 f8ad 	bl	b7a94 <_ZNK17currentStatusData12get_payload5Ev>
   b493a:	4601      	mov	r1, r0
				snprintf(data, sizeof(data), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   b493c:	4638      	mov	r0, r7
   b493e:	f009 f895 	bl	bda6c <_ZN14Room_Occupancy12getRoomGrossEi>
   b4942:	3401      	adds	r4, #1
   b4944:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4946:	4a13      	ldr	r2, [pc, #76]	; (b4994 <_Z14publishWebhookh+0x5b4>)
   b4948:	f44f 7180 	mov.w	r1, #256	; 0x100
   b494c:	e9cd 6002 	strd	r6, r0, [sp, #8]
   b4950:	e9cd 5400 	strd	r5, r4, [sp]
   b4954:	a828      	add	r0, sp, #160	; 0xa0
   b4956:	f00b fd2f 	bl	c03b8 <snprintf>
				PublishQueuePosix::instance().publish("Ubidots-LoRA-Occupancy-v2", data, PRIVATE | WITH_ACK);
   b495a:	f005 ffa9 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b495e:	4b09      	ldr	r3, [pc, #36]	; (b4984 <_Z14publishWebhookh+0x5a4>)
   b4960:	781a      	ldrb	r2, [r3, #0]
   b4962:	f898 3000 	ldrb.w	r3, [r8]
        val_(0) {
   b4966:	2100      	movs	r1, #0
   b4968:	f88d 1000 	strb.w	r1, [sp]
   b496c:	4313      	orrs	r3, r2
   b496e:	490a      	ldr	r1, [pc, #40]	; (b4998 <_Z14publishWebhookh+0x5b8>)
   b4970:	aa28      	add	r2, sp, #160	; 0xa0
   b4972:	e5a3      	b.n	b44bc <_Z14publishWebhookh+0xdc>
   b4974:	000c5c1f 	.word	0x000c5c1f
   b4978:	000c5cda 	.word	0x000c5cda
   b497c:	2003e634 	.word	0x2003e634
   b4980:	2003ad64 	.word	0x2003ad64
   b4984:	2003ad65 	.word	0x2003ad65
   b4988:	000c5ce5 	.word	0x000c5ce5
   b498c:	000c5cfd 	.word	0x000c5cfd
   b4990:	000c5de8 	.word	0x000c5de8
   b4994:	000c5df2 	.word	0x000c5df2
   b4998:	000c5e3f 	.word	0x000c5e3f

000b499c <_Z9softDelaym>:
 * @brief soft delay let's us process Particle functions and service the sensor interrupts while pausing
 * 
 * @details takes a single unsigned long input in millis
 * 
 */
inline void softDelay(uint32_t t) {
   b499c:	b570      	push	{r4, r5, r6, lr}
   b499e:	4605      	mov	r5, r0
   b49a0:	f00b f932 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
   b49a4:	4e06      	ldr	r6, [pc, #24]	; (b49c0 <_Z9softDelaym+0x24>)
   b49a6:	4604      	mov	r4, r0
   b49a8:	f00b f92e 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
   b49ac:	1b00      	subs	r0, r0, r4
   b49ae:	42a8      	cmp	r0, r5
   b49b0:	d205      	bcs.n	b49be <_Z9softDelaym+0x22>
		return HAL_Timer_Get_Milli_Seconds();
   b49b2:	f00b f929 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b49b6:	6030      	str	r0, [r6, #0]
            return spark_process();
   b49b8:	f00b fc86 	bl	c02c8 <spark_process>
   b49bc:	e7f4      	b.n	b49a8 <_Z9softDelaym+0xc>
}
   b49be:	bd70      	pop	{r4, r5, r6, pc}
   b49c0:	2003e728 	.word	0x2003e728

000b49c4 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b49c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b49c6:	2300      	movs	r3, #0
   b49c8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b49ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b49cc:	4604      	mov	r4, r0
   b49ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b49d0:	b12b      	cbz	r3, b49de <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b49d2:	2202      	movs	r2, #2
   b49d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b49d6:	68eb      	ldr	r3, [r5, #12]
   b49d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b49da:	68ab      	ldr	r3, [r5, #8]
   b49dc:	60a3      	str	r3, [r4, #8]
    }
   b49de:	4620      	mov	r0, r4
   b49e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b49e4 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b49e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b49e8:	b095      	sub	sp, #84	; 0x54
   b49ea:	4605      	mov	r5, r0
        };
   b49ec:	991c      	ldr	r1, [sp, #112]	; 0x70
   b49ee:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b49f0:	4690      	mov	r8, r2
   b49f2:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b49f4:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b49f6:	f7ff ffe5 	bl	b49c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b49fa:	a904      	add	r1, sp, #16
   b49fc:	a808      	add	r0, sp, #32
   b49fe:	f7ff ffe1 	bl	b49c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4a02:	a908      	add	r1, sp, #32
   b4a04:	4630      	mov	r0, r6
   b4a06:	f7ff ffdd 	bl	b49c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4a0a:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4a0e:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4a10:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4a14:	f7ff fb3f 	bl	b4096 <_Znwj>
   b4a18:	4604      	mov	r4, r0
   b4a1a:	b1a0      	cbz	r0, b4a46 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a1c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4a20:	ab01      	add	r3, sp, #4
   b4a22:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4a26:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4a2a:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4a2e:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4a34:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4a36:	60a3      	str	r3, [r4, #8]
   b4a38:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b4a3e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b4a42:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4a44:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4a46:	4b24      	ldr	r3, [pc, #144]	; (b4ad8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4a48:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4a4a:	4b24      	ldr	r3, [pc, #144]	; (b4adc <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b4a4c:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4a4e:	2200      	movs	r2, #0
   b4a50:	2300      	movs	r3, #0
   b4a52:	f04f 0900 	mov.w	r9, #0
   b4a56:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4a5a:	4b21      	ldr	r3, [pc, #132]	; (b4ae0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4a5c:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4a60:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4a62:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4a64:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4a68:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4a6c:	f7ff fb13 	bl	b4096 <_Znwj>
   b4a70:	4604      	mov	r4, r0
   b4a72:	b1d8      	cbz	r0, b4aac <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4a74:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4a76:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b4a7a:	b133      	cbz	r3, b4a8a <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4a7c:	2202      	movs	r2, #2
   b4a7e:	a910      	add	r1, sp, #64	; 0x40
   b4a80:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4a82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4a84:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4a86:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4a88:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4a8a:	4b16      	ldr	r3, [pc, #88]	; (b4ae4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4a8c:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4a8e:	4a16      	ldr	r2, [pc, #88]	; (b4ae8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4a90:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4a92:	ab01      	add	r3, sp, #4
   b4a94:	4640      	mov	r0, r8
   b4a96:	4639      	mov	r1, r7
   b4a98:	f00b fb56 	bl	c0148 <system_subscribe_event>
        if (r) {
   b4a9c:	b1b0      	cbz	r0, b4acc <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4a9e:	4620      	mov	r0, r4
   b4aa0:	f7ff fc52 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4aa4:	2110      	movs	r1, #16
   b4aa6:	4620      	mov	r0, r4
   b4aa8:	f7ff faf9 	bl	b409e <_ZdlPvj>
   b4aac:	a810      	add	r0, sp, #64	; 0x40
   b4aae:	f7ff fc4b 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   b4ab2:	4630      	mov	r0, r6
   b4ab4:	f7ff fc48 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   b4ab8:	a808      	add	r0, sp, #32
   b4aba:	f7ff fc45 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   b4abe:	a804      	add	r0, sp, #16
   b4ac0:	f7ff fc42 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
    }
   b4ac4:	4628      	mov	r0, r5
   b4ac6:	b015      	add	sp, #84	; 0x54
   b4ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4acc:	9b02      	ldr	r3, [sp, #8]
   b4ace:	60ab      	str	r3, [r5, #8]
   b4ad0:	e9c5 8700 	strd	r8, r7, [r5]
   b4ad4:	e7ea      	b.n	b4aac <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b4ad6:	bf00      	nop
   b4ad8:	000b42d1 	.word	0x000b42d1
   b4adc:	000b4aed 	.word	0x000b4aed
   b4ae0:	000c0002 	.word	0x000c0002
   b4ae4:	000b435b 	.word	0x000b435b
   b4ae8:	000b42a9 	.word	0x000b42a9

000b4aec <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4aec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4aee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4af0:	4604      	mov	r4, r0
	switch (__op)
   b4af2:	d104      	bne.n	b4afe <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4af4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4af6:	6003      	str	r3, [r0, #0]
      }
   b4af8:	2000      	movs	r0, #0
   b4afa:	b003      	add	sp, #12
   b4afc:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4afe:	2a02      	cmp	r2, #2
   b4b00:	d00c      	beq.n	b4b1c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4b02:	2a03      	cmp	r2, #3
   b4b04:	d1f8      	bne.n	b4af8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4b06:	6804      	ldr	r4, [r0, #0]
   b4b08:	2c00      	cmp	r4, #0
   b4b0a:	d0f5      	beq.n	b4af8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4b0c:	4620      	mov	r0, r4
   b4b0e:	f7ff fc1b 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4b12:	2110      	movs	r1, #16
   b4b14:	4620      	mov	r0, r4
   b4b16:	f7ff fac2 	bl	b409e <_ZdlPvj>
   b4b1a:	e7ed      	b.n	b4af8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4b1c:	6809      	ldr	r1, [r1, #0]
   b4b1e:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4b20:	2010      	movs	r0, #16
   b4b22:	f7ff fab8 	bl	b4096 <_Znwj>
   b4b26:	4605      	mov	r5, r0
   b4b28:	b110      	cbz	r0, b4b30 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4b2a:	9901      	ldr	r1, [sp, #4]
   b4b2c:	f7ff ff4a 	bl	b49c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4b30:	6025      	str	r5, [r4, #0]
	}
   b4b32:	e7e1      	b.n	b4af8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4b34 <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b4b34:	4b16      	ldr	r3, [pc, #88]	; (b4b90 <_GLOBAL__sub_I___appProductVersion+0x5c>)
   b4b36:	b510      	push	{r4, lr}
   b4b38:	2401      	movs	r4, #1
   b4b3a:	701c      	strb	r4, [r3, #0]
   b4b3c:	4b15      	ldr	r3, [pc, #84]	; (b4b94 <_GLOBAL__sub_I___appProductVersion+0x60>)
   b4b3e:	2208      	movs	r2, #8
   b4b40:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4b42:	f00e fce1 	bl	c3508 <spark_protocol_instance>
   b4b46:	2300      	movs	r3, #0
   b4b48:	461a      	mov	r2, r3
   b4b4a:	2116      	movs	r1, #22
   b4b4c:	f00e fcec 	bl	c3528 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4b50:	f00e fcda 	bl	c3508 <spark_protocol_instance>
   b4b54:	2300      	movs	r3, #0
   b4b56:	461a      	mov	r2, r3
   b4b58:	210d      	movs	r1, #13
   b4b5a:	f00e fcdd 	bl	c3518 <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b4b5e:	4b0e      	ldr	r3, [pc, #56]	; (b4b98 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b4b60:	1d1a      	adds	r2, r3, #4
   b4b62:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b4b64:	4a0d      	ldr	r2, [pc, #52]	; (b4b9c <_GLOBAL__sub_I___appProductVersion+0x68>)
   b4b66:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4b68:	2200      	movs	r2, #0
   b4b6a:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b4b6e:	611a      	str	r2, [r3, #16]
   b4b70:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4b72:	f00e fde9 	bl	c3748 <_Z19__fetch_global_Wirev>
   b4b76:	2269      	movs	r2, #105	; 0x69
   b4b78:	4601      	mov	r1, r0
   b4b7a:	4809      	ldr	r0, [pc, #36]	; (b4ba0 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b4b7c:	f003 fc4e 	bl	b841c <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b4b80:	4808      	ldr	r0, [pc, #32]	; (b4ba4 <_GLOBAL__sub_I___appProductVersion+0x70>)
   b4b82:	2306      	movs	r3, #6
   b4b84:	f840 3b04 	str.w	r3, [r0], #4
}
   b4b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4b8c:	f007 b806 	b.w	bbb9c <_ZN22LocalTimePosixTimezoneC1Ev>
   b4b90:	2003ad64 	.word	0x2003ad64
   b4b94:	2003ad65 	.word	0x2003ad65
   b4b98:	2003ad9c 	.word	0x2003ad9c
   b4b9c:	00030010 	.word	0x00030010
   b4ba0:	2003ad7c 	.word	0x2003ad7c
   b4ba4:	2003adb8 	.word	0x2003adb8

000b4ba8 <setup>:
{
   b4ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b4baa:	2000      	movs	r0, #0
   b4bac:	b09d      	sub	sp, #116	; 0x74
   b4bae:	f00b f83b 	bl	bfc28 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4bb2:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4bb6:	4604      	mov	r4, r0
   b4bb8:	2000      	movs	r0, #0
   b4bba:	f00b f835 	bl	bfc28 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4bbe:	1b00      	subs	r0, r0, r4
   b4bc0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4bc4:	42a8      	cmp	r0, r5
   b4bc6:	f171 0300 	sbcs.w	r3, r1, #0
   b4bca:	d207      	bcs.n	b4bdc <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4bcc:	f00e f816 	bl	c2bfc <_Z16_fetch_usbserialv>
   b4bd0:	f00e f809 	bl	c2be6 <_ZN9USBSerial11isConnectedEv>
   b4bd4:	b910      	cbnz	r0, b4bdc <setup+0x34>
            spark_process();
   b4bd6:	f00b fb77 	bl	c02c8 <spark_process>
        while (_while() && !_condition()) {
   b4bda:	e7ed      	b.n	b4bb8 <setup+0x10>
   b4bdc:	f00e f80e 	bl	c2bfc <_Z16_fetch_usbserialv>
   b4be0:	f00e f801 	bl	c2be6 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b4be4:	f001 fc7a 	bl	b64dc <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b4be8:	f001 fcac 	bl	b6544 <_Z18initializePowerCfgv>
	sysStatus.setup();
   b4bec:	f002 fd6c 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b4bf0:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b4bf2:	4e50      	ldr	r6, [pc, #320]	; (b4d34 <setup+0x18c>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b4bf6:	4f50      	ldr	r7, [pc, #320]	; (b4d38 <setup+0x190>)
   b4bf8:	4798      	blx	r3
	current.setup();
   b4bfa:	f002 fd9f 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4bfe:	6803      	ldr	r3, [r0, #0]
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	4798      	blx	r3
	nodeDatabase.setup();
   b4c04:	f002 fe34 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   b4c08:	6803      	ldr	r3, [r0, #0]
   b4c0a:	681b      	ldr	r3, [r3, #0]
   b4c0c:	4798      	blx	r3
	sysStatus.set_connectivityMode(4);				// connectivityMode Code 4 keeps both LoRA and WiFi Connections on
   b4c0e:	f002 fd5b 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b4c12:	2104      	movs	r1, #4
   b4c14:	f002 ff99 	bl	b7b4a <_ZN13sysStatusData20set_connectivityModeEh>
    Particle_Functions::instance().setup();         // Sets up all the Particle functions and variables defined in particle_fn.h
   b4c18:	f001 fd40 	bl	b669c <_ZN18Particle_Functions8instanceEv>
   b4c1c:	f001 fd50 	bl	b66c0 <_ZN18Particle_Functions5setupEv>
   b4c20:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// Initialize AB1805 RTC   
   b4c22:	2101      	movs	r1, #1
   b4c24:	4630      	mov	r0, r6
   b4c26:	8173      	strh	r3, [r6, #10]
   b4c28:	f004 f946 	bl	b8eb8 <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b4c2c:	217c      	movs	r1, #124	; 0x7c
   b4c2e:	4630      	mov	r0, r6
   b4c30:	f003 fce8 	bl	b8604 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4c34:	4b41      	ldr	r3, [pc, #260]	; (b4d3c <setup+0x194>)
   b4c36:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b4c38:	4b41      	ldr	r3, [pc, #260]	; (b4d40 <setup+0x198>)
   b4c3a:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b4c3c:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b4c3e:	4b41      	ldr	r3, [pc, #260]	; (b4d44 <setup+0x19c>)
   b4c40:	9308      	str	r3, [sp, #32]
   b4c42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b4c46:	2300      	movs	r3, #0
   b4c48:	a802      	add	r0, sp, #8
   b4c4a:	9500      	str	r5, [sp, #0]
   b4c4c:	f7ff feca 	bl	b49e4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b4c50:	4628      	mov	r0, r5
   b4c52:	f7ff fb79 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b4c56:	f005 fe2b 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b4c5a:	f006 f82f 	bl	bacbc <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b4c5e:	f000 fcef 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b4c62:	2101      	movs	r1, #1
   b4c64:	f000 fd58 	bl	b5718 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone(TIME_CONFIG));			// East coast of the US
   b4c68:	f007 f978 	bl	bbf5c <_ZN9LocalTime8instanceEv>
   b4c6c:	4936      	ldr	r1, [pc, #216]	; (b4d48 <setup+0x1a0>)
   b4c6e:	4604      	mov	r4, r0
   b4c70:	4628      	mov	r0, r5
   b4c72:	f007 f845 	bl	bbd00 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b4c76:	a907      	add	r1, sp, #28
   b4c78:	f104 0008 	add.w	r0, r4, #8
   b4c7c:	f00b fef8 	bl	c0a70 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b4c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4c82:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b4c84:	a90d      	add	r1, sp, #52	; 0x34
   b4c86:	f104 0020 	add.w	r0, r4, #32
   b4c8a:	f00b fef1 	bl	c0a70 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b4c8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4c90:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b4c92:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b4c94:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b4c96:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b4c98:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b4c9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b4c9c:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b4c9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b4ca0:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b4ca2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b4ca6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b4caa:	4628      	mov	r0, r5
   b4cac:	f006 fde4 	bl	bb878 <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b4cb0:	f00d fa0d 	bl	c20ce <_ZN9TimeClass3nowEv>
   b4cb4:	17c3      	asrs	r3, r0, #31
   b4cb6:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				// Convert to local time for use later
   b4cba:	4638      	mov	r0, r7
   b4cbc:	f007 f9c6 	bl	bc04c <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b4cc0:	f00d f9e8 	bl	c2094 <_ZN9TimeClass7isValidEv>
   b4cc4:	4c21      	ldr	r4, [pc, #132]	; (b4d4c <setup+0x1a4>)
   b4cc6:	b370      	cbz	r0, b4d26 <setup+0x17e>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b4cc8:	4639      	mov	r1, r7
   b4cca:	4a21      	ldr	r2, [pc, #132]	; (b4d50 <setup+0x1a8>)
   b4ccc:	4628      	mov	r0, r5
   b4cce:	f007 f8a7 	bl	bbe20 <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b4cd2:	2301      	movs	r3, #1
   b4cd4:	461a      	mov	r2, r3
   b4cd6:	2110      	movs	r1, #16
   b4cd8:	4630      	mov	r0, r6
   b4cda:	9f06      	ldr	r7, [sp, #24]
   b4cdc:	f003 fd13 	bl	b8706 <_ZN6AB180510isBitClearEhhb>
   b4ce0:	491c      	ldr	r1, [pc, #112]	; (b4d54 <setup+0x1ac>)
   b4ce2:	4b1d      	ldr	r3, [pc, #116]	; (b4d58 <setup+0x1b0>)
   b4ce4:	463a      	mov	r2, r7
   b4ce6:	2800      	cmp	r0, #0
   b4ce8:	bf18      	it	ne
   b4cea:	460b      	movne	r3, r1
   b4cec:	481b      	ldr	r0, [pc, #108]	; (b4d5c <setup+0x1b4>)
   b4cee:	491c      	ldr	r1, [pc, #112]	; (b4d60 <setup+0x1b8>)
   b4cf0:	f7ff f9ec 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b4cf4:	4628      	mov	r0, r5
   b4cf6:	f00b fe33 	bl	c0960 <_ZN6StringD1Ev>
		sysStatus.set_connectivityMode(1);			  // connectivityMode Code 1 keeps both LoRA and Cellular connections on
   b4cfa:	f002 fce5 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b4cfe:	2101      	movs	r1, #1
   b4d00:	f002 ff23 	bl	b7b4a <_ZN13sysStatusData20set_connectivityModeEh>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b4d04:	4817      	ldr	r0, [pc, #92]	; (b4d64 <setup+0x1bc>)
   b4d06:	4918      	ldr	r1, [pc, #96]	; (b4d68 <setup+0x1c0>)
   b4d08:	8800      	ldrh	r0, [r0, #0]
		state = CONNECTING_STATE;
   b4d0a:	2305      	movs	r3, #5
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b4d0c:	2200      	movs	r2, #0
		state = CONNECTING_STATE;
   b4d0e:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b4d10:	f04f 33ff 	mov.w	r3, #4294967295
   b4d14:	9200      	str	r2, [sp, #0]
   b4d16:	f00d ff99 	bl	c2c4c <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b4d1a:	7823      	ldrb	r3, [r4, #0]
   b4d1c:	b90b      	cbnz	r3, b4d22 <setup+0x17a>
   b4d1e:	2303      	movs	r3, #3
   b4d20:	7023      	strb	r3, [r4, #0]
}
   b4d22:	b01d      	add	sp, #116	; 0x74
   b4d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b4d26:	4911      	ldr	r1, [pc, #68]	; (b4d6c <setup+0x1c4>)
   b4d28:	480c      	ldr	r0, [pc, #48]	; (b4d5c <setup+0x1b4>)
   b4d2a:	f7ff f9cf 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b4d2e:	2305      	movs	r3, #5
   b4d30:	7023      	strb	r3, [r4, #0]
   b4d32:	e7e2      	b.n	b4cfa <setup+0x152>
   b4d34:	2003ad7c 	.word	0x2003ad7c
   b4d38:	2003adb8 	.word	0x2003adb8
   b4d3c:	000b4291 	.word	0x000b4291
   b4d40:	000b430b 	.word	0x000b430b
   b4d44:	000b42f7 	.word	0x000b42f7
   b4d48:	000c5fac 	.word	0x000c5fac
   b4d4c:	2003aea9 	.word	0x2003aea9
   b4d50:	000c5fd3 	.word	0x000c5fd3
   b4d54:	000c5fa2 	.word	0x000c5fa2
   b4d58:	000c5fa5 	.word	0x000c5fa5
   b4d5c:	2003e634 	.word	0x2003e634
   b4d60:	000c5fde 	.word	0x000c5fde
   b4d64:	000c6a20 	.word	0x000c6a20
   b4d68:	000b429d 	.word	0x000b429d
   b4d6c:	000c600f 	.word	0x000c600f

000b4d70 <loop>:
void loop() {
   b4d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (state) {
   b4d74:	4d92      	ldr	r5, [pc, #584]	; (b4fc0 <loop+0x250>)
   b4d76:	782b      	ldrb	r3, [r5, #0]
   b4d78:	3b01      	subs	r3, #1
void loop() {
   b4d7a:	b097      	sub	sp, #92	; 0x5c
   b4d7c:	2b06      	cmp	r3, #6
   b4d7e:	d817      	bhi.n	b4db0 <loop+0x40>
   b4d80:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4d84:	000703d6 	.word	0x000703d6
   b4d88:	013c0045 	.word	0x013c0045
   b4d8c:	03b10324 	.word	0x03b10324
   b4d90:	0315      	.short	0x0315
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4d92:	4b8c      	ldr	r3, [pc, #560]	; (b4fc4 <loop+0x254>)
   b4d94:	781b      	ldrb	r3, [r3, #0]
   b4d96:	2b02      	cmp	r3, #2
   b4d98:	d001      	beq.n	b4d9e <loop+0x2e>
   b4d9a:	f7ff faeb 	bl	b4374 <_Z22publishStateTransitionv>
			if (sysStatus.get_alertCodeGateway() != 0) state = ERROR_STATE;
   b4d9e:	f002 fc93 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b4da2:	f002 fe2c 	bl	b79fe <_ZNK13sysStatusData20get_alertCodeGatewayEv>
   b4da6:	2800      	cmp	r0, #0
   b4da8:	f000 830e 	beq.w	b53c8 <loop+0x658>
   b4dac:	2301      	movs	r3, #1
			else state = LoRA_STATE;											// Go to the LoRA state to start the next cycle									
   b4dae:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b4db0:	4885      	ldr	r0, [pc, #532]	; (b4fc8 <loop+0x258>)
   b4db2:	f004 f817 	bl	b8de4 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message 
   b4db6:	f005 fd7b 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b4dba:	f005 fc6c 	bl	ba696 <_ZN17PublishQueuePosix4loopEv>
	sysStatus.loop();
   b4dbe:	f002 fc83 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b4dc2:	f002 fc91 	bl	b76e8 <_ZN13sysStatusData4loopEv>
	current.loop();
   b4dc6:	f002 fcb9 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b4dca:	f002 fcd5 	bl	b7778 <_ZN17currentStatusData4loopEv>
	nodeDatabase.loop();
   b4dce:	f002 fd4f 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   b4dd2:	f002 fd6d 	bl	b78b0 <_ZN10nodeIDData4loopEv>
	LoRA_Functions::instance().loop();				// Check to see if Node connections are healthy
   b4dd6:	f000 fc33 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b4dda:	f000 fc43 	bl	b5664 <_ZN14LoRA_Functions4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b4dde:	4b7b      	ldr	r3, [pc, #492]	; (b4fcc <loop+0x25c>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	2b00      	cmp	r3, #0
   b4de4:	db09      	blt.n	b4dfa <loop+0x8a>
		Log.info("Resetting due to low memory");
   b4de6:	497a      	ldr	r1, [pc, #488]	; (b4fd0 <loop+0x260>)
   b4de8:	487a      	ldr	r0, [pc, #488]	; (b4fd4 <loop+0x264>)
   b4dea:	f7ff f96f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		softDelay(2000);
   b4dee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4df2:	f7ff fdd3 	bl	b499c <_Z9softDelaym>
		System.reset();
   b4df6:	f00b fd2c 	bl	c0852 <_ZN11SystemClass5resetEv>
	if (sysStatus.get_alertCodeGateway() > 0) state = ERROR_STATE;
   b4dfa:	f002 fc65 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b4dfe:	f002 fdfe 	bl	b79fe <_ZNK13sysStatusData20get_alertCodeGatewayEv>
   b4e02:	b108      	cbz	r0, b4e08 <loop+0x98>
   b4e04:	2301      	movs	r3, #1
   b4e06:	702b      	strb	r3, [r5, #0]
}
   b4e08:	b017      	add	sp, #92	; 0x5c
   b4e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4e0e:	f7ff fab1 	bl	b4374 <_Z22publishStateTransitionv>
			wakeBoundary = (sysStatus.get_frequencySeconds());
   b4e12:	f002 fc59 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b4e16:	f002 ff8f 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b4e1a:	4681      	mov	r9, r0
			wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window	
   b4e1c:	f00d f957 	bl	c20ce <_ZN9TimeClass3nowEv>
   b4e20:	fbb0 f3f9 	udiv	r3, r0, r9
   b4e24:	fb03 0019 	mls	r0, r3, r9, r0
   b4e28:	eba9 0000 	sub.w	r0, r9, r0
   b4e2c:	4581      	cmp	r9, r0
   b4e2e:	bf28      	it	cs
   b4e30:	4681      	movcs	r9, r0
			time = Time.now() + wakeInSeconds;
   b4e32:	f00d f94c 	bl	c20ce <_ZN9TimeClass3nowEv>
			Log.info("Sleep for %lu seconds until next event at %s", wakeInSeconds, Time.format(time, "%T").c_str());
   b4e36:	f8df 81c0 	ldr.w	r8, [pc, #448]	; b4ff8 <loop+0x288>
   b4e3a:	4967      	ldr	r1, [pc, #412]	; (b4fd8 <loop+0x268>)
   b4e3c:	f8cd 8000 	str.w	r8, [sp]
   b4e40:	eb00 0209 	add.w	r2, r0, r9
   b4e44:	2300      	movs	r3, #0
   b4e46:	a80e      	add	r0, sp, #56	; 0x38
   b4e48:	f00d f8e2 	bl	c2010 <_ZN9TimeClass6formatExPKc>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4e4c:	4c63      	ldr	r4, [pc, #396]	; (b4fdc <loop+0x26c>)
   b4e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b4e50:	4963      	ldr	r1, [pc, #396]	; (b4fe0 <loop+0x270>)
   b4e52:	4860      	ldr	r0, [pc, #384]	; (b4fd4 <loop+0x264>)
   b4e54:	464a      	mov	r2, r9
   b4e56:	f7ff f939 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b4e5a:	a80e      	add	r0, sp, #56	; 0x38
   b4e5c:	f00b fd80 	bl	c0960 <_ZN6StringD1Ev>
   b4e60:	7d23      	ldrb	r3, [r4, #20]
   b4e62:	b10b      	cbz	r3, b4e68 <loop+0xf8>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4e64:	2202      	movs	r2, #2
   b4e66:	7222      	strb	r2, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b4e68:	4a5e      	ldr	r2, [pc, #376]	; (b4fe4 <loop+0x274>)
   b4e6a:	8817      	ldrh	r7, [r2, #0]
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
   b4e6c:	2b00      	cmp	r3, #0
   b4e6e:	d04a      	beq.n	b4f06 <loop+0x196>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4e70:	6823      	ldr	r3, [r4, #0]
   b4e72:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4e74:	b1f3      	cbz	r3, b4eb4 <loop+0x144>
            if (start->type == type) {
   b4e76:	889a      	ldrh	r2, [r3, #4]
   b4e78:	2a01      	cmp	r2, #1
   b4e7a:	d006      	beq.n	b4e8a <loop+0x11a>
            start = start->next;
   b4e7c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4e7e:	e7f9      	b.n	b4e74 <loop+0x104>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4e80:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4e82:	b1bb      	cbz	r3, b4eb4 <loop+0x144>
            if (start->type == type) {
   b4e84:	889a      	ldrh	r2, [r3, #4]
   b4e86:	2a01      	cmp	r2, #1
   b4e88:	d1fa      	bne.n	b4e80 <loop+0x110>
                if (gpioWakeup->pin == pin) {
   b4e8a:	899a      	ldrh	r2, [r3, #12]
   b4e8c:	42ba      	cmp	r2, r7
   b4e8e:	d1f7      	bne.n	b4e80 <loop+0x110>
                    gpioWakeup->mode = mode;
   b4e90:	2200      	movs	r2, #0
   b4e92:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4e94:	7d23      	ldrb	r3, [r4, #20]
   b4e96:	2b00      	cmp	r3, #0
   b4e98:	d035      	beq.n	b4f06 <loop+0x196>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4e9a:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b4e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4ea0:	68db      	ldr	r3, [r3, #12]
   b4ea2:	fb00 f909 	mul.w	r9, r0, r9
        if (!start) {
   b4ea6:	b1d3      	cbz	r3, b4ede <loop+0x16e>
            if (start->type == type) {
   b4ea8:	889a      	ldrh	r2, [r3, #4]
   b4eaa:	2a04      	cmp	r2, #4
   b4eac:	f000 8383 	beq.w	b55b6 <loop+0x846>
            start = start->next;
   b4eb0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4eb2:	e7f8      	b.n	b4ea6 <loop+0x136>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4eb4:	494c      	ldr	r1, [pc, #304]	; (b4fe8 <loop+0x278>)
   b4eb6:	2010      	movs	r0, #16
   b4eb8:	f00e fc8e 	bl	c37d8 <_ZnwjRKSt9nothrow_t>
   b4ebc:	4606      	mov	r6, r0
   b4ebe:	2800      	cmp	r0, #0
   b4ec0:	f000 837c 	beq.w	b55bc <loop+0x84c>
   b4ec4:	2210      	movs	r2, #16
   b4ec6:	2100      	movs	r1, #0
   b4ec8:	f010 faa2 	bl	c5410 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4ecc:	4b47      	ldr	r3, [pc, #284]	; (b4fec <loop+0x27c>)
   b4ece:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4ed0:	2301      	movs	r3, #1
   b4ed2:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4ed4:	6923      	ldr	r3, [r4, #16]
   b4ed6:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b4ed8:	81b7      	strh	r7, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4eda:	6126      	str	r6, [r4, #16]
   b4edc:	e7da      	b.n	b4e94 <loop+0x124>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4ede:	4942      	ldr	r1, [pc, #264]	; (b4fe8 <loop+0x278>)
   b4ee0:	2010      	movs	r0, #16
   b4ee2:	f00e fc79 	bl	c37d8 <_ZnwjRKSt9nothrow_t>
   b4ee6:	4606      	mov	r6, r0
   b4ee8:	2800      	cmp	r0, #0
   b4eea:	f000 8367 	beq.w	b55bc <loop+0x84c>
   b4eee:	2210      	movs	r2, #16
   b4ef0:	2100      	movs	r1, #0
   b4ef2:	f010 fa8d 	bl	c5410 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4ef6:	4b3d      	ldr	r3, [pc, #244]	; (b4fec <loop+0x27c>)
   b4ef8:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4efa:	2304      	movs	r3, #4
   b4efc:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4efe:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4f00:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b4f02:	e9c6 3902 	strd	r3, r9, [r6, #8]
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4f06:	2100      	movs	r1, #0
   b4f08:	482f      	ldr	r0, [pc, #188]	; (b4fc8 <loop+0x258>)
   b4f0a:	f003 fb7b 	bl	b8604 <_ZN6AB18056setWDTEi>
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b4f0e:	4933      	ldr	r1, [pc, #204]	; (b4fdc <loop+0x26c>)
   b4f10:	a80a      	add	r0, sp, #40	; 0x28
   b4f12:	f00b fca1 	bl	c0858 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4f16:	482c      	ldr	r0, [pc, #176]	; (b4fc8 <loop+0x258>)
   b4f18:	f04f 31ff 	mov.w	r1, #4294967295
   b4f1c:	f003 fb72 	bl	b8604 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if (wakeupSource_) {
   b4f22:	b1eb      	cbz	r3, b4f60 <loop+0x1f0>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4f24:	889a      	ldrh	r2, [r3, #4]
   b4f26:	2a01      	cmp	r2, #1
   b4f28:	d11a      	bne.n	b4f60 <loop+0x1f0>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b4f2a:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {
   b4f2c:	429f      	cmp	r7, r3
   b4f2e:	d12f      	bne.n	b4f90 <loop+0x220>
        return hal_timer_millis(nullptr);
   b4f30:	2000      	movs	r0, #0
   b4f32:	f00a fe79 	bl	bfc28 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4f36:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4f3a:	4604      	mov	r4, r0
   b4f3c:	2000      	movs	r0, #0
   b4f3e:	f00a fe73 	bl	bfc28 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4f42:	1b00      	subs	r0, r0, r4
   b4f44:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4f48:	42b0      	cmp	r0, r6
   b4f4a:	f171 0300 	sbcs.w	r3, r1, #0
   b4f4e:	d20a      	bcs.n	b4f66 <loop+0x1f6>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4f50:	f00d fe54 	bl	c2bfc <_Z16_fetch_usbserialv>
   b4f54:	f00d fe47 	bl	c2be6 <_ZN9USBSerial11isConnectedEv>
   b4f58:	b928      	cbnz	r0, b4f66 <loop+0x1f6>
            spark_process();
   b4f5a:	f00b f9b5 	bl	c02c8 <spark_process>
        while (_while() && !_condition()) {
   b4f5e:	e7ed      	b.n	b4f3c <loop+0x1cc>
            return std::numeric_limits<pin_t>::max();
   b4f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4f64:	e7e2      	b.n	b4f2c <loop+0x1bc>
   b4f66:	f00d fe49 	bl	c2bfc <_Z16_fetch_usbserialv>
   b4f6a:	f00d fe3c 	bl	c2be6 <_ZN9USBSerial11isConnectedEv>
				softDelay(1000);
   b4f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4f72:	f7ff fd13 	bl	b499c <_Z9softDelaym>
				Log.info("Woke with user button");
   b4f76:	491e      	ldr	r1, [pc, #120]	; (b4ff0 <loop+0x280>)
   b4f78:	4816      	ldr	r0, [pc, #88]	; (b4fd4 <loop+0x264>)
   b4f7a:	f7ff f8a7 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
        if (wakeupSource_) {
   b4f7e:	980a      	ldr	r0, [sp, #40]	; 0x28
			state = IDLE_STATE;
   b4f80:	2302      	movs	r3, #2
   b4f82:	702b      	strb	r3, [r5, #0]
   b4f84:	2800      	cmp	r0, #0
   b4f86:	f43f af13 	beq.w	b4db0 <loop+0x40>
            free(wakeupSource_);
   b4f8a:	f00b f9f5 	bl	c0378 <free>
		} break;
   b4f8e:	e70f      	b.n	b4db0 <loop+0x40>
				Log.info("Awoke at %s with %li free memory", Time.format(Time.now(), "%T").c_str(), System.freeMemory());
   b4f90:	f00d f89d 	bl	c20ce <_ZN9TimeClass3nowEv>
   b4f94:	4910      	ldr	r1, [pc, #64]	; (b4fd8 <loop+0x268>)
   b4f96:	f8cd 8000 	str.w	r8, [sp]
   b4f9a:	17c3      	asrs	r3, r0, #31
   b4f9c:	4602      	mov	r2, r0
   b4f9e:	a80e      	add	r0, sp, #56	; 0x38
   b4fa0:	f00d f836 	bl	c2010 <_ZN9TimeClass6formatExPKc>
   b4fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4fa6:	9204      	str	r2, [sp, #16]
   b4fa8:	f00b fcb6 	bl	c0918 <_ZN11SystemClass10freeMemoryEv>
   b4fac:	9a04      	ldr	r2, [sp, #16]
   b4fae:	4911      	ldr	r1, [pc, #68]	; (b4ff4 <loop+0x284>)
   b4fb0:	4603      	mov	r3, r0
   b4fb2:	4808      	ldr	r0, [pc, #32]	; (b4fd4 <loop+0x264>)
   b4fb4:	f7ff f88a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b4fb8:	a80e      	add	r0, sp, #56	; 0x38
   b4fba:	f00b fcd1 	bl	c0960 <_ZN6StringD1Ev>
   b4fbe:	e7de      	b.n	b4f7e <loop+0x20e>
   b4fc0:	2003aea9 	.word	0x2003aea9
   b4fc4:	2003aea8 	.word	0x2003aea8
   b4fc8:	2003ad7c 	.word	0x2003ad7c
   b4fcc:	2003abd8 	.word	0x2003abd8
   b4fd0:	000c62c9 	.word	0x000c62c9
   b4fd4:	2003e634 	.word	0x2003e634
   b4fd8:	2003e660 	.word	0x2003e660
   b4fdc:	2003ad9c 	.word	0x2003ad9c
   b4fe0:	000c6067 	.word	0x000c6067
   b4fe4:	000c6a20 	.word	0x000c6a20
   b4fe8:	000c94ae 	.word	0x000c94ae
   b4fec:	00030010 	.word	0x00030010
   b4ff0:	000c6094 	.word	0x000c6094
   b4ff4:	000c60aa 	.word	0x000c60aa
   b4ff8:	000c6064 	.word	0x000c6064
			if (state != oldState) {
   b4ffc:	4bc0      	ldr	r3, [pc, #768]	; (b5300 <loop+0x590>)
   b4ffe:	781b      	ldrb	r3, [r3, #0]
   b5000:	2b04      	cmp	r3, #4
   b5002:	f000 80e8 	beq.w	b51d6 <loop+0x466>
				if (oldState != REPORTING_STATE){ 
   b5006:	2b07      	cmp	r3, #7
   b5008:	f000 8110 	beq.w	b522c <loop+0x4bc>
   b500c:	f00a fdfc 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
					startLoRAWindow = millis(); // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b5010:	4bbc      	ldr	r3, [pc, #752]	; (b5304 <loop+0x594>)
   b5012:	6018      	str	r0, [r3, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5014:	f7ff f9ae 	bl	b4374 <_Z22publishStateTransitionv>
   b5018:	f00d f859 	bl	c20ce <_ZN9TimeClass3nowEv>
   b501c:	4cba      	ldr	r4, [pc, #744]	; (b5308 <loop+0x598>)
   b501e:	17c3      	asrs	r3, r0, #31
   b5020:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b5024:	4620      	mov	r0, r4
   b5026:	f007 f811 	bl	bc04c <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b502a:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b502e:	a80a      	add	r0, sp, #40	; 0x28
   b5030:	f006 fe9e 	bl	bbd70 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) {
   b5034:	f99d 602c 	ldrsb.w	r6, [sp, #44]	; 0x2c
   b5038:	f002 fb46 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b503c:	f002 fce4 	bl	b7a08 <_ZNK13sysStatusData12get_openTimeEv>
   b5040:	4286      	cmp	r6, r0
   b5042:	f2c0 80fe 	blt.w	b5242 <loop+0x4d2>
   b5046:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b504a:	a80e      	add	r0, sp, #56	; 0x38
   b504c:	f006 fe90 	bl	bbd70 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5050:	f99d 603c 	ldrsb.w	r6, [sp, #60]	; 0x3c
   b5054:	f002 fb38 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5058:	f002 fcdb 	bl	b7a12 <_ZNK13sysStatusData13get_closeTimeEv>
   b505c:	4286      	cmp	r6, r0
   b505e:	a80e      	add	r0, sp, #56	; 0x38
   b5060:	bfcc      	ite	gt
   b5062:	2600      	movgt	r6, #0
   b5064:	2601      	movle	r6, #1
   b5066:	f006 fbf7 	bl	bb858 <_ZN12LocalTimeHMSD1Ev>
   b506a:	a80a      	add	r0, sp, #40	; 0x28
   b506c:	f006 fbf4 	bl	bb858 <_ZN12LocalTimeHMSD1Ev>
   b5070:	2e00      	cmp	r6, #0
   b5072:	f000 80e8 	beq.w	b5246 <loop+0x4d6>
					current.set_openHours(true);
   b5076:	f002 fb61 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b507a:	2101      	movs	r1, #1
					current.set_openHours(false);
   b507c:	f002 fe22 	bl	b7cc4 <_ZN17currentStatusData13set_openHoursEh>
				String dayString = conv.timeStr().substring(0, 3);	// Take the first three characters of the timeStr ("Fri", "Sat", "Sun")
   b5080:	49a1      	ldr	r1, [pc, #644]	; (b5308 <loop+0x598>)
   b5082:	a80e      	add	r0, sp, #56	; 0x38
   b5084:	f006 fe98 	bl	bbdb8 <_ZN16LocalTimeConvert7timeStrEv>
   b5088:	a90e      	add	r1, sp, #56	; 0x38
   b508a:	2303      	movs	r3, #3
   b508c:	2200      	movs	r2, #0
   b508e:	a80a      	add	r0, sp, #40	; 0x28
   b5090:	f00b fda0 	bl	c0bd4 <_ZNK6String9substringEjj>
   b5094:	a80e      	add	r0, sp, #56	; 0x38
   b5096:	f00b fc63 	bl	c0960 <_ZN6StringD1Ev>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b509a:	499c      	ldr	r1, [pc, #624]	; (b530c <loop+0x59c>)
   b509c:	a80a      	add	r0, sp, #40	; 0x28
   b509e:	f00b fd71 	bl	c0b84 <_ZNK6String6equalsEPKc>
				bool isWeekend = (dayString == "Sat" || dayString == "Sun");	// If it is a weekend, we will use the weekendBreakTime and weekendBreakLengthMinutes instead
   b50a2:	2800      	cmp	r0, #0
   b50a4:	f040 80f1 	bne.w	b528a <loop+0x51a>
   b50a8:	4999      	ldr	r1, [pc, #612]	; (b5310 <loop+0x5a0>)
   b50aa:	a80a      	add	r0, sp, #40	; 0x28
   b50ac:	f00b fd6a 	bl	c0b84 <_ZNK6String6equalsEPKc>
   b50b0:	4680      	mov	r8, r0
   b50b2:	2800      	cmp	r0, #0
   b50b4:	f040 80e9 	bne.w	b528a <loop+0x51a>
					breakLengthHours = (sysStatus.get_breakLengthMinutes() / 60);
   b50b8:	f002 fb06 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b50bc:	f002 fcb3 	bl	b7a26 <_ZNK13sysStatusData22get_breakLengthMinutesEv>
   b50c0:	243c      	movs	r4, #60	; 0x3c
   b50c2:	fbb0 f0f4 	udiv	r0, r0, r4
   b50c6:	b2c4      	uxtb	r4, r0
				uint8_t breakTime = isWeekend ? sysStatus.get_weekendBreakTime() : sysStatus.get_breakTime();
   b50c8:	f002 fafe 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b50cc:	f002 fca6 	bl	b7a1c <_ZNK13sysStatusData13get_breakTimeEv>
   b50d0:	4606      	mov	r6, r0
				uint16_t breakLengthMinutes = isWeekend ? sysStatus.get_weekendBreakLengthMinutes() : sysStatus.get_breakLengthMinutes();
   b50d2:	f002 faf9 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b50d6:	f002 fca6 	bl	b7a26 <_ZNK13sysStatusData22get_breakLengthMinutesEv>
   b50da:	b287      	uxth	r7, r0
				if (breakTime != 24) { // Ignore break functionality entirely if it is set to be 24. This means no break is needed for this gateway
   b50dc:	2e18      	cmp	r6, #24
   b50de:	d049      	beq.n	b5174 <loop+0x404>
   b50e0:	498c      	ldr	r1, [pc, #560]	; (b5314 <loop+0x5a4>)
   b50e2:	a806      	add	r0, sp, #24
   b50e4:	f006 fe44 	bl	bbd70 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
					if (conv.getLocalTimeHMS().hour >= breakTime &&
   b50e8:	f99d 301c 	ldrsb.w	r3, [sp, #28]
						conv.getLocalTimeHMS().hour <= (breakTime + breakLengthHours) &&
   b50ec:	42b3      	cmp	r3, r6
   b50ee:	f280 80e1 	bge.w	b52b4 <loop+0x544>
						conv.getLocalTimeHMS().minute < (breakLengthMinutes - (breakLengthHours * 60))) {
   b50f2:	2400      	movs	r4, #0
					if (conv.getLocalTimeHMS().hour >= breakTime &&
   b50f4:	a806      	add	r0, sp, #24
   b50f6:	f006 fbaf 	bl	bb858 <_ZN12LocalTimeHMSD1Ev>
   b50fa:	2c00      	cmp	r4, #0
   b50fc:	f000 80fa 	beq.w	b52f4 <loop+0x584>
						if (current.get_onBreak() == 0) {
   b5100:	f002 fb1c 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5104:	f002 fcf3 	bl	b7aee <_ZNK17currentStatusData11get_onBreakEv>
   b5108:	b940      	cbnz	r0, b511c <loop+0x3ac>
							current.set_onBreak(1); // start the break
   b510a:	f002 fb17 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b510e:	2101      	movs	r1, #1
   b5110:	f002 fdde 	bl	b7cd0 <_ZN17currentStatusData11set_onBreakEh>
							Room_Occupancy::instance().resetNetCounts(); // reset the room net counts for all occupancy nodes and update Ubidots
   b5114:	f008 fc74 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
   b5118:	f008 fc8b 	bl	bda32 <_ZN14Room_Occupancy14resetNetCountsEv>
					Log.info("%s Break Starts at %d with length of %d minutes. Current hour = %d, minute = %d On Break? %s", isWeekend ? "Weekend" : "Weekday", breakTime, breakLengthMinutes, conv.getLocalTimeHMS().hour, conv.getLocalTimeHMS().minute, current.get_onBreak() ? "Yes" : "No");
   b511c:	4b7e      	ldr	r3, [pc, #504]	; (b5318 <loop+0x5a8>)
   b511e:	4a7f      	ldr	r2, [pc, #508]	; (b531c <loop+0x5ac>)
   b5120:	497c      	ldr	r1, [pc, #496]	; (b5314 <loop+0x5a4>)
   b5122:	f1b8 0f00 	cmp.w	r8, #0
   b5126:	bf18      	it	ne
   b5128:	461a      	movne	r2, r3
   b512a:	a808      	add	r0, sp, #32
   b512c:	9204      	str	r2, [sp, #16]
   b512e:	f006 fe1f 	bl	bbd70 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5132:	4978      	ldr	r1, [pc, #480]	; (b5314 <loop+0x5a4>)
   b5134:	f99d 4024 	ldrsb.w	r4, [sp, #36]	; 0x24
   b5138:	a80e      	add	r0, sp, #56	; 0x38
   b513a:	f006 fe19 	bl	bbd70 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b513e:	f99d 803d 	ldrsb.w	r8, [sp, #61]	; 0x3d
   b5142:	f002 fafb 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5146:	f002 fcd2 	bl	b7aee <_ZNK17currentStatusData11get_onBreakEv>
   b514a:	4975      	ldr	r1, [pc, #468]	; (b5320 <loop+0x5b0>)
   b514c:	4b75      	ldr	r3, [pc, #468]	; (b5324 <loop+0x5b4>)
   b514e:	9a04      	ldr	r2, [sp, #16]
   b5150:	2800      	cmp	r0, #0
   b5152:	bf08      	it	eq
   b5154:	460b      	moveq	r3, r1
   b5156:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b515a:	4973      	ldr	r1, [pc, #460]	; (b5328 <loop+0x5b8>)
   b515c:	4873      	ldr	r0, [pc, #460]	; (b532c <loop+0x5bc>)
   b515e:	4633      	mov	r3, r6
   b5160:	e9cd 7400 	strd	r7, r4, [sp]
   b5164:	f7fe ffb2 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5168:	a80e      	add	r0, sp, #56	; 0x38
   b516a:	f006 fb75 	bl	bb858 <_ZN12LocalTimeHMSD1Ev>
   b516e:	a808      	add	r0, sp, #32
   b5170:	f006 fb72 	bl	bb858 <_ZN12LocalTimeHMSD1Ev>
				if (sysStatus.get_connectivityMode() == 0) connectionWindow = DEFAULT_LORA_WINDOW;
   b5174:	f002 faa8 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5178:	f002 fc37 	bl	b79ea <_ZNK13sysStatusData20get_connectivityModeEv>
   b517c:	4b6c      	ldr	r3, [pc, #432]	; (b5330 <loop+0x5c0>)
				else connectionWindow = STAY_CONNECTED;
   b517e:	2800      	cmp	r0, #0
   b5180:	bf0c      	ite	eq
   b5182:	2205      	moveq	r2, #5
   b5184:	223c      	movne	r2, #60	; 0x3c
   b5186:	701a      	strb	r2, [r3, #0]
				Log.info("Gateway is listening for %d minutes for LoRA messages (%d / %d / %d)", (sysStatus.get_connectivityMode() == 0) ? DEFAULT_LORA_WINDOW : 60, conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b5188:	f002 fa9e 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b518c:	f002 fc2d 	bl	b79ea <_ZNK13sysStatusData20get_connectivityModeEv>
   b5190:	2800      	cmp	r0, #0
   b5192:	bf0c      	ite	eq
   b5194:	2205      	moveq	r2, #5
   b5196:	223c      	movne	r2, #60	; 0x3c
   b5198:	495e      	ldr	r1, [pc, #376]	; (b5314 <loop+0x5a4>)
   b519a:	9205      	str	r2, [sp, #20]
   b519c:	a80e      	add	r0, sp, #56	; 0x38
   b519e:	f006 fde7 	bl	bbd70 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b51a2:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
   b51a6:	9304      	str	r3, [sp, #16]
   b51a8:	f002 fa8e 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b51ac:	f002 fc2c 	bl	b7a08 <_ZNK13sysStatusData12get_openTimeEv>
   b51b0:	4604      	mov	r4, r0
   b51b2:	f002 fa89 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b51b6:	f002 fc2c 	bl	b7a12 <_ZNK13sysStatusData13get_closeTimeEv>
   b51ba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b51be:	e9cd 4000 	strd	r4, r0, [sp]
   b51c2:	495c      	ldr	r1, [pc, #368]	; (b5334 <loop+0x5c4>)
   b51c4:	4859      	ldr	r0, [pc, #356]	; (b532c <loop+0x5bc>)
   b51c6:	f7fe ff81 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b51ca:	a80e      	add	r0, sp, #56	; 0x38
   b51cc:	f006 fb44 	bl	bb858 <_ZN12LocalTimeHMSD1Ev>
				String dayString = conv.timeStr().substring(0, 3);	// Take the first three characters of the timeStr ("Fri", "Sat", "Sun")
   b51d0:	a80a      	add	r0, sp, #40	; 0x28
   b51d2:	f00b fbc5 	bl	c0960 <_ZN6StringD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) {
   b51d6:	f000 fa33 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b51da:	f000 ffed 	bl	b61b8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b51de:	b180      	cbz	r0, b5202 <loop+0x492>
				Log.info("Received LoRA message from node %d", current.get_nodeNumber());
   b51e0:	f002 faac 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b51e4:	f002 fc33 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b51e8:	4953      	ldr	r1, [pc, #332]	; (b5338 <loop+0x5c8>)
   b51ea:	4602      	mov	r2, r0
   b51ec:	484f      	ldr	r0, [pc, #316]	; (b532c <loop+0x5bc>)
   b51ee:	f7fe ff6d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				if (current.get_alertCodeNode() != 1) state = REPORTING_STATE; 				    // Received and acknowledged data from a node - need to report the alert
   b51f2:	f002 faa3 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b51f6:	f002 fc70 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b51fa:	2801      	cmp	r0, #1
   b51fc:	bf1c      	itt	ne
   b51fe:	2307      	movne	r3, #7
   b5200:	702b      	strbne	r3, [r5, #0]
			if (sysStatus.get_connectivityMode() == 1)	{										// If we are in connected mode - we will stay in the LoRA state
   b5202:	f002 fa61 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5206:	f002 fbf0 	bl	b79ea <_ZNK13sysStatusData20get_connectivityModeEv>
   b520a:	2801      	cmp	r0, #1
   b520c:	f040 809a 	bne.w	b5344 <loop+0x5d4>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Connect once an hour even if no messages are received	
   b5210:	f00c ff6e 	bl	c20f0 <_ZN9TimeClass4hourEv>
   b5214:	4604      	mov	r4, r0
   b5216:	f002 fa57 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b521a:	f002 fe48 	bl	b7eae <_ZNK13sysStatusData18get_lastConnectionEv>
   b521e:	f00c fe2d 	bl	c1e7c <_ZN9TimeClass4hourEx>
   b5222:	4284      	cmp	r4, r0
   b5224:	f43f adc4 	beq.w	b4db0 <loop+0x40>
   b5228:	2305      	movs	r3, #5
   b522a:	e5c0      	b.n	b4dae <loop+0x3e>
					Log.info("Checking for inactive spaces...");
   b522c:	4943      	ldr	r1, [pc, #268]	; (b533c <loop+0x5cc>)
   b522e:	483f      	ldr	r0, [pc, #252]	; (b532c <loop+0x5bc>)
   b5230:	f7fe ff4c 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
					JsonDataManager::instance().resetInactiveSpaces(3600);  // Define "inactive" spaces as those where ALL of the nodes in that space have not sent a report in 3600 seconds.
   b5234:	f008 fc6a 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5238:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   b523c:	f00a fa44 	bl	bf6c8 <_ZN15JsonDataManager19resetInactiveSpacesEi>
   b5240:	e6e8      	b.n	b5014 <loop+0x2a4>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) {
   b5242:	2600      	movs	r6, #0
   b5244:	e711      	b.n	b506a <loop+0x2fa>
					Log.info("Resetting all counts - not in open hours. Open hour: %d, Close Hour: %d, Current Hour: %d", sysStatus.get_openTime(), sysStatus.get_closeTime(), conv.getLocalTimeHMS().hour);
   b5246:	f002 fa3f 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b524a:	f002 fbdd 	bl	b7a08 <_ZNK13sysStatusData12get_openTimeEv>
   b524e:	9005      	str	r0, [sp, #20]
   b5250:	f002 fa3a 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5254:	f002 fbdd 	bl	b7a12 <_ZNK13sysStatusData13get_closeTimeEv>
   b5258:	492e      	ldr	r1, [pc, #184]	; (b5314 <loop+0x5a4>)
   b525a:	9004      	str	r0, [sp, #16]
   b525c:	a80e      	add	r0, sp, #56	; 0x38
   b525e:	f006 fd87 	bl	bbd70 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5262:	f99d 103c 	ldrsb.w	r1, [sp, #60]	; 0x3c
   b5266:	4831      	ldr	r0, [pc, #196]	; (b532c <loop+0x5bc>)
   b5268:	9100      	str	r1, [sp, #0]
   b526a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b526e:	4934      	ldr	r1, [pc, #208]	; (b5340 <loop+0x5d0>)
   b5270:	f7fe ff2c 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5274:	a80e      	add	r0, sp, #56	; 0x38
   b5276:	f006 faef 	bl	bb858 <_ZN12LocalTimeHMSD1Ev>
					Room_Occupancy::instance().resetAllCounts();	// reset the room net AND gross counts at end of day for all occupancy nodes and update Ubidots
   b527a:	f008 fbc1 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
   b527e:	f008 fbd1 	bl	bda24 <_ZN14Room_Occupancy14resetAllCountsEv>
					current.set_openHours(false);
   b5282:	f002 fa5b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5286:	4631      	mov	r1, r6
   b5288:	e6f8      	b.n	b507c <loop+0x30c>
					breakLengthHours = (sysStatus.get_weekendBreakLengthMinutes() / 60);
   b528a:	f002 fa1d 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b528e:	f002 fbd4 	bl	b7a3a <_ZNK13sysStatusData29get_weekendBreakLengthMinutesEv>
   b5292:	243c      	movs	r4, #60	; 0x3c
   b5294:	fbb0 f0f4 	udiv	r0, r0, r4
   b5298:	b2c4      	uxtb	r4, r0
				uint8_t breakTime = isWeekend ? sysStatus.get_weekendBreakTime() : sysStatus.get_breakTime();
   b529a:	f002 fa15 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b529e:	f002 fbc7 	bl	b7a30 <_ZNK13sysStatusData20get_weekendBreakTimeEv>
   b52a2:	4606      	mov	r6, r0
				uint16_t breakLengthMinutes = isWeekend ? sysStatus.get_weekendBreakLengthMinutes() : sysStatus.get_breakLengthMinutes();
   b52a4:	f002 fa10 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b52a8:	f002 fbc7 	bl	b7a3a <_ZNK13sysStatusData29get_weekendBreakLengthMinutesEv>
				bool isWeekend = (dayString == "Sat" || dayString == "Sun");	// If it is a weekend, we will use the weekendBreakTime and weekendBreakLengthMinutes instead
   b52ac:	f04f 0801 	mov.w	r8, #1
				uint16_t breakLengthMinutes = isWeekend ? sysStatus.get_weekendBreakLengthMinutes() : sysStatus.get_breakLengthMinutes();
   b52b0:	b287      	uxth	r7, r0
   b52b2:	e713      	b.n	b50dc <loop+0x36c>
   b52b4:	4917      	ldr	r1, [pc, #92]	; (b5314 <loop+0x5a4>)
   b52b6:	a808      	add	r0, sp, #32
   b52b8:	f006 fd5a 	bl	bbd70 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
						conv.getLocalTimeHMS().hour <= (breakTime + breakLengthHours) &&
   b52bc:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b52c0:	1933      	adds	r3, r6, r4
					if (conv.getLocalTimeHMS().hour >= breakTime &&
   b52c2:	429a      	cmp	r2, r3
   b52c4:	dc14      	bgt.n	b52f0 <loop+0x580>
   b52c6:	4913      	ldr	r1, [pc, #76]	; (b5314 <loop+0x5a4>)
   b52c8:	a80e      	add	r0, sp, #56	; 0x38
   b52ca:	f006 fd51 	bl	bbd70 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
						conv.getLocalTimeHMS().minute < (breakLengthMinutes - (breakLengthHours * 60))) {
   b52ce:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   b52d2:	f99d 203d 	ldrsb.w	r2, [sp, #61]	; 0x3d
   b52d6:	fb00 7404 	mla	r4, r0, r4, r7
						conv.getLocalTimeHMS().hour <= (breakTime + breakLengthHours) &&
   b52da:	42a2      	cmp	r2, r4
						conv.getLocalTimeHMS().minute < (breakLengthMinutes - (breakLengthHours * 60))) {
   b52dc:	a80e      	add	r0, sp, #56	; 0x38
						conv.getLocalTimeHMS().hour <= (breakTime + breakLengthHours) &&
   b52de:	bfac      	ite	ge
   b52e0:	2400      	movge	r4, #0
   b52e2:	2401      	movlt	r4, #1
						conv.getLocalTimeHMS().minute < (breakLengthMinutes - (breakLengthHours * 60))) {
   b52e4:	f006 fab8 	bl	bb858 <_ZN12LocalTimeHMSD1Ev>
						conv.getLocalTimeHMS().hour <= (breakTime + breakLengthHours) &&
   b52e8:	a808      	add	r0, sp, #32
   b52ea:	f006 fab5 	bl	bb858 <_ZN12LocalTimeHMSD1Ev>
   b52ee:	e701      	b.n	b50f4 <loop+0x384>
						conv.getLocalTimeHMS().minute < (breakLengthMinutes - (breakLengthHours * 60))) {
   b52f0:	2400      	movs	r4, #0
   b52f2:	e7f9      	b.n	b52e8 <loop+0x578>
						current.set_onBreak(0); // Otherwise, we are still not on break
   b52f4:	f002 fa22 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b52f8:	4621      	mov	r1, r4
   b52fa:	f002 fce9 	bl	b7cd0 <_ZN17currentStatusData11set_onBreakEh>
   b52fe:	e70d      	b.n	b511c <loop+0x3ac>
   b5300:	2003aea8 	.word	0x2003aea8
   b5304:	2003ad6c 	.word	0x2003ad6c
   b5308:	2003adb8 	.word	0x2003adb8
   b530c:	000c6145 	.word	0x000c6145
   b5310:	000c6149 	.word	0x000c6149
   b5314:	2003ae20 	.word	0x2003ae20
   b5318:	000c604d 	.word	0x000c604d
   b531c:	000c6055 	.word	0x000c6055
   b5320:	000c6061 	.word	0x000c6061
   b5324:	000c605d 	.word	0x000c605d
   b5328:	000c614d 	.word	0x000c614d
   b532c:	2003e634 	.word	0x2003e634
   b5330:	2003ad70 	.word	0x2003ad70
   b5334:	000c61aa 	.word	0x000c61aa
   b5338:	000c61ef 	.word	0x000c61ef
   b533c:	000c60cb 	.word	0x000c60cb
   b5340:	000c60eb 	.word	0x000c60eb
   b5344:	f00a fc60 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
			else if ((millis() - startLoRAWindow) > (connectionWindow *60000UL)) { 				// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b5348:	4b9d      	ldr	r3, [pc, #628]	; (b55c0 <loop+0x850>)
   b534a:	681b      	ldr	r3, [r3, #0]
   b534c:	1ac0      	subs	r0, r0, r3
   b534e:	4b9d      	ldr	r3, [pc, #628]	; (b55c4 <loop+0x854>)
   b5350:	781b      	ldrb	r3, [r3, #0]
   b5352:	f64e 2260 	movw	r2, #60000	; 0xea60
   b5356:	4353      	muls	r3, r2
   b5358:	4298      	cmp	r0, r3
   b535a:	f67f ad29 	bls.w	b4db0 <loop+0x40>
				Log.info("Listening window over");
   b535e:	499a      	ldr	r1, [pc, #616]	; (b55c8 <loop+0x858>)
   b5360:	489a      	ldr	r0, [pc, #616]	; (b55cc <loop+0x85c>)
   b5362:	f7fe feb3 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				LoRA_Functions::instance().sleepLoRaRadio();									// Done with the LoRA phase - put the radio to sleep
   b5366:	f000 f96b 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b536a:	f000 f98d 	bl	b5688 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				JsonDataManager::instance().printNodeData(false);
   b536e:	f008 fbcd 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5372:	2100      	movs	r1, #0
   b5374:	f008 ffca 	bl	be30c <_ZN15JsonDataManager13printNodeDataEb>
				nodeDatabase.flush(true);
   b5378:	f002 fa7a 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   b537c:	6803      	ldr	r3, [r0, #0]
   b537e:	2101      	movs	r1, #1
   b5380:	68db      	ldr	r3, [r3, #12]
   b5382:	4798      	blx	r3
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open			
   b5384:	f00c feb4 	bl	c20f0 <_ZN9TimeClass4hourEv>
   b5388:	4604      	mov	r4, r0
   b538a:	f002 f99d 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b538e:	f002 fd8e 	bl	b7eae <_ZNK13sysStatusData18get_lastConnectionEv>
   b5392:	f00c fd73 	bl	c1e7c <_ZN9TimeClass4hourEx>
   b5396:	4284      	cmp	r4, r0
   b5398:	f47f af46 	bne.w	b5228 <loop+0x4b8>
				else if (sysStatus.get_alertCodeGateway() != 0) state = ERROR_STATE;
   b539c:	f002 f994 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b53a0:	f002 fb2d 	bl	b79fe <_ZNK13sysStatusData20get_alertCodeGatewayEv>
   b53a4:	2800      	cmp	r0, #0
   b53a6:	f47f ad01 	bne.w	b4dac <loop+0x3c>
				else state = SLEEPING_STATE;
   b53aa:	2303      	movs	r3, #3
   b53ac:	e4ff      	b.n	b4dae <loop+0x3e>
			publishStateTransition();
   b53ae:	f7fe ffe1 	bl	b4374 <_Z22publishStateTransitionv>
			publishWebhook(current.get_nodeNumber());							// Gateway or node webhook
   b53b2:	f002 f9c3 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b53b6:	f002 fb4a 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b53ba:	f7ff f811 	bl	b43e0 <_Z14publishWebhookh>
			current.set_alertCodeNode(0);										// Zero alert code after send
   b53be:	f002 f9bd 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b53c2:	2100      	movs	r1, #0
   b53c4:	f002 fc78 	bl	b7cb8 <_ZN17currentStatusData17set_alertCodeNodeEh>
			else state = LoRA_STATE;											// Go to the LoRA state to start the next cycle									
   b53c8:	2304      	movs	r3, #4
   b53ca:	e4f0      	b.n	b4dae <loop+0x3e>
			if (state != oldState) {
   b53cc:	4b80      	ldr	r3, [pc, #512]	; (b55d0 <loop+0x860>)
   b53ce:	4e81      	ldr	r6, [pc, #516]	; (b55d4 <loop+0x864>)
   b53d0:	781b      	ldrb	r3, [r3, #0]
   b53d2:	2b05      	cmp	r3, #5
   b53d4:	d02d      	beq.n	b5432 <loop+0x6c2>
				publishStateTransition();  
   b53d6:	f7fe ffcd 	bl	b4374 <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b53da:	f002 f975 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b53de:	f002 fd66 	bl	b7eae <_ZNK13sysStatusData18get_lastConnectionEv>
   b53e2:	f00c fd53 	bl	c1e8c <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b53e6:	497c      	ldr	r1, [pc, #496]	; (b55d8 <loop+0x868>)
   b53e8:	4604      	mov	r4, r0
   b53ea:	a80e      	add	r0, sp, #56	; 0x38
   b53ec:	f006 fcdd 	bl	bbdaa <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b53f0:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   b53f4:	ebb4 0fd3 	cmp.w	r4, r3, lsr #3
   b53f8:	d00d      	beq.n	b5416 <loop+0x6a6>
					sysStatus.set_messageCount(0);									// Reset the message count at midnight
   b53fa:	f002 f965 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b53fe:	2100      	movs	r1, #0
   b5400:	f002 fd20 	bl	b7e44 <_ZN13sysStatusData16set_messageCountEt>
					sysStatus.set_resetCount(0);									// Reset the reset counter
   b5404:	f002 f960 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5408:	2100      	movs	r1, #0
   b540a:	f002 fba4 	bl	b7b56 <_ZN13sysStatusData14set_resetCountEh>
					Log.info("New Day - Resetting everything");
   b540e:	4973      	ldr	r1, [pc, #460]	; (b55dc <loop+0x86c>)
   b5410:	486e      	ldr	r0, [pc, #440]	; (b55cc <loop+0x85c>)
   b5412:	f7fe fe5b 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b5416:	f002 f957 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b541a:	f002 fae1 	bl	b79e0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b541e:	f7fe ffdf 	bl	b43e0 <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5422:	f00a ff61 	bl	c02e8 <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b5426:	b908      	cbnz	r0, b542c <loop+0x6bc>
        spark_cloud_flag_connect();
   b5428:	f00a ff56 	bl	c02d8 <spark_cloud_flag_connect>
   b542c:	f00a fbec 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b5430:	6030      	str	r0, [r6, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5432:	f00a ff59 	bl	c02e8 <spark_cloud_flag_connected>
			if (Particle.connected()) {													// Either we will connect or we will timeout - will try for 10 minutes 
   b5436:	4604      	mov	r4, r0
   b5438:	2800      	cmp	r0, #0
   b543a:	d042      	beq.n	b54c2 <loop+0x752>
				sysStatus.set_lastConnection(Time.now());
   b543c:	f002 f944 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5440:	4604      	mov	r4, r0
   b5442:	f00c fe44 	bl	c20ce <_ZN9TimeClass3nowEv>
   b5446:	4602      	mov	r2, r0
   b5448:	17c3      	asrs	r3, r0, #31
   b544a:	4620      	mov	r0, r4
   b544c:	f002 fd57 	bl	b7efe <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b5450:	f002 f93a 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5454:	4604      	mov	r4, r0
   b5456:	f00a fbd7 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
   b545a:	6831      	ldr	r1, [r6, #0]
   b545c:	1a41      	subs	r1, r0, r1
   b545e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5462:	fbb1 f1f0 	udiv	r1, r1, r0
   b5466:	4620      	mov	r0, r4
   b5468:	b289      	uxth	r1, r1
   b546a:	f002 fcf1 	bl	b7e50 <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b546e:	f00a ff3b 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b5472:	b1f0      	cbz	r0, b54b2 <loop+0x742>
   b5474:	f00a ff38 	bl	c02e8 <spark_cloud_flag_connected>
        if (!connected()) {
   b5478:	b110      	cbz	r0, b5480 <loop+0x710>
        return spark_sync_time(NULL);
   b547a:	2000      	movs	r0, #0
   b547c:	f00a ff4c 	bl	c0318 <spark_sync_time>
					waitUntil(Particle.syncTimeDone);									// Make sure sync is complete
   b5480:	f7fe ff55 	bl	b432e <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b5484:	b910      	cbnz	r0, b548c <loop+0x71c>
            spark_process();
   b5486:	f00a ff1f 	bl	c02c8 <spark_process>
        while (_while() && !_condition()) {
   b548a:	e7f9      	b.n	b5480 <loop+0x710>
   b548c:	f7fe ff4f 	bl	b432e <_ZN10CloudClass12syncTimeDoneEv.isra.0>
						CellularSignal sig = Cellular.RSSI();
   b5490:	4953      	ldr	r1, [pc, #332]	; (b55e0 <loop+0x870>)
   b5492:	a80e      	add	r0, sp, #56	; 0x38
   b5494:	f00d fc38 	bl	c2d08 <_ZN5spark13CellularClass4RSSIEv>
						Log.info("Cellular Signal Strength: %d dBm", (int8_t)sig.getStrength());
   b5498:	a80e      	add	r0, sp, #56	; 0x38
   b549a:	f00c fe9b 	bl	c21d4 <_ZNK14CellularSignal11getStrengthEv>
   b549e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b54a2:	4950      	ldr	r1, [pc, #320]	; (b55e4 <loop+0x874>)
   b54a4:	edcd 7a04 	vstr	s15, [sp, #16]
   b54a8:	f99d 2010 	ldrsb.w	r2, [sp, #16]
   b54ac:	4847      	ldr	r0, [pc, #284]	; (b55cc <loop+0x85c>)
   b54ae:	f7fe fe0d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				if (sysStatus.get_connectivityMode() == 1) state = LoRA_STATE;			// Go back to the LoRA State if we are in connected mode
   b54b2:	f002 f909 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b54b6:	f002 fa98 	bl	b79ea <_ZNK13sysStatusData20get_connectivityModeEv>
   b54ba:	2801      	cmp	r0, #1
   b54bc:	d084      	beq.n	b53c8 <loop+0x658>
				state = DISCONNECTING_STATE;											// Makes sure we turn off the radio
   b54be:	2306      	movs	r3, #6
   b54c0:	e475      	b.n	b4dae <loop+0x3e>
   b54c2:	f00a fba1 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
			else if (millis() - connectingTimeout > 600000L) {
   b54c6:	6833      	ldr	r3, [r6, #0]
   b54c8:	1ac0      	subs	r0, r0, r3
   b54ca:	4b47      	ldr	r3, [pc, #284]	; (b55e8 <loop+0x878>)
   b54cc:	4298      	cmp	r0, r3
   b54ce:	f67f ac6f 	bls.w	b4db0 <loop+0x40>
				Log.info("Failed to connect in 10 minutes - giving up");
   b54d2:	4946      	ldr	r1, [pc, #280]	; (b55ec <loop+0x87c>)
   b54d4:	483d      	ldr	r0, [pc, #244]	; (b55cc <loop+0x85c>)
   b54d6:	f7fe fdf9 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_connectivityMode(0);										// Setting back to zero - must not have coverage here or here at this time
   b54da:	f002 f8f5 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b54de:	4621      	mov	r1, r4
   b54e0:	f002 fb33 	bl	b7b4a <_ZN13sysStatusData20set_connectivityModeEh>
   b54e4:	e7eb      	b.n	b54be <loop+0x74e>
			if (state != oldState) {
   b54e6:	4b3a      	ldr	r3, [pc, #232]	; (b55d0 <loop+0x860>)
   b54e8:	4c41      	ldr	r4, [pc, #260]	; (b55f0 <loop+0x880>)
   b54ea:	781b      	ldrb	r3, [r3, #0]
   b54ec:	2b06      	cmp	r3, #6
   b54ee:	d004      	beq.n	b54fa <loop+0x78a>
				publishStateTransition(); 
   b54f0:	f7fe ff40 	bl	b4374 <_Z22publishStateTransitionv>
   b54f4:	f00a fb88 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b54f8:	6020      	str	r0, [r4, #0]
   b54fa:	f00a fb85 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000UL) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b54fe:	6823      	ldr	r3, [r4, #0]
   b5500:	1ac0      	subs	r0, r0, r3
   b5502:	4b3c      	ldr	r3, [pc, #240]	; (b55f4 <loop+0x884>)
   b5504:	4298      	cmp	r0, r3
   b5506:	f67f ac53 	bls.w	b4db0 <loop+0x40>
   b550a:	f005 f9d1 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b550e:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b5512:	2b00      	cmp	r3, #0
   b5514:	f43f ac4c 	beq.w	b4db0 <loop+0x40>
				if (sysStatus.get_connectivityMode() == 0) Particle_Functions::instance().disconnectFromParticle();
   b5518:	f002 f8d6 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b551c:	f002 fa65 	bl	b79ea <_ZNK13sysStatusData20get_connectivityModeEv>
   b5520:	2800      	cmp	r0, #0
   b5522:	f47f af42 	bne.w	b53aa <loop+0x63a>
   b5526:	f001 f8b9 	bl	b669c <_ZN18Particle_Functions8instanceEv>
   b552a:	f001 f90b 	bl	b6744 <_ZN18Particle_Functions22disconnectFromParticleEv>
   b552e:	e73c      	b.n	b53aa <loop+0x63a>
			static system_tick_t resetTimeout = millis();
   b5530:	4c31      	ldr	r4, [pc, #196]	; (b55f8 <loop+0x888>)
   b5532:	4e32      	ldr	r6, [pc, #200]	; (b55fc <loop+0x88c>)
   b5534:	7823      	ldrb	r3, [r4, #0]
   b5536:	f3bf 8f5b 	dmb	ish
   b553a:	f013 0f01 	tst.w	r3, #1
   b553e:	d109      	bne.n	b5554 <loop+0x7e4>
   b5540:	4620      	mov	r0, r4
   b5542:	f7fe fdbb 	bl	b40bc <__cxa_guard_acquire>
   b5546:	b128      	cbz	r0, b5554 <loop+0x7e4>
   b5548:	f00a fb5e 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
   b554c:	6030      	str	r0, [r6, #0]
   b554e:	4620      	mov	r0, r4
   b5550:	f7fe fdb9 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) {
   b5554:	4b1e      	ldr	r3, [pc, #120]	; (b55d0 <loop+0x860>)
   b5556:	782a      	ldrb	r2, [r5, #0]
   b5558:	781b      	ldrb	r3, [r3, #0]
   b555a:	429a      	cmp	r2, r3
   b555c:	d014      	beq.n	b5588 <loop+0x818>
				publishStateTransition();
   b555e:	f7fe ff09 	bl	b4374 <_Z22publishStateTransitionv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5562:	f00a fec1 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert","Deep power down in 30 seconds", PRIVATE);
   b5566:	b150      	cbz	r0, b557e <loop+0x80e>
   b5568:	f005 f9a2 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   b556c:	2300      	movs	r3, #0
   b556e:	f88d 3000 	strb.w	r3, [sp]
   b5572:	4b23      	ldr	r3, [pc, #140]	; (b5600 <loop+0x890>)
   b5574:	4a23      	ldr	r2, [pc, #140]	; (b5604 <loop+0x894>)
   b5576:	781b      	ldrb	r3, [r3, #0]
   b5578:	4923      	ldr	r1, [pc, #140]	; (b5608 <loop+0x898>)
   b557a:	f7fe fecb 	bl	b4314 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
				sysStatus.set_alertCodeGateway(0);			// Reset this
   b557e:	f002 f8a3 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5582:	2100      	movs	r1, #0
   b5584:	f002 faed 	bl	b7b62 <_ZN13sysStatusData20set_alertCodeGatewayEh>
   b5588:	f00a fb3e 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b558c:	6833      	ldr	r3, [r6, #0]
   b558e:	1ac0      	subs	r0, r0, r3
   b5590:	f247 5330 	movw	r3, #30000	; 0x7530
   b5594:	4298      	cmp	r0, r3
   b5596:	f67f ac0b 	bls.w	b4db0 <loop+0x40>
				Log.info("Deep power down device");
   b559a:	491c      	ldr	r1, [pc, #112]	; (b560c <loop+0x89c>)
   b559c:	480b      	ldr	r0, [pc, #44]	; (b55cc <loop+0x85c>)
   b559e:	f7fe fd95 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				softDelay(2000);
   b55a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b55a6:	f7ff f9f9 	bl	b499c <_Z9softDelaym>
				ab1805.deepPowerDown(); 
   b55aa:	211e      	movs	r1, #30
   b55ac:	4818      	ldr	r0, [pc, #96]	; (b5610 <loop+0x8a0>)
   b55ae:	f003 f985 	bl	b88bc <_ZN6AB180513deepPowerDownEi>
   b55b2:	f7ff bbfd 	b.w	b4db0 <loop+0x40>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b55b6:	f8c3 900c 	str.w	r9, [r3, #12]
                return *this;
   b55ba:	e4a4      	b.n	b4f06 <loop+0x196>
                valid_ = false;
   b55bc:	7526      	strb	r6, [r4, #20]
                return *this;
   b55be:	e4a2      	b.n	b4f06 <loop+0x196>
   b55c0:	2003ad6c 	.word	0x2003ad6c
   b55c4:	2003ad70 	.word	0x2003ad70
   b55c8:	000c6212 	.word	0x000c6212
   b55cc:	2003e634 	.word	0x2003e634
   b55d0:	2003aea8 	.word	0x2003aea8
   b55d4:	2003ad74 	.word	0x2003ad74
   b55d8:	2003ae20 	.word	0x2003ae20
   b55dc:	000c6228 	.word	0x000c6228
   b55e0:	2003e6d8 	.word	0x2003e6d8
   b55e4:	000c6247 	.word	0x000c6247
   b55e8:	000927c0 	.word	0x000927c0
   b55ec:	000c6268 	.word	0x000c6268
   b55f0:	2003ad78 	.word	0x2003ad78
   b55f4:	00015f90 	.word	0x00015f90
   b55f8:	2003ad60 	.word	0x2003ad60
   b55fc:	2003ad68 	.word	0x2003ad68
   b5600:	2003ad64 	.word	0x2003ad64
   b5604:	000c6294 	.word	0x000c6294
   b5608:	000c5f9c 	.word	0x000c5f9c
   b560c:	000c62b2 	.word	0x000c62b2
   b5610:	2003ad7c 	.word	0x2003ad7c

000b5614 <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b5614:	4770      	bx	lr

000b5616 <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b5616:	b510      	push	{r4, lr}
}
   b5618:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b561a:	4604      	mov	r4, r0
}
   b561c:	f7fe fd3f 	bl	b409e <_ZdlPvj>
   b5620:	4620      	mov	r0, r4
   b5622:	bd10      	pop	{r4, pc}

000b5624 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b5624:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   b5626:	6804      	ldr	r4, [r0, #0]
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b5628:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   b562c:	f88d 3000 	strb.w	r3, [sp]
   b5630:	f88d 5004 	strb.w	r5, [sp, #4]
   b5634:	6824      	ldr	r4, [r4, #0]
   b5636:	233c      	movs	r3, #60	; 0x3c
   b5638:	47a0      	blx	r4
	}
   b563a:	b003      	add	sp, #12
   b563c:	bd30      	pop	{r4, r5, pc}
	...

000b5640 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b5640:	b510      	push	{r4, lr}
    if (!_instance) {
   b5642:	4c06      	ldr	r4, [pc, #24]	; (b565c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b5644:	6823      	ldr	r3, [r4, #0]
   b5646:	b933      	cbnz	r3, b5656 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b5648:	2004      	movs	r0, #4
   b564a:	f7fe fd24 	bl	b4096 <_Znwj>
   b564e:	b108      	cbz	r0, b5654 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b5650:	4b03      	ldr	r3, [pc, #12]	; (b5660 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b5652:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b5654:	6020      	str	r0, [r4, #0]
}
   b5656:	6820      	ldr	r0, [r4, #0]
   b5658:	bd10      	pop	{r4, pc}
   b565a:	bf00      	nop
   b565c:	2003aeb0 	.word	0x2003aeb0
   b5660:	000c69fc 	.word	0x000c69fc

000b5664 <_ZN14LoRA_Functions4loopEv>:
	return true;
}

void LoRA_Functions::loop() {
												
}
   b5664:	4770      	bx	lr
	...

000b5668 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b5668:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b566a:	4c06      	ldr	r4, [pc, #24]	; (b5684 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b566c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b566e:	f10d 0203 	add.w	r2, sp, #3
   b5672:	a901      	add	r1, sp, #4
   b5674:	4620      	mov	r0, r4
   b5676:	f007 fe2d 	bl	bd2d4 <_ZN17RHEncryptedDriver4recvEPhS0_>
   b567a:	2800      	cmp	r0, #0
   b567c:	d1f7      	bne.n	b566e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b567e:	b040      	add	sp, #256	; 0x100
   b5680:	bd10      	pop	{r4, pc}
   b5682:	bf00      	nop
   b5684:	2003afb0 	.word	0x2003afb0

000b5688 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:
    /// (if supported). May be overridden by specific drivers to initialte sleep mode.
    /// If successful, the transport will stay in sleep mode until woken by 
    /// changing mode it idle, transmit or receive (eg by calling send(), recv(), available() etc)
    /// \return true if sleep mode is supported by transport hardware and the RadioHead driver, and if sleep mode
    ///         was successfully entered. If sleep mode is not suported, return false.
    virtual bool    sleep() { return _driver.sleep();};
   b5688:	4b02      	ldr	r3, [pc, #8]	; (b5694 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0xc>)
   b568a:	6a18      	ldr	r0, [r3, #32]
   b568c:	6803      	ldr	r3, [r0, #0]
   b568e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b5690:	4718      	bx	r3
   b5692:	bf00      	nop
   b5694:	2003afb0 	.word	0x2003afb0

000b5698 <_ZN14LoRA_Functions15initializeRadioEv>:
void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
}

bool LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b5698:	4b18      	ldr	r3, [pc, #96]	; (b56fc <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
bool LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b569a:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b569c:	881c      	ldrh	r4, [r3, #0]
   b569e:	2100      	movs	r1, #0
   b56a0:	4620      	mov	r0, r4
   b56a2:	f00d ff98 	bl	c35d6 <digitalWrite>
	delay(10);
   b56a6:	200a      	movs	r0, #10
   b56a8:	f00c fd50 	bl	c214c <delay>
	digitalWrite(RFM95_RST,HIGH);
   b56ac:	2101      	movs	r1, #1
   b56ae:	4620      	mov	r0, r4
   b56b0:	f00d ff91 	bl	c35d6 <digitalWrite>
	delay(10);
   b56b4:	200a      	movs	r0, #10
   b56b6:	f00c fd49 	bl	c214c <delay>

	if (!manager.init()) {
   b56ba:	4811      	ldr	r0, [pc, #68]	; (b5700 <_ZN14LoRA_Functions15initializeRadioEv+0x68>)
   b56bc:	f006 fef1 	bl	bc4a2 <_ZN8RHRouter4initEv>
   b56c0:	4604      	mov	r4, r0
   b56c2:	b928      	cbnz	r0, b56d0 <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b56c4:	490f      	ldr	r1, [pc, #60]	; (b5704 <_ZN14LoRA_Functions15initializeRadioEv+0x6c>)
   b56c6:	4810      	ldr	r0, [pc, #64]	; (b5708 <_ZN14LoRA_Functions15initializeRadioEv+0x70>)
   b56c8:	f7fe fd00 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	rf95.setModemConfig(RH_RF95::Bw500Cr45Sf128);	 // Optimized for fast transmission and short range - MAFC
	//driver.setModemConfig(RH_RF95::Bw125Cr48Sf4096);	// This optimized the radio for long range - https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html
	rf95.setLowDatarate();						// https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html#a8e2df6a6d2cb192b13bd572a7005da67
	manager.setTimeout(1000);						// 200mSec is the default - may need to extend once we play with other settings on the modem - https://www.airspayce.com/mikem/arduino/RadioHead/classRHReliableDatagram.html
return true;
}
   b56cc:	4620      	mov	r0, r4
   b56ce:	bd10      	pop	{r4, pc}
	rf95.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b56d0:	490e      	ldr	r1, [pc, #56]	; (b570c <_ZN14LoRA_Functions15initializeRadioEv+0x74>)
   b56d2:	480f      	ldr	r0, [pc, #60]	; (b5710 <_ZN14LoRA_Functions15initializeRadioEv+0x78>)
   b56d4:	f007 fad4 	bl	bcc80 <_ZN7RH_RF9512setFrequencyEm>
	rf95.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b56d8:	2200      	movs	r2, #0
   b56da:	480d      	ldr	r0, [pc, #52]	; (b5710 <_ZN14LoRA_Functions15initializeRadioEv+0x78>)
   b56dc:	2117      	movs	r1, #23
   b56de:	f007 fc41 	bl	bcf64 <_ZN7RH_RF9510setTxPowerEab>
	rf95.setModemConfig(RH_RF95::Bw500Cr45Sf128);	 // Optimized for fast transmission and short range - MAFC
   b56e2:	2101      	movs	r1, #1
   b56e4:	480a      	ldr	r0, [pc, #40]	; (b5710 <_ZN14LoRA_Functions15initializeRadioEv+0x78>)
   b56e6:	f007 fc69 	bl	bcfbc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
	rf95.setLowDatarate();						// https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html#a8e2df6a6d2cb192b13bd572a7005da67
   b56ea:	4809      	ldr	r0, [pc, #36]	; (b5710 <_ZN14LoRA_Functions15initializeRadioEv+0x78>)
   b56ec:	f007 fd14 	bl	bd118 <_ZN7RH_RF9514setLowDatarateEv>
	manager.setTimeout(1000);						// 200mSec is the default - may need to extend once we play with other settings on the modem - https://www.airspayce.com/mikem/arduino/RadioHead/classRHReliableDatagram.html
   b56f0:	4808      	ldr	r0, [pc, #32]	; (b5714 <_ZN14LoRA_Functions15initializeRadioEv+0x7c>)
   b56f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b56f6:	f007 f8f2 	bl	bc8de <_ZN18RHReliableDatagram10setTimeoutEt>
return true;
   b56fa:	e7e7      	b.n	b56cc <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b56fc:	000c6a26 	.word	0x000c6a26
   b5700:	2003afe4 	.word	0x2003afe4
   b5704:	000c62e5 	.word	0x000c62e5
   b5708:	2003e634 	.word	0x2003e634
   b570c:	00016a0c 	.word	0x00016a0c
   b5710:	2003b2b8 	.word	0x2003b2b8
   b5714:	2003afe8 	.word	0x2003afe8

000b5718 <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b5718:	b510      	push	{r4, lr}
   b571a:	b086      	sub	sp, #24
   b571c:	460c      	mov	r4, r1
	LoRA_Functions::instance().initializeRadio();
   b571e:	f7ff ff8f 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b5722:	f7ff ffb9 	bl	b5698 <_ZN14LoRA_Functions15initializeRadioEv>
	if (gatewayID == true) {
   b5726:	b1bc      	cbz	r4, b5758 <_ZN14LoRA_Functions5setupEb+0x40>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b5728:	f001 ffce 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b572c:	2100      	movs	r1, #0
   b572e:	f002 fa00 	bl	b7b32 <_ZN13sysStatusData14set_nodeNumberEh>
        return spark_deviceID();
   b5732:	a802      	add	r0, sp, #8
   b5734:	f00a fde0 	bl	c02f8 <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway (address %d) with a deviceID of %s", GATEWAY_ADDRESS, System.deviceID().c_str());
   b5738:	9b02      	ldr	r3, [sp, #8]
   b573a:	491f      	ldr	r1, [pc, #124]	; (b57b8 <_ZN14LoRA_Functions5setupEb+0xa0>)
   b573c:	2200      	movs	r2, #0
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b573e:	481f      	ldr	r0, [pc, #124]	; (b57bc <_ZN14LoRA_Functions5setupEb+0xa4>)
   b5740:	f7fe fcc4 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5744:	a802      	add	r0, sp, #8
   b5746:	f00b f90b 	bl	c0960 <_ZN6StringD1Ev>
	JsonDataManager::instance().setup();
   b574a:	f008 f9df 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b574e:	f008 f9ef 	bl	bdb30 <_ZN15JsonDataManager5setupEv>
}
   b5752:	2001      	movs	r0, #1
   b5754:	b006      	add	sp, #24
   b5756:	bd10      	pop	{r4, pc}
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 255) {
   b5758:	f001 ffb6 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b575c:	f002 f940 	bl	b79e0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5760:	b1b0      	cbz	r0, b5790 <_ZN14LoRA_Functions5setupEb+0x78>
   b5762:	f001 ffb1 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5766:	f002 f93b 	bl	b79e0 <_ZNK13sysStatusData14get_nodeNumberEv>
		manager.setThisAddress(sysStatus.get_nodeNumber());	// Node - use the Node address in valid range from memory
   b576a:	f001 ffad 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b576e:	f002 f937 	bl	b79e0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5772:	4601      	mov	r1, r0
   b5774:	4812      	ldr	r0, [pc, #72]	; (b57c0 <_ZN14LoRA_Functions5setupEb+0xa8>)
   b5776:	f007 f842 	bl	bc7fe <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b577a:	4811      	ldr	r0, [pc, #68]	; (b57c0 <_ZN14LoRA_Functions5setupEb+0xa8>)
   b577c:	f007 f825 	bl	bc7ca <_ZN10RHDatagram11thisAddressEv>
   b5780:	9001      	str	r0, [sp, #4]
   b5782:	a802      	add	r0, sp, #8
   b5784:	f00a fdb8 	bl	c02f8 <spark_deviceID>
   b5788:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b578c:	490d      	ldr	r1, [pc, #52]	; (b57c4 <_ZN14LoRA_Functions5setupEb+0xac>)
   b578e:	e7d6      	b.n	b573e <_ZN14LoRA_Functions5setupEb+0x26>
		sysStatus.set_nodeNumber(255);
   b5790:	f001 ff9a 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5794:	21ff      	movs	r1, #255	; 0xff
   b5796:	f002 f9cc 	bl	b7b32 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(255);
   b579a:	21ff      	movs	r1, #255	; 0xff
   b579c:	4808      	ldr	r0, [pc, #32]	; (b57c0 <_ZN14LoRA_Functions5setupEb+0xa8>)
   b579e:	f007 f82e 	bl	bc7fe <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b57a2:	4807      	ldr	r0, [pc, #28]	; (b57c0 <_ZN14LoRA_Functions5setupEb+0xa8>)
   b57a4:	f007 f811 	bl	bc7ca <_ZN10RHDatagram11thisAddressEv>
   b57a8:	9001      	str	r0, [sp, #4]
   b57aa:	a802      	add	r0, sp, #8
   b57ac:	f00a fda4 	bl	c02f8 <spark_deviceID>
   b57b0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b57b4:	4904      	ldr	r1, [pc, #16]	; (b57c8 <_ZN14LoRA_Functions5setupEb+0xb0>)
   b57b6:	e7c2      	b.n	b573e <_ZN14LoRA_Functions5setupEb+0x26>
   b57b8:	000c62f1 	.word	0x000c62f1
   b57bc:	2003e634 	.word	0x2003e634
   b57c0:	2003afe8 	.word	0x2003afe8
   b57c4:	000c6338 	.word	0x000c6338
   b57c8:	000c636f 	.word	0x000c636f

000b57cc <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false;

}

// These are the receive and respond messages for data reports
bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b57cc:	b530      	push	{r4, r5, lr}
	// buf[0] - buf[1] Magic number processed above
	// buf[2] - nodeNumber processed above
	// buf[3] - buf[4] is token - processed above
	// buf[5] - Sensor type - processed above
	// buf[6] - buf[9] is the unique ID of the node - processed above
	current.set_payload1(buf[10]);
   b57ce:	4c6e      	ldr	r4, [pc, #440]	; (b5988 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x1bc>)
bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b57d0:	b085      	sub	sp, #20
	current.set_payload1(buf[10]);
   b57d2:	f001 ffb3 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b57d6:	7aa1      	ldrb	r1, [r4, #10]
   b57d8:	f002 fa2c 	bl	b7c34 <_ZN17currentStatusData12set_payload1Eh>
	current.set_payload2(buf[11]);
   b57dc:	f001 ffae 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b57e0:	7ae1      	ldrb	r1, [r4, #11]
   b57e2:	f002 fa2d 	bl	b7c40 <_ZN17currentStatusData12set_payload2Eh>
	current.set_payload3(buf[12]);
   b57e6:	f001 ffa9 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b57ea:	7b21      	ldrb	r1, [r4, #12]
   b57ec:	f002 fa2e 	bl	b7c4c <_ZN17currentStatusData12set_payload3Eh>
	current.set_payload4(buf[13]);
   b57f0:	f001 ffa4 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b57f4:	7b61      	ldrb	r1, [r4, #13]
   b57f6:	f002 fa2f 	bl	b7c58 <_ZN17currentStatusData12set_payload4Eh>
	current.set_payload5(buf[14]);
   b57fa:	f001 ff9f 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b57fe:	7ba1      	ldrb	r1, [r4, #14]
   b5800:	f002 fa30 	bl	b7c64 <_ZN17currentStatusData12set_payload5Eh>
	current.set_payload6(buf[15]);
   b5804:	f001 ff9a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5808:	7be1      	ldrb	r1, [r4, #15]
   b580a:	f002 fa31 	bl	b7c70 <_ZN17currentStatusData12set_payload6Eh>
	current.set_payload7(buf[16]);
   b580e:	f001 ff95 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5812:	7c21      	ldrb	r1, [r4, #16]
   b5814:	f002 fa32 	bl	b7c7c <_ZN17currentStatusData12set_payload7Eh>
	current.set_payload8(buf[17]);
   b5818:	f001 ff90 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b581c:	7c61      	ldrb	r1, [r4, #17]
   b581e:	f002 fa33 	bl	b7c88 <_ZN17currentStatusData12set_payload8Eh>
	// Then, we will get the rest of the data from the payload
	current.set_internalTempC(buf[18]);
   b5822:	f001 ff8b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5826:	7ca1      	ldrb	r1, [r4, #18]
   b5828:	f002 fa34 	bl	b7c94 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[19]);
   b582c:	f001 ff86 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5830:	f994 1013 	ldrsb.w	r1, [r4, #19]
   b5834:	f001 ffe3 	bl	b77fe <_ZN17currentStatusData17set_stateOfChargeEa>
	current.set_batteryState(buf[20]);
   b5838:	f001 ff80 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b583c:	7d21      	ldrb	r1, [r4, #20]
   b583e:	f002 fa2f 	bl	b7ca0 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[21]);
   b5842:	f001 ff7b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5846:	7d61      	ldrb	r1, [r4, #21]
   b5848:	f002 fa30 	bl	b7cac <_ZN17currentStatusData14set_resetCountEh>
	current.set_RSSI(buf[22] << 8 | buf[23]);		// These values are from the node based on the last successful data report
   b584c:	f001 ff76 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5850:	8ae1      	ldrh	r1, [r4, #22]
   b5852:	bac9      	revsh	r1, r1
   b5854:	f002 fbfc 	bl	b8050 <_ZN17currentStatusData8set_RSSIEs>
	current.set_SNR(buf[24] << 8 | buf[25]);
   b5858:	f001 ff70 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b585c:	8b21      	ldrh	r1, [r4, #24]
   b585e:	bac9      	revsh	r1, r1
   b5860:	f002 fbfc 	bl	b805c <_ZN17currentStatusData7set_SNREs>
	current.set_retryCount(buf[26]);
   b5864:	f001 ff6a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5868:	7ea1      	ldrb	r1, [r4, #26]
   b586a:	f002 fa3d 	bl	b7ce8 <_ZN17currentStatusData14set_retryCountEh>
	current.set_retransmissionDelay(buf[27]);
   b586e:	f001 ff65 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5872:	7ee1      	ldrb	r1, [r4, #27]
   b5874:	f002 fa3e 	bl	b7cf4 <_ZN17currentStatusData23set_retransmissionDelayEh>

	// Log.info("Data recieved from the report: sensorType %d, temp %d, battery %d, batteryState %d, resets %d, message count %d, RSSI %d, SNR %d", current.get_sensorType(), current.get_internalTempC(), current.get_stateOfCharge(), current.get_batteryState(), current.get_resetCount(), sysStatus.get_messageCount(), current.get_RSSI(), current.get_SNR());
	
	// Type differentiated JSON updates 
	switch (current.get_sensorType()) {
   b5878:	f001 ff60 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b587c:	f002 f8f1 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5880:	2813      	cmp	r0, #19
   b5882:	d81a      	bhi.n	b58ba <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xee>
   b5884:	2809      	cmp	r0, #9
   b5886:	d81c      	bhi.n	b58c2 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xf6>
   b5888:	3801      	subs	r0, #1
   b588a:	b2c0      	uxtb	r0, r0
   b588c:	2808      	cmp	r0, #8
   b588e:	d862      	bhi.n	b5956 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x18a>
			Log.info("Unknown sensor type in decipherDataReportGateway %d",current.get_sensorType());
			if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "Unknown sensor type in decipherDataReportGateway", PRIVATE);
		} break;
	}

	JsonDataManager::instance().setLastReport(current.get_nodeNumber(), (int)Time.now()); // save the timestamp of this report in the JSON
   b5890:	f008 f93c 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5894:	4604      	mov	r4, r0
   b5896:	f001 ff51 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b589a:	f002 f8d8 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b589e:	9002      	str	r0, [sp, #8]
   b58a0:	f00c fc15 	bl	c20ce <_ZN9TimeClass3nowEv>
   b58a4:	9902      	ldr	r1, [sp, #8]
   b58a6:	4602      	mov	r2, r0
   b58a8:	4620      	mov	r0, r4
   b58aa:	f009 fccb 	bl	bf244 <_ZN15JsonDataManager13setLastReportEii>

	lora_state = DATA_ACK;		// Prepare to respond
   b58ae:	4b37      	ldr	r3, [pc, #220]	; (b598c <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x1c0>)
   b58b0:	2204      	movs	r2, #4
	return true;
}
   b58b2:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b58b4:	701a      	strb	r2, [r3, #0]
}
   b58b6:	b005      	add	sp, #20
   b58b8:	bd30      	pop	{r4, r5, pc}
	switch (current.get_sensorType()) {
   b58ba:	3814      	subs	r0, #20
   b58bc:	b2c0      	uxtb	r0, r0
   b58be:	2809      	cmp	r0, #9
   b58c0:	e7e5      	b.n	b588e <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xc2>
			if(JsonDataManager::instance().getAlertCode(current.get_nodeNumber()) == 0) {  // Don't update the node's occupancy counts if we have a queued alert, we should resolve that alert first. 
   b58c2:	f008 f923 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b58c6:	4604      	mov	r4, r0
   b58c8:	f001 ff38 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b58cc:	f002 f8bf 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b58d0:	4601      	mov	r1, r0
   b58d2:	4620      	mov	r0, r4
   b58d4:	f008 f9a4 	bl	bdc20 <_ZN15JsonDataManager12getAlertCodeEi>
   b58d8:	2800      	cmp	r0, #0
   b58da:	d1d9      	bne.n	b5890 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xc4>
				JsonDataManager::instance().setJsonData1(current.get_nodeNumber(), current.get_sensorType(), static_cast<int16_t>(current.get_payload3() <<8 | current.get_payload4()));
   b58dc:	f008 f916 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b58e0:	4604      	mov	r4, r0
   b58e2:	f001 ff2b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b58e6:	f002 f8b2 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b58ea:	9003      	str	r0, [sp, #12]
   b58ec:	f001 ff26 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b58f0:	f002 f8b7 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b58f4:	9002      	str	r0, [sp, #8]
   b58f6:	f001 ff21 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b58fa:	f002 f8c1 	bl	b7a80 <_ZNK17currentStatusData12get_payload3Ev>
   b58fe:	4605      	mov	r5, r0
   b5900:	f001 ff1c 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5904:	f002 f8c1 	bl	b7a8a <_ZNK17currentStatusData12get_payload4Ev>
   b5908:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b590c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b5910:	b203      	sxth	r3, r0
   b5912:	4620      	mov	r0, r4
   b5914:	f009 f8c4 	bl	beaa0 <_ZN15JsonDataManager12setJsonData1Eiii>
				JsonDataManager::instance().setJsonData2(current.get_nodeNumber(), current.get_sensorType(), static_cast<int16_t>(current.get_payload1() <<8 | current.get_payload2()));
   b5918:	f008 f8f8 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b591c:	4604      	mov	r4, r0
   b591e:	f001 ff0d 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5922:	f002 f894 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5926:	9003      	str	r0, [sp, #12]
   b5928:	f001 ff08 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b592c:	f002 f899 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5930:	9002      	str	r0, [sp, #8]
   b5932:	f001 ff03 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5936:	f002 f899 	bl	b7a6c <_ZNK17currentStatusData12get_payload1Ev>
   b593a:	4605      	mov	r5, r0
   b593c:	f001 fefe 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5940:	f002 f899 	bl	b7a76 <_ZNK17currentStatusData12get_payload2Ev>
   b5944:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b5948:	b203      	sxth	r3, r0
   b594a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b594e:	4620      	mov	r0, r4
   b5950:	f009 fa0a 	bl	bed68 <_ZN15JsonDataManager12setJsonData2Eiii>
   b5954:	e79c      	b.n	b5890 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xc4>
			Log.info("Unknown sensor type in decipherDataReportGateway %d",current.get_sensorType());
   b5956:	f001 fef1 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b595a:	f002 f882 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b595e:	490c      	ldr	r1, [pc, #48]	; (b5990 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x1c4>)
   b5960:	4602      	mov	r2, r0
   b5962:	480c      	ldr	r0, [pc, #48]	; (b5994 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x1c8>)
   b5964:	f7fe fbb2 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5968:	f00a fcbe 	bl	c02e8 <spark_cloud_flag_connected>
			if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "Unknown sensor type in decipherDataReportGateway", PRIVATE);
   b596c:	2800      	cmp	r0, #0
   b596e:	d08f      	beq.n	b5890 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xc4>
   b5970:	f004 ff9e 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b5974:	2300      	movs	r3, #0
   b5976:	f88d 3000 	strb.w	r3, [sp]
   b597a:	4b07      	ldr	r3, [pc, #28]	; (b5998 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x1cc>)
   b597c:	4a07      	ldr	r2, [pc, #28]	; (b599c <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x1d0>)
   b597e:	781b      	ldrb	r3, [r3, #0]
   b5980:	4907      	ldr	r1, [pc, #28]	; (b59a0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x1d4>)
   b5982:	f7ff fe4f 	bl	b5624 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b5986:	e783      	b.n	b5890 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xc4>
   b5988:	2003aeb4 	.word	0x2003aeb4
   b598c:	2003aeab 	.word	0x2003aeab
   b5990:	000c63b6 	.word	0x000c63b6
   b5994:	2003e634 	.word	0x2003e634
   b5998:	2003aeac 	.word	0x2003aeac
   b599c:	000c63ea 	.word	0x000c63ea
   b59a0:	000c5f9c 	.word	0x000c5f9c

000b59a4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:

bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message 
   b59a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b59a6:	b0a7      	sub	sp, #156	; 0x9c
	char messageString[128];

	if(current.get_onBreak()){ // if we are on break, respond based on sensor type
   b59a8:	f001 fec8 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b59ac:	f002 f89f 	bl	b7aee <_ZNK17currentStatusData11get_onBreakEv>
   b59b0:	b170      	cbz	r0, b59d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c>
		switch (current.get_sensorType()) {
   b59b2:	f001 fec3 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b59b6:	f002 f854 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b59ba:	2813      	cmp	r0, #19
   b59bc:	f200 80f2 	bhi.w	b5ba4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x200>
   b59c0:	2809      	cmp	r0, #9
   b59c2:	f200 80f3 	bhi.w	b5bac <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x208>
   b59c6:	3801      	subs	r0, #1
   b59c8:	b2c0      	uxtb	r0, r0
   b59ca:	2808      	cmp	r0, #8
   b59cc:	f200 810c 	bhi.w	b5be8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x244>
		}
	}

	// buf[0] - buf[1] is magic number - processed above
	// buf[2] is nodeNumber - processed above
	buf[3] = highByte(current.get_token());			// Token - May have changed in the listening function above
   b59d0:	f001 feb4 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b59d4:	f002 fa13 	bl	b7dfe <_ZNK17currentStatusData9get_tokenEv>
   b59d8:	4ca4      	ldr	r4, [pc, #656]	; (b5c6c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c8>)
   b59da:	0a00      	lsrs	r0, r0, #8
   b59dc:	70e0      	strb	r0, [r4, #3]
	buf[4] = lowByte(current.get_token());			// Token - so I can trust you
   b59de:	f001 fead 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b59e2:	f002 fa0c 	bl	b7dfe <_ZNK17currentStatusData9get_tokenEv>
   b59e6:	7120      	strb	r0, [r4, #4]
	uint32_t currentTime = Time.now();
   b59e8:	f00c fb71 	bl	c20ce <_ZN9TimeClass3nowEv>
	buf[5] = (uint8_t)(currentTime >> 24); 			// Fourth byte - current time
   b59ec:	0e03      	lsrs	r3, r0, #24
   b59ee:	7163      	strb	r3, [r4, #5]
	buf[6] = (uint8_t)(currentTime >> 16); 			// Third byte
   b59f0:	0c03      	lsrs	r3, r0, #16
   b59f2:	71a3      	strb	r3, [r4, #6]
	buf[7] = (uint8_t)(currentTime >> 8);  			// Second byte
   b59f4:	0a03      	lsrs	r3, r0, #8
   b59f6:	71e3      	strb	r3, [r4, #7]
	buf[8] = (uint8_t)(currentTime);  	
   b59f8:	7220      	strb	r0, [r4, #8]

	// Here we calculate the seconds to the next report
	buf[9] = highByte(sysStatus.get_frequencySeconds());	// Frequency of reports set by the gateway
   b59fa:	f001 fe65 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b59fe:	f002 f99b 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b5a02:	0a00      	lsrs	r0, r0, #8
   b5a04:	7260      	strb	r0, [r4, #9]
	buf[10] = lowByte(sysStatus.get_frequencySeconds());
   b5a06:	f001 fe5f 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5a0a:	f002 f995 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b5a0e:	72a0      	strb	r0, [r4, #10]
	Log.info("Frequency of reports is %d seconds", sysStatus.get_frequencySeconds());	
   b5a10:	f001 fe5a 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5a14:	f002 f990 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b5a18:	4995      	ldr	r1, [pc, #596]	; (b5c70 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2cc>)
   b5a1a:	4602      	mov	r2, r0
   b5a1c:	4895      	ldr	r0, [pc, #596]	; (b5c74 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b5a1e:	f7fe fb55 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>

	// Next we have to determine if there is an alert code to send
	// If the node is not configured, we will set an alert code of 1
	if (current.get_alertCodeNode() == 255 || current.get_alertCodeNode() == 1) {
   b5a22:	f001 fe8b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5a26:	f002 f858 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5a2a:	28ff      	cmp	r0, #255	; 0xff
   b5a2c:	f040 80f6 	bne.w	b5c1c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x278>
		Log.info("Node %d is not configured so setting alert code to 1 - again!", current.get_nodeNumber());
   b5a30:	f001 fe84 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5a34:	f002 f80b 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5a38:	498f      	ldr	r1, [pc, #572]	; (b5c78 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d4>)
   b5a3a:	4602      	mov	r2, r0
   b5a3c:	488d      	ldr	r0, [pc, #564]	; (b5c74 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b5a3e:	f7fe fb45 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertCodeNode(1);
   b5a42:	f001 fe7b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5a46:	2101      	movs	r1, #1
	} else {
		// If the node is configured, we will check for an alert code in the nodeID database
		current.set_alertCodeNode(JsonDataManager::instance().getAlertCode(current.get_nodeNumber()));		// Get the alert code from the nodeID database if one is not already set
   b5a48:	f002 f936 	bl	b7cb8 <_ZN17currentStatusData17set_alertCodeNodeEh>
	}

	Log.info("In the data message ack composition, alert code for node %d is %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b5a4c:	f001 fe76 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5a50:	f001 fffd 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5a54:	9005      	str	r0, [sp, #20]
   b5a56:	f001 fe71 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5a5a:	f002 f83e 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5a5e:	9a05      	ldr	r2, [sp, #20]
   b5a60:	4986      	ldr	r1, [pc, #536]	; (b5c7c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d8>)
   b5a62:	4603      	mov	r3, r0
   b5a64:	4883      	ldr	r0, [pc, #524]	; (b5c74 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b5a66:	f7fe fb31 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	buf[11] = current.get_alertCodeNode();	    // Send alert code to the node
   b5a6a:	f001 fe67 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5a6e:	f002 f834 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5a72:	72e0      	strb	r0, [r4, #11]

	uint16_t alertContext = JsonDataManager::instance().getAlertContext(current.get_nodeNumber()); // Set the alert context if any
   b5a74:	f008 f84a 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5a78:	4605      	mov	r5, r0
   b5a7a:	f001 fe5f 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5a7e:	f001 ffe6 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5a82:	4601      	mov	r1, r0
   b5a84:	4628      	mov	r0, r5
   b5a86:	f008 f905 	bl	bdc94 <_ZN15JsonDataManager15getAlertContextEi>
	buf[12] = highByte(alertContext);
   b5a8a:	0a03      	lsrs	r3, r0, #8
   b5a8c:	7323      	strb	r3, [r4, #12]
	buf[13] = lowByte(alertContext);
   b5a8e:	7360      	strb	r0, [r4, #13]

	buf[14] = current.get_sensorType();			// Set the sensor type - this is the sensor type reported by the node
   b5a90:	f001 fe54 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5a94:	f001 ffe5 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
	buf[15] = 0;
   b5a98:	2300      	movs	r3, #0
   b5a9a:	73e3      	strb	r3, [r4, #15]
	buf[16] = 0;								// Will be over-written if needed
   b5a9c:	7423      	strb	r3, [r4, #16]
	buf[14] = current.get_sensorType();			// Set the sensor type - this is the sensor type reported by the node
   b5a9e:	73a0      	strb	r0, [r4, #14]

	current.flush(true);							// Save values reported by the nodes
   b5aa0:	f001 fe4c 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5aa4:	6803      	ldr	r3, [r0, #0]
   b5aa6:	2101      	movs	r1, #1
   b5aa8:	68db      	ldr	r3, [r3, #12]
   b5aaa:	4798      	blx	r3
	digitalWrite(BLUE_LED,HIGH);			       	// Sending data
   b5aac:	4b74      	ldr	r3, [pc, #464]	; (b5c80 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2dc>)
   b5aae:	881e      	ldrh	r6, [r3, #0]
   b5ab0:	2101      	movs	r1, #1
   b5ab2:	4630      	mov	r0, r6
   b5ab4:	f00d fd8f 	bl	c35d6 <digitalWrite>

	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b5ab8:	f001 fe40 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5abc:	f001 ffcc 	bl	b7a58 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b5ac0:	2800      	cmp	r0, #0
   b5ac2:	f040 80c3 	bne.w	b5c4c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2a8>
   b5ac6:	f001 fe39 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5aca:	f001 ffc0 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>

	if (manager.sendtoWait(buf, 16, nodeAddress, DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b5ace:	2304      	movs	r3, #4
   b5ad0:	9300      	str	r3, [sp, #0]
   b5ad2:	4966      	ldr	r1, [pc, #408]	; (b5c6c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c8>)
   b5ad4:	4603      	mov	r3, r0
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b5ad6:	4604      	mov	r4, r0
	if (manager.sendtoWait(buf, 16, nodeAddress, DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b5ad8:	2210      	movs	r2, #16
   b5ada:	486a      	ldr	r0, [pc, #424]	; (b5c84 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e0>)
   b5adc:	f007 fe38 	bl	bd750 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5ae0:	4605      	mov	r5, r0
   b5ae2:	2800      	cmp	r0, #0
   b5ae4:	f040 80b7 	bne.w	b5c56 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b2>
		digitalWrite(BLUE_LED,LOW);
   b5ae8:	4601      	mov	r1, r0
   b5aea:	4630      	mov	r0, r6
   b5aec:	f00d fd73 	bl	c35d6 <digitalWrite>

		snprintf(messageString,sizeof(messageString),"Node %d data report %d acknowledged with alert %d, and RSSI / SNR of %d / %d", current.get_nodeNumber(), sysStatus.get_messageCount(), current.get_alertCodeNode(), current.get_RSSI(), current.get_SNR());
   b5af0:	f001 fe24 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5af4:	f001 ffab 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5af8:	9005      	str	r0, [sp, #20]
   b5afa:	f001 fde5 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5afe:	f002 f916 	bl	b7d2e <_ZNK13sysStatusData16get_messageCountEv>
   b5b02:	4604      	mov	r4, r0
   b5b04:	f001 fe1a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5b08:	f001 ffe7 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5b0c:	4606      	mov	r6, r0
   b5b0e:	f001 fe15 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5b12:	f002 fa7b 	bl	b800c <_ZNK17currentStatusData8get_RSSIEv>
   b5b16:	4607      	mov	r7, r0
   b5b18:	f001 fe10 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5b1c:	f002 fa7b 	bl	b8016 <_ZNK17currentStatusData7get_SNREv>
   b5b20:	9b05      	ldr	r3, [sp, #20]
   b5b22:	4a59      	ldr	r2, [pc, #356]	; (b5c88 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e4>)
   b5b24:	e9cd 7002 	strd	r7, r0, [sp, #8]
   b5b28:	2180      	movs	r1, #128	; 0x80
   b5b2a:	e9cd 4600 	strd	r4, r6, [sp]
   b5b2e:	a806      	add	r0, sp, #24
   b5b30:	f00a fc42 	bl	c03b8 <snprintf>
		Log.info(messageString);
   b5b34:	484f      	ldr	r0, [pc, #316]	; (b5c74 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b5b36:	a906      	add	r1, sp, #24
   b5b38:	f7fe fac8 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5b3c:	f00a fbd4 	bl	c02e8 <spark_cloud_flag_connected>
		if (Particle.connected()) PublishQueuePosix::instance().publish("status", messageString,PRIVATE);
   b5b40:	b148      	cbz	r0, b5b56 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1b2>
   b5b42:	f004 feb5 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b5b46:	4b51      	ldr	r3, [pc, #324]	; (b5c8c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e8>)
   b5b48:	f88d 5000 	strb.w	r5, [sp]
   b5b4c:	781b      	ldrb	r3, [r3, #0]
   b5b4e:	4950      	ldr	r1, [pc, #320]	; (b5c90 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2ec>)
   b5b50:	aa06      	add	r2, sp, #24
   b5b52:	f7ff fd67 	bl	b5624 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
		sysStatus.set_messageCount(sysStatus.get_messageCount() + 1); // Increment the message count
   b5b56:	f001 fdb7 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5b5a:	4604      	mov	r4, r0
   b5b5c:	f001 fdb4 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5b60:	f002 f8e5 	bl	b7d2e <_ZNK13sysStatusData16get_messageCountEv>
   b5b64:	3001      	adds	r0, #1
   b5b66:	b281      	uxth	r1, r0
   b5b68:	4620      	mov	r0, r4
   b5b6a:	f002 f96b 	bl	b7e44 <_ZN13sysStatusData16set_messageCountEt>
		JsonDataManager::instance().setAlertCode(current.get_nodeNumber(), 0); // Clear pending alert, as you just sent it  
   b5b6e:	f007 ffcd 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5b72:	4604      	mov	r4, r0
   b5b74:	f001 fde2 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5b78:	f001 ff69 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5b7c:	2200      	movs	r2, #0
   b5b7e:	4601      	mov	r1, r0
   b5b80:	4620      	mov	r0, r4
   b5b82:	f008 fef9 	bl	be978 <_ZN15JsonDataManager12setAlertCodeEii>
		JsonDataManager::instance().setAlertContext(current.get_nodeNumber(), 0); // Clear pending alert context, as you just sent it  
   b5b86:	f007 ffc1 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5b8a:	4604      	mov	r4, r0
   b5b8c:	f001 fdd6 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5b90:	f001 ff5d 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5b94:	2200      	movs	r2, #0
   b5b96:	4601      	mov	r1, r0
   b5b98:	4620      	mov	r0, r4
   b5b9a:	f008 ff37 	bl	bea0c <_ZN15JsonDataManager15setAlertContextEii>
		return true;
   b5b9e:	2001      	movs	r0, #1
	else {
		Log.info("Node %d data report response not acknowledged", nodeAddress);
		digitalWrite(BLUE_LED,LOW);
		return false;
	}
}
   b5ba0:	b027      	add	sp, #156	; 0x9c
   b5ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (current.get_sensorType()) {
   b5ba4:	3814      	subs	r0, #20
   b5ba6:	b2c0      	uxtb	r0, r0
   b5ba8:	2809      	cmp	r0, #9
   b5baa:	e70f      	b.n	b59cc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x28>
				if((current.get_payload3() <<8 | current.get_payload4()) != 0) { // if occupancyNet isn't zero
   b5bac:	f001 fdc6 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5bb0:	f001 ff66 	bl	b7a80 <_ZNK17currentStatusData12get_payload3Ev>
   b5bb4:	4604      	mov	r4, r0
   b5bb6:	f001 fdc1 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5bba:	f001 ff66 	bl	b7a8a <_ZNK17currentStatusData12get_payload4Ev>
   b5bbe:	ea50 2304 	orrs.w	r3, r0, r4, lsl #8
   b5bc2:	f43f af05 	beq.w	b59d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c>
					JsonDataManager::instance().setOccupancyNetForNode(current.get_nodeNumber(), 0);
   b5bc6:	f007 ffa1 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5bca:	4604      	mov	r4, r0
   b5bcc:	f001 fdb6 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5bd0:	f001 ff3d 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5bd4:	2200      	movs	r2, #0
   b5bd6:	4601      	mov	r1, r0
   b5bd8:	4620      	mov	r0, r4
   b5bda:	f009 f887 	bl	becec <_ZN15JsonDataManager22setOccupancyNetForNodeEii>
					Log.info("On break, responding with alert code 12 and alert context 0. (resetting net count for device to 0)");
   b5bde:	492d      	ldr	r1, [pc, #180]	; (b5c94 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2f0>)
   b5be0:	4824      	ldr	r0, [pc, #144]	; (b5c74 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b5be2:	f7fe fa73 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5be6:	e6f3      	b.n	b59d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c>
				Log.info("Unknown sensor type in acknowledgeDataReportGateway %d", current.get_sensorType());
   b5be8:	f001 fda8 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5bec:	f001 ff39 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5bf0:	4929      	ldr	r1, [pc, #164]	; (b5c98 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2f4>)
   b5bf2:	4602      	mov	r2, r0
   b5bf4:	481f      	ldr	r0, [pc, #124]	; (b5c74 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b5bf6:	f7fe fa69 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5bfa:	f00a fb75 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "Unknown sensor type in acknowledgeDataReportGateway", PRIVATE);
   b5bfe:	2800      	cmp	r0, #0
   b5c00:	f43f aee6 	beq.w	b59d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c>
   b5c04:	f004 fe54 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b5c08:	2300      	movs	r3, #0
   b5c0a:	f88d 3000 	strb.w	r3, [sp]
   b5c0e:	4b1f      	ldr	r3, [pc, #124]	; (b5c8c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e8>)
   b5c10:	4a22      	ldr	r2, [pc, #136]	; (b5c9c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2f8>)
   b5c12:	781b      	ldrb	r3, [r3, #0]
   b5c14:	4922      	ldr	r1, [pc, #136]	; (b5ca0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2fc>)
   b5c16:	f7ff fd05 	bl	b5624 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b5c1a:	e6d9      	b.n	b59d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c>
	if (current.get_alertCodeNode() == 255 || current.get_alertCodeNode() == 1) {
   b5c1c:	f001 fd8e 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5c20:	f001 ff5b 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5c24:	2801      	cmp	r0, #1
   b5c26:	f43f af03 	beq.w	b5a30 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x8c>
		current.set_alertCodeNode(JsonDataManager::instance().getAlertCode(current.get_nodeNumber()));		// Get the alert code from the nodeID database if one is not already set
   b5c2a:	f001 fd87 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5c2e:	4605      	mov	r5, r0
   b5c30:	f007 ff6c 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5c34:	4606      	mov	r6, r0
   b5c36:	f001 fd81 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5c3a:	f001 ff08 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5c3e:	4601      	mov	r1, r0
   b5c40:	4630      	mov	r0, r6
   b5c42:	f007 ffed 	bl	bdc20 <_ZN15JsonDataManager12getAlertCodeEi>
   b5c46:	4601      	mov	r1, r0
   b5c48:	4628      	mov	r0, r5
   b5c4a:	e6fd      	b.n	b5a48 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xa4>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b5c4c:	f001 fd76 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5c50:	f001 ff02 	bl	b7a58 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b5c54:	e73b      	b.n	b5ace <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x12a>
		Log.info("Node %d data report response not acknowledged", nodeAddress);
   b5c56:	4913      	ldr	r1, [pc, #76]	; (b5ca4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x300>)
   b5c58:	4806      	ldr	r0, [pc, #24]	; (b5c74 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b5c5a:	4622      	mov	r2, r4
   b5c5c:	f7fe fa36 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b5c60:	4630      	mov	r0, r6
   b5c62:	2100      	movs	r1, #0
   b5c64:	f00d fcb7 	bl	c35d6 <digitalWrite>
		return false;
   b5c68:	2000      	movs	r0, #0
   b5c6a:	e799      	b.n	b5ba0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1fc>
   b5c6c:	2003aeb4 	.word	0x2003aeb4
   b5c70:	000c64e9 	.word	0x000c64e9
   b5c74:	2003e634 	.word	0x2003e634
   b5c78:	000c650c 	.word	0x000c650c
   b5c7c:	000c654a 	.word	0x000c654a
   b5c80:	000c6a1e 	.word	0x000c6a1e
   b5c84:	2003afe4 	.word	0x2003afe4
   b5c88:	000c658c 	.word	0x000c658c
   b5c8c:	2003aeac 	.word	0x2003aeac
   b5c90:	000c65d9 	.word	0x000c65d9
   b5c94:	000c641b 	.word	0x000c641b
   b5c98:	000c647e 	.word	0x000c647e
   b5c9c:	000c64b5 	.word	0x000c64b5
   b5ca0:	000c5f9c 	.word	0x000c5f9c
   b5ca4:	000c65e0 	.word	0x000c65e0

000b5ca8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:

	lora_state = JOIN_ACK;			// Prepare to respond
	return true;
}

bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b5ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char messageString[128];
	Log.info("Acknowledge Join Request");
   b5cac:	49ad      	ldr	r1, [pc, #692]	; (b5f64 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2bc>)
   b5cae:	48ae      	ldr	r0, [pc, #696]	; (b5f68 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2c0>)
	// Gateway's response to a join request from a node
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b5cb0:	4cae      	ldr	r4, [pc, #696]	; (b5f6c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2c4>)
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b5cb2:	b0a9      	sub	sp, #164	; 0xa4
	Log.info("Acknowledge Join Request");
   b5cb4:	f7fe fa0a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b5cb8:	f001 fd06 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5cbc:	f002 f832 	bl	b7d24 <_ZNK13sysStatusData15get_magicNumberEv>
   b5cc0:	0a00      	lsrs	r0, r0, #8
   b5cc2:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b5cc4:	f001 fd00 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5cc8:	f002 f82c 	bl	b7d24 <_ZNK13sysStatusData15get_magicNumberEv>
   b5ccc:	7060      	strb	r0, [r4, #1]
	buf[2] = current.get_nodeNumber();
   b5cce:	f001 fd35 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5cd2:	f001 febc 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5cd6:	70a0      	strb	r0, [r4, #2]
	buf[3] = highByte(current.get_token());							// Token - so I can trust you
   b5cd8:	f001 fd30 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5cdc:	f002 f88f 	bl	b7dfe <_ZNK17currentStatusData9get_tokenEv>
   b5ce0:	0a00      	lsrs	r0, r0, #8
   b5ce2:	70e0      	strb	r0, [r4, #3]
	buf[4] = lowByte(current.get_token());							// Token - so I can trust you
   b5ce4:	f001 fd2a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5ce8:	f002 f889 	bl	b7dfe <_ZNK17currentStatusData9get_tokenEv>
   b5cec:	7120      	strb	r0, [r4, #4]
	
	uint32_t currentTime = Time.now();
   b5cee:	f00c f9ee 	bl	c20ce <_ZN9TimeClass3nowEv>
	buf[5] = (uint8_t)(currentTime >> 24); 							// Fourth byte - current time
   b5cf2:	0e03      	lsrs	r3, r0, #24
   b5cf4:	7163      	strb	r3, [r4, #5]
	buf[6] = (uint8_t)(currentTime >> 16); 							// Third byte
   b5cf6:	0c03      	lsrs	r3, r0, #16
   b5cf8:	71a3      	strb	r3, [r4, #6]
	buf[7] = (uint8_t)(currentTime >> 8);  							// Second byte
   b5cfa:	0a03      	lsrs	r3, r0, #8
   b5cfc:	71e3      	strb	r3, [r4, #7]
	buf[8] = (uint8_t)(currentTime);         						// First byte	
   b5cfe:	7220      	strb	r0, [r4, #8]
	// Need to calculate the seconds to the next report
	buf[9] = highByte(sysStatus.get_frequencySeconds());			// Frequency of reports - for Gateways
   b5d00:	f001 fce2 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5d04:	f002 f818 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b5d08:	0a00      	lsrs	r0, r0, #8
   b5d0a:	7260      	strb	r0, [r4, #9]
	buf[10] = lowByte(sysStatus.get_frequencySeconds());	
   b5d0c:	f001 fcdc 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5d10:	f002 f812 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b5d14:	72a0      	strb	r0, [r4, #10]
	Log.info("Frequency of reports is %d seconds", sysStatus.get_frequencySeconds());	
   b5d16:	f001 fcd7 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5d1a:	f002 f80d 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b5d1e:	4994      	ldr	r1, [pc, #592]	; (b5f70 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2c8>)
   b5d20:	4602      	mov	r2, r0
   b5d22:	4891      	ldr	r0, [pc, #580]	; (b5f68 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2c0>)
   b5d24:	f7fe f9d2 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	buf[11] = (current.get_nodeNumber() != 255) ?  0 : 1;			// Clear the alert code for the node unless the nodeNumber process failed
   b5d28:	f001 fd08 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5d2c:	f001 fe8f 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5d30:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
   b5d34:	4258      	negs	r0, r3
   b5d36:	4158      	adcs	r0, r3
   b5d38:	72e0      	strb	r0, [r4, #11]
	buf[13] = current.get_sensorType();
   b5d3a:	f001 fcff 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5d3e:	f001 fe90 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5d42:	7360      	strb	r0, [r4, #13]
	buf[14] = current.get_uniqueID() >> 24;							// Unique ID of the node
   b5d44:	f001 fcfa 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5d48:	f001 fd1f 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b5d4c:	0e00      	lsrs	r0, r0, #24
   b5d4e:	73a0      	strb	r0, [r4, #14]
	buf[15] = current.get_uniqueID() >> 16;	
   b5d50:	f001 fcf4 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5d54:	f001 fd19 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b5d58:	0c00      	lsrs	r0, r0, #16
   b5d5a:	73e0      	strb	r0, [r4, #15]
	buf[16] = current.get_uniqueID() >> 8;
   b5d5c:	f001 fcee 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5d60:	f001 fd13 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b5d64:	0a00      	lsrs	r0, r0, #8
   b5d66:	7420      	strb	r0, [r4, #16]
	buf[17] = current.get_uniqueID();
   b5d68:	f001 fce8 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5d6c:	f001 fd0d 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b5d70:	7460      	strb	r0, [r4, #17]
	buf[18] = current.get_nodeNumber();
   b5d72:	f001 fce3 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5d76:	f001 fe6a 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5d7a:	74a0      	strb	r0, [r4, #18]

	if (JsonDataManager::instance().uniqueIDExistsInDatabase(current.get_uniqueID())) {		// Check to make sure the node's uniqueID is in the database
   b5d7c:	f007 fec6 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5d80:	4605      	mov	r5, r0
   b5d82:	f001 fcdb 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5d86:	f001 fd00 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b5d8a:	4601      	mov	r1, r0
   b5d8c:	4628      	mov	r0, r5
   b5d8e:	f007 ffeb 	bl	bdd68 <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm>
   b5d92:	4605      	mov	r5, r0
   b5d94:	2800      	cmp	r0, #0
   b5d96:	f000 80c0 	beq.w	b5f1a <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x272>
		uint8_t nodeNumber = JsonDataManager::instance().getNodeNumberForUniqueID(current.get_uniqueID());
   b5d9a:	f007 feb7 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5d9e:	4605      	mov	r5, r0
   b5da0:	f001 fccc 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5da4:	f001 fcf1 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b5da8:	4601      	mov	r1, r0
   b5daa:	4628      	mov	r0, r5
   b5dac:	f008 f81a 	bl	bdde4 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm>
   b5db0:	9006      	str	r0, [sp, #24]
		buf[13] = JsonDataManager::instance().getType(nodeNumber);							// Make sure type is up to date
   b5db2:	f007 feab 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5db6:	9906      	ldr	r1, [sp, #24]
   b5db8:	f007 fef8 	bl	bdbac <_ZN15JsonDataManager7getTypeEi>
   b5dbc:	7360      	strb	r0, [r4, #13]
		JsonDataManager::instance().getJoinPayload(nodeNumber);										// Get the payload values from the nodeID database
   b5dbe:	f007 fea5 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b5dc2:	9906      	ldr	r1, [sp, #24]
   b5dc4:	f008 f982 	bl	be0cc <_ZN15JsonDataManager14getJoinPayloadEh>
		buf[19] = current.get_payload1();					
   b5dc8:	f001 fcb8 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5dcc:	f001 fe4e 	bl	b7a6c <_ZNK17currentStatusData12get_payload1Ev>
   b5dd0:	74e0      	strb	r0, [r4, #19]
		buf[20] = current.get_payload2();
   b5dd2:	f001 fcb3 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5dd6:	f001 fe4e 	bl	b7a76 <_ZNK17currentStatusData12get_payload2Ev>
   b5dda:	7520      	strb	r0, [r4, #20]
		buf[21] = current.get_payload3();
   b5ddc:	f001 fcae 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5de0:	f001 fe4e 	bl	b7a80 <_ZNK17currentStatusData12get_payload3Ev>
   b5de4:	7560      	strb	r0, [r4, #21]
		buf[22] = current.get_payload4();
   b5de6:	f001 fca9 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5dea:	f001 fe4e 	bl	b7a8a <_ZNK17currentStatusData12get_payload4Ev>
   b5dee:	75a0      	strb	r0, [r4, #22]
		Log.info("Node %d join request will update sensorType to %d", current.get_tempNodeNumber(), (int)buf[13]);
   b5df0:	f001 fca4 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5df4:	f001 fe30 	bl	b7a58 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b5df8:	7b63      	ldrb	r3, [r4, #13]
   b5dfa:	495e      	ldr	r1, [pc, #376]	; (b5f74 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2cc>)
   b5dfc:	4602      	mov	r2, r0
   b5dfe:	485a      	ldr	r0, [pc, #360]	; (b5f68 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2c0>)
   b5e00:	f7fe f964 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		Log.info("Node %d join request will update with payload [%d, %d, %d, %d]", current.get_tempNodeNumber(), current.get_payload1(), current.get_payload2(), current.get_payload3(), current.get_payload4());
   b5e04:	f001 fc9a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5e08:	f001 fe26 	bl	b7a58 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b5e0c:	9007      	str	r0, [sp, #28]
   b5e0e:	f001 fc95 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5e12:	f001 fe2b 	bl	b7a6c <_ZNK17currentStatusData12get_payload1Ev>
   b5e16:	9006      	str	r0, [sp, #24]
   b5e18:	f001 fc90 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5e1c:	f001 fe2b 	bl	b7a76 <_ZNK17currentStatusData12get_payload2Ev>
   b5e20:	4605      	mov	r5, r0
   b5e22:	f001 fc8b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5e26:	f001 fe2b 	bl	b7a80 <_ZNK17currentStatusData12get_payload3Ev>
   b5e2a:	4606      	mov	r6, r0
   b5e2c:	f001 fc86 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5e30:	f001 fe2b 	bl	b7a8a <_ZNK17currentStatusData12get_payload4Ev>
   b5e34:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   b5e38:	e9cd 6001 	strd	r6, r0, [sp, #4]
   b5e3c:	494e      	ldr	r1, [pc, #312]	; (b5f78 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2d0>)
   b5e3e:	484a      	ldr	r0, [pc, #296]	; (b5f68 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2c0>)
   b5e40:	9500      	str	r5, [sp, #0]
   b5e42:	f7fe f943 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	}
	else {
		if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "findNodeNumber failed to add the node to the database.", PRIVATE);
	}			// Else, we will send an alert because the uniqueID should have been set in decipherJoinPayload when findNodeNumber was called

	buf[23] = 0;											// buf[23] and buf[24] are reserved for future use
   b5e46:	2300      	movs	r3, #0
   b5e48:	75e3      	strb	r3, [r4, #23]
	buf[24] = 0;
   b5e4a:	7623      	strb	r3, [r4, #24]

	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b5e4c:	f001 fc76 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5e50:	f001 fe02 	bl	b7a58 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b5e54:	2800      	cmp	r0, #0
   b5e56:	d16f      	bne.n	b5f38 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x290>
   b5e58:	f001 fc70 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5e5c:	f001 fdf7 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>

	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b5e60:	4b46      	ldr	r3, [pc, #280]	; (b5f7c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2d4>)
   b5e62:	881f      	ldrh	r7, [r3, #0]
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b5e64:	4605      	mov	r5, r0
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b5e66:	2101      	movs	r1, #1
   b5e68:	4638      	mov	r0, r7
   b5e6a:	f00d fbb4 	bl	c35d6 <digitalWrite>

	Log.info("Sending response to %d with free memory = %li", nodeAddress, System.freeMemory());
   b5e6e:	f00a fd53 	bl	c0918 <_ZN11SystemClass10freeMemoryEv>
   b5e72:	4943      	ldr	r1, [pc, #268]	; (b5f80 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2d8>)
   b5e74:	4603      	mov	r3, r0
   b5e76:	462a      	mov	r2, r5
   b5e78:	483b      	ldr	r0, [pc, #236]	; (b5f68 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2c0>)
   b5e7a:	f7fe f927 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>

	if (manager.sendtoWait(buf, 25, nodeAddress, JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b5e7e:	2302      	movs	r3, #2
   b5e80:	9300      	str	r3, [sp, #0]
   b5e82:	493a      	ldr	r1, [pc, #232]	; (b5f6c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2c4>)
   b5e84:	483f      	ldr	r0, [pc, #252]	; (b5f84 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2dc>)
   b5e86:	462b      	mov	r3, r5
   b5e88:	2219      	movs	r2, #25
   b5e8a:	f007 fc61 	bl	bd750 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5e8e:	4606      	mov	r6, r0
   b5e90:	2800      	cmp	r0, #0
   b5e92:	d156      	bne.n	b5f42 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x29a>
		current.set_tempNodeNumber(0);								// Temp no longer needed
   b5e94:	f001 fc52 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5e98:	4631      	mov	r1, r6
   b5e9a:	f001 febf 	bl	b7c1c <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b5e9e:	4631      	mov	r1, r6
   b5ea0:	4638      	mov	r0, r7
   b5ea2:	f00d fb98 	bl	c35d6 <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d joined. New nodeNumber %d, sensorType %s, alert %d and RSSI / SNR of %d / %d", nodeAddress, current.get_nodeNumber(), (buf[10] ==0)? "car":"person",current.get_alertCodeNode(), current.get_RSSI(), current.get_SNR());
   b5ea6:	f001 fc49 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5eaa:	f001 fdd0 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5eae:	7aa2      	ldrb	r2, [r4, #10]
   b5eb0:	4b35      	ldr	r3, [pc, #212]	; (b5f88 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2e0>)
   b5eb2:	4c36      	ldr	r4, [pc, #216]	; (b5f8c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2e4>)
   b5eb4:	4607      	mov	r7, r0
   b5eb6:	2a00      	cmp	r2, #0
   b5eb8:	bf18      	it	ne
   b5eba:	461c      	movne	r4, r3
   b5ebc:	f001 fc3e 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5ec0:	f001 fe0b 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5ec4:	4680      	mov	r8, r0
   b5ec6:	f001 fc39 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5eca:	f002 f89f 	bl	b800c <_ZNK17currentStatusData8get_RSSIEv>
   b5ece:	4681      	mov	r9, r0
   b5ed0:	f001 fc34 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5ed4:	f002 f89f 	bl	b8016 <_ZNK17currentStatusData7get_SNREv>
   b5ed8:	4a2d      	ldr	r2, [pc, #180]	; (b5f90 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2e8>)
   b5eda:	9700      	str	r7, [sp, #0]
   b5edc:	462b      	mov	r3, r5
   b5ede:	e9cd 9003 	strd	r9, r0, [sp, #12]
   b5ee2:	e9cd 4801 	strd	r4, r8, [sp, #4]
   b5ee6:	2180      	movs	r1, #128	; 0x80
   b5ee8:	a808      	add	r0, sp, #32
   b5eea:	f00a fa65 	bl	c03b8 <snprintf>
		Log.info(messageString);
   b5eee:	481e      	ldr	r0, [pc, #120]	; (b5f68 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2c0>)
   b5ef0:	a908      	add	r1, sp, #32
   b5ef2:	f7fe f8eb 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b5ef6:	f00a f9f7 	bl	c02e8 <spark_cloud_flag_connected>
		if (Particle.connected()) PublishQueuePosix::instance().publish("status", messageString,PRIVATE);
   b5efa:	4604      	mov	r4, r0
   b5efc:	b380      	cbz	r0, b5f60 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2b8>
   b5efe:	f004 fcd7 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b5f02:	4b24      	ldr	r3, [pc, #144]	; (b5f94 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2ec>)
   b5f04:	f88d 6000 	strb.w	r6, [sp]
   b5f08:	781b      	ldrb	r3, [r3, #0]
   b5f0a:	4923      	ldr	r1, [pc, #140]	; (b5f98 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2f0>)
   b5f0c:	aa08      	add	r2, sp, #32
   b5f0e:	f7ff fb89 	bl	b5624 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	else {
		Log.info("Node %d join response not acknowledged", current.get_tempNodeNumber()); // Acknowledgement not received - this needs more attention as node is in undefined state
		digitalWrite(BLUE_LED,LOW);
		return false;
	}
}
   b5f12:	4620      	mov	r0, r4
   b5f14:	b029      	add	sp, #164	; 0xa4
   b5f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5f1a:	f00a f9e5 	bl	c02e8 <spark_cloud_flag_connected>
		if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "findNodeNumber failed to add the node to the database.", PRIVATE);
   b5f1e:	2800      	cmp	r0, #0
   b5f20:	d091      	beq.n	b5e46 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x19e>
   b5f22:	f004 fcc5 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b5f26:	4b1b      	ldr	r3, [pc, #108]	; (b5f94 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2ec>)
   b5f28:	f88d 5000 	strb.w	r5, [sp]
   b5f2c:	781b      	ldrb	r3, [r3, #0]
   b5f2e:	4a1b      	ldr	r2, [pc, #108]	; (b5f9c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2f4>)
   b5f30:	491b      	ldr	r1, [pc, #108]	; (b5fa0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2f8>)
   b5f32:	f7ff fb77 	bl	b5624 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b5f36:	e786      	b.n	b5e46 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x19e>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b5f38:	f001 fc00 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5f3c:	f001 fd8c 	bl	b7a58 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b5f40:	e78e      	b.n	b5e60 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1b8>
		Log.info("Node %d join response not acknowledged", current.get_tempNodeNumber()); // Acknowledgement not received - this needs more attention as node is in undefined state
   b5f42:	f001 fbfb 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b5f46:	f001 fd87 	bl	b7a58 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b5f4a:	4916      	ldr	r1, [pc, #88]	; (b5fa4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2fc>)
   b5f4c:	4602      	mov	r2, r0
   b5f4e:	4806      	ldr	r0, [pc, #24]	; (b5f68 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x2c0>)
   b5f50:	f7fe f8bc 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b5f54:	2100      	movs	r1, #0
   b5f56:	4638      	mov	r0, r7
   b5f58:	f00d fb3d 	bl	c35d6 <digitalWrite>
		return false;
   b5f5c:	2400      	movs	r4, #0
   b5f5e:	e7d8      	b.n	b5f12 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x26a>
		return true;
   b5f60:	2401      	movs	r4, #1
   b5f62:	e7d6      	b.n	b5f12 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x26a>
   b5f64:	000c6619 	.word	0x000c6619
   b5f68:	2003e634 	.word	0x2003e634
   b5f6c:	2003aeb4 	.word	0x2003aeb4
   b5f70:	000c64e9 	.word	0x000c64e9
   b5f74:	000c6632 	.word	0x000c6632
   b5f78:	000c6664 	.word	0x000c6664
   b5f7c:	000c6a1e 	.word	0x000c6a1e
   b5f80:	000c66da 	.word	0x000c66da
   b5f84:	2003afe4 	.word	0x2003afe4
   b5f88:	000c6612 	.word	0x000c6612
   b5f8c:	000c660e 	.word	0x000c660e
   b5f90:	000c6708 	.word	0x000c6708
   b5f94:	2003aeac 	.word	0x2003aeac
   b5f98:	000c65d9 	.word	0x000c65d9
   b5f9c:	000c66a3 	.word	0x000c66a3
   b5fa0:	000c5f9c 	.word	0x000c5f9c
   b5fa4:	000c675d 	.word	0x000c675d

000b5fa8 <_ZN14LoRA_Functions12setNodeTokenEh>:

/**********************************************************************
 **                         Helper Functions                         **
 **********************************************************************/

uint16_t LoRA_Functions::setNodeToken(uint8_t nodeNumber) {
   b5fa8:	b538      	push	{r3, r4, r5, lr}
	if (nodeNumber == 0 || nodeNumber == 255) return 0;
   b5faa:	1e4b      	subs	r3, r1, #1
   b5fac:	b2db      	uxtb	r3, r3
   b5fae:	2bfd      	cmp	r3, #253	; 0xfd
uint16_t LoRA_Functions::setNodeToken(uint8_t nodeNumber) {
   b5fb0:	460d      	mov	r5, r1
	if (nodeNumber == 0 || nodeNumber == 255) return 0;
   b5fb2:	d80e      	bhi.n	b5fd2 <_ZN14LoRA_Functions12setNodeTokenEh+0x2a>
	uint16_t token = sysStatus.get_tokenCore() * nodeNumber;	// This is the token for the node - it is a function of the core token and the day of the month
   b5fb4:	f001 fb88 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5fb8:	f001 fd44 	bl	b7a44 <_ZNK13sysStatusData13get_tokenCoreEv>
   b5fbc:	fb10 f405 	smulbb	r4, r0, r5
   b5fc0:	b2a4      	uxth	r4, r4
	Log.info("Setting token for node %d to %d", nodeNumber, token);
   b5fc2:	4905      	ldr	r1, [pc, #20]	; (b5fd8 <_ZN14LoRA_Functions12setNodeTokenEh+0x30>)
   b5fc4:	4805      	ldr	r0, [pc, #20]	; (b5fdc <_ZN14LoRA_Functions12setNodeTokenEh+0x34>)
   b5fc6:	4623      	mov	r3, r4
   b5fc8:	462a      	mov	r2, r5
   b5fca:	f7fe f87f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	return token;
}
   b5fce:	4620      	mov	r0, r4
   b5fd0:	bd38      	pop	{r3, r4, r5, pc}
	if (nodeNumber == 0 || nodeNumber == 255) return 0;
   b5fd2:	2400      	movs	r4, #0
   b5fd4:	e7fb      	b.n	b5fce <_ZN14LoRA_Functions12setNodeTokenEh+0x26>
   b5fd6:	bf00      	nop
   b5fd8:	000c6784 	.word	0x000c6784
   b5fdc:	2003e634 	.word	0x2003e634

000b5fe0 <_ZN14LoRA_Functions18checkForValidTokenEht>:

bool LoRA_Functions::checkForValidToken(uint8_t nodeNumber, uint16_t token) {
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b5fe0:	1e4b      	subs	r3, r1, #1
   b5fe2:	b2db      	uxtb	r3, r3
   b5fe4:	2bfd      	cmp	r3, #253	; 0xfd
bool LoRA_Functions::checkForValidToken(uint8_t nodeNumber, uint16_t token) {
   b5fe6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5fe8:	460d      	mov	r5, r1
   b5fea:	4614      	mov	r4, r2
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b5fec:	d902      	bls.n	b5ff4 <_ZN14LoRA_Functions18checkForValidTokenEht+0x14>
   b5fee:	2000      	movs	r0, #0
	if (token / sysStatus.get_tokenCore() == nodeNumber) {
		Log.info("Token is valid");
		return true;
	}
	else return false;
   b5ff0:	b003      	add	sp, #12
   b5ff2:	bd30      	pop	{r4, r5, pc}
	Log.info("Checking for a valid token - nodeNumber %d, token %d, tokenCore %d", nodeNumber, token, sysStatus.get_tokenCore());
   b5ff4:	f001 fb68 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b5ff8:	f001 fd24 	bl	b7a44 <_ZNK13sysStatusData13get_tokenCoreEv>
   b5ffc:	490a      	ldr	r1, [pc, #40]	; (b6028 <_ZN14LoRA_Functions18checkForValidTokenEht+0x48>)
   b5ffe:	9000      	str	r0, [sp, #0]
   b6000:	4623      	mov	r3, r4
   b6002:	462a      	mov	r2, r5
   b6004:	4809      	ldr	r0, [pc, #36]	; (b602c <_ZN14LoRA_Functions18checkForValidTokenEht+0x4c>)
   b6006:	f7fe f861 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (token / sysStatus.get_tokenCore() == nodeNumber) {
   b600a:	f001 fb5d 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b600e:	f001 fd19 	bl	b7a44 <_ZNK13sysStatusData13get_tokenCoreEv>
   b6012:	fbb4 f0f0 	udiv	r0, r4, r0
   b6016:	4285      	cmp	r5, r0
   b6018:	d1e9      	bne.n	b5fee <_ZN14LoRA_Functions18checkForValidTokenEht+0xe>
		Log.info("Token is valid");
   b601a:	4804      	ldr	r0, [pc, #16]	; (b602c <_ZN14LoRA_Functions18checkForValidTokenEht+0x4c>)
   b601c:	4904      	ldr	r1, [pc, #16]	; (b6030 <_ZN14LoRA_Functions18checkForValidTokenEht+0x50>)
   b601e:	f7fe f855 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		return true;
   b6022:	2001      	movs	r0, #1
   b6024:	e7e4      	b.n	b5ff0 <_ZN14LoRA_Functions18checkForValidTokenEht+0x10>
   b6026:	bf00      	nop
   b6028:	000c67a4 	.word	0x000c67a4
   b602c:	2003e634 	.word	0x2003e634
   b6030:	000c67e7 	.word	0x000c67e7

000b6034 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b6034:	b5f0      	push	{r4, r5, r6, r7, lr}
	current.set_payload1(buf[10]);					
   b6036:	4c5b      	ldr	r4, [pc, #364]	; (b61a4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x170>)
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b6038:	b085      	sub	sp, #20
	current.set_payload1(buf[10]);					
   b603a:	f001 fb7f 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b603e:	7aa1      	ldrb	r1, [r4, #10]
   b6040:	f001 fdf8 	bl	b7c34 <_ZN17currentStatusData12set_payload1Eh>
	current.set_payload2(buf[11]);
   b6044:	f001 fb7a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6048:	7ae1      	ldrb	r1, [r4, #11]
   b604a:	f001 fdf9 	bl	b7c40 <_ZN17currentStatusData12set_payload2Eh>
	current.set_payload3(buf[12]);
   b604e:	f001 fb75 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6052:	7b21      	ldrb	r1, [r4, #12]
   b6054:	f001 fdfa 	bl	b7c4c <_ZN17currentStatusData12set_payload3Eh>
	current.set_payload4(buf[13]);
   b6058:	f001 fb70 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b605c:	7b61      	ldrb	r1, [r4, #13]
   b605e:	f001 fdfb 	bl	b7c58 <_ZN17currentStatusData12set_payload4Eh>
	current.set_retryCount(buf[14]);
   b6062:	f001 fb6b 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6066:	7ba1      	ldrb	r1, [r4, #14]
   b6068:	f001 fe3e 	bl	b7ce8 <_ZN17currentStatusData14set_retryCountEh>
	current.set_retransmissionDelay(buf[15]);
   b606c:	f001 fb66 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6070:	7be1      	ldrb	r1, [r4, #15]
   b6072:	f001 fe3f 	bl	b7cf4 <_ZN17currentStatusData23set_retransmissionDelayEh>
	if (buf[6] == 255 && buf[7] == 255) {			// assign a uniqueID					// This is a virgin node - need to assign it a uniqueID
   b6076:	79a3      	ldrb	r3, [r4, #6]
   b6078:	79e2      	ldrb	r2, [r4, #7]
   b607a:	4013      	ands	r3, r2
   b607c:	2bff      	cmp	r3, #255	; 0xff
   b607e:	d131      	bne.n	b60e4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xb0>
		uint8_t random1 = random(0,254);													// Not to 255 so we can see if it is a virgin node
   b6080:	21fe      	movs	r1, #254	; 0xfe
   b6082:	2000      	movs	r0, #0
   b6084:	f00c ffab 	bl	c2fde <_Z6randomii>
		uint8_t random2 = random(0,254);
   b6088:	21fe      	movs	r1, #254	; 0xfe
		uint8_t random1 = random(0,254);													// Not to 255 so we can see if it is a virgin node
   b608a:	4607      	mov	r7, r0
		uint8_t random2 = random(0,254);
   b608c:	2000      	movs	r0, #0
   b608e:	f00c ffa6 	bl	c2fde <_Z6randomii>
   b6092:	4605      	mov	r5, r0
		uint8_t time1 = ((uint8_t) ((Time.now()) >> 8));									// Second byte
   b6094:	f00c f81b 	bl	c20ce <_ZN9TimeClass3nowEv>
   b6098:	4604      	mov	r4, r0
		uint8_t time2 = ((uint8_t) (Time.now()));											// First byte
   b609a:	f00c f818 	bl	c20ce <_ZN9TimeClass3nowEv>
   b609e:	4606      	mov	r6, r0
		current.set_uniqueID(random1 << 24 | random2 << 16 | time1 << 8 | time2);			// This should be unique for the numbers we are talking
   b60a0:	f001 fb4c 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b60a4:	f404 417f 	and.w	r1, r4, #65280	; 0xff00
   b60a8:	ea41 6407 	orr.w	r4, r1, r7, lsl #24
   b60ac:	b2f6      	uxtb	r6, r6
   b60ae:	0429      	lsls	r1, r5, #16
   b60b0:	4334      	orrs	r4, r6
   b60b2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   b60b6:	4321      	orrs	r1, r4
   b60b8:	f001 fb78 	bl	b77ac <_ZN17currentStatusData12set_uniqueIDEm>
		current.set_sensorType(10);															// This is a virgin node - set the sensor type to 10
   b60bc:	f001 fb3e 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b60c0:	210a      	movs	r1, #10
   b60c2:	f001 fdb1 	bl	b7c28 <_ZN17currentStatusData14set_sensorTypeEh>
		Log.info("Node %d is a virgin node, assigning uniqueID of %lu", current.get_nodeNumber(), current.get_uniqueID());
   b60c6:	f001 fb39 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b60ca:	f001 fcc0 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b60ce:	9002      	str	r0, [sp, #8]
   b60d0:	f001 fb34 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b60d4:	f001 fb59 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b60d8:	9a02      	ldr	r2, [sp, #8]
   b60da:	4933      	ldr	r1, [pc, #204]	; (b61a8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x174>)
   b60dc:	4603      	mov	r3, r0
   b60de:	4833      	ldr	r0, [pc, #204]	; (b61ac <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x178>)
   b60e0:	f7fd fff4 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	current.set_nodeNumber(JsonDataManager::instance().findNodeNumber(current.get_nodeNumber(), current.get_uniqueID()));	// This will return the nodeNumber for the nodeID passed to the function
   b60e4:	f001 fb2a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b60e8:	4604      	mov	r4, r0
   b60ea:	f007 fd0f 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b60ee:	4605      	mov	r5, r0
   b60f0:	f001 fb24 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b60f4:	f001 fcab 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b60f8:	9002      	str	r0, [sp, #8]
   b60fa:	f001 fb1f 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b60fe:	f001 fb44 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b6102:	9902      	ldr	r1, [sp, #8]
   b6104:	4602      	mov	r2, r0
   b6106:	4628      	mov	r0, r5
   b6108:	f009 fc3c 	bl	bf984 <_ZN15JsonDataManager14findNodeNumberEim>
   b610c:	4601      	mov	r1, r0
   b610e:	4620      	mov	r0, r4
   b6110:	f001 fd7e 	bl	b7c10 <_ZN17currentStatusData14set_nodeNumberEh>
	if (!LoRA_Functions::instance().checkForValidToken(current.get_nodeNumber(), current.get_token())) {
   b6114:	f7ff fa94 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b6118:	4604      	mov	r4, r0
   b611a:	f001 fb0f 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b611e:	f001 fc96 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b6122:	9002      	str	r0, [sp, #8]
   b6124:	f001 fb0a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6128:	f001 fe69 	bl	b7dfe <_ZNK17currentStatusData9get_tokenEv>
   b612c:	9902      	ldr	r1, [sp, #8]
   b612e:	4602      	mov	r2, r0
   b6130:	4620      	mov	r0, r4
   b6132:	f7ff ff55 	bl	b5fe0 <_ZN14LoRA_Functions18checkForValidTokenEht>
   b6136:	b9a8      	cbnz	r0, b6164 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x130>
		current.set_token(sysStatus.get_tokenCore() * Time.day() + current.get_nodeNumber());	// This is the token for the node - it is a function of the core token and the day of the month
   b6138:	f001 fb00 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b613c:	4605      	mov	r5, r0
   b613e:	f001 fac3 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6142:	f001 fc7f 	bl	b7a44 <_ZNK13sysStatusData13get_tokenCoreEv>
   b6146:	4604      	mov	r4, r0
   b6148:	f00b ffea 	bl	c2120 <_ZN9TimeClass3dayEv>
   b614c:	fb14 f400 	smulbb	r4, r4, r0
   b6150:	f001 faf4 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6154:	f001 fc7b 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b6158:	b2a4      	uxth	r4, r4
   b615a:	1821      	adds	r1, r4, r0
   b615c:	b289      	uxth	r1, r1
   b615e:	4628      	mov	r0, r5
   b6160:	f001 fe88 	bl	b7e74 <_ZN17currentStatusData9set_tokenEt>
	Log.info("Node %d join request will change node number to %d with a token of %d", current.get_tempNodeNumber(), current.get_nodeNumber(), current.get_token());
   b6164:	f001 faea 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6168:	f001 fc76 	bl	b7a58 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b616c:	9003      	str	r0, [sp, #12]
   b616e:	f001 fae5 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6172:	f001 fc6c 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b6176:	9002      	str	r0, [sp, #8]
   b6178:	f001 fae0 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b617c:	f001 fe3f 	bl	b7dfe <_ZNK17currentStatusData9get_tokenEv>
   b6180:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b6184:	490a      	ldr	r1, [pc, #40]	; (b61b0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x17c>)
   b6186:	9000      	str	r0, [sp, #0]
   b6188:	4808      	ldr	r0, [pc, #32]	; (b61ac <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x178>)
   b618a:	f7fd ff9f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	current.set_alertCodeNode(1);									// This is a join request so alert code is 1
   b618e:	f001 fad5 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6192:	2101      	movs	r1, #1
   b6194:	f001 fd90 	bl	b7cb8 <_ZN17currentStatusData17set_alertCodeNodeEh>
	lora_state = JOIN_ACK;			// Prepare to respond
   b6198:	4b06      	ldr	r3, [pc, #24]	; (b61b4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x180>)
   b619a:	2202      	movs	r2, #2
}
   b619c:	2001      	movs	r0, #1
	lora_state = JOIN_ACK;			// Prepare to respond
   b619e:	701a      	strb	r2, [r3, #0]
}
   b61a0:	b005      	add	sp, #20
   b61a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b61a4:	2003aeb4 	.word	0x2003aeb4
   b61a8:	000c67f6 	.word	0x000c67f6
   b61ac:	2003e634 	.word	0x2003e634
   b61b0:	000c682a 	.word	0x000c682a
   b61b4:	2003aeab 	.word	0x2003aeab

000b61b8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b61b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b61bc:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b61be:	23f9      	movs	r3, #249	; 0xf9
   b61c0:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message - need to validate it
   b61c4:	f10d 031f 	add.w	r3, sp, #31
   b61c8:	9303      	str	r3, [sp, #12]
   b61ca:	f10d 031e 	add.w	r3, sp, #30
   b61ce:	9302      	str	r3, [sp, #8]
   b61d0:	4d9e      	ldr	r5, [pc, #632]	; (b644c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x294>)
   b61d2:	f10d 031d 	add.w	r3, sp, #29
   b61d6:	9301      	str	r3, [sp, #4]
   b61d8:	ab07      	add	r3, sp, #28
   b61da:	9300      	str	r3, [sp, #0]
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b61dc:	4607      	mov	r7, r0
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message - need to validate it
   b61de:	f10d 031b 	add.w	r3, sp, #27
   b61e2:	489b      	ldr	r0, [pc, #620]	; (b6450 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x298>)
   b61e4:	f10d 021a 	add.w	r2, sp, #26
   b61e8:	4629      	mov	r1, r5
   b61ea:	f007 fafd 	bl	bd7e8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b61ee:	4604      	mov	r4, r0
   b61f0:	2800      	cmp	r0, #0
   b61f2:	f000 8125 	beq.w	b6440 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x288>
		buf[len] = 0;
   b61f6:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b61fa:	2400      	movs	r4, #0
   b61fc:	54ec      	strb	r4, [r5, r3]
		current.set_nodeNumber(from);												// Captures the nodeNumber
   b61fe:	f001 fa9d 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6202:	f89d 101b 	ldrb.w	r1, [sp, #27]
   b6206:	f001 fd03 	bl	b7c10 <_ZN17currentStatusData14set_nodeNumberEh>
		uint16_t current_magicNumber = (buf[0] << 8 | buf[1]);								// Magic number
   b620a:	882e      	ldrh	r6, [r5, #0]
		if (current_magicNumber != sysStatus.get_magicNumber()) {
   b620c:	f001 fa5c 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6210:	f001 fd88 	bl	b7d24 <_ZNK13sysStatusData15get_magicNumberEv>
   b6214:	ba76      	rev16	r6, r6
   b6216:	b2b6      	uxth	r6, r6
   b6218:	42b0      	cmp	r0, r6
   b621a:	d013      	beq.n	b6244 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x8c>
			Log.info("Node %d message magic number of %d did not match the Magic Number in memory %d - Ignoring", current.get_nodeNumber(), current_magicNumber, sysStatus.get_magicNumber());
   b621c:	f001 fa8e 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6220:	f001 fc15 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b6224:	9004      	str	r0, [sp, #16]
   b6226:	f001 fa4f 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b622a:	f001 fd7b 	bl	b7d24 <_ZNK13sysStatusData15get_magicNumberEv>
   b622e:	9a04      	ldr	r2, [sp, #16]
   b6230:	9000      	str	r0, [sp, #0]
   b6232:	4988      	ldr	r1, [pc, #544]	; (b6454 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x29c>)
   b6234:	4888      	ldr	r0, [pc, #544]	; (b6458 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2a0>)
   b6236:	4633      	mov	r3, r6
   b6238:	f7fd ff48 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
}
   b623c:	4620      	mov	r0, r4
   b623e:	b008      	add	sp, #32
   b6240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		current.set_alertCodeNode(0);												// Clear the alert code for the node - Alert codes are set in the response
   b6244:	f001 fa7a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6248:	4621      	mov	r1, r4
   b624a:	f001 fd35 	bl	b7cb8 <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_tempNodeNumber(0);												// Clear for new response - this is used for join requests
   b624e:	f001 fa75 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6252:	4621      	mov	r1, r4
   b6254:	f001 fce2 	bl	b7c1c <_ZN17currentStatusData18set_tempNodeNumberEh>
		current.set_hops(hops);														// How many hops to get here
   b6258:	f001 fa70 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b625c:	f89d 101f 	ldrb.w	r1, [sp, #31]
		lora_state = (LoRA_State)(0x0F & messageFlag);								// Strip out the overhead byte to get the message flag
   b6260:	4c7e      	ldr	r4, [pc, #504]	; (b645c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2a4>)
		current.set_hops(hops);														// How many hops to get here
   b6262:	f001 fd3b 	bl	b7cdc <_ZN17currentStatusData8set_hopsEh>
		current.set_token(buf[3] << 8 | buf[4]);									// The token sent by the note - need to check it is valid
   b6266:	f001 fa69 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b626a:	f8b5 1003 	ldrh.w	r1, [r5, #3]
   b626e:	ba49      	rev16	r1, r1
   b6270:	b289      	uxth	r1, r1
   b6272:	f001 fdff 	bl	b7e74 <_ZN17currentStatusData9set_tokenEt>
		current.set_sensorType(buf[5]);												// Sensor type reported by the node
   b6276:	f001 fa61 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b627a:	7969      	ldrb	r1, [r5, #5]
   b627c:	f001 fcd4 	bl	b7c28 <_ZN17currentStatusData14set_sensorTypeEh>
		current.set_uniqueID(buf[6] << 24 | buf[7] << 16 | buf[8] << 8 | buf[9]);	// Unique ID of the node - this is like the Particle deviceID
   b6280:	f001 fa5c 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6284:	f8d5 1006 	ldr.w	r1, [r5, #6]
		Log.info("Node %d with uniqueID %lu a %s message with RSSI/SNR of %d / %d in %d hops", current.get_nodeNumber(), current.get_uniqueID(), loraStateNames[lora_state], rf95.lastRssi(), rf95.lastSNR(), current.get_hops());
   b6288:	4d75      	ldr	r5, [pc, #468]	; (b6460 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2a8>)
		current.set_uniqueID(buf[6] << 24 | buf[7] << 16 | buf[8] << 8 | buf[9]);	// Unique ID of the node - this is like the Particle deviceID
   b628a:	ba09      	rev	r1, r1
   b628c:	f001 fa8e 	bl	b77ac <_ZN17currentStatusData12set_uniqueIDEm>
		lora_state = (LoRA_State)(0x0F & messageFlag);								// Strip out the overhead byte to get the message flag
   b6290:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6294:	f003 030f 	and.w	r3, r3, #15
   b6298:	7023      	strb	r3, [r4, #0]
		Log.info("Node %d with uniqueID %lu a %s message with RSSI/SNR of %d / %d in %d hops", current.get_nodeNumber(), current.get_uniqueID(), loraStateNames[lora_state], rf95.lastRssi(), rf95.lastSNR(), current.get_hops());
   b629a:	f001 fa4f 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b629e:	f001 fbd6 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b62a2:	9005      	str	r0, [sp, #20]
   b62a4:	f001 fa4a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b62a8:	f001 fa6f 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b62ac:	7821      	ldrb	r1, [r4, #0]
   b62ae:	9004      	str	r0, [sp, #16]
   b62b0:	486c      	ldr	r0, [pc, #432]	; (b6464 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2ac>)
   b62b2:	eb05 1501 	add.w	r5, r5, r1, lsl #4
   b62b6:	f005 ff98 	bl	bc1ea <_ZN15RHGenericDriver8lastRssiEv>
   b62ba:	4606      	mov	r6, r0
   b62bc:	4869      	ldr	r0, [pc, #420]	; (b6464 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2ac>)
   b62be:	f006 ff25 	bl	bd10c <_ZN7RH_RF957lastSNREv>
   b62c2:	4680      	mov	r8, r0
   b62c4:	f001 fa3a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b62c8:	f001 fc16 	bl	b7af8 <_ZNK17currentStatusData8get_hopsEv>
   b62cc:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b62d0:	4965      	ldr	r1, [pc, #404]	; (b6468 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2b0>)
   b62d2:	e9cd 8002 	strd	r8, r0, [sp, #8]
   b62d6:	e9cd 5600 	strd	r5, r6, [sp]
   b62da:	485f      	ldr	r0, [pc, #380]	; (b6458 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2a0>)
   b62dc:	f7fd fef6 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		if (!(current.get_nodeNumber() < 255 && LoRA_Functions::instance().checkForValidToken(current.get_nodeNumber(), current.get_token()))) {  // This not is a valid node number and token combo
   b62e0:	f001 fa2c 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b62e4:	f001 fbb3 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b62e8:	28ff      	cmp	r0, #255	; 0xff
   b62ea:	d137      	bne.n	b635c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1a4>
			if (JsonDataManager::instance().checkIfNodeConfigured(current.get_nodeNumber(), current.get_uniqueID())) {	// This will return true if the node is configured
   b62ec:	f007 fc0e 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b62f0:	4605      	mov	r5, r0
   b62f2:	f001 fa23 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b62f6:	f001 fbaa 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b62fa:	9004      	str	r0, [sp, #16]
   b62fc:	f001 fa1e 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6300:	f001 fa43 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   b6304:	9904      	ldr	r1, [sp, #16]
   b6306:	4602      	mov	r2, r0
   b6308:	4628      	mov	r0, r5
   b630a:	f007 fcf3 	bl	bdcf4 <_ZN15JsonDataManager21checkIfNodeConfiguredEim>
   b630e:	2800      	cmp	r0, #0
   b6310:	d141      	bne.n	b6396 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1de>
				current.set_tempNodeNumber(current.get_nodeNumber());			// Store node number in temp for the repsonse
   b6312:	f001 fa13 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6316:	4605      	mov	r5, r0
   b6318:	f001 fa10 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b631c:	f001 fb97 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b6320:	4601      	mov	r1, r0
   b6322:	4628      	mov	r0, r5
   b6324:	f001 fc7a 	bl	b7c1c <_ZN17currentStatusData18set_tempNodeNumberEh>
				current.set_nodeNumber(255);									// Set node number to unconfigured
   b6328:	f001 fa08 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b632c:	21ff      	movs	r1, #255	; 0xff
   b632e:	f001 fc6f 	bl	b7c10 <_ZN17currentStatusData14set_nodeNumberEh>
				current.set_alertCodeNode(255);									// This will ensure we get a join request to the node
   b6332:	f001 fa03 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6336:	21ff      	movs	r1, #255	; 0xff
   b6338:	f001 fcbe 	bl	b7cb8 <_ZN17currentStatusData17set_alertCodeNodeEh>
				Log.info("Node %d is unconfigured so setting alertCode to %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b633c:	f001 f9fe 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6340:	f001 fb85 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b6344:	9004      	str	r0, [sp, #16]
   b6346:	f001 f9f9 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b634a:	f001 fbc6 	bl	b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b634e:	9a04      	ldr	r2, [sp, #16]
   b6350:	4946      	ldr	r1, [pc, #280]	; (b646c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2b4>)
   b6352:	4603      	mov	r3, r0
   b6354:	4840      	ldr	r0, [pc, #256]	; (b6458 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2a0>)
   b6356:	f7fd feb9 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b635a:	e012      	b.n	b6382 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1ca>
		if (!(current.get_nodeNumber() < 255 && LoRA_Functions::instance().checkForValidToken(current.get_nodeNumber(), current.get_token()))) {  // This not is a valid node number and token combo
   b635c:	f7ff f970 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b6360:	4605      	mov	r5, r0
   b6362:	f001 f9eb 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6366:	f001 fb72 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b636a:	9004      	str	r0, [sp, #16]
   b636c:	f001 f9e6 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6370:	f001 fd45 	bl	b7dfe <_ZNK17currentStatusData9get_tokenEv>
   b6374:	9904      	ldr	r1, [sp, #16]
   b6376:	4602      	mov	r2, r0
   b6378:	4628      	mov	r0, r5
   b637a:	f7ff fe31 	bl	b5fe0 <_ZN14LoRA_Functions18checkForValidTokenEht>
   b637e:	2800      	cmp	r0, #0
   b6380:	d0b4      	beq.n	b62ec <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>
		if (lora_state == DATA_RPT) {if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b6382:	7823      	ldrb	r3, [r4, #0]
   b6384:	2b03      	cmp	r3, #3
   b6386:	d11f      	bne.n	b63c8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x210>
   b6388:	f7ff f95a 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b638c:	f7ff fa1e 	bl	b57cc <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
   b6390:	bb30      	cbnz	r0, b63e0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x228>
		else {Log.info("Invalid message flag, returning"); return false;}
   b6392:	2400      	movs	r4, #0
   b6394:	e752      	b.n	b623c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x84>
				Log.info("Node %d is configured but the token is invalid - resetting token", current.get_nodeNumber());
   b6396:	f001 f9d1 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b639a:	f001 fb58 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b639e:	4934      	ldr	r1, [pc, #208]	; (b6470 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2b8>)
   b63a0:	4602      	mov	r2, r0
   b63a2:	482d      	ldr	r0, [pc, #180]	; (b6458 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2a0>)
   b63a4:	f7fd fe92 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
				current.set_token(setNodeToken(current.get_nodeNumber()));		// This is a valid node number but the token is not valid - reset the token
   b63a8:	f001 f9c8 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b63ac:	4605      	mov	r5, r0
   b63ae:	f001 f9c5 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b63b2:	f001 fb4c 	bl	b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>
   b63b6:	4601      	mov	r1, r0
   b63b8:	4638      	mov	r0, r7
   b63ba:	f7ff fdf5 	bl	b5fa8 <_ZN14LoRA_Functions12setNodeTokenEh>
   b63be:	4601      	mov	r1, r0
   b63c0:	4628      	mov	r0, r5
   b63c2:	f001 fd57 	bl	b7e74 <_ZN17currentStatusData9set_tokenEt>
   b63c6:	e7dc      	b.n	b6382 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1ca>
		else if (lora_state == JOIN_REQ) {if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b63c8:	2b01      	cmp	r3, #1
   b63ca:	d104      	bne.n	b63d6 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x21e>
   b63cc:	f7ff f938 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b63d0:	f7ff fe30 	bl	b6034 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b63d4:	e7dc      	b.n	b6390 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1d8>
		else {Log.info("Invalid message flag, returning"); return false;}
   b63d6:	4927      	ldr	r1, [pc, #156]	; (b6474 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2bc>)
   b63d8:	481f      	ldr	r0, [pc, #124]	; (b6458 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2a0>)
   b63da:	f7fd fe77 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b63de:	e7d8      	b.n	b6392 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1da>
		if (sysStatus.get_updatedfrequencySeconds() > 0) {              				// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b63e0:	f001 f972 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b63e4:	f001 fd06 	bl	b7df4 <_ZNK13sysStatusData27get_updatedfrequencySecondsEv>
   b63e8:	b1c0      	cbz	r0, b641c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x264>
			sysStatus.set_frequencySeconds(sysStatus.get_updatedfrequencySeconds());	// This was the temporary value from the particle function
   b63ea:	f001 f96d 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b63ee:	4605      	mov	r5, r0
   b63f0:	f001 f96a 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b63f4:	f001 fcfe 	bl	b7df4 <_ZNK13sysStatusData27get_updatedfrequencySecondsEv>
   b63f8:	4601      	mov	r1, r0
   b63fa:	4628      	mov	r0, r5
   b63fc:	f001 fd2e 	bl	b7e5c <_ZN13sysStatusData20set_frequencySecondsEt>
			sysStatus.set_updatedfrequencySeconds(0);
   b6400:	f001 f962 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6404:	2100      	movs	r1, #0
   b6406:	f001 fd2f 	bl	b7e68 <_ZN13sysStatusData27set_updatedfrequencySecondsEt>
			Log.info("We are updating the publish frequency to %i seconds", sysStatus.get_frequencySeconds());
   b640a:	f001 f95d 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b640e:	f001 fc93 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b6412:	4919      	ldr	r1, [pc, #100]	; (b6478 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2c0>)
   b6414:	4602      	mov	r2, r0
   b6416:	4810      	ldr	r0, [pc, #64]	; (b6458 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2a0>)
   b6418:	f7fd fe58 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b641c:	7823      	ldrb	r3, [r4, #0]
   b641e:	2b04      	cmp	r3, #4
   b6420:	d105      	bne.n	b642e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x276>
   b6422:	f7ff f90d 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b6426:	f7ff fabd 	bl	b59a4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
		else if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b642a:	4604      	mov	r4, r0
   b642c:	e706      	b.n	b623c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x84>
   b642e:	2b02      	cmp	r3, #2
   b6430:	d104      	bne.n	b643c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x284>
   b6432:	f7ff f905 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b6436:	f7ff fc37 	bl	b5ca8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b643a:	e7f6      	b.n	b642a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x272>
		else {Log.info("Invalid message flag"); return false;}
   b643c:	490f      	ldr	r1, [pc, #60]	; (b647c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x2c4>)
   b643e:	e7cb      	b.n	b63d8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x220>
	else LoRA_Functions::instance().clearBuffer();
   b6440:	f7ff f8fe 	bl	b5640 <_ZN14LoRA_Functions8instanceEv>
   b6444:	f7ff f910 	bl	b5668 <_ZN14LoRA_Functions11clearBufferEv>
   b6448:	e6f8      	b.n	b623c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x84>
   b644a:	bf00      	nop
   b644c:	2003aeb4 	.word	0x2003aeb4
   b6450:	2003afe4 	.word	0x2003afe4
   b6454:	000c6870 	.word	0x000c6870
   b6458:	2003e634 	.word	0x2003e634
   b645c:	2003aeab 	.word	0x2003aeab
   b6460:	2003ac6c 	.word	0x2003ac6c
   b6464:	2003b2b8 	.word	0x2003b2b8
   b6468:	000c68ca 	.word	0x000c68ca
   b646c:	000c6956 	.word	0x000c6956
   b6470:	000c6915 	.word	0x000c6915
   b6474:	000c6989 	.word	0x000c6989
   b6478:	000c69a9 	.word	0x000c69a9
   b647c:	000c69dd 	.word	0x000c69dd

000b6480 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
   b6480:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b6482:	4b0e      	ldr	r3, [pc, #56]	; (b64bc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x3c>)
RH_RF95 rf95(RFM95_CS, RFM95_INT);
   b6484:	4d0e      	ldr	r5, [pc, #56]	; (b64c0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x40>)
   b6486:	490f      	ldr	r1, [pc, #60]	; (b64c4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x44>)
RHEncryptedDriver driver(rf95, myCipher);   // Class instance for Encrypted RFM95 driver
   b6488:	4c0f      	ldr	r4, [pc, #60]	; (b64c8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x48>)
RH_RF95 rf95(RFM95_CS, RFM95_INT);
   b648a:	7809      	ldrb	r1, [r1, #0]
   b648c:	2201      	movs	r2, #1
   b648e:	701a      	strb	r2, [r3, #0]
   b6490:	4a0e      	ldr	r2, [pc, #56]	; (b64cc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x4c>)
   b6492:	4b0f      	ldr	r3, [pc, #60]	; (b64d0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x50>)
   b6494:	7812      	ldrb	r2, [r2, #0]
   b6496:	4628      	mov	r0, r5
   b6498:	f006 fbb4 	bl	bcc04 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
Speck myCipher;                             // Class instance for Speck block ciphering     
   b649c:	4a0d      	ldr	r2, [pc, #52]	; (b64d4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b649e:	4610      	mov	r0, r2
   b64a0:	f001 ff78 	bl	b8394 <_ZN5SpeckC1Ev>
RHEncryptedDriver driver(rf95, myCipher);   // Class instance for Encrypted RFM95 driver
   b64a4:	4629      	mov	r1, r5
   b64a6:	4a0b      	ldr	r2, [pc, #44]	; (b64d4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b64a8:	4620      	mov	r0, r4
   b64aa:	f006 ffc1 	bl	bd430 <_ZN17RHEncryptedDriverC1ER15RHGenericDriverR11BlockCipher>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b64ae:	4621      	mov	r1, r4
   b64b0:	4809      	ldr	r0, [pc, #36]	; (b64d8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x58>)
   b64b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b64b6:	2200      	movs	r2, #0
   b64b8:	f007 b940 	b.w	bd73c <_ZN6RHMeshC1ER15RHGenericDriverh>
   b64bc:	2003aeac 	.word	0x2003aeac
   b64c0:	2003b2b8 	.word	0x2003b2b8
   b64c4:	000c6a22 	.word	0x000c6a22
   b64c8:	2003afb0 	.word	0x2003afb0
   b64cc:	000c6a24 	.word	0x000c6a24
   b64d0:	2003b464 	.word	0x2003b464
   b64d4:	2003b198 	.word	0x2003b198
   b64d8:	2003afe4 	.word	0x2003afe4

000b64dc <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b64dc:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b64de:	4917      	ldr	r1, [pc, #92]	; (b653c <_Z18initializePinModesv+0x60>)
   b64e0:	4817      	ldr	r0, [pc, #92]	; (b6540 <_Z18initializePinModesv+0x64>)
   b64e2:	f7fd fdf3 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b64e6:	2102      	movs	r1, #2
   b64e8:	2004      	movs	r0, #4
   b64ea:	f00d f863 	bl	c35b4 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b64ee:	2100      	movs	r1, #0
   b64f0:	2008      	movs	r0, #8
   b64f2:	f00d f85f 	bl	c35b4 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b64f6:	2101      	movs	r1, #1
   b64f8:	2007      	movs	r0, #7
   b64fa:	f00d f85b 	bl	c35b4 <pinMode>
    pinMode(INT_PIN, INPUT);
   b64fe:	2100      	movs	r1, #0
   b6500:	2012      	movs	r0, #18
   b6502:	f00d f857 	bl	c35b4 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b6506:	2101      	movs	r1, #1
   b6508:	2011      	movs	r0, #17
   b650a:	f00d f853 	bl	c35b4 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b650e:	2101      	movs	r1, #1
   b6510:	2010      	movs	r0, #16
   b6512:	f00d f84f 	bl	c35b4 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b6516:	2100      	movs	r1, #0
   b6518:	2010      	movs	r0, #16
   b651a:	f00d f85c 	bl	c35d6 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b651e:	2100      	movs	r1, #0
   b6520:	2011      	movs	r0, #17
   b6522:	f00d f858 	bl	c35d6 <digitalWrite>
    pinMode(RFM95_RST,OUTPUT);
   b6526:	2101      	movs	r1, #1
   b6528:	2006      	movs	r0, #6
   b652a:	f00d f843 	bl	c35b4 <pinMode>
    digitalWrite(RFM95_RST,HIGH);
   b652e:	2101      	movs	r1, #1
   b6530:	2006      	movs	r0, #6
   b6532:	f00d f850 	bl	c35d6 <digitalWrite>
    return true;
}
   b6536:	2001      	movs	r0, #1
   b6538:	bd08      	pop	{r3, pc}
   b653a:	bf00      	nop
   b653c:	000c6a04 	.word	0x000c6a04
   b6540:	2003e634 	.word	0x2003e634

000b6544 <_Z18initializePowerCfgv>:
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
    */
    return true;
}
   b6544:	2001      	movs	r0, #1
   b6546:	4770      	bx	lr

000b6548 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6548:	4770      	bx	lr

000b654a <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b654a:	6a00      	ldr	r0, [r0, #32]
   b654c:	6803      	ldr	r3, [r0, #0]
   b654e:	68db      	ldr	r3, [r3, #12]
   b6550:	4718      	bx	r3

000b6552 <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b6552:	4770      	bx	lr

000b6554 <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b6554:	b510      	push	{r4, lr}
}
   b6556:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b6558:	4604      	mov	r4, r0
}
   b655a:	f7fd fda0 	bl	b409e <_ZdlPvj>
   b655e:	4620      	mov	r0, r4
   b6560:	bd10      	pop	{r4, pc}
	...

000b6564 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b6564:	b510      	push	{r4, lr}
   b6566:	4b03      	ldr	r3, [pc, #12]	; (b6574 <_ZN16JsonParserStaticILj1024ELj80EED1Ev+0x10>)
   b6568:	6003      	str	r3, [r0, #0]
   b656a:	4604      	mov	r4, r0
   b656c:	f002 ffe0 	bl	b9530 <_ZN10JsonParserD1Ev>
   b6570:	4620      	mov	r0, r4
   b6572:	bd10      	pop	{r4, pc}
   b6574:	000c7574 	.word	0x000c7574

000b6578 <_ZN16JsonParserStaticILj1024ELj80EED0Ev>:
   b6578:	b510      	push	{r4, lr}
   b657a:	4604      	mov	r4, r0
   b657c:	f7ff fff2 	bl	b6564 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
   b6580:	4620      	mov	r0, r4
   b6582:	f640 112c 	movw	r1, #2348	; 0x92c
   b6586:	f7fd fd8a 	bl	b409e <_ZdlPvj>
   b658a:	4620      	mov	r0, r4
   b658c:	bd10      	pop	{r4, pc}

000b658e <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b658e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b6590:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b6592:	6853      	ldr	r3, [r2, #4]
   b6594:	6890      	ldr	r0, [r2, #8]
   b6596:	6814      	ldr	r4, [r2, #0]
   b6598:	105e      	asrs	r6, r3, #1
   b659a:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b659e:	07db      	lsls	r3, r3, #31
   b65a0:	bf48      	it	mi
   b65a2:	5983      	ldrmi	r3, [r0, r6]
   b65a4:	4668      	mov	r0, sp
   b65a6:	bf48      	it	mi
   b65a8:	591c      	ldrmi	r4, [r3, r4]
   b65aa:	f00a fa56 	bl	c0a5a <_ZN6StringC1EOS_>
   b65ae:	4669      	mov	r1, sp
   b65b0:	4628      	mov	r0, r5
   b65b2:	47a0      	blx	r4
   b65b4:	4604      	mov	r4, r0
   b65b6:	4668      	mov	r0, sp
   b65b8:	f00a f9d2 	bl	c0960 <_ZN6StringD1Ev>
      }
   b65bc:	4620      	mov	r0, r4
   b65be:	b004      	add	sp, #16
   b65c0:	bd70      	pop	{r4, r5, r6, pc}

000b65c2 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b65c2:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b65c4:	b538      	push	{r3, r4, r5, lr}
   b65c6:	4604      	mov	r4, r0
	switch (__op)
   b65c8:	d102      	bne.n	b65d0 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b65ca:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b65cc:	6023      	str	r3, [r4, #0]
	}
   b65ce:	e003      	b.n	b65d8 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b65d0:	2a02      	cmp	r2, #2
   b65d2:	d003      	beq.n	b65dc <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b65d4:	2a03      	cmp	r2, #3
   b65d6:	d00d      	beq.n	b65f4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b65d8:	2000      	movs	r0, #0
   b65da:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b65dc:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b65de:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b65e0:	f7fd fd59 	bl	b4096 <_Znwj>
   b65e4:	4603      	mov	r3, r0
   b65e6:	2800      	cmp	r0, #0
   b65e8:	d0f0      	beq.n	b65cc <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b65ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b65ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b65f2:	e7eb      	b.n	b65cc <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b65f4:	6800      	ldr	r0, [r0, #0]
   b65f6:	2800      	cmp	r0, #0
   b65f8:	d0ee      	beq.n	b65d8 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b65fa:	210c      	movs	r1, #12
   b65fc:	f7fd fd4f 	bl	b409e <_ZdlPvj>
   b6600:	e7ea      	b.n	b65d8 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

000b6602 <_ZNK10JsonParser15getValueByIndexI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEjRT_.isra.0>:
	bool getValueByIndex(const JsonParserGeneratorRK::jsmntok_t *arrayContainer, size_t index, T &result) const {
   b6602:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6604:	461d      	mov	r5, r3
		if (getValueTokenByIndex(arrayContainer, index, value)) {
   b6606:	ab01      	add	r3, sp, #4
	bool getValueByIndex(const JsonParserGeneratorRK::jsmntok_t *arrayContainer, size_t index, T &result) const {
   b6608:	4604      	mov	r4, r0
		if (getValueTokenByIndex(arrayContainer, index, value)) {
   b660a:	f003 f875 	bl	b96f8 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b660e:	b120      	cbz	r0, b661a <_ZNK10JsonParser15getValueByIndexI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEjRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b6610:	9901      	ldr	r1, [sp, #4]
   b6612:	462a      	mov	r2, r5
   b6614:	4620      	mov	r0, r4
   b6616:	f003 f971 	bl	b98fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b661a:	b003      	add	sp, #12
   b661c:	bd30      	pop	{r4, r5, pc}

000b661e <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b661e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6620:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b6622:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6624:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b6626:	f003 f987 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b662a:	b120      	cbz	r0, b6636 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b662c:	9901      	ldr	r1, [sp, #4]
   b662e:	462a      	mov	r2, r5
   b6630:	4620      	mov	r0, r4
   b6632:	f003 f963 	bl	b98fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b6636:	b003      	add	sp, #12
   b6638:	bd30      	pop	{r4, r5, pc}

000b663a <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b663a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   b663c:	6804      	ldr	r4, [r0, #0]
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b663e:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   b6642:	f88d 3000 	strb.w	r3, [sp]
   b6646:	f88d 5004 	strb.w	r5, [sp, #4]
   b664a:	6824      	ldr	r4, [r4, #0]
   b664c:	233c      	movs	r3, #60	; 0x3c
   b664e:	47a0      	blx	r4
	}
   b6650:	b003      	add	sp, #12
   b6652:	bd30      	pop	{r4, r5, pc}

000b6654 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b6654:	4b0a      	ldr	r3, [pc, #40]	; (b6680 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b6656:	b510      	push	{r4, lr}
   b6658:	4604      	mov	r4, r0
   b665a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b665c:	f00a fde6 	bl	c122c <_ZN5spark10LogManager8instanceEv>
   b6660:	4621      	mov	r1, r4
   b6662:	f00a ffea 	bl	c163a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b6666:	f00c fac9 	bl	c2bfc <_Z16_fetch_usbserialv>
   b666a:	f00c fab9 	bl	c2be0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b666e:	4620      	mov	r0, r4
   b6670:	4b04      	ldr	r3, [pc, #16]	; (b6684 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b6672:	f840 3b04 	str.w	r3, [r0], #4
   b6676:	f00a fe7b 	bl	c1370 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b667a:	4620      	mov	r0, r4
   b667c:	bd10      	pop	{r4, pc}
   b667e:	bf00      	nop
   b6680:	000c755c 	.word	0x000c755c
   b6684:	000c7544 	.word	0x000c7544

000b6688 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6688:	b510      	push	{r4, lr}
   b668a:	4604      	mov	r4, r0
    }
   b668c:	f7ff ffe2 	bl	b6654 <_ZN5spark16SerialLogHandlerD1Ev>
   b6690:	4620      	mov	r0, r4
   b6692:	2124      	movs	r1, #36	; 0x24
   b6694:	f7fd fd03 	bl	b409e <_ZdlPvj>
   b6698:	4620      	mov	r0, r4
   b669a:	bd10      	pop	{r4, pc}

000b669c <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b669c:	b510      	push	{r4, lr}
  if (!_instance) {
   b669e:	4c06      	ldr	r4, [pc, #24]	; (b66b8 <_ZN18Particle_Functions8instanceEv+0x1c>)
   b66a0:	6823      	ldr	r3, [r4, #0]
   b66a2:	b933      	cbnz	r3, b66b2 <_ZN18Particle_Functions8instanceEv+0x16>
    _instance = new Particle_Functions();
   b66a4:	2004      	movs	r0, #4
   b66a6:	f7fd fcf6 	bl	b4096 <_Znwj>
   b66aa:	b108      	cbz	r0, b66b0 <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b66ac:	4b03      	ldr	r3, [pc, #12]	; (b66bc <_ZN18Particle_Functions8instanceEv+0x20>)
   b66ae:	6003      	str	r3, [r0, #0]
    _instance = new Particle_Functions();
   b66b0:	6020      	str	r0, [r4, #0]
}
   b66b2:	6820      	ldr	r0, [r4, #0]
   b66b4:	bd10      	pop	{r4, pc}
   b66b6:	bf00      	nop
   b66b8:	2003b3f8 	.word	0x2003b3f8
   b66bc:	000c7584 	.word	0x000c7584

000b66c0 <_ZN18Particle_Functions5setupEv>:

void Particle_Functions::setup() {
   b66c0:	b530      	push	{r4, r5, lr}
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b66c2:	4919      	ldr	r1, [pc, #100]	; (b6728 <_ZN18Particle_Functions5setupEv+0x68>)
void Particle_Functions::setup() {
   b66c4:	b085      	sub	sp, #20
   b66c6:	4604      	mov	r4, r0
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b66c8:	4818      	ldr	r0, [pc, #96]	; (b672c <_ZN18Particle_Functions5setupEv+0x6c>)
   b66ca:	f7fd fcff 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    _Function_base() : _M_manager(nullptr) { }
   b66ce:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b66d0:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b66d2:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b66d4:	f7fd fcdf 	bl	b4096 <_Znwj>
   b66d8:	b118      	cbz	r0, b66e2 <_ZN18Particle_Functions5setupEv+0x22>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b66da:	4b15      	ldr	r3, [pc, #84]	; (b6730 <_ZN18Particle_Functions5setupEv+0x70>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b66dc:	6084      	str	r4, [r0, #8]
   b66de:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b66e2:	4b14      	ldr	r3, [pc, #80]	; (b6734 <_ZN18Particle_Functions5setupEv+0x74>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b66e4:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b66e6:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b66e8:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b66ea:	4b13      	ldr	r3, [pc, #76]	; (b6738 <_ZN18Particle_Functions5setupEv+0x78>)
   b66ec:	9302      	str	r3, [sp, #8]
   b66ee:	f7fd fcd2 	bl	b4096 <_Znwj>
   b66f2:	4604      	mov	r4, r0
   b66f4:	b178      	cbz	r0, b6716 <_ZN18Particle_Functions5setupEv+0x56>
    _Function_base() : _M_manager(nullptr) { }
   b66f6:	2300      	movs	r3, #0
   b66f8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b66fa:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b66fc:	b133      	cbz	r3, b670c <_ZN18Particle_Functions5setupEv+0x4c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b66fe:	2202      	movs	r2, #2
   b6700:	4669      	mov	r1, sp
   b6702:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6704:	9b03      	ldr	r3, [sp, #12]
   b6706:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6708:	9b02      	ldr	r3, [sp, #8]
   b670a:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b670c:	4a0b      	ldr	r2, [pc, #44]	; (b673c <_ZN18Particle_Functions5setupEv+0x7c>)
   b670e:	480c      	ldr	r0, [pc, #48]	; (b6740 <_ZN18Particle_Functions5setupEv+0x80>)
   b6710:	4621      	mov	r1, r4
   b6712:	f00b ff1a 	bl	c254a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b6716:	9b02      	ldr	r3, [sp, #8]
   b6718:	b11b      	cbz	r3, b6722 <_ZN18Particle_Functions5setupEv+0x62>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b671a:	4669      	mov	r1, sp
   b671c:	2203      	movs	r2, #3
   b671e:	4608      	mov	r0, r1
   b6720:	4798      	blx	r3
  Particle.function("Commands", &Particle_Functions::jsonFunctionParser, this);
}
   b6722:	b005      	add	sp, #20
   b6724:	bd30      	pop	{r4, r5, pc}
   b6726:	bf00      	nop
   b6728:	000c6a2a 	.word	0x000c6a2a
   b672c:	2003e634 	.word	0x2003e634
   b6730:	000b67dd 	.word	0x000b67dd
   b6734:	000b658f 	.word	0x000b658f
   b6738:	000b65c3 	.word	0x000b65c3
   b673c:	000c6a58 	.word	0x000c6a58
   b6740:	000c2523 	.word	0x000c2523

000b6744 <_ZN18Particle_Functions22disconnectFromParticleEv>:
	return success;
}                    

bool Particle_Functions::disconnectFromParticle()                      // Ensures we disconnect cleanly from Particle
                                                                       // Updated based on this thread: https://community.particle.io/t/waitfor-particle-connected-timeout-does-not-time-out/59181
{
   b6744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  time_t startTime = Time.now();
   b6746:	f00b fcc2 	bl	c20ce <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b674a:	491f      	ldr	r1, [pc, #124]	; (b67c8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x84>)
  time_t startTime = Time.now();
   b674c:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b674e:	481f      	ldr	r0, [pc, #124]	; (b67cc <_ZN18Particle_Functions22disconnectFromParticleEv+0x88>)
   b6750:	f7fd fcbc 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b6754:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b6756:	a801      	add	r0, sp, #4
   b6758:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b675c:	f8ad 400c 	strh.w	r4, [sp, #12]
   b6760:	f00b ff04 	bl	c256c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b6764:	4620      	mov	r0, r4
   b6766:	f009 fa5f 	bl	bfc28 <hal_timer_millis>
        while (_while() && !_condition()) {
   b676a:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b676e:	4604      	mov	r4, r0
   b6770:	2000      	movs	r0, #0
   b6772:	f009 fa59 	bl	bfc28 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b6776:	1b03      	subs	r3, r0, r4
   b6778:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b677c:	42b3      	cmp	r3, r6
   b677e:	f171 0300 	sbcs.w	r3, r1, #0
   b6782:	d205      	bcs.n	b6790 <_ZN18Particle_Functions22disconnectFromParticleEv+0x4c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6784:	f009 fdb0 	bl	c02e8 <spark_cloud_flag_connected>
   b6788:	b110      	cbz	r0, b6790 <_ZN18Particle_Functions22disconnectFromParticleEv+0x4c>
            spark_process();
   b678a:	f009 fd9d 	bl	c02c8 <spark_process>
        while (_while() && !_condition()) {
   b678e:	e7ef      	b.n	b6770 <_ZN18Particle_Functions22disconnectFromParticleEv+0x2c>
   b6790:	f009 fdaa 	bl	c02e8 <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   b6794:	f009 fa38 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b6798:	4b0d      	ldr	r3, [pc, #52]	; (b67d0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x8c>)
   b679a:	6018      	str	r0, [r3, #0]
            return spark_process();
   b679c:	f009 fd94 	bl	c02c8 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b67a0:	f009 fda2 	bl	c02e8 <spark_cloud_flag_connected>
  waitForNot(Particle.connected, 15000);                               // Up to a 15 second delay() 
  Particle.process();
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b67a4:	b130      	cbz	r0, b67b4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x70>
    Log.info("Failed to disconnect from Particle");
   b67a6:	4809      	ldr	r0, [pc, #36]	; (b67cc <_ZN18Particle_Functions22disconnectFromParticleEv+0x88>)
   b67a8:	490a      	ldr	r1, [pc, #40]	; (b67d4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x90>)
   b67aa:	f7fd fc8f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    return false;
   b67ae:	2000      	movs	r0, #0
    else {
      Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
      return true;
    }
  #endif
}
   b67b0:	b004      	add	sp, #16
   b67b2:	bd70      	pop	{r4, r5, r6, pc}
    Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b67b4:	f00b fc8b 	bl	c20ce <_ZN9TimeClass3nowEv>
   b67b8:	4907      	ldr	r1, [pc, #28]	; (b67d8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x94>)
   b67ba:	1b42      	subs	r2, r0, r5
   b67bc:	4803      	ldr	r0, [pc, #12]	; (b67cc <_ZN18Particle_Functions22disconnectFromParticleEv+0x88>)
   b67be:	f7fd fc85 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b67c2:	2001      	movs	r0, #1
   b67c4:	e7f4      	b.n	b67b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x6c>
   b67c6:	bf00      	nop
   b67c8:	000c6a61 	.word	0x000c6a61
   b67cc:	2003e634 	.word	0x2003e634
   b67d0:	2003e728 	.word	0x2003e728
   b67d4:	000c6a8a 	.word	0x000c6a8a
   b67d8:	000c6aad 	.word	0x000c6aad

000b67dc <_ZN18Particle_Functions18jsonFunctionParserE6String>:
int Particle_Functions::jsonFunctionParser(String command) {
   b67dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b67e0:	ed2d 8b02 	vpush	{d8}
   b67e4:	f6ad 2d54 	subw	sp, sp, #2644	; 0xa54
   b67e8:	460c      	mov	r4, r1
   b67ea:	ee08 0a10 	vmov	s16, r0
	String variable;
   b67ee:	49b5      	ldr	r1, [pc, #724]	; (b6ac4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e8>)
   b67f0:	a80d      	add	r0, sp, #52	; 0x34
   b67f2:	f00a f900 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
	String function;
   b67f6:	49b3      	ldr	r1, [pc, #716]	; (b6ac4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e8>)
   b67f8:	a811      	add	r0, sp, #68	; 0x44
   b67fa:	f00a f8fc 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b67fe:	2350      	movs	r3, #80	; 0x50
   b6800:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b6804:	9300      	str	r3, [sp, #0]
   b6806:	a954      	add	r1, sp, #336	; 0x150
   b6808:	f50d 63aa 	add.w	r3, sp, #1360	; 0x550
   b680c:	a849      	add	r0, sp, #292	; 0x124
   b680e:	f002 fef1 	bl	b95f4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b6812:	4bad      	ldr	r3, [pc, #692]	; (b6ac8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ec>)
  Log.info(command.c_str());
   b6814:	6821      	ldr	r1, [r4, #0]
   b6816:	48ad      	ldr	r0, [pc, #692]	; (b6acc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b6818:	9349      	str	r3, [sp, #292]	; 0x124
   b681a:	f7fd fc57 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	jp.clear();
   b681e:	a849      	add	r0, sp, #292	; 0x124
   b6820:	f002 fede 	bl	b95e0 <_ZN10JsonBuffer5clearEv>
    const char * c_str() const { return buffer; }
   b6824:	6821      	ldr	r1, [r4, #0]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6826:	9104      	str	r1, [sp, #16]
   b6828:	4608      	mov	r0, r1
   b682a:	f00e febc 	bl	c55a6 <strlen>
   b682e:	9904      	ldr	r1, [sp, #16]
   b6830:	4602      	mov	r2, r0
   b6832:	a849      	add	r0, sp, #292	; 0x124
   b6834:	f002 feb7 	bl	b95a6 <_ZN10JsonBuffer7addDataEPKcj>
	if (!jp.parse()) {
   b6838:	a849      	add	r0, sp, #292	; 0x124
   b683a:	f003 fc2f 	bl	ba09c <_ZN10JsonParser5parseEv>
   b683e:	4681      	mov	r9, r0
   b6840:	2800      	cmp	r0, #0
   b6842:	d148      	bne.n	b68d6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xfa>
		Log.info("Parsing failed - check syntax");
   b6844:	49a2      	ldr	r1, [pc, #648]	; (b6ad0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f4>)
   b6846:	4da3      	ldr	r5, [pc, #652]	; (b6ad4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b6848:	48a0      	ldr	r0, [pc, #640]	; (b6acc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b684a:	f7fd fc3f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    PublishQueuePosix::instance().publish("cmd", "Parsing failed - check syntax",PRIVATE);
   b684e:	f004 f82f 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b6852:	f88d 9000 	strb.w	r9, [sp]
   b6856:	782b      	ldrb	r3, [r5, #0]
   b6858:	4a9d      	ldr	r2, [pc, #628]	; (b6ad0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f4>)
   b685a:	499f      	ldr	r1, [pc, #636]	; (b6ad8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
   b685c:	f7ff feed 	bl	b663a <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b6860:	6826      	ldr	r6, [r4, #0]
    snprintf(data, sizeof(data), "{\"commands\":%i,\"context\":\"%s,\"timestamp\":%lu000 }", -1, command.c_str(), Time.now());        // Send -1 (Syntax Error) to the 'commands' Synthetic Variable
   b6862:	f00b fc34 	bl	c20ce <_ZN9TimeClass3nowEv>
   b6866:	4a9d      	ldr	r2, [pc, #628]	; (b6adc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x300>)
   b6868:	f04f 33ff 	mov.w	r3, #4294967295
   b686c:	2180      	movs	r1, #128	; 0x80
   b686e:	e9cd 6000 	strd	r6, r0, [sp]
   b6872:	a829      	add	r0, sp, #164	; 0xa4
   b6874:	f009 fda0 	bl	c03b8 <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Command_Hook", data, PRIVATE);
   b6878:	f004 f81a 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b687c:	f88d 9000 	strb.w	r9, [sp]
   b6880:	782b      	ldrb	r3, [r5, #0]
   b6882:	4997      	ldr	r1, [pc, #604]	; (b6ae0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b6884:	aa29      	add	r2, sp, #164	; 0xa4
   b6886:	f7ff fed8 	bl	b663a <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b688a:	6824      	ldr	r4, [r4, #0]
    snprintf(data, sizeof(data), "{\"commands\":%i,\"context\":\"%s\",\"timestamp\":%lu000 }", -10, command.c_str(), Time.now());    // Send -10, resolve any events
   b688c:	f00b fc1f 	bl	c20ce <_ZN9TimeClass3nowEv>
   b6890:	4a94      	ldr	r2, [pc, #592]	; (b6ae4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>)
   b6892:	f06f 0309 	mvn.w	r3, #9
   b6896:	2180      	movs	r1, #128	; 0x80
   b6898:	e9cd 4000 	strd	r4, r0, [sp]
   b689c:	a829      	add	r0, sp, #164	; 0xa4
   b689e:	f009 fd8b 	bl	c03b8 <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Command_Hook", data, PRIVATE);
   b68a2:	f004 f805 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b68a6:	f88d 9000 	strb.w	r9, [sp]
   b68aa:	782b      	ldrb	r3, [r5, #0]
   b68ac:	498c      	ldr	r1, [pc, #560]	; (b6ae0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b68ae:	aa29      	add	r2, sp, #164	; 0xa4
   b68b0:	f7ff fec3 	bl	b663a <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
		return 0;
   b68b4:	46c8      	mov	r8, r9
	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens
   b68b6:	a849      	add	r0, sp, #292	; 0x124
   b68b8:	f7ff fe54 	bl	b6564 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
	String function;
   b68bc:	a811      	add	r0, sp, #68	; 0x44
   b68be:	f00a f84f 	bl	c0960 <_ZN6StringD1Ev>
	String variable;
   b68c2:	a80d      	add	r0, sp, #52	; 0x34
   b68c4:	f00a f84c 	bl	c0960 <_ZN6StringD1Ev>
}                    
   b68c8:	4640      	mov	r0, r8
   b68ca:	f60d 2d54 	addw	sp, sp, #2644	; 0xa54
   b68ce:	ecbd 8b02 	vpop	{d8}
   b68d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b68d6:	a849      	add	r0, sp, #292	; 0x124
   b68d8:	f002 fea7 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b68dc:	f04f 0800 	mov.w	r8, #0
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b68e0:	4601      	mov	r1, r0
   b68e2:	4a7d      	ldr	r2, [pc, #500]	; (b6ad8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b68e4:	f8df b230 	ldr.w	fp, [pc, #560]	; b6b18 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x33c>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b68e8:	ab09      	add	r3, sp, #36	; 0x24
   b68ea:	a849      	add	r0, sp, #292	; 0x124
   b68ec:	f003 f824 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
  bool success = true;  
   b68f0:	464d      	mov	r5, r9
  bool invalidCommand = false;
   b68f2:	f8cd 8010 	str.w	r8, [sp, #16]
		cmdObjectContainer = jp.getTokenByIndex(cmdArrayContainer, i);
   b68f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b68f8:	4642      	mov	r2, r8
   b68fa:	a849      	add	r0, sp, #292	; 0x124
   b68fc:	f002 feb7 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(cmdObjectContainer == NULL) {
   b6900:	4606      	mov	r6, r0
   b6902:	2800      	cmp	r0, #0
   b6904:	d135      	bne.n	b6972 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x196>
      if (i == 0) return 0;                                       // No valid entries
   b6906:	f1b8 0f00 	cmp.w	r8, #0
   b690a:	d0d4      	beq.n	b68b6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xda>
   b690c:	f009 fcec 	bl	c02e8 <spark_cloud_flag_connected>
  if (Particle.connected()){
   b6910:	b368      	cbz	r0, b696e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x192>
   b6912:	9e11      	ldr	r6, [sp, #68]	; 0x44
   b6914:	4c6f      	ldr	r4, [pc, #444]	; (b6ad4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
    if(success == true){           // send the Success slack notification if the command was not recognized
   b6916:	2d00      	cmp	r5, #0
   b6918:	f000 84b3 	beq.w	b7282 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xaa6>
      snprintf(data, sizeof(data), "{\"commands\":%i,\"context\":\"%s\",\"timestamp\":%lu000 }", 1, function.c_str(), Time.now());    // Send 1 (Execution Success) to the 'commands' Synthetic Variable
   b691c:	f00b fbd7 	bl	c20ce <_ZN9TimeClass3nowEv>
   b6920:	4a70      	ldr	r2, [pc, #448]	; (b6ae4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>)
   b6922:	e9cd 6000 	strd	r6, r0, [sp]
   b6926:	2301      	movs	r3, #1
   b6928:	2180      	movs	r1, #128	; 0x80
        val_(0) {
   b692a:	2600      	movs	r6, #0
   b692c:	a829      	add	r0, sp, #164	; 0xa4
   b692e:	f009 fd43 	bl	c03b8 <snprintf>
      PublishQueuePosix::instance().publish("Ubidots_Command_Hook", data, PRIVATE);
   b6932:	f003 ffbd 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b6936:	f88d 6000 	strb.w	r6, [sp]
   b693a:	7823      	ldrb	r3, [r4, #0]
   b693c:	4968      	ldr	r1, [pc, #416]	; (b6ae0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b693e:	aa29      	add	r2, sp, #164	; 0xa4
   b6940:	f7ff fe7b 	bl	b663a <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b6944:	9f11      	ldr	r7, [sp, #68]	; 0x44
      snprintf(data, sizeof(data), "{\"commands\":%i,\"context\":\"%s\",\"timestamp\":%lu000 }", -10, function.c_str(), Time.now());  // Send -10, resolve any events
   b6946:	f00b fbc2 	bl	c20ce <_ZN9TimeClass3nowEv>
   b694a:	4a66      	ldr	r2, [pc, #408]	; (b6ae4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>)
   b694c:	e9cd 7000 	strd	r7, r0, [sp]
   b6950:	f06f 0309 	mvn.w	r3, #9
   b6954:	2180      	movs	r1, #128	; 0x80
   b6956:	a829      	add	r0, sp, #164	; 0xa4
   b6958:	f009 fd2e 	bl	c03b8 <snprintf>
      PublishQueuePosix::instance().publish("Ubidots_Command_Hook", data, PRIVATE);
   b695c:	f003 ffa8 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b6960:	f88d 6000 	strb.w	r6, [sp]
        PublishQueuePosix::instance().publish("Ubidots_Command_Hook", data, PRIVATE);
   b6964:	7823      	ldrb	r3, [r4, #0]
   b6966:	495e      	ldr	r1, [pc, #376]	; (b6ae0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b6968:	aa29      	add	r2, sp, #164	; 0xa4
   b696a:	f7ff fe66 	bl	b663a <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	return success;
   b696e:	46a8      	mov	r8, r5
   b6970:	e7a1      	b.n	b68b6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xda>
		if (getValueTokenByKey(container, name, value)) {
   b6972:	4601      	mov	r1, r0
   b6974:	4a5c      	ldr	r2, [pc, #368]	; (b6ae8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x30c>)
   b6976:	ab29      	add	r3, sp, #164	; 0xa4
   b6978:	a849      	add	r0, sp, #292	; 0x124
   b697a:	f002 ffdd 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b697e:	b120      	cbz	r0, b698a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ae>
			return getTokenValue(value, result);
   b6980:	9929      	ldr	r1, [sp, #164]	; 0xa4
   b6982:	aa07      	add	r2, sp, #28
   b6984:	a849      	add	r0, sp, #292	; 0x124
   b6986:	f002 fefb 	bl	b9780 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>
    nodeNumber = JsonDataManager::instance().getNodeNumberForUniqueID(nodeUniqueID); // nodeNumber is uniqueID
   b698a:	f007 f8bf 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b698e:	9907      	ldr	r1, [sp, #28]
   b6990:	f007 fa28 	bl	bdde4 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm>
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b6994:	4631      	mov	r1, r6
   b6996:	ab0d      	add	r3, sp, #52	; 0x34
   b6998:	465a      	mov	r2, fp
    nodeNumber = JsonDataManager::instance().getNodeNumberForUniqueID(nodeUniqueID); // nodeNumber is uniqueID
   b699a:	4604      	mov	r4, r0
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b699c:	a849      	add	r0, sp, #292	; 0x124
   b699e:	f7ff fe3e 	bl	b661e <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b69a2:	4631      	mov	r1, r6
   b69a4:	4a51      	ldr	r2, [pc, #324]	; (b6aec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x310>)
   b69a6:	ab11      	add	r3, sp, #68	; 0x44
   b69a8:	a849      	add	r0, sp, #292	; 0x124
   b69aa:	f7ff fe38 	bl	b661e <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
    jp.getValueTokenByKey(cmdObjectContainer, "var", varArrayContainer);
   b69ae:	4631      	mov	r1, r6
   b69b0:	ab0a      	add	r3, sp, #40	; 0x28
   b69b2:	465a      	mov	r2, fp
   b69b4:	a849      	add	r0, sp, #292	; 0x124
   b69b6:	f002 ffbf 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b69ba:	494d      	ldr	r1, [pc, #308]	; (b6af0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x314>)
   b69bc:	a811      	add	r0, sp, #68	; 0x44
   b69be:	f00a f8e1 	bl	c0b84 <_ZNK6String6equalsEPKc>
   b69c2:	ae19      	add	r6, sp, #100	; 0x64
		if (function == "reset") {
   b69c4:	2800      	cmp	r0, #0
   b69c6:	f000 80b9 	beq.w	b6b3c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x360>
      if (nodeUniqueID == 0) {        // if the unique ID passed to the node is "0", we are talking about the gateway
   b69ca:	9f07      	ldr	r7, [sp, #28]
   b69cc:	2f00      	cmp	r7, #0
   b69ce:	d166      	bne.n	b6a9e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c2>
   b69d0:	4948      	ldr	r1, [pc, #288]	; (b6af4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x318>)
   b69d2:	a80d      	add	r0, sp, #52	; 0x34
   b69d4:	f00a f8d6 	bl	c0b84 <_ZNK6String6equalsEPKc>
        if (variable == "nodeData") {
   b69d8:	2800      	cmp	r0, #0
   b69da:	d047      	beq.n	b6a6c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x290>
          snprintf(messaging,sizeof(messaging),"Resetting the gateway's node Data");
   b69dc:	4946      	ldr	r1, [pc, #280]	; (b6af8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x31c>)
   b69de:	4630      	mov	r0, r6
   b69e0:	f00e fdbb 	bl	c555a <strcpy>
          nodeDatabase.resetNodeIDs();
   b69e4:	f000 ff44 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   b69e8:	f000 ff8e 	bl	b7908 <_ZN10nodeIDData12resetNodeIDsEv>
          Log.info("Resetting the Gateway node so new database is in effect");
   b69ec:	4943      	ldr	r1, [pc, #268]	; (b6afc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x320>)
   b69ee:	4837      	ldr	r0, [pc, #220]	; (b6acc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b69f0:	f7fd fb6c 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
          PublishQueuePosix::instance().publish("Alert","Resetting Gateway",PRIVATE);
   b69f4:	f003 ff5c 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b69f8:	4b36      	ldr	r3, [pc, #216]	; (b6ad4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b69fa:	f88d 7000 	strb.w	r7, [sp]
   b69fe:	781b      	ldrb	r3, [r3, #0]
   b6a00:	4a3f      	ldr	r2, [pc, #252]	; (b6b00 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x324>)
   b6a02:	4940      	ldr	r1, [pc, #256]	; (b6b04 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x328>)
   b6a04:	f7ff fe19 	bl	b663a <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
          delay(2000);
   b6a08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b6a0c:	f00b fb9e 	bl	c214c <delay>
          System.reset();
   b6a10:	f009 ff1f 	bl	c0852 <_ZN11SystemClass5resetEv>
        sysStatus.set_messageCount(0);                  // Reset the message count
   b6a14:	f000 fe58 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6a18:	2100      	movs	r1, #0
   b6a1a:	f001 fa13 	bl	b7e44 <_ZN13sysStatusData16set_messageCountEt>
        sysStatus.set_alertCodeGateway(20);              // Alert code 20 will reset the current data on the gateway
   b6a1e:	f000 fe53 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6a22:	2114      	movs	r1, #20
   b6a24:	f001 f89d 	bl	b7b62 <_ZN13sysStatusData20set_alertCodeGatewayEh>
        sysStatus.set_resetCount(0);
   b6a28:	f000 fe4e 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6a2c:	2100      	movs	r1, #0
   b6a2e:	f001 f892 	bl	b7b56 <_ZN13sysStatusData14set_resetCountEh>
    if (!(strncmp(messaging," ",1) == 0)) {
   b6a32:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   b6a36:	2b20      	cmp	r3, #32
   b6a38:	d011      	beq.n	b6a5e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x282>
      Log.info(messaging);
   b6a3a:	4824      	ldr	r0, [pc, #144]	; (b6acc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b6a3c:	a919      	add	r1, sp, #100	; 0x64
   b6a3e:	f7fd fb45 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b6a42:	f009 fc51 	bl	c02e8 <spark_cloud_flag_connected>
      if (Particle.connected()) PublishQueuePosix::instance().publish("cmd",messaging,PRIVATE);
   b6a46:	b150      	cbz	r0, b6a5e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x282>
   b6a48:	f003 ff32 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b6a4c:	2300      	movs	r3, #0
   b6a4e:	f88d 3000 	strb.w	r3, [sp]
   b6a52:	4b20      	ldr	r3, [pc, #128]	; (b6ad4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b6a54:	4920      	ldr	r1, [pc, #128]	; (b6ad8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
   b6a56:	781b      	ldrb	r3, [r3, #0]
   b6a58:	aa19      	add	r2, sp, #100	; 0x64
   b6a5a:	f7ff fdee 	bl	b663a <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b6a5e:	f108 0801 	add.w	r8, r8, #1
   b6a62:	f1b8 0f0a 	cmp.w	r8, #10
   b6a66:	f47f af46 	bne.w	b68f6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x11a>
   b6a6a:	e74f      	b.n	b690c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x130>
   b6a6c:	4926      	ldr	r1, [pc, #152]	; (b6b08 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x32c>)
   b6a6e:	a80d      	add	r0, sp, #52	; 0x34
   b6a70:	f00a f888 	bl	c0b84 <_ZNK6String6equalsEPKc>
        else if (variable == "all") {
   b6a74:	b170      	cbz	r0, b6a94 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>
            snprintf(messaging,sizeof(messaging),"Resetting the gateway's system and current data");
   b6a76:	4925      	ldr	r1, [pc, #148]	; (b6b0c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x330>)
   b6a78:	4630      	mov	r0, r6
   b6a7a:	f00e fd6e 	bl	c555a <strcpy>
            sysStatus.initialize();                     // All will reset system values as well
   b6a7e:	f000 fe23 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6a82:	6803      	ldr	r3, [r0, #0]
   b6a84:	699b      	ldr	r3, [r3, #24]
   b6a86:	4798      	blx	r3
            nodeDatabase.initialize();
   b6a88:	f000 fef2 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   b6a8c:	6803      	ldr	r3, [r0, #0]
   b6a8e:	699b      	ldr	r3, [r3, #24]
   b6a90:	4798      	blx	r3
   b6a92:	e7bf      	b.n	b6a14 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x238>
        else snprintf(messaging,sizeof(messaging),"Resetting the gateway's current data");
   b6a94:	491e      	ldr	r1, [pc, #120]	; (b6b10 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x334>)
   b6a96:	4630      	mov	r0, r6
   b6a98:	f00e fd5f 	bl	c555a <strcpy>
   b6a9c:	e7ba      	b.n	b6a14 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x238>
      else if(nodeNumber != 0) {                        // if we could not set the nodeNumber from that unique ID, throw an error
   b6a9e:	2c00      	cmp	r4, #0
   b6aa0:	d047      	beq.n	b6b32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x356>
   b6aa2:	4919      	ldr	r1, [pc, #100]	; (b6b08 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x32c>)
   b6aa4:	a80d      	add	r0, sp, #52	; 0x34
   b6aa6:	f00a f86d 	bl	c0b84 <_ZNK6String6equalsEPKc>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b6aaa:	4623      	mov	r3, r4
        if (variable == "all") {
   b6aac:	b3b0      	cbz	r0, b6b1c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x340>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b6aae:	4a19      	ldr	r2, [pc, #100]	; (b6b14 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x338>)
   b6ab0:	2140      	movs	r1, #64	; 0x40
   b6ab2:	4630      	mov	r0, r6
   b6ab4:	f009 fc80 	bl	c03b8 <snprintf>
          JsonDataManager::instance().resetAllDataForNode(nodeNumber);
   b6ab8:	f007 f828 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b6abc:	4621      	mov	r1, r4
   b6abe:	f008 fbb9 	bl	bf234 <_ZN15JsonDataManager19resetAllDataForNodeEi>
   b6ac2:	e7b6      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
   b6ac4:	000c9298 	.word	0x000c9298
   b6ac8:	000c7574 	.word	0x000c7574
   b6acc:	2003e634 	.word	0x2003e634
   b6ad0:	000c6ad6 	.word	0x000c6ad6
   b6ad4:	2003b3f4 	.word	0x2003b3f4
   b6ad8:	000c6af4 	.word	0x000c6af4
   b6adc:	000c6af8 	.word	0x000c6af8
   b6ae0:	000c6b2a 	.word	0x000c6b2a
   b6ae4:	000c6b3f 	.word	0x000c6b3f
   b6ae8:	000c6b72 	.word	0x000c6b72
   b6aec:	000c6b77 	.word	0x000c6b77
   b6af0:	000c6b7a 	.word	0x000c6b7a
   b6af4:	000c6b80 	.word	0x000c6b80
   b6af8:	000c6b89 	.word	0x000c6b89
   b6afc:	000c6bab 	.word	0x000c6bab
   b6b00:	000c6be3 	.word	0x000c6be3
   b6b04:	000c5f9c 	.word	0x000c5f9c
   b6b08:	000c6bf5 	.word	0x000c6bf5
   b6b0c:	000c6bf9 	.word	0x000c6bf9
   b6b10:	000c6c29 	.word	0x000c6c29
   b6b14:	000c6c4e 	.word	0x000c6c4e
   b6b18:	000c7369 	.word	0x000c7369
          snprintf(messaging,sizeof(messaging),"Resetting node %d's current data", nodeNumber);
   b6b1c:	4aa0      	ldr	r2, [pc, #640]	; (b6da0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5c4>)
   b6b1e:	2140      	movs	r1, #64	; 0x40
   b6b20:	4630      	mov	r0, r6
   b6b22:	f009 fc49 	bl	c03b8 <snprintf>
          JsonDataManager::instance().resetCurrentDataForNode(nodeNumber);
   b6b26:	f006 fff1 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b6b2a:	4621      	mov	r1, r4
   b6b2c:	f008 fa50 	bl	befd0 <_ZN15JsonDataManager23resetCurrentDataForNodeEi>
   b6b30:	e77f      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
        snprintf(messaging,sizeof(messaging),"Not a valid node uniqueID");
   b6b32:	499c      	ldr	r1, [pc, #624]	; (b6da4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5c8>)
   b6b34:	4630      	mov	r0, r6
   b6b36:	f00e fd10 	bl	c555a <strcpy>
   b6b3a:	e77a      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
   b6b3c:	499a      	ldr	r1, [pc, #616]	; (b6da8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5cc>)
   b6b3e:	a811      	add	r0, sp, #68	; 0x44
   b6b40:	f00a f820 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "freq") {   
   b6b44:	b318      	cbz	r0, b6b8e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3b2>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6b46:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6b48:	220a      	movs	r2, #10
   b6b4a:	a908      	add	r1, sp, #32
   b6b4c:	f00e fe1c 	bl	c5788 <strtol>
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b6b50:	1e43      	subs	r3, r0, #1
   b6b52:	2b3b      	cmp	r3, #59	; 0x3b
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6b54:	4604      	mov	r4, r0
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b6b56:	d814      	bhi.n	b6b82 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a6>
   b6b58:	233c      	movs	r3, #60	; 0x3c
   b6b5a:	fb93 f3f0 	sdiv	r3, r3, r0
   b6b5e:	4343      	muls	r3, r0
   b6b60:	2b3c      	cmp	r3, #60	; 0x3c
   b6b62:	d10e      	bne.n	b6b82 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a6>
        snprintf(messaging,sizeof(messaging),"Setting reporting frequency to %d minutes", tempValue);
   b6b64:	4603      	mov	r3, r0
   b6b66:	4a91      	ldr	r2, [pc, #580]	; (b6dac <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5d0>)
   b6b68:	2140      	movs	r1, #64	; 0x40
   b6b6a:	4630      	mov	r0, r6
   b6b6c:	f009 fc24 	bl	c03b8 <snprintf>
        sysStatus.set_updatedfrequencySeconds(tempValue * 60UL);
   b6b70:	f000 fdaa 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6b74:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   b6b78:	0089      	lsls	r1, r1, #2
   b6b7a:	b289      	uxth	r1, r1
   b6b7c:	f001 f974 	bl	b7e68 <_ZN13sysStatusData27set_updatedfrequencySecondsEt>
   b6b80:	e757      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
        snprintf(messaging,sizeof(messaging),"Not a valid reporting frequency");
   b6b82:	498b      	ldr	r1, [pc, #556]	; (b6db0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5d4>)
        snprintf(messaging,sizeof(messaging),"Power Cycle value not = 1)");
   b6b84:	4630      	mov	r0, r6
        snprintf(messaging,sizeof(messaging),"Can only reset spaces through Gateway (node 0)");
   b6b86:	f00e fce8 	bl	c555a <strcpy>
        success = false; 
   b6b8a:	2500      	movs	r5, #0
   b6b8c:	e751      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
   b6b8e:	4989      	ldr	r1, [pc, #548]	; (b6db4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5d8>)
   b6b90:	a811      	add	r0, sp, #68	; 0x44
   b6b92:	f009 fff7 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "stay") {
   b6b96:	b328      	cbz	r0, b6be4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x408>
   b6b98:	4987      	ldr	r1, [pc, #540]	; (b6db8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5dc>)
   b6b9a:	a80d      	add	r0, sp, #52	; 0x34
   b6b9c:	f009 fff2 	bl	c0b84 <_ZNK6String6equalsEPKc>
      if (variable == "true") {
   b6ba0:	4604      	mov	r4, r0
   b6ba2:	b148      	cbz	r0, b6bb8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3dc>
        snprintf(messaging,sizeof(messaging),"Going to keep Gateway on Particle and LoRA networks");
   b6ba4:	4985      	ldr	r1, [pc, #532]	; (b6dbc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5e0>)
   b6ba6:	4630      	mov	r0, r6
   b6ba8:	f00e fcd7 	bl	c555a <strcpy>
        sysStatus.set_connectivityMode(1);
   b6bac:	f000 fd8c 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6bb0:	2101      	movs	r1, #1
   b6bb2:	f000 ffca 	bl	b7b4a <_ZN13sysStatusData20set_connectivityModeEh>
   b6bb6:	e73c      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
        snprintf(messaging,sizeof(messaging),"Going back to normal connectivity");
   b6bb8:	4981      	ldr	r1, [pc, #516]	; (b6dc0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5e4>)
   b6bba:	4630      	mov	r0, r6
   b6bbc:	f00e fccd 	bl	c555a <strcpy>
        sysStatus.set_connectivityMode(0);                            // Make sure we are set to not connect on resetart.
   b6bc0:	f000 fd82 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6bc4:	4621      	mov	r1, r4
   b6bc6:	f000 ffc0 	bl	b7b4a <_ZN13sysStatusData20set_connectivityModeEh>
        sysStatus.flush(true);    
   b6bca:	f000 fd7d 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6bce:	6803      	ldr	r3, [r0, #0]
   b6bd0:	2101      	movs	r1, #1
   b6bd2:	68db      	ldr	r3, [r3, #12]
   b6bd4:	4798      	blx	r3
        Particle_Functions::disconnectFromParticle();                 // Can't reset if modem is powered up
   b6bd6:	ee18 0a10 	vmov	r0, s16
   b6bda:	f7ff fdb3 	bl	b6744 <_ZN18Particle_Functions22disconnectFromParticleEv>
        System.reset();                                               // Needed to disconnect from LoRA
   b6bde:	f009 fe38 	bl	c0852 <_ZN11SystemClass5resetEv>
   b6be2:	e726      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
   b6be4:	4977      	ldr	r1, [pc, #476]	; (b6dc4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5e8>)
   b6be6:	a811      	add	r0, sp, #68	; 0x44
   b6be8:	f009 ffcc 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "rpt") {
   b6bec:	b148      	cbz	r0, b6c02 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x426>
      snprintf(messaging,sizeof(messaging),"Printing nodeID Data");
   b6bee:	4976      	ldr	r1, [pc, #472]	; (b6dc8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5ec>)
   b6bf0:	4630      	mov	r0, r6
   b6bf2:	f00e fcb2 	bl	c555a <strcpy>
      JsonDataManager::instance().printNodeData(true);
   b6bf6:	f006 ff89 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b6bfa:	2101      	movs	r1, #1
   b6bfc:	f007 fb86 	bl	be30c <_ZN15JsonDataManager13printNodeDataEb>
   b6c00:	e717      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
   b6c02:	4972      	ldr	r1, [pc, #456]	; (b6dcc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5f0>)
   b6c04:	a811      	add	r0, sp, #68	; 0x44
   b6c06:	f009 ffbd 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "open") {
   b6c0a:	4607      	mov	r7, r0
   b6c0c:	b1a8      	cbz	r0, b6c3a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x45e>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6c0e:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6c10:	220a      	movs	r2, #10
   b6c12:	a908      	add	r1, sp, #32
   b6c14:	f00e fdb8 	bl	c5788 <strtol>
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b6c18:	280c      	cmp	r0, #12
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6c1a:	4604      	mov	r4, r0
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b6c1c:	d80b      	bhi.n	b6c36 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x45a>
        snprintf(messaging,sizeof(messaging),"Setting opening hour to %d:00", tempValue);
   b6c1e:	4603      	mov	r3, r0
   b6c20:	4a6b      	ldr	r2, [pc, #428]	; (b6dd0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5f4>)
   b6c22:	2140      	movs	r1, #64	; 0x40
   b6c24:	4630      	mov	r0, r6
   b6c26:	f009 fbc7 	bl	c03b8 <snprintf>
        sysStatus.set_openTime(tempValue);
   b6c2a:	f000 fd4d 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6c2e:	b2e1      	uxtb	r1, r4
   b6c30:	f000 ff9d 	bl	b7b6e <_ZN13sysStatusData12set_openTimeEh>
   b6c34:	e6fd      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
        snprintf(messaging,sizeof(messaging),"Open hour - must be 0-12");
   b6c36:	4967      	ldr	r1, [pc, #412]	; (b6dd4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5f8>)
   b6c38:	e7a4      	b.n	b6b84 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a8>
   b6c3a:	4967      	ldr	r1, [pc, #412]	; (b6dd8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5fc>)
   b6c3c:	a811      	add	r0, sp, #68	; 0x44
   b6c3e:	f009 ffa1 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "close") {
   b6c42:	9005      	str	r0, [sp, #20]
   b6c44:	b1d8      	cbz	r0, b6c7e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4a2>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6c46:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6c48:	220a      	movs	r2, #10
   b6c4a:	a908      	add	r1, sp, #32
   b6c4c:	f00e fd9c 	bl	c5788 <strtol>
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b6c50:	f1a0 030d 	sub.w	r3, r0, #13
   b6c54:	2b0b      	cmp	r3, #11
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6c56:	4604      	mov	r4, r0
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b6c58:	d80b      	bhi.n	b6c72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x496>
        snprintf(messaging,sizeof(messaging),"Setting closing hour to %d:00", tempValue);
   b6c5a:	4603      	mov	r3, r0
   b6c5c:	4a5f      	ldr	r2, [pc, #380]	; (b6ddc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x600>)
   b6c5e:	2140      	movs	r1, #64	; 0x40
   b6c60:	4630      	mov	r0, r6
   b6c62:	f009 fba9 	bl	c03b8 <snprintf>
        sysStatus.set_closeTime(tempValue);
   b6c66:	f000 fd2f 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6c6a:	b2e1      	uxtb	r1, r4
   b6c6c:	f000 ff85 	bl	b7b7a <_ZN13sysStatusData13set_closeTimeEh>
   b6c70:	e6df      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
        snprintf(messaging,sizeof(messaging),"Close hour - must be 13-24");
   b6c72:	495b      	ldr	r1, [pc, #364]	; (b6de0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x604>)
   b6c74:	4630      	mov	r0, r6
   b6c76:	f00e fc70 	bl	c555a <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b6c7a:	463d      	mov	r5, r7
   b6c7c:	e6d9      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
   b6c7e:	4959      	ldr	r1, [pc, #356]	; (b6de4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x608>)
   b6c80:	a811      	add	r0, sp, #68	; 0x44
   b6c82:	f009 ff7f 	bl	c0b84 <_ZNK6String6equalsEPKc>
   b6c86:	4637      	mov	r7, r6
    else if (function == "break") {
   b6c88:	b1a8      	cbz	r0, b6cb6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4da>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6c8a:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6c8c:	220a      	movs	r2, #10
   b6c8e:	a908      	add	r1, sp, #32
   b6c90:	f00e fd7a 	bl	c5788 <strtol>
      if ((tempValue >= 0) && (tempValue <= 24)) {
   b6c94:	2818      	cmp	r0, #24
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6c96:	4604      	mov	r4, r0
      if ((tempValue >= 0) && (tempValue <= 24)) {
   b6c98:	d80b      	bhi.n	b6cb2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4d6>
        snprintf(messaging,sizeof(messaging),"Setting break start hour to %d:00", tempValue);
   b6c9a:	4603      	mov	r3, r0
   b6c9c:	4a52      	ldr	r2, [pc, #328]	; (b6de8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x60c>)
   b6c9e:	2140      	movs	r1, #64	; 0x40
   b6ca0:	4630      	mov	r0, r6
   b6ca2:	f009 fb89 	bl	c03b8 <snprintf>
        sysStatus.set_breakTime(tempValue);
   b6ca6:	f000 fd0f 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6caa:	b2e1      	uxtb	r1, r4
   b6cac:	f000 ff6b 	bl	b7b86 <_ZN13sysStatusData13set_breakTimeEh>
   b6cb0:	e6bf      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
        snprintf(messaging,sizeof(messaging),"Break start hour - must be 0-24");
   b6cb2:	494e      	ldr	r1, [pc, #312]	; (b6dec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x610>)
   b6cb4:	e766      	b.n	b6b84 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a8>
   b6cb6:	494e      	ldr	r1, [pc, #312]	; (b6df0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x614>)
   b6cb8:	a811      	add	r0, sp, #68	; 0x44
   b6cba:	f009 ff63 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "breakLengthMinutes") {
   b6cbe:	b1a8      	cbz	r0, b6cec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x510>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6cc0:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6cc2:	220a      	movs	r2, #10
   b6cc4:	a908      	add	r1, sp, #32
   b6cc6:	f00e fd5f 	bl	c5788 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 240)) {
   b6cca:	28f0      	cmp	r0, #240	; 0xf0
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6ccc:	4604      	mov	r4, r0
      if ((tempValue >= 0 ) && (tempValue <= 240)) {
   b6cce:	d80b      	bhi.n	b6ce8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x50c>
        snprintf(messaging,sizeof(messaging),"Setting break length to %d minutes", tempValue);
   b6cd0:	4603      	mov	r3, r0
   b6cd2:	4a48      	ldr	r2, [pc, #288]	; (b6df4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x618>)
   b6cd4:	2140      	movs	r1, #64	; 0x40
   b6cd6:	4630      	mov	r0, r6
   b6cd8:	f009 fb6e 	bl	c03b8 <snprintf>
        sysStatus.set_breakLengthMinutes(tempValue);
   b6cdc:	f000 fcf4 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6ce0:	b2e1      	uxtb	r1, r4
   b6ce2:	f000 ff56 	bl	b7b92 <_ZN13sysStatusData22set_breakLengthMinutesEh>
   b6ce6:	e6a4      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
        snprintf(messaging,sizeof(messaging),"Break length (minutes) - must be 0-240");
   b6ce8:	4943      	ldr	r1, [pc, #268]	; (b6df8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x61c>)
   b6cea:	e74b      	b.n	b6b84 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a8>
   b6cec:	4943      	ldr	r1, [pc, #268]	; (b6dfc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x620>)
   b6cee:	a811      	add	r0, sp, #68	; 0x44
   b6cf0:	f009 ff48 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "weekendBreak") {
   b6cf4:	b1a8      	cbz	r0, b6d22 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x546>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6cf6:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6cf8:	220a      	movs	r2, #10
   b6cfa:	a908      	add	r1, sp, #32
   b6cfc:	f00e fd44 	bl	c5788 <strtol>
      if ((tempValue >= 0) && (tempValue <= 24)) {
   b6d00:	2818      	cmp	r0, #24
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6d02:	4604      	mov	r4, r0
      if ((tempValue >= 0) && (tempValue <= 24)) {
   b6d04:	d80b      	bhi.n	b6d1e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x542>
        snprintf(messaging,sizeof(messaging),"Setting weekend break start hour to %d:00", tempValue);
   b6d06:	4603      	mov	r3, r0
   b6d08:	4a3d      	ldr	r2, [pc, #244]	; (b6e00 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x624>)
   b6d0a:	2140      	movs	r1, #64	; 0x40
   b6d0c:	4630      	mov	r0, r6
   b6d0e:	f009 fb53 	bl	c03b8 <snprintf>
        sysStatus.set_weekendBreakTime(tempValue);
   b6d12:	f000 fcd9 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6d16:	b2e1      	uxtb	r1, r4
   b6d18:	f000 ff41 	bl	b7b9e <_ZN13sysStatusData20set_weekendBreakTimeEh>
   b6d1c:	e689      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
        snprintf(messaging,sizeof(messaging),"Weekend break start hour - must be 0-24");
   b6d1e:	4939      	ldr	r1, [pc, #228]	; (b6e04 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x628>)
   b6d20:	e730      	b.n	b6b84 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a8>
   b6d22:	4939      	ldr	r1, [pc, #228]	; (b6e08 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x62c>)
   b6d24:	a811      	add	r0, sp, #68	; 0x44
   b6d26:	f009 ff2d 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "weekendBreakLengthMinutes") {
   b6d2a:	b1a8      	cbz	r0, b6d58 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x57c>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6d2c:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6d2e:	220a      	movs	r2, #10
   b6d30:	a908      	add	r1, sp, #32
   b6d32:	f00e fd29 	bl	c5788 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 240)) {
   b6d36:	28f0      	cmp	r0, #240	; 0xf0
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6d38:	4604      	mov	r4, r0
      if ((tempValue >= 0 ) && (tempValue <= 240)) {
   b6d3a:	d80b      	bhi.n	b6d54 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x578>
        snprintf(messaging,sizeof(messaging),"Setting weekend break length to %d minutes", tempValue);
   b6d3c:	4603      	mov	r3, r0
   b6d3e:	4a33      	ldr	r2, [pc, #204]	; (b6e0c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x630>)
   b6d40:	2140      	movs	r1, #64	; 0x40
   b6d42:	4630      	mov	r0, r6
   b6d44:	f009 fb38 	bl	c03b8 <snprintf>
        sysStatus.set_weekendBreakLengthMinutes(tempValue);
   b6d48:	f000 fcbe 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6d4c:	b2e1      	uxtb	r1, r4
   b6d4e:	f000 ff2c 	bl	b7baa <_ZN13sysStatusData29set_weekendBreakLengthMinutesEh>
   b6d52:	e66e      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
        snprintf(messaging,sizeof(messaging),"Weekend break length (minutes) - must be 0-240");
   b6d54:	492e      	ldr	r1, [pc, #184]	; (b6e10 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x634>)
   b6d56:	e715      	b.n	b6b84 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a8>
   b6d58:	492e      	ldr	r1, [pc, #184]	; (b6e14 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x638>)
   b6d5a:	a811      	add	r0, sp, #68	; 0x44
   b6d5c:	f009 ff12 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "pwr") {
   b6d60:	2800      	cmp	r0, #0
   b6d62:	d05d      	beq.n	b6e20 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x644>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6d64:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6d66:	220a      	movs	r2, #10
   b6d68:	a908      	add	r1, sp, #32
   b6d6a:	f00e fd0d 	bl	c5788 <strtol>
      if (tempValue == 1) {
   b6d6e:	2801      	cmp	r0, #1
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6d70:	4604      	mov	r4, r0
      if (tempValue == 1) {
   b6d72:	d113      	bne.n	b6d9c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x5c0>
        snprintf(messaging,sizeof(messaging),"Setting Alert Code to Trigger Reset");
   b6d74:	4928      	ldr	r1, [pc, #160]	; (b6e18 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x63c>)
   b6d76:	4630      	mov	r0, r6
   b6d78:	f00e fbef 	bl	c555a <strcpy>
        sysStatus.set_alertCodeGateway(1);
   b6d7c:	f000 fca4 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6d80:	4621      	mov	r1, r4
   b6d82:	f000 feee 	bl	b7b62 <_ZN13sysStatusData20set_alertCodeGatewayEh>
        sysStatus.set_alertTimestampGateway(Time.now());
   b6d86:	f000 fc9f 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b6d8a:	4604      	mov	r4, r0
   b6d8c:	f00b f99f 	bl	c20ce <_ZN9TimeClass3nowEv>
   b6d90:	4602      	mov	r2, r0
   b6d92:	17c3      	asrs	r3, r0, #31
   b6d94:	4620      	mov	r0, r4
   b6d96:	f001 f8b7 	bl	b7f08 <_ZN13sysStatusData25set_alertTimestampGatewayEx>
   b6d9a:	e64a      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
        snprintf(messaging,sizeof(messaging),"Power Cycle value not = 1)");
   b6d9c:	491f      	ldr	r1, [pc, #124]	; (b6e1c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x640>)
   b6d9e:	e6f1      	b.n	b6b84 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a8>
   b6da0:	000c6c7a 	.word	0x000c6c7a
   b6da4:	000c6c9b 	.word	0x000c6c9b
   b6da8:	000c6cb5 	.word	0x000c6cb5
   b6dac:	000c6cba 	.word	0x000c6cba
   b6db0:	000c6ce4 	.word	0x000c6ce4
   b6db4:	000c6d04 	.word	0x000c6d04
   b6db8:	000c84ce 	.word	0x000c84ce
   b6dbc:	000c6d09 	.word	0x000c6d09
   b6dc0:	000c6d3d 	.word	0x000c6d3d
   b6dc4:	000c6d5f 	.word	0x000c6d5f
   b6dc8:	000c6d63 	.word	0x000c6d63
   b6dcc:	000c6d78 	.word	0x000c6d78
   b6dd0:	000c6d7d 	.word	0x000c6d7d
   b6dd4:	000c6d9b 	.word	0x000c6d9b
   b6dd8:	000c6db4 	.word	0x000c6db4
   b6ddc:	000c6dba 	.word	0x000c6dba
   b6de0:	000c6dd8 	.word	0x000c6dd8
   b6de4:	000c6df3 	.word	0x000c6df3
   b6de8:	000c6df9 	.word	0x000c6df9
   b6dec:	000c6e1b 	.word	0x000c6e1b
   b6df0:	000c6e3b 	.word	0x000c6e3b
   b6df4:	000c6e4e 	.word	0x000c6e4e
   b6df8:	000c6e71 	.word	0x000c6e71
   b6dfc:	000c6e98 	.word	0x000c6e98
   b6e00:	000c6ea5 	.word	0x000c6ea5
   b6e04:	000c6ecf 	.word	0x000c6ecf
   b6e08:	000c6ef7 	.word	0x000c6ef7
   b6e0c:	000c6f11 	.word	0x000c6f11
   b6e10:	000c6f3c 	.word	0x000c6f3c
   b6e14:	000c6f6b 	.word	0x000c6f6b
   b6e18:	000c6f6f 	.word	0x000c6f6f
   b6e1c:	000c6f93 	.word	0x000c6f93
   b6e20:	49a2      	ldr	r1, [pc, #648]	; (b70ac <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8d0>)
   b6e22:	a811      	add	r0, sp, #68	; 0x44
   b6e24:	f009 feae 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "type") {
   b6e28:	4606      	mov	r6, r0
   b6e2a:	b320      	cbz	r0, b6e76 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x69a>
      if(nodeNumber != 0) {
   b6e2c:	2c00      	cmp	r4, #0
   b6e2e:	f000 821c 	beq.w	b726a <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa8e>
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6e32:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6e34:	220a      	movs	r2, #10
   b6e36:	a908      	add	r1, sp, #32
   b6e38:	f00e fca6 	bl	c5788 <strtol>
        if ((tempValue >= 0 ) && (tempValue <= 29)) {                    // See - https://seeinsights.freshdesk.com/support/solutions/articles/154000101712-sensor-types-and-identifiers
   b6e3c:	281d      	cmp	r0, #29
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6e3e:	4606      	mov	r6, r0
        if ((tempValue >= 0 ) && (tempValue <= 29)) {                    // See - https://seeinsights.freshdesk.com/support/solutions/articles/154000101712-sensor-types-and-identifiers
   b6e40:	d816      	bhi.n	b6e70 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x694>
          snprintf(messaging,sizeof(messaging),"Setting sensor type to %d for node %d", tempValue, nodeNumber);
   b6e42:	4a9b      	ldr	r2, [pc, #620]	; (b70b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8d4>)
   b6e44:	9400      	str	r4, [sp, #0]
   b6e46:	4603      	mov	r3, r0
   b6e48:	2140      	movs	r1, #64	; 0x40
   b6e4a:	4638      	mov	r0, r7
   b6e4c:	f009 fab4 	bl	c03b8 <snprintf>
          if (!JsonDataManager::instance().setType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b6e50:	f006 fe5c 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b6e54:	4632      	mov	r2, r6
   b6e56:	4621      	mov	r1, r4
   b6e58:	f007 fc80 	bl	be75c <_ZN15JsonDataManager7setTypeEii>
   b6e5c:	2800      	cmp	r0, #0
   b6e5e:	f000 820d 	beq.w	b727c <_ZN18Particle_Functions18jsonFunctionParserE6String+0xaa0>
          else JsonDataManager::instance().setAlertCode(nodeNumber,1);        // Forces the node to update its sensor Type by setting it and triggering rejoin
   b6e62:	f006 fe53 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b6e66:	2201      	movs	r2, #1
          JsonDataManager::instance().setAlertCode(nodeNumber,11);
   b6e68:	4621      	mov	r1, r4
   b6e6a:	f007 fd85 	bl	be978 <_ZN15JsonDataManager12setAlertCodeEii>
   b6e6e:	e5e0      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
          snprintf(messaging,sizeof(messaging),"Sensor Type - must be 0-29");
   b6e70:	4990      	ldr	r1, [pc, #576]	; (b70b4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8d8>)
        snprintf(messaging,sizeof(messaging),"Can only reset spaces through Gateway (node 0)");
   b6e72:	a819      	add	r0, sp, #100	; 0x64
   b6e74:	e687      	b.n	b6b86 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3aa>
   b6e76:	4990      	ldr	r1, [pc, #576]	; (b70b8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8dc>)
   b6e78:	a811      	add	r0, sp, #68	; 0x44
   b6e7a:	f009 fe83 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "mountConfig") {
   b6e7e:	2800      	cmp	r0, #0
   b6e80:	f000 808d 	beq.w	b6f9e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x7c2>
      if (varArrayContainer->type == JsonParserGeneratorRK::JSMN_ARRAY) {   // Check if "var" is an array and if nodeNumber is erroneous
   b6e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6e86:	781b      	ldrb	r3, [r3, #0]
   b6e88:	2b02      	cmp	r3, #2
   b6e8a:	f040 8086 	bne.w	b6f9a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x7be>
              uint8_t placement; String placementStr;
   b6e8e:	498b      	ldr	r1, [pc, #556]	; (b70bc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8e0>)
   b6e90:	a815      	add	r0, sp, #84	; 0x54
   b6e92:	f009 fdb0 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
              uint8_t multi; String multiStr;
   b6e96:	4989      	ldr	r1, [pc, #548]	; (b70bc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8e0>)
   b6e98:	a829      	add	r0, sp, #164	; 0xa4
   b6e9a:	f009 fdac 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
		if (getValueTokenByIndex(arrayContainer, index, value)) {
   b6e9e:	990a      	ldr	r1, [sp, #40]	; 0x28
   b6ea0:	ab0c      	add	r3, sp, #48	; 0x30
   b6ea2:	4632      	mov	r2, r6
   b6ea4:	a849      	add	r0, sp, #292	; 0x124
   b6ea6:	f002 fc27 	bl	b96f8 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b6eaa:	b120      	cbz	r0, b6eb6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x6da>
			return getTokenValue(value, result);
   b6eac:	990c      	ldr	r1, [sp, #48]	; 0x30
   b6eae:	aa0b      	add	r2, sp, #44	; 0x2c
   b6eb0:	a849      	add	r0, sp, #292	; 0x124
   b6eb2:	f002 fc53 	bl	b975c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
              jp.getValueByIndex(varArrayContainer, 1, placementStr);
   b6eb6:	990a      	ldr	r1, [sp, #40]	; 0x28
   b6eb8:	ab15      	add	r3, sp, #84	; 0x54
   b6eba:	2201      	movs	r2, #1
   b6ebc:	a849      	add	r0, sp, #292	; 0x124
   b6ebe:	f7ff fba0 	bl	b6602 <_ZNK10JsonParser15getValueByIndexI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEjRT_.isra.0>
              jp.getValueByIndex(varArrayContainer, 2, multiStr);
   b6ec2:	990a      	ldr	r1, [sp, #40]	; 0x28
   b6ec4:	ab29      	add	r3, sp, #164	; 0xa4
   b6ec6:	2202      	movs	r2, #2
   b6ec8:	a849      	add	r0, sp, #292	; 0x124
   b6eca:	f7ff fb9a 	bl	b6602 <_ZNK10JsonParser15getValueByIndexI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEjRT_.isra.0>
              if(nodeNumber != 0) {
   b6ece:	2c00      	cmp	r4, #0
   b6ed0:	d05d      	beq.n	b6f8e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x7b2>
              uint8_t space = static_cast<uint8_t>(spaceInt);
   b6ed2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
                if(JsonDataManager::instance().getJoinPayload(nodeNumber)) {
   b6ed4:	f006 fe1a 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b6ed8:	4621      	mov	r1, r4
   b6eda:	f007 f8f7 	bl	be0cc <_ZN15JsonDataManager14getJoinPayloadEh>
   b6ede:	4607      	mov	r7, r0
   b6ee0:	2800      	cmp	r0, #0
   b6ee2:	d04f      	beq.n	b6f84 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x7a8>
                  if(space >= 1 && space <= 64) {                            // People don't like a space to be zero so they start at one
   b6ee4:	1e77      	subs	r7, r6, #1
   b6ee6:	b2ff      	uxtb	r7, r7
   b6ee8:	2f3f      	cmp	r7, #63	; 0x3f
   b6eea:	d845      	bhi.n	b6f78 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x79c>
                    current.set_payload1(space - 1);                              // Store it as a 6 bit anyway though (This allows us to index space as 0-63 in the app, while displaying space + 1 to Ubidots/Particle)
   b6eec:	f000 fc26 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6ef0:	4639      	mov	r1, r7
   b6ef2:	f000 fe9f 	bl	b7c34 <_ZN17currentStatusData12set_payload1Eh>
    unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6ef6:	4972      	ldr	r1, [pc, #456]	; (b70c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8e4>)
   b6ef8:	a815      	add	r0, sp, #84	; 0x54
   b6efa:	f009 fe43 	bl	c0b84 <_ZNK6String6equalsEPKc>
                    if(placementStr != "null"){                              // null is sent here when blank on ubidots widget - ignoring reduces punishment of user error
   b6efe:	b958      	cbnz	r0, b6f18 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x73c>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6f00:	4970      	ldr	r1, [pc, #448]	; (b70c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8e8>)
   b6f02:	a815      	add	r0, sp, #84	; 0x54
   b6f04:	f009 fe3e 	bl	c0b84 <_ZNK6String6equalsEPKc>
   b6f08:	4607      	mov	r7, r0
                      current.set_payload2(placement);
   b6f0a:	f000 fc17 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6f0e:	1e39      	subs	r1, r7, #0
   b6f10:	bf18      	it	ne
   b6f12:	2101      	movne	r1, #1
   b6f14:	f000 fe94 	bl	b7c40 <_ZN17currentStatusData12set_payload2Eh>
    unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6f18:	4969      	ldr	r1, [pc, #420]	; (b70c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8e4>)
   b6f1a:	a829      	add	r0, sp, #164	; 0xa4
   b6f1c:	f009 fe32 	bl	c0b84 <_ZNK6String6equalsEPKc>
                    if(multiStr != "null"){                                   // null is sent here when blank on ubidots widget - ignoring reduces punishment of user error
   b6f20:	b958      	cbnz	r0, b6f3a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x75e>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6f22:	4968      	ldr	r1, [pc, #416]	; (b70c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8e8>)
   b6f24:	a829      	add	r0, sp, #164	; 0xa4
   b6f26:	f009 fe2d 	bl	c0b84 <_ZNK6String6equalsEPKc>
   b6f2a:	4607      	mov	r7, r0
                      current.set_payload3(multi);
   b6f2c:	f000 fc06 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b6f30:	1e39      	subs	r1, r7, #0
   b6f32:	bf18      	it	ne
   b6f34:	2101      	movne	r1, #1
   b6f36:	f000 fe89 	bl	b7c4c <_ZN17currentStatusData12set_payload3Eh>
                    snprintf(messaging,sizeof(messaging), "Set payload for node %d. space: %d, placement: %s, multi: %s", nodeNumber, space, placementStr.c_str(), multiStr.c_str());
   b6f3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   b6f3c:	9302      	str	r3, [sp, #8]
   b6f3e:	b2f6      	uxtb	r6, r6
   b6f40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b6f42:	4a61      	ldr	r2, [pc, #388]	; (b70c8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8ec>)
   b6f44:	9301      	str	r3, [sp, #4]
   b6f46:	2140      	movs	r1, #64	; 0x40
   b6f48:	4623      	mov	r3, r4
   b6f4a:	9600      	str	r6, [sp, #0]
   b6f4c:	a819      	add	r0, sp, #100	; 0x64
   b6f4e:	f009 fa33 	bl	c03b8 <snprintf>
                    JsonDataManager::instance().setJoinPayload(nodeNumber);
   b6f52:	f006 fddb 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b6f56:	4621      	mov	r1, r4
   b6f58:	f007 fc7e 	bl	be858 <_ZN15JsonDataManager14setJoinPayloadEh>
                    JsonDataManager::instance().setAlertCode(nodeNumber, 1);    // trigger a rejoin alert code               
   b6f5c:	f006 fdd6 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b6f60:	2201      	movs	r2, #1
   b6f62:	4621      	mov	r1, r4
   b6f64:	f007 fd08 	bl	be978 <_ZN15JsonDataManager12setAlertCodeEii>
   b6f68:	462f      	mov	r7, r5
              uint8_t multi; String multiStr;
   b6f6a:	a829      	add	r0, sp, #164	; 0xa4
   b6f6c:	f009 fcf8 	bl	c0960 <_ZN6StringD1Ev>
              uint8_t placement; String placementStr;
   b6f70:	a815      	add	r0, sp, #84	; 0x54
   b6f72:	f009 fcf5 	bl	c0960 <_ZN6StringD1Ev>
   b6f76:	e680      	b.n	b6c7a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x49e>
                    snprintf(messaging,sizeof(messaging), "Error in mountConfig. \"Space\" must be between 1 and 64.");
   b6f78:	4954      	ldr	r1, [pc, #336]	; (b70cc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8f0>)
   b6f7a:	a819      	add	r0, sp, #100	; 0x64
   b6f7c:	f00e faed 	bl	c555a <strcpy>
                    success = false;
   b6f80:	2700      	movs	r7, #0
   b6f82:	e7f2      	b.n	b6f6a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x78e>
                  snprintf(messaging,sizeof(messaging), "Error in mountConfig. Could not set payload.");
   b6f84:	4952      	ldr	r1, [pc, #328]	; (b70d0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8f4>)
   b6f86:	a819      	add	r0, sp, #100	; 0x64
   b6f88:	f00e fae7 	bl	c555a <strcpy>
                  success = false;
   b6f8c:	e7ed      	b.n	b6f6a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x78e>
                snprintf(messaging,sizeof(messaging), "No node exists in the database with that uniqueID");
   b6f8e:	4951      	ldr	r1, [pc, #324]	; (b70d4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8f8>)
   b6f90:	a819      	add	r0, sp, #100	; 0x64
   b6f92:	f00e fae2 	bl	c555a <strcpy>
                success = false;
   b6f96:	4627      	mov	r7, r4
   b6f98:	e7e7      	b.n	b6f6a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x78e>
          snprintf(messaging,sizeof(messaging), "Error executing mountConfig - Var was not an array");
   b6f9a:	494f      	ldr	r1, [pc, #316]	; (b70d8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8fc>)
   b6f9c:	e769      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
   b6f9e:	494f      	ldr	r1, [pc, #316]	; (b70dc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x900>)
   b6fa0:	a811      	add	r0, sp, #68	; 0x44
   b6fa2:	f009 fdef 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "zoneMode") {
   b6fa6:	b300      	cbz	r0, b6fea <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80e>
      if(nodeNumber != 0) {
   b6fa8:	2c00      	cmp	r4, #0
   b6faa:	f000 815e 	beq.w	b726a <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa8e>
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6fae:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6fb0:	220a      	movs	r2, #10
   b6fb2:	a908      	add	r1, sp, #32
   b6fb4:	f00e fbe8 	bl	c5788 <strtol>
        if ((tempValue >= 0 ) && (tempValue <= 4)) {                   
   b6fb8:	2804      	cmp	r0, #4
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6fba:	4606      	mov	r6, r0
        if ((tempValue >= 0 ) && (tempValue <= 4)) {                   
   b6fbc:	d813      	bhi.n	b6fe6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80a>
          snprintf(messaging,sizeof(messaging),"Setting zone mode to %d for node %d", tempValue, nodeNumber);
   b6fbe:	4a48      	ldr	r2, [pc, #288]	; (b70e0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x904>)
   b6fc0:	9400      	str	r4, [sp, #0]
   b6fc2:	4603      	mov	r3, r0
   b6fc4:	2140      	movs	r1, #64	; 0x40
   b6fc6:	4638      	mov	r0, r7
   b6fc8:	f009 f9f6 	bl	c03b8 <snprintf>
          JsonDataManager::instance().setAlertCode(nodeNumber,7);
   b6fcc:	f006 fd9e 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b6fd0:	2207      	movs	r2, #7
          JsonDataManager::instance().setAlertCode(nodeNumber,13);
   b6fd2:	4621      	mov	r1, r4
   b6fd4:	f007 fcd0 	bl	be978 <_ZN15JsonDataManager12setAlertCodeEii>
          JsonDataManager::instance().setAlertContext(nodeNumber,tempValue);  // Forces the node to update its tofPollingRateMS by setting an alert code and sending the value as context 
   b6fd8:	f006 fd98 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b6fdc:	4632      	mov	r2, r6
          JsonDataManager::instance().setAlertContext(nodeNumber,tempValue);  // Forces the node to update its tofPollingRateMS by setting an alert code and sending the value as context 
   b6fde:	4621      	mov	r1, r4
   b6fe0:	f007 fd14 	bl	bea0c <_ZN15JsonDataManager15setAlertContextEii>
   b6fe4:	e525      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
          snprintf(messaging,sizeof(messaging),"Zone Mode must be 0-4");
   b6fe6:	493f      	ldr	r1, [pc, #252]	; (b70e4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x908>)
   b6fe8:	e743      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
   b6fea:	493f      	ldr	r1, [pc, #252]	; (b70e8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x90c>)
   b6fec:	a811      	add	r0, sp, #68	; 0x44
   b6fee:	f009 fdc9 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "distanceMode") {
   b6ff2:	b1e8      	cbz	r0, b7030 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x854>
      if(nodeNumber != 0) {
   b6ff4:	2c00      	cmp	r4, #0
   b6ff6:	f000 8138 	beq.w	b726a <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa8e>
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6ffa:	980d      	ldr	r0, [sp, #52]	; 0x34
   b6ffc:	220a      	movs	r2, #10
   b6ffe:	a908      	add	r1, sp, #32
   b7000:	f00e fbc2 	bl	c5788 <strtol>
        if ((tempValue >= 0 ) && (tempValue <= 2)) {                   
   b7004:	2802      	cmp	r0, #2
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7006:	4682      	mov	sl, r0
        if ((tempValue >= 0 ) && (tempValue <= 2)) {                   
   b7008:	d810      	bhi.n	b702c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x850>
          snprintf(messaging,sizeof(messaging),"Setting distanceMode to %d for node %d", tempValue, nodeNumber);
   b700a:	4a38      	ldr	r2, [pc, #224]	; (b70ec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x910>)
   b700c:	9400      	str	r4, [sp, #0]
   b700e:	4603      	mov	r3, r0
   b7010:	2140      	movs	r1, #64	; 0x40
   b7012:	4638      	mov	r0, r7
   b7014:	f009 f9d0 	bl	c03b8 <snprintf>
          JsonDataManager::instance().setAlertCode(nodeNumber,8);
   b7018:	f006 fd78 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b701c:	2208      	movs	r2, #8
          JsonDataManager::instance().setAlertCode(nodeNumber,14);
   b701e:	4621      	mov	r1, r4
   b7020:	f007 fcaa 	bl	be978 <_ZN15JsonDataManager12setAlertCodeEii>
          JsonDataManager::instance().setAlertContext(nodeNumber,tempValue);  // Forces the node to update its tofPollingRateMS by setting an alert code and sending the value as context 
   b7024:	f006 fd72 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b7028:	4652      	mov	r2, sl
   b702a:	e7d8      	b.n	b6fde <_ZN18Particle_Functions18jsonFunctionParserE6String+0x802>
          snprintf(messaging,sizeof(messaging),"distanceMode must be 0 (short), 1(medium) or 2(long)");
   b702c:	4930      	ldr	r1, [pc, #192]	; (b70f0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x914>)
   b702e:	e720      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
   b7030:	4930      	ldr	r1, [pc, #192]	; (b70f4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x918>)
   b7032:	a811      	add	r0, sp, #68	; 0x44
   b7034:	f009 fda6 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "interferenceBuffer") {
   b7038:	b1c0      	cbz	r0, b706c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x890>
      if(nodeNumber != 0) {
   b703a:	2c00      	cmp	r4, #0
   b703c:	f000 8115 	beq.w	b726a <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa8e>
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7040:	980d      	ldr	r0, [sp, #52]	; 0x34
   b7042:	220a      	movs	r2, #10
   b7044:	a908      	add	r1, sp, #32
   b7046:	f00e fb9f 	bl	c5788 <strtol>
        if ((tempValue >= 0 ) && (tempValue <= 2000)) {                   
   b704a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b704e:	4606      	mov	r6, r0
        if ((tempValue >= 0 ) && (tempValue <= 2000)) {                   
   b7050:	d80a      	bhi.n	b7068 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x88c>
          snprintf(messaging,sizeof(messaging),"Setting interferenceBuffer to %d for node %d", tempValue, nodeNumber);
   b7052:	4a29      	ldr	r2, [pc, #164]	; (b70f8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x91c>)
   b7054:	9400      	str	r4, [sp, #0]
   b7056:	4603      	mov	r3, r0
   b7058:	2140      	movs	r1, #64	; 0x40
   b705a:	4638      	mov	r0, r7
   b705c:	f009 f9ac 	bl	c03b8 <snprintf>
          JsonDataManager::instance().setAlertCode(nodeNumber,9);
   b7060:	f006 fd54 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b7064:	2209      	movs	r2, #9
   b7066:	e7b4      	b.n	b6fd2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x7f6>
          snprintf(messaging,sizeof(messaging),"Floor Interference Buffer must be 0-2000mm");
   b7068:	4924      	ldr	r1, [pc, #144]	; (b70fc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x920>)
   b706a:	e702      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
   b706c:	4924      	ldr	r1, [pc, #144]	; (b7100 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x924>)
   b706e:	a811      	add	r0, sp, #68	; 0x44
   b7070:	f009 fd88 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "occupancyCalibrationLoops") {
   b7074:	2800      	cmp	r0, #0
   b7076:	d049      	beq.n	b710c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x930>
      if(nodeNumber != 0) {
   b7078:	2c00      	cmp	r4, #0
   b707a:	f000 80f6 	beq.w	b726a <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa8e>
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b707e:	980d      	ldr	r0, [sp, #52]	; 0x34
   b7080:	220a      	movs	r2, #10
   b7082:	a908      	add	r1, sp, #32
   b7084:	f00e fb80 	bl	c5788 <strtol>
        if ((tempValue >= 0 ) && (tempValue <= 1000)) {                   
   b7088:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b708c:	4682      	mov	sl, r0
        if ((tempValue >= 0 ) && (tempValue <= 1000)) {                   
   b708e:	d80a      	bhi.n	b70a6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x8ca>
          snprintf(messaging,sizeof(messaging),"Setting occupancyCalibrationLoops to %d for node %d", tempValue, nodeNumber);
   b7090:	4a1c      	ldr	r2, [pc, #112]	; (b7104 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x928>)
   b7092:	9400      	str	r4, [sp, #0]
   b7094:	4603      	mov	r3, r0
   b7096:	2140      	movs	r1, #64	; 0x40
   b7098:	4638      	mov	r0, r7
   b709a:	f009 f98d 	bl	c03b8 <snprintf>
          JsonDataManager::instance().setAlertCode(nodeNumber,10);
   b709e:	f006 fd35 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b70a2:	220a      	movs	r2, #10
   b70a4:	e7bb      	b.n	b701e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x842>
          snprintf(messaging,sizeof(messaging),"the number of calibration loops must be 0-1000");
   b70a6:	4918      	ldr	r1, [pc, #96]	; (b7108 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x92c>)
   b70a8:	e6e3      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
   b70aa:	bf00      	nop
   b70ac:	000c6fae 	.word	0x000c6fae
   b70b0:	000c6fb3 	.word	0x000c6fb3
   b70b4:	000c6fd9 	.word	0x000c6fd9
   b70b8:	000c7026 	.word	0x000c7026
   b70bc:	000c9298 	.word	0x000c9298
   b70c0:	000c7032 	.word	0x000c7032
   b70c4:	000c84ce 	.word	0x000c84ce
   b70c8:	000c7037 	.word	0x000c7037
   b70cc:	000c7074 	.word	0x000c7074
   b70d0:	000c70ac 	.word	0x000c70ac
   b70d4:	000c6ff4 	.word	0x000c6ff4
   b70d8:	000c70d9 	.word	0x000c70d9
   b70dc:	000c710c 	.word	0x000c710c
   b70e0:	000c7115 	.word	0x000c7115
   b70e4:	000c7139 	.word	0x000c7139
   b70e8:	000c714f 	.word	0x000c714f
   b70ec:	000c715c 	.word	0x000c715c
   b70f0:	000c7183 	.word	0x000c7183
   b70f4:	000c71b8 	.word	0x000c71b8
   b70f8:	000c71cb 	.word	0x000c71cb
   b70fc:	000c71f8 	.word	0x000c71f8
   b7100:	000c7223 	.word	0x000c7223
   b7104:	000c723d 	.word	0x000c723d
   b7108:	000c7271 	.word	0x000c7271
   b710c:	4973      	ldr	r1, [pc, #460]	; (b72dc <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb00>)
   b710e:	a811      	add	r0, sp, #68	; 0x44
   b7110:	f009 fd38 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "recalibrate") {
   b7114:	b198      	cbz	r0, b713e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x962>
      if(nodeNumber != 0) {
   b7116:	2c00      	cmp	r4, #0
   b7118:	f000 80a7 	beq.w	b726a <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa8e>
   b711c:	4970      	ldr	r1, [pc, #448]	; (b72e0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb04>)
   b711e:	a80d      	add	r0, sp, #52	; 0x34
   b7120:	f009 fd30 	bl	c0b84 <_ZNK6String6equalsEPKc>
        if (variable == "true") {                   
   b7124:	b148      	cbz	r0, b713a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x95e>
          snprintf(messaging,sizeof(messaging),"Initiating recalibration for node %d", nodeNumber);
   b7126:	4a6f      	ldr	r2, [pc, #444]	; (b72e4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb08>)
   b7128:	4623      	mov	r3, r4
   b712a:	2140      	movs	r1, #64	; 0x40
   b712c:	4638      	mov	r0, r7
   b712e:	f009 f943 	bl	c03b8 <snprintf>
          JsonDataManager::instance().setAlertCode(nodeNumber,11);
   b7132:	f006 fceb 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b7136:	220b      	movs	r2, #11
   b7138:	e696      	b.n	b6e68 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x68c>
          snprintf(messaging,sizeof(messaging),"Incorrect value for var. Must be \"true\"");
   b713a:	496b      	ldr	r1, [pc, #428]	; (b72e8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb0c>)
   b713c:	e699      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
   b713e:	496b      	ldr	r1, [pc, #428]	; (b72ec <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb10>)
   b7140:	a811      	add	r0, sp, #68	; 0x44
   b7142:	f009 fd1f 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "resetRoomCounts") {
   b7146:	b1f8      	cbz	r0, b7188 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x9ac>
      if(nodeNumber == 0) {
   b7148:	b9e4      	cbnz	r4, b7184 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x9a8>
   b714a:	4969      	ldr	r1, [pc, #420]	; (b72f0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb14>)
   b714c:	a80d      	add	r0, sp, #52	; 0x34
   b714e:	f009 fd19 	bl	c0b84 <_ZNK6String6equalsEPKc>
        if (variable == "all") {                   
   b7152:	b138      	cbz	r0, b7164 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x988>
          snprintf(messaging,sizeof(messaging),"Resetting Room gross AND net counts");
   b7154:	4967      	ldr	r1, [pc, #412]	; (b72f4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb18>)
   b7156:	a819      	add	r0, sp, #100	; 0x64
   b7158:	f00e f9ff 	bl	c555a <strcpy>
          Room_Occupancy::instance().resetAllCounts();
   b715c:	f006 fc50 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
   b7160:	f006 fc60 	bl	bda24 <_ZN14Room_Occupancy14resetAllCountsEv>
   b7164:	4964      	ldr	r1, [pc, #400]	; (b72f8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb1c>)
   b7166:	a80d      	add	r0, sp, #52	; 0x34
   b7168:	f009 fd0c 	bl	c0b84 <_ZNK6String6equalsEPKc>
        if (variable == "net") {                   
   b716c:	b140      	cbz	r0, b7180 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x9a4>
          snprintf(messaging,sizeof(messaging),"Resetting Room net counts");
   b716e:	4963      	ldr	r1, [pc, #396]	; (b72fc <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb20>)
   b7170:	a819      	add	r0, sp, #100	; 0x64
   b7172:	f00e f9f2 	bl	c555a <strcpy>
          Room_Occupancy::instance().resetNetCounts();
   b7176:	f006 fc43 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
   b717a:	f006 fc5a 	bl	bda32 <_ZN14Room_Occupancy14resetNetCountsEv>
   b717e:	e458      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
          snprintf(messaging,sizeof(messaging),"Must enter \"all\" or \"net\" for var");
   b7180:	495f      	ldr	r1, [pc, #380]	; (b7300 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb24>)
   b7182:	e676      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
        snprintf(messaging,sizeof(messaging),"Can only reset counts for Gateway (node 0)");
   b7184:	495f      	ldr	r1, [pc, #380]	; (b7304 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb28>)
   b7186:	e674      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
   b7188:	495f      	ldr	r1, [pc, #380]	; (b7308 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb2c>)
   b718a:	a811      	add	r0, sp, #68	; 0x44
   b718c:	f009 fcfa 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "resetSpace") {
   b7190:	b1c0      	cbz	r0, b71c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x9e8>
      if(nodeNumber == 0) {
   b7192:	b9ac      	cbnz	r4, b71c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x9e4>
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7194:	980d      	ldr	r0, [sp, #52]	; 0x34
   b7196:	220a      	movs	r2, #10
   b7198:	a908      	add	r1, sp, #32
   b719a:	f00e faf5 	bl	c5788 <strtol>
        if ((tempValue >= 1 ) && (tempValue <= 64)) {                   
   b719e:	1e46      	subs	r6, r0, #1
   b71a0:	2e3f      	cmp	r6, #63	; 0x3f
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b71a2:	4603      	mov	r3, r0
        if ((tempValue >= 1 ) && (tempValue <= 64)) {                   
   b71a4:	d80a      	bhi.n	b71bc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x9e0>
          snprintf(messaging,sizeof(messaging),"Resetting Space %d", tempValue);
   b71a6:	4a59      	ldr	r2, [pc, #356]	; (b730c <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb30>)
   b71a8:	2140      	movs	r1, #64	; 0x40
   b71aa:	4638      	mov	r0, r7
   b71ac:	f009 f904 	bl	c03b8 <snprintf>
          JsonDataManager::instance().resetSpace(tempValue - 1); // Send the index of the space rather than the space number. Ex. space 1 is index 0
   b71b0:	f006 fcac 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b71b4:	4631      	mov	r1, r6
   b71b6:	f008 f889 	bl	bf2cc <_ZN15JsonDataManager10resetSpaceEi>
   b71ba:	e43a      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
          snprintf(messaging,sizeof(messaging),"Space number must be between 1 and 64");
   b71bc:	4954      	ldr	r1, [pc, #336]	; (b7310 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb34>)
   b71be:	e658      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
        snprintf(messaging,sizeof(messaging),"Can only reset spaces through Gateway (node 0)");
   b71c0:	4954      	ldr	r1, [pc, #336]	; (b7314 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb38>)
   b71c2:	e656      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
   b71c4:	4954      	ldr	r1, [pc, #336]	; (b7318 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb3c>)
   b71c6:	a811      	add	r0, sp, #68	; 0x44
   b71c8:	f009 fcdc 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "setOccupancyNetForNode") {
   b71cc:	b1a8      	cbz	r0, b71fa <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa1e>
      if(nodeNumber != 0) {
   b71ce:	2c00      	cmp	r4, #0
   b71d0:	d04b      	beq.n	b726a <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa8e>
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b71d2:	a908      	add	r1, sp, #32
   b71d4:	980d      	ldr	r0, [sp, #52]	; 0x34
   b71d6:	220a      	movs	r2, #10
   b71d8:	f00e fad6 	bl	c5788 <strtol>
        snprintf(messaging,sizeof(messaging),"Setting net occupancy to %d for node %d", tempValue, nodeNumber);
   b71dc:	4a4f      	ldr	r2, [pc, #316]	; (b731c <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb40>)
   b71de:	9400      	str	r4, [sp, #0]
   b71e0:	4603      	mov	r3, r0
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b71e2:	4606      	mov	r6, r0
        snprintf(messaging,sizeof(messaging),"Setting net occupancy to %d for node %d", tempValue, nodeNumber);
   b71e4:	2140      	movs	r1, #64	; 0x40
   b71e6:	4638      	mov	r0, r7
   b71e8:	f009 f8e6 	bl	c03b8 <snprintf>
        Room_Occupancy::instance().setOccupancyNetForNode(nodeNumber, tempValue);
   b71ec:	f006 fc08 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
   b71f0:	4632      	mov	r2, r6
   b71f2:	4621      	mov	r1, r4
   b71f4:	f006 fc24 	bl	bda40 <_ZN14Room_Occupancy22setOccupancyNetForNodeEii>
   b71f8:	e41b      	b.n	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
   b71fa:	4949      	ldr	r1, [pc, #292]	; (b7320 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb44>)
   b71fc:	a811      	add	r0, sp, #68	; 0x44
   b71fe:	f009 fcc1 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "setTofDetectionsPerSecond") {
   b7202:	b1b0      	cbz	r0, b7232 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa56>
      if(nodeNumber != 0) {
   b7204:	b38c      	cbz	r4, b726a <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa8e>
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7206:	980d      	ldr	r0, [sp, #52]	; 0x34
   b7208:	220a      	movs	r2, #10
   b720a:	a908      	add	r1, sp, #32
   b720c:	f00e fabc 	bl	c5788 <strtol>
        if ((tempValue >= 1 ) && (tempValue <= 30)) {                   
   b7210:	1e43      	subs	r3, r0, #1
   b7212:	2b1d      	cmp	r3, #29
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7214:	4606      	mov	r6, r0
        if ((tempValue >= 1 ) && (tempValue <= 30)) {                   
   b7216:	d80a      	bhi.n	b722e <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa52>
          snprintf(messaging,sizeof(messaging), "Setting tofDetectionsPerSecond to %d/second for node %d", tempValue, nodeNumber);
   b7218:	4a42      	ldr	r2, [pc, #264]	; (b7324 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb48>)
   b721a:	9400      	str	r4, [sp, #0]
   b721c:	4603      	mov	r3, r0
   b721e:	2140      	movs	r1, #64	; 0x40
   b7220:	4638      	mov	r0, r7
   b7222:	f009 f8c9 	bl	c03b8 <snprintf>
          JsonDataManager::instance().setAlertCode(nodeNumber,13);
   b7226:	f006 fc71 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b722a:	220d      	movs	r2, #13
   b722c:	e6d1      	b.n	b6fd2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x7f6>
          snprintf(messaging,sizeof(messaging),"tofDetectionsPerSecond must be 1-30");
   b722e:	493e      	ldr	r1, [pc, #248]	; (b7328 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb4c>)
   b7230:	e61f      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
   b7232:	493e      	ldr	r1, [pc, #248]	; (b732c <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb50>)
   b7234:	a811      	add	r0, sp, #68	; 0x44
   b7236:	f009 fca5 	bl	c0b84 <_ZNK6String6equalsEPKc>
    else if (function == "setTransmitLatencySeconds") {
   b723a:	b1c0      	cbz	r0, b726e <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa92>
      if(nodeNumber != 0) {
   b723c:	b1ac      	cbz	r4, b726a <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa8e>
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b723e:	980d      	ldr	r0, [sp, #52]	; 0x34
   b7240:	220a      	movs	r2, #10
   b7242:	a908      	add	r1, sp, #32
   b7244:	f00e faa0 	bl	c5788 <strtol>
        if ((tempValue >= 1 ) && (tempValue <= 60)) {                   
   b7248:	1e43      	subs	r3, r0, #1
   b724a:	2b3b      	cmp	r3, #59	; 0x3b
        int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b724c:	4682      	mov	sl, r0
        if ((tempValue >= 1 ) && (tempValue <= 60)) {                   
   b724e:	d80a      	bhi.n	b7266 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa8a>
          snprintf(messaging,sizeof(messaging), "Setting tofDetectionsPerSecond to %dms for node %d", tempValue, nodeNumber);
   b7250:	4a37      	ldr	r2, [pc, #220]	; (b7330 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb54>)
   b7252:	9400      	str	r4, [sp, #0]
   b7254:	4603      	mov	r3, r0
   b7256:	2140      	movs	r1, #64	; 0x40
   b7258:	4638      	mov	r0, r7
   b725a:	f009 f8ad 	bl	c03b8 <snprintf>
          JsonDataManager::instance().setAlertCode(nodeNumber,14);
   b725e:	f006 fc55 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   b7262:	220e      	movs	r2, #14
   b7264:	e6db      	b.n	b701e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x842>
          snprintf(messaging,sizeof(messaging),"transmitLatencySeconds must be 1-60");
   b7266:	4933      	ldr	r1, [pc, #204]	; (b7334 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb58>)
   b7268:	e603      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
        snprintf(messaging,sizeof(messaging),"No node exists in the database with that uniqueID");
   b726a:	4933      	ldr	r1, [pc, #204]	; (b7338 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb5c>)
   b726c:	e601      	b.n	b6e72 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x696>
      snprintf(messaging,sizeof(messaging),"Not a valid command");
   b726e:	4933      	ldr	r1, [pc, #204]	; (b733c <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb60>)
   b7270:	a819      	add	r0, sp, #100	; 0x64
   b7272:	f00e f972 	bl	c555a <strcpy>
      invalidCommand = true;
   b7276:	f8cd 9010 	str.w	r9, [sp, #16]
   b727a:	e486      	b.n	b6b8a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3ae>
          if (!JsonDataManager::instance().setType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b727c:	4605      	mov	r5, r0
   b727e:	f7ff bbd8 	b.w	b6a32 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x256>
      if(invalidCommand == true){  // send the Invalid Command slack notification if the command was not recognized
   b7282:	9b04      	ldr	r3, [sp, #16]
   b7284:	b323      	cbz	r3, b72d0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xaf4>
        snprintf(data, sizeof(data), "{\"commands\":%i,\"context\":\"%s\",\"timestamp\":%lu000 }", 2, function.c_str(), Time.now());    // Send 2 (Invalid Command) to the 'commands' Synthetic Variable
   b7286:	f00a ff22 	bl	c20ce <_ZN9TimeClass3nowEv>
   b728a:	e9cd 6000 	strd	r6, r0, [sp]
   b728e:	2302      	movs	r3, #2
        snprintf(data, sizeof(data), "{\"commands\":%i,\"context\":\"%s\",\"timestamp\":%lu000 }", 0, function.c_str(), Time.now());    // Send 0 (Execution Failure) to the 'commands' Synthetic Variable
   b7290:	4a2b      	ldr	r2, [pc, #172]	; (b7340 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb64>)
   b7292:	2180      	movs	r1, #128	; 0x80
   b7294:	a829      	add	r0, sp, #164	; 0xa4
   b7296:	f009 f88f 	bl	c03b8 <snprintf>
        PublishQueuePosix::instance().publish("Ubidots_Command_Hook", data, PRIVATE);
   b729a:	f003 fb09 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b729e:	f88d 5000 	strb.w	r5, [sp]
   b72a2:	7823      	ldrb	r3, [r4, #0]
   b72a4:	4927      	ldr	r1, [pc, #156]	; (b7344 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb68>)
   b72a6:	aa29      	add	r2, sp, #164	; 0xa4
   b72a8:	f7ff f9c7 	bl	b663a <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    const char * c_str() const { return buffer; }
   b72ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
        snprintf(data, sizeof(data), "{\"commands\":%i,\"context\":\"%s\",\"timestamp\":%lu000 }", -10, function.c_str(), Time.now());  // Send -10, resolve any events
   b72ae:	f00a ff0e 	bl	c20ce <_ZN9TimeClass3nowEv>
   b72b2:	4a23      	ldr	r2, [pc, #140]	; (b7340 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb64>)
   b72b4:	e9cd 6000 	strd	r6, r0, [sp]
   b72b8:	f06f 0309 	mvn.w	r3, #9
   b72bc:	2180      	movs	r1, #128	; 0x80
   b72be:	a829      	add	r0, sp, #164	; 0xa4
   b72c0:	f009 f87a 	bl	c03b8 <snprintf>
        PublishQueuePosix::instance().publish("Ubidots_Command_Hook", data, PRIVATE);
   b72c4:	f003 faf4 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   b72c8:	f88d 5000 	strb.w	r5, [sp]
   b72cc:	f7ff bb4a 	b.w	b6964 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x188>
        snprintf(data, sizeof(data), "{\"commands\":%i,\"context\":\"%s\",\"timestamp\":%lu000 }", 0, function.c_str(), Time.now());    // Send 0 (Execution Failure) to the 'commands' Synthetic Variable
   b72d0:	f00a fefd 	bl	c20ce <_ZN9TimeClass3nowEv>
   b72d4:	462b      	mov	r3, r5
   b72d6:	e9cd 6000 	strd	r6, r0, [sp]
   b72da:	e7d9      	b.n	b7290 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xab4>
   b72dc:	000c72a0 	.word	0x000c72a0
   b72e0:	000c84ce 	.word	0x000c84ce
   b72e4:	000c72ac 	.word	0x000c72ac
   b72e8:	000c72d1 	.word	0x000c72d1
   b72ec:	000c72f9 	.word	0x000c72f9
   b72f0:	000c6bf5 	.word	0x000c6bf5
   b72f4:	000c7309 	.word	0x000c7309
   b72f8:	000c732d 	.word	0x000c732d
   b72fc:	000c7331 	.word	0x000c7331
   b7300:	000c734b 	.word	0x000c734b
   b7304:	000c736d 	.word	0x000c736d
   b7308:	000c8ea1 	.word	0x000c8ea1
   b730c:	000c7398 	.word	0x000c7398
   b7310:	000c73ab 	.word	0x000c73ab
   b7314:	000c73d1 	.word	0x000c73d1
   b7318:	000c7400 	.word	0x000c7400
   b731c:	000c7417 	.word	0x000c7417
   b7320:	000c743f 	.word	0x000c743f
   b7324:	000c7459 	.word	0x000c7459
   b7328:	000c7491 	.word	0x000c7491
   b732c:	000c74b5 	.word	0x000c74b5
   b7330:	000c74cf 	.word	0x000c74cf
   b7334:	000c7502 	.word	0x000c7502
   b7338:	000c6ff4 	.word	0x000c6ff4
   b733c:	000c7526 	.word	0x000c7526
   b7340:	000c6b3f 	.word	0x000c6b3f
   b7344:	000c6b2a 	.word	0x000c6b2a

000b7348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7348:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b734a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b734e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7350:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7352:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7356:	42ae      	cmp	r6, r5
   b7358:	d004      	beq.n	b7364 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b735a:	4628      	mov	r0, r5
   b735c:	f009 fb00 	bl	c0960 <_ZN6StringD1Ev>
   b7360:	3514      	adds	r5, #20
   b7362:	e7f8      	b.n	b7356 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b7364:	6820      	ldr	r0, [r4, #0]
   b7366:	f009 f807 	bl	c0378 <free>
    AllocatorT::free(data_);
}
   b736a:	4620      	mov	r0, r4
   b736c:	bd70      	pop	{r4, r5, r6, pc}

000b736e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b736e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7372:	4604      	mov	r4, r0
   b7374:	460d      	mov	r5, r1
   b7376:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7378:	d916      	bls.n	b73a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b737a:	4290      	cmp	r0, r2
   b737c:	d215      	bcs.n	b73aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b737e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b7382:	1a75      	subs	r5, r6, r1
   b7384:	f1a1 0714 	sub.w	r7, r1, #20
   b7388:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b738a:	42b7      	cmp	r7, r6
   b738c:	d01c      	beq.n	b73c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b738e:	b12c      	cbz	r4, b739c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b7390:	4631      	mov	r1, r6
   b7392:	4620      	mov	r0, r4
   b7394:	f009 fb61 	bl	c0a5a <_ZN6StringC1EOS_>
   b7398:	7c33      	ldrb	r3, [r6, #16]
   b739a:	7423      	strb	r3, [r4, #16]
   b739c:	4630      	mov	r0, r6
   b739e:	f009 fadf 	bl	c0960 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b73a2:	3e14      	subs	r6, #20
   b73a4:	3c14      	subs	r4, #20
   b73a6:	e7f0      	b.n	b738a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b73a8:	d00e      	beq.n	b73c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b73aa:	42b5      	cmp	r5, r6
   b73ac:	d00c      	beq.n	b73c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b73ae:	b12c      	cbz	r4, b73bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b73b0:	4629      	mov	r1, r5
   b73b2:	4620      	mov	r0, r4
   b73b4:	f009 fb51 	bl	c0a5a <_ZN6StringC1EOS_>
   b73b8:	7c2b      	ldrb	r3, [r5, #16]
   b73ba:	7423      	strb	r3, [r4, #16]
   b73bc:	4628      	mov	r0, r5
   b73be:	f009 facf 	bl	c0960 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b73c2:	3514      	adds	r5, #20
   b73c4:	3414      	adds	r4, #20
   b73c6:	e7f0      	b.n	b73aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b73c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b73ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b73ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b73ce:	2300      	movs	r3, #0
   b73d0:	e9c0 3300 	strd	r3, r3, [r0]
   b73d4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b73d6:	684f      	ldr	r7, [r1, #4]
   b73d8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b73da:	4604      	mov	r4, r0
   b73dc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b73de:	dd23      	ble.n	b7428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b73e0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b73e4:	fb08 f007 	mul.w	r0, r8, r7
   b73e8:	f008 ffbe 	bl	c0368 <malloc>
            if (!d) {
   b73ec:	4605      	mov	r5, r0
   b73ee:	b1d8      	cbz	r0, b7428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b73f0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b73f4:	fb08 1202 	mla	r2, r8, r2, r1
   b73f8:	f7ff ffb9 	bl	b736e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b73fc:	6820      	ldr	r0, [r4, #0]
   b73fe:	f008 ffbb 	bl	c0378 <free>
        data_ = d;
   b7402:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7404:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7406:	e9d6 7300 	ldrd	r7, r3, [r6]
   b740a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b740e:	45b8      	cmp	r8, r7
   b7410:	d008      	beq.n	b7424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b7412:	4639      	mov	r1, r7
   b7414:	4628      	mov	r0, r5
   b7416:	f009 fb3a 	bl	c0a8e <_ZN6StringC1ERKS_>
   b741a:	7c3b      	ldrb	r3, [r7, #16]
   b741c:	742b      	strb	r3, [r5, #16]
   b741e:	3714      	adds	r7, #20
   b7420:	3514      	adds	r5, #20
   b7422:	e7f4      	b.n	b740e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b7424:	6873      	ldr	r3, [r6, #4]
   b7426:	6063      	str	r3, [r4, #4]
}
   b7428:	4620      	mov	r0, r4
   b742a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b7430 <_GLOBAL__sub_I_openTimeStr>:
}
   b7430:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b7432:	4b27      	ldr	r3, [pc, #156]	; (b74d0 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b7434:	4a27      	ldr	r2, [pc, #156]	; (b74d4 <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b7436:	2501      	movs	r5, #1
   b7438:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b743a:	4b27      	ldr	r3, [pc, #156]	; (b74d8 <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b743c:	2400      	movs	r4, #0
   b743e:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b7440:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7442:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b7446:	2002      	movs	r0, #2
   b7448:	f008 fe6e 	bl	c0128 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b744c:	4621      	mov	r1, r4
   b744e:	4628      	mov	r0, r5
   b7450:	f008 fe82 	bl	c0158 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b7454:	4629      	mov	r1, r5
   b7456:	2004      	movs	r0, #4
   b7458:	f008 fc06 	bl	bfc68 <HAL_Feature_Set>
        capacity_(0) {
   b745c:	e9cd 4400 	strd	r4, r4, [sp]
   b7460:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b7462:	f00b fbcb 	bl	c2bfc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b7466:	4c1d      	ldr	r4, [pc, #116]	; (b74dc <_GLOBAL__sub_I_openTimeStr+0xac>)
   b7468:	4605      	mov	r5, r0
   b746a:	4669      	mov	r1, sp
   b746c:	a803      	add	r0, sp, #12
   b746e:	f7ff ffac 	bl	b73ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b7472:	4626      	mov	r6, r4
        stream_(&stream) {
   b7474:	a903      	add	r1, sp, #12
   b7476:	a806      	add	r0, sp, #24
   b7478:	f7ff ffa7 	bl	b73ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b747c:	4b18      	ldr	r3, [pc, #96]	; (b74e0 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b747e:	f846 3b04 	str.w	r3, [r6], #4
   b7482:	a906      	add	r1, sp, #24
   b7484:	a809      	add	r0, sp, #36	; 0x24
   b7486:	f7ff ffa0 	bl	b73ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b748a:	aa09      	add	r2, sp, #36	; 0x24
   b748c:	211e      	movs	r1, #30
   b748e:	4630      	mov	r0, r6
   b7490:	f00a f9b6 	bl	c1800 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7494:	a809      	add	r0, sp, #36	; 0x24
   b7496:	f7ff ff57 	bl	b7348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b749a:	a806      	add	r0, sp, #24
   b749c:	f7ff ff54 	bl	b7348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b74a0:	4b10      	ldr	r3, [pc, #64]	; (b74e4 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b74a2:	6023      	str	r3, [r4, #0]
   b74a4:	6225      	str	r5, [r4, #32]
   b74a6:	a803      	add	r0, sp, #12
   b74a8:	f7ff ff4e 	bl	b7348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b74ac:	4b0e      	ldr	r3, [pc, #56]	; (b74e8 <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b74ae:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b74b0:	f00b fba4 	bl	c2bfc <_Z16_fetch_usbserialv>
   b74b4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b74b8:	f00b fb8e 	bl	c2bd8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b74bc:	f009 feb6 	bl	c122c <_ZN5spark10LogManager8instanceEv>
   b74c0:	4621      	mov	r1, r4
   b74c2:	f00a f873 	bl	c15ac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);        // Easier to see the program flow
   b74c6:	4668      	mov	r0, sp
   b74c8:	f7ff ff3e 	bl	b7348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   b74cc:	b00c      	add	sp, #48	; 0x30
   b74ce:	bd70      	pop	{r4, r5, r6, pc}
   b74d0:	2003b3f4 	.word	0x2003b3f4
   b74d4:	ffff0000 	.word	0xffff0000
   b74d8:	2003b3e8 	.word	0x2003b3e8
   b74dc:	2003b3fc 	.word	0x2003b3fc
   b74e0:	000c7544 	.word	0x000c7544
   b74e4:	000c92c8 	.word	0x000c92c8
   b74e8:	000c755c 	.word	0x000c755c

000b74ec <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b74ec:	b510      	push	{r4, lr}
   b74ee:	4b03      	ldr	r3, [pc, #12]	; (b74fc <_ZN8MB85RC64D1Ev+0x10>)
   b74f0:	6003      	str	r3, [r0, #0]
   b74f2:	4604      	mov	r4, r0
   b74f4:	f001 fd44 	bl	b8f80 <_ZN6MB85RCD1Ev>
   b74f8:	4620      	mov	r0, r4
   b74fa:	bd10      	pop	{r4, pc}
   b74fc:	000c76ec 	.word	0x000c76ec

000b7500 <_ZN8MB85RC64D0Ev>:
   b7500:	b510      	push	{r4, lr}
   b7502:	4604      	mov	r4, r0
   b7504:	f7ff fff2 	bl	b74ec <_ZN8MB85RC64D1Ev>
   b7508:	4620      	mov	r0, r4
   b750a:	2110      	movs	r1, #16
   b750c:	f7fc fdc7 	bl	b409e <_ZdlPvj>
   b7510:	4620      	mov	r0, r4
   b7512:	bd10      	pop	{r4, pc}

000b7514 <_ZN17currentStatusData8validateEj>:

void currentStatusData::loop() {
    current.flush(false);
}

bool currentStatusData::validate(size_t dataSize) {
   b7514:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b7516:	f001 ff4f 	bl	b93b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("current data is %s",(valid) ? "valid": "not valid");
   b751a:	4604      	mov	r4, r0
   b751c:	b920      	cbnz	r0, b7528 <_ZN17currentStatusData8validateEj+0x14>
   b751e:	4a03      	ldr	r2, [pc, #12]	; (b752c <_ZN17currentStatusData8validateEj+0x18>)
   b7520:	4903      	ldr	r1, [pc, #12]	; (b7530 <_ZN17currentStatusData8validateEj+0x1c>)
   b7522:	4804      	ldr	r0, [pc, #16]	; (b7534 <_ZN17currentStatusData8validateEj+0x20>)
   b7524:	f7fc fdd2 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b7528:	4620      	mov	r0, r4
   b752a:	bd10      	pop	{r4, pc}
   b752c:	000c758c 	.word	0x000c758c
   b7530:	000c7596 	.word	0x000c7596
   b7534:	2003e634 	.word	0x2003e634

000b7538 <_ZN17currentStatusData10initializeEv>:

void currentStatusData::initialize() {
   b7538:	b510      	push	{r4, lr}
   b753a:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b753c:	f001 ffa2 	bl	b9484 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b7540:	4804      	ldr	r0, [pc, #16]	; (b7554 <_ZN17currentStatusData10initializeEv+0x1c>)
   b7542:	4905      	ldr	r1, [pc, #20]	; (b7558 <_ZN17currentStatusData10initializeEv+0x20>)
   b7544:	f7fc fdc2 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    // If you manually update fields here, be sure to update the hash
    updateHash();
   b7548:	4620      	mov	r0, r4
}
   b754a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b754e:	f001 bef7 	b.w	b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b7552:	bf00      	nop
   b7554:	2003e634 	.word	0x2003e634
   b7558:	000c75a9 	.word	0x000c75a9

000b755c <_ZN10nodeIDData8validateEj>:
    nodeDatabase.set_nodeIDJson(blank);
    nodeDatabase.flush(true);
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
}

bool nodeIDData::validate(size_t dataSize) {
   b755c:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b755e:	f001 ff2b 	bl	b93b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("nodeID data is %s",(valid) ? "valid": "not valid");
   b7562:	4604      	mov	r4, r0
   b7564:	b920      	cbnz	r0, b7570 <_ZN10nodeIDData8validateEj+0x14>
   b7566:	4a03      	ldr	r2, [pc, #12]	; (b7574 <_ZN10nodeIDData8validateEj+0x18>)
   b7568:	4903      	ldr	r1, [pc, #12]	; (b7578 <_ZN10nodeIDData8validateEj+0x1c>)
   b756a:	4804      	ldr	r0, [pc, #16]	; (b757c <_ZN10nodeIDData8validateEj+0x20>)
   b756c:	f7fc fdae 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b7570:	4620      	mov	r0, r4
   b7572:	bd10      	pop	{r4, pc}
   b7574:	000c758c 	.word	0x000c758c
   b7578:	000c75c2 	.word	0x000c75c2
   b757c:	2003e634 	.word	0x2003e634

000b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b7580:	b510      	push	{r4, lr}
            if (!handle_) {
   b7582:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b7584:	4604      	mov	r4, r0
            if (!handle_) {
   b7586:	b90b      	cbnz	r3, b758c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b7588:	f008 fc0e 	bl	bfda8 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b758c:	6820      	ldr	r0, [r4, #0]
        }
   b758e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b7592:	f008 bc19 	b.w	bfdc8 <os_mutex_recursive_lock>

000b7596 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b7596:	b538      	push	{r3, r4, r5, lr}
   b7598:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b759a:	3004      	adds	r0, #4
   b759c:	f7ff fff0 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b75a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b75a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b75a4:	6803      	ldr	r3, [r0, #0]
   b75a6:	68dd      	ldr	r5, [r3, #12]
   b75a8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b75ac:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b75ae:	6860      	ldr	r0, [r4, #4]
   b75b0:	f008 fc12 	bl	bfdd8 <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b75b4:	4620      	mov	r0, r4
        } 
   b75b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b75ba:	f001 be19 	b.w	b91f0 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b75be <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b75be:	b538      	push	{r3, r4, r5, lr}
   b75c0:	4604      	mov	r4, r0
   b75c2:	3004      	adds	r0, #4
   b75c4:	f7ff ffdc 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b75c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b75ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b75cc:	6803      	ldr	r3, [r0, #0]
   b75ce:	689d      	ldr	r5, [r3, #8]
   b75d0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b75d4:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b75d6:	68a2      	ldr	r2, [r4, #8]
   b75d8:	6823      	ldr	r3, [r4, #0]
   b75da:	88d1      	ldrh	r1, [r2, #6]
   b75dc:	695b      	ldr	r3, [r3, #20]
   b75de:	4620      	mov	r0, r4
   b75e0:	4798      	blx	r3
   b75e2:	b918      	cbnz	r0, b75ec <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b75e4:	6823      	ldr	r3, [r4, #0]
   b75e6:	4620      	mov	r0, r4
   b75e8:	699b      	ldr	r3, [r3, #24]
   b75ea:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b75ec:	6860      	ldr	r0, [r4, #4]
   b75ee:	f008 fbf3 	bl	bfdd8 <os_mutex_recursive_unlock>
        }
   b75f2:	2001      	movs	r0, #1
   b75f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b75f8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b75f8:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b75fa:	4b04      	ldr	r3, [pc, #16]	; (b760c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b75fc:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b75fe:	4604      	mov	r4, r0
            if (handle_) {
   b7600:	6840      	ldr	r0, [r0, #4]
   b7602:	b108      	cbz	r0, b7608 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b7604:	f008 fbd8 	bl	bfdb8 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b7608:	4620      	mov	r0, r4
   b760a:	bd10      	pop	{r4, pc}
   b760c:	000c7ad8 	.word	0x000c7ad8

000b7610 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b7610:	b510      	push	{r4, lr}
   b7612:	4b03      	ldr	r3, [pc, #12]	; (b7620 <_ZN13sysStatusDataD1Ev+0x10>)
   b7614:	6003      	str	r3, [r0, #0]
   b7616:	4604      	mov	r4, r0
   b7618:	f7ff ffee 	bl	b75f8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b761c:	4620      	mov	r0, r4
   b761e:	bd10      	pop	{r4, pc}
   b7620:	000c7734 	.word	0x000c7734

000b7624 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b7624:	b510      	push	{r4, lr}
   b7626:	4604      	mov	r4, r0
}
   b7628:	f7ff fff2 	bl	b7610 <_ZN13sysStatusDataD1Ev>
   b762c:	4620      	mov	r0, r4
   b762e:	2170      	movs	r1, #112	; 0x70
   b7630:	f7fc fd35 	bl	b409e <_ZdlPvj>
   b7634:	4620      	mov	r0, r4
   b7636:	bd10      	pop	{r4, pc}

000b7638 <_ZN17currentStatusDataD1Ev>:
currentStatusData::~currentStatusData() {
   b7638:	b510      	push	{r4, lr}
   b763a:	4b03      	ldr	r3, [pc, #12]	; (b7648 <_ZN17currentStatusDataD1Ev+0x10>)
   b763c:	6003      	str	r3, [r0, #0]
   b763e:	4604      	mov	r4, r0
   b7640:	f7ff ffda 	bl	b75f8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b7644:	4620      	mov	r0, r4
   b7646:	bd10      	pop	{r4, pc}
   b7648:	000c7760 	.word	0x000c7760

000b764c <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b764c:	b510      	push	{r4, lr}
   b764e:	4604      	mov	r4, r0
}
   b7650:	f7ff fff2 	bl	b7638 <_ZN17currentStatusDataD1Ev>
   b7654:	4620      	mov	r0, r4
   b7656:	2160      	movs	r1, #96	; 0x60
   b7658:	f7fc fd21 	bl	b409e <_ZdlPvj>
   b765c:	4620      	mov	r0, r4
   b765e:	bd10      	pop	{r4, pc}

000b7660 <_ZN10nodeIDDataD1Ev>:
nodeIDData::~nodeIDData() {
   b7660:	b510      	push	{r4, lr}
   b7662:	4b03      	ldr	r3, [pc, #12]	; (b7670 <_ZN10nodeIDDataD1Ev+0x10>)
   b7664:	6003      	str	r3, [r0, #0]
   b7666:	4604      	mov	r4, r0
   b7668:	f7ff ffc6 	bl	b75f8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b766c:	4620      	mov	r0, r4
   b766e:	bd10      	pop	{r4, pc}
   b7670:	000c7708 	.word	0x000c7708

000b7674 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b7674:	b510      	push	{r4, lr}
   b7676:	4604      	mov	r4, r0
}
   b7678:	f7ff fff2 	bl	b7660 <_ZN10nodeIDDataD1Ev>
   b767c:	4620      	mov	r0, r4
   b767e:	f640 413c 	movw	r1, #3132	; 0xc3c
   b7682:	f7fc fd0c 	bl	b409e <_ZdlPvj>
   b7686:	4620      	mov	r0, r4
   b7688:	bd10      	pop	{r4, pc}
	...

000b768c <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b768c:	f100 0130 	add.w	r1, r0, #48	; 0x30
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b7690:	6081      	str	r1, [r0, #8]
   b7692:	490a      	ldr	r1, [pc, #40]	; (b76bc <_ZN13sysStatusDataC1Ev+0x30>)
   b7694:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b7698:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b769c:	2101      	movs	r1, #1
   b769e:	8281      	strh	r1, [r0, #20]
   b76a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b76a4:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b76a6:	4906      	ldr	r1, [pc, #24]	; (b76c0 <_ZN13sysStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b76a8:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b76aa:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
        CustomRecursiveMutex() : handle_(nullptr) {
   b76ae:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b76b0:	6182      	str	r2, [r0, #24]
   b76b2:	f880 2020 	strb.w	r2, [r0, #32]
   b76b6:	4a03      	ldr	r2, [pc, #12]	; (b76c4 <_ZN13sysStatusDataC1Ev+0x38>)
   b76b8:	6002      	str	r2, [r0, #0]
};
   b76ba:	4770      	bx	lr
   b76bc:	20a99e76 	.word	0x20a99e76
   b76c0:	2003b42c 	.word	0x2003b42c
   b76c4:	000c7734 	.word	0x000c7734

000b76c8 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b76c8:	b510      	push	{r4, lr}
    if (!_instance) {
   b76ca:	4c06      	ldr	r4, [pc, #24]	; (b76e4 <_ZN13sysStatusData8instanceEv+0x1c>)
   b76cc:	6823      	ldr	r3, [r4, #0]
   b76ce:	b93b      	cbnz	r3, b76e0 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b76d0:	2070      	movs	r0, #112	; 0x70
   b76d2:	f7fc fce0 	bl	b4096 <_Znwj>
   b76d6:	4603      	mov	r3, r0
   b76d8:	b108      	cbz	r0, b76de <_ZN13sysStatusData8instanceEv+0x16>
   b76da:	f7ff ffd7 	bl	b768c <_ZN13sysStatusDataC1Ev>
   b76de:	6023      	str	r3, [r4, #0]
}
   b76e0:	6820      	ldr	r0, [r4, #0]
   b76e2:	bd10      	pop	{r4, pc}
   b76e4:	2003b424 	.word	0x2003b424

000b76e8 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b76e8:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b76ea:	f7ff ffed 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b76ee:	6803      	ldr	r3, [r0, #0]
}
   b76f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b76f4:	68db      	ldr	r3, [r3, #12]
   b76f6:	2100      	movs	r1, #0
   b76f8:	4718      	bx	r3
	...

000b76fc <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b76fc:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b7700:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b7702:	6081      	str	r1, [r0, #8]
   b7704:	490a      	ldr	r1, [pc, #40]	; (b7730 <_ZN17currentStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b7706:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b7708:	f04f 0c34 	mov.w	ip, #52	; 0x34
   b770c:	6182      	str	r2, [r0, #24]
   b770e:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b7712:	4a08      	ldr	r2, [pc, #32]	; (b7734 <_ZN17currentStatusDataC1Ev+0x38>)
   b7714:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b7716:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b771a:	2264      	movs	r2, #100	; 0x64
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b771c:	2103      	movs	r1, #3
   b771e:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b7720:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b7722:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b7726:	4a04      	ldr	r2, [pc, #16]	; (b7738 <_ZN17currentStatusDataC1Ev+0x3c>)
   b7728:	61c1      	str	r1, [r0, #28]
   b772a:	6002      	str	r2, [r0, #0]
};
   b772c:	4770      	bx	lr
   b772e:	bf00      	nop
   b7730:	20a99e80 	.word	0x20a99e80
   b7734:	2003b42c 	.word	0x2003b42c
   b7738:	000c7760 	.word	0x000c7760

000b773c <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b773c:	b510      	push	{r4, lr}
    if (!_instance) {
   b773e:	4c06      	ldr	r4, [pc, #24]	; (b7758 <_ZN17currentStatusData8instanceEv+0x1c>)
   b7740:	6823      	ldr	r3, [r4, #0]
   b7742:	b93b      	cbnz	r3, b7754 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b7744:	2060      	movs	r0, #96	; 0x60
   b7746:	f7fc fca6 	bl	b4096 <_Znwj>
   b774a:	4603      	mov	r3, r0
   b774c:	b108      	cbz	r0, b7752 <_ZN17currentStatusData8instanceEv+0x16>
   b774e:	f7ff ffd5 	bl	b76fc <_ZN17currentStatusDataC1Ev>
   b7752:	6023      	str	r3, [r4, #0]
}
   b7754:	6820      	ldr	r0, [r4, #0]
   b7756:	bd10      	pop	{r4, pc}
   b7758:	2003b428 	.word	0x2003b428

000b775c <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b775c:	b510      	push	{r4, lr}
    fram.begin();
   b775e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7760:	f001 fc24 	bl	b8fac <_ZN6MB85RC5beginEv>
    current
   b7764:	f7ff ffea 	bl	b773c <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b7768:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b776c:	6803      	ldr	r3, [r0, #0]
   b776e:	61c2      	str	r2, [r0, #28]
}
   b7770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b7774:	685b      	ldr	r3, [r3, #4]
   b7776:	4718      	bx	r3

000b7778 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b7778:	b510      	push	{r4, lr}
    current.flush(false);
   b777a:	f7ff ffdf 	bl	b773c <_ZN17currentStatusData8instanceEv>
   b777e:	6803      	ldr	r3, [r0, #0]
}
   b7780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b7784:	68db      	ldr	r3, [r3, #12]
   b7786:	2100      	movs	r1, #0
   b7788:	4718      	bx	r3

000b778a <_ZNK17currentStatusData12get_uniqueIDEv>:
uint32_t currentStatusData::get_uniqueID() const {
   b778a:	b538      	push	{r3, r4, r5, lr}
   b778c:	4604      	mov	r4, r0
   b778e:	3004      	adds	r0, #4
   b7790:	f7ff fef6 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b7794:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b7796:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b7798:	3b04      	subs	r3, #4
   b779a:	2b17      	cmp	r3, #23
                    result = *(const T *)p;
   b779c:	bf86      	itte	hi
   b779e:	68a3      	ldrhi	r3, [r4, #8]
   b77a0:	699d      	ldrhi	r5, [r3, #24]
            T result = 0;
   b77a2:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b77a4:	f008 fb18 	bl	bfdd8 <os_mutex_recursive_unlock>
}
   b77a8:	4628      	mov	r0, r5
   b77aa:	bd38      	pop	{r3, r4, r5, pc}

000b77ac <_ZN17currentStatusData12set_uniqueIDEm>:
void currentStatusData::set_uniqueID(uint32_t value) {
   b77ac:	b538      	push	{r3, r4, r5, lr}
   b77ae:	4604      	mov	r4, r0
   b77b0:	3004      	adds	r0, #4
   b77b2:	460d      	mov	r5, r1
   b77b4:	f7ff fee4 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b77b8:	68e3      	ldr	r3, [r4, #12]
   b77ba:	3b04      	subs	r3, #4
   b77bc:	2b17      	cmp	r3, #23
   b77be:	d907      	bls.n	b77d0 <_ZN17currentStatusData12set_uniqueIDEm+0x24>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b77c0:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b77c2:	699a      	ldr	r2, [r3, #24]
   b77c4:	4295      	cmp	r5, r2
   b77c6:	d003      	beq.n	b77d0 <_ZN17currentStatusData12set_uniqueIDEm+0x24>
                        *(T *)p = value;
   b77c8:	619d      	str	r5, [r3, #24]
                        updateHash();
   b77ca:	4620      	mov	r0, r4
   b77cc:	f001 fdb8 	bl	b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b77d0:	6860      	ldr	r0, [r4, #4]
}
   b77d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b77d6:	f008 baff 	b.w	bfdd8 <os_mutex_recursive_unlock>

000b77da <_ZNK17currentStatusData17get_stateOfChargeEv>:
int8_t currentStatusData::get_stateOfCharge() const {
   b77da:	b538      	push	{r3, r4, r5, lr}
   b77dc:	4604      	mov	r4, r0
   b77de:	3004      	adds	r0, #4
   b77e0:	f7ff fece 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b77e4:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b77e6:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b77e8:	3b01      	subs	r3, #1
   b77ea:	2b24      	cmp	r3, #36	; 0x24
                    result = *(const T *)p;
   b77ec:	bf86      	itte	hi
   b77ee:	68a3      	ldrhi	r3, [r4, #8]
   b77f0:	f993 5025 	ldrsbhi.w	r5, [r3, #37]	; 0x25
            T result = 0;
   b77f4:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b77f6:	f008 faef 	bl	bfdd8 <os_mutex_recursive_unlock>
}
   b77fa:	4628      	mov	r0, r5
   b77fc:	bd38      	pop	{r3, r4, r5, pc}

000b77fe <_ZN17currentStatusData17set_stateOfChargeEa>:
void currentStatusData::set_stateOfCharge(int8_t value) {
   b77fe:	b538      	push	{r3, r4, r5, lr}
   b7800:	4604      	mov	r4, r0
   b7802:	3004      	adds	r0, #4
   b7804:	460d      	mov	r5, r1
   b7806:	f7ff febb 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b780a:	68e3      	ldr	r3, [r4, #12]
   b780c:	3b01      	subs	r3, #1
   b780e:	2b24      	cmp	r3, #36	; 0x24
   b7810:	d909      	bls.n	b7826 <_ZN17currentStatusData17set_stateOfChargeEa+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b7812:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b7814:	f993 2025 	ldrsb.w	r2, [r3, #37]	; 0x25
   b7818:	42aa      	cmp	r2, r5
   b781a:	d004      	beq.n	b7826 <_ZN17currentStatusData17set_stateOfChargeEa+0x28>
                        *(T *)p = value;
   b781c:	f883 5025 	strb.w	r5, [r3, #37]	; 0x25
                        updateHash();
   b7820:	4620      	mov	r0, r4
   b7822:	f001 fd8d 	bl	b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b7826:	6860      	ldr	r0, [r4, #4]
}
   b7828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b782c:	f008 bad4 	b.w	bfdd8 <os_mutex_recursive_unlock>

000b7830 <_ZN10nodeIDDataC1Ev>:
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 200, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b7830:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b7834:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b7836:	6081      	str	r1, [r0, #8]
   b7838:	490a      	ldr	r1, [pc, #40]	; (b7864 <_ZN10nodeIDDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b783a:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b783c:	f44f 6c41 	mov.w	ip, #3088	; 0xc10
   b7840:	6182      	str	r2, [r0, #24]
   b7842:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b7846:	4a08      	ldr	r2, [pc, #32]	; (b7868 <_ZN10nodeIDDataC1Ev+0x38>)
   b7848:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b784a:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b784e:	22c8      	movs	r2, #200	; 0xc8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b7850:	2102      	movs	r1, #2
   b7852:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b7854:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b7856:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b785a:	4a04      	ldr	r2, [pc, #16]	; (b786c <_ZN10nodeIDDataC1Ev+0x3c>)
   b785c:	61c1      	str	r1, [r0, #28]
   b785e:	6002      	str	r2, [r0, #0]
};
   b7860:	4770      	bx	lr
   b7862:	bf00      	nop
   b7864:	20a99e60 	.word	0x20a99e60
   b7868:	2003b42c 	.word	0x2003b42c
   b786c:	000c7708 	.word	0x000c7708

000b7870 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b7870:	b510      	push	{r4, lr}
    if (!_instance) {
   b7872:	4c07      	ldr	r4, [pc, #28]	; (b7890 <_ZN10nodeIDData8instanceEv+0x20>)
   b7874:	6823      	ldr	r3, [r4, #0]
   b7876:	b943      	cbnz	r3, b788a <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b7878:	f640 403c 	movw	r0, #3132	; 0xc3c
   b787c:	f7fc fc0b 	bl	b4096 <_Znwj>
   b7880:	4603      	mov	r3, r0
   b7882:	b108      	cbz	r0, b7888 <_ZN10nodeIDData8instanceEv+0x18>
   b7884:	f7ff ffd4 	bl	b7830 <_ZN10nodeIDDataC1Ev>
   b7888:	6023      	str	r3, [r4, #0]
}
   b788a:	6820      	ldr	r0, [r4, #0]
   b788c:	bd10      	pop	{r4, pc}
   b788e:	bf00      	nop
   b7890:	2003b420 	.word	0x2003b420

000b7894 <_ZN10nodeIDData5setupEv>:
void nodeIDData::setup() {
   b7894:	b510      	push	{r4, lr}
    fram.begin();
   b7896:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7898:	f001 fb88 	bl	b8fac <_ZN6MB85RC5beginEv>
    nodeDatabase
   b789c:	f7ff ffe8 	bl	b7870 <_ZN10nodeIDData8instanceEv>
            saveDelayMs = value;
   b78a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b78a4:	6803      	ldr	r3, [r0, #0]
   b78a6:	61c2      	str	r2, [r0, #28]
}
   b78a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b78ac:	685b      	ldr	r3, [r3, #4]
   b78ae:	4718      	bx	r3

000b78b0 <_ZN10nodeIDData4loopEv>:
void nodeIDData::loop() {
   b78b0:	b510      	push	{r4, lr}
    nodeDatabase.flush(false);
   b78b2:	f7ff ffdd 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   b78b6:	6803      	ldr	r3, [r0, #0]
}
   b78b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeDatabase.flush(false);
   b78bc:	68db      	ldr	r3, [r3, #12]
   b78be:	2100      	movs	r1, #0
   b78c0:	4718      	bx	r3
	...

000b78c4 <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeIDData::resetNodeIDs();
    updateHash();                                       // If you manually update fields here, be sure to update the hash
}


String nodeIDData::get_nodeIDJson() const {
   b78c4:	b538      	push	{r3, r4, r5, lr}
   b78c6:	4604      	mov	r4, r0
   b78c8:	460d      	mov	r5, r1
	String result;
   b78ca:	4906      	ldr	r1, [pc, #24]	; (b78e4 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b78cc:	f009 f893 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b78d0:	4623      	mov	r3, r4
   b78d2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b78d6:	2110      	movs	r1, #16
   b78d8:	4628      	mov	r0, r5
   b78da:	f001 fcbf 	bl	b925c <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b78de:	4620      	mov	r0, r4
   b78e0:	bd38      	pop	{r3, r4, r5, pc}
   b78e2:	bf00      	nop
   b78e4:	000c9298 	.word	0x000c9298

000b78e8 <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char* str) {
   b78e8:	b510      	push	{r4, lr}
   b78ea:	460b      	mov	r3, r1

    // Set the cleaned JSON value
    bool result = setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b78ec:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b78f0:	2110      	movs	r1, #16
   b78f2:	f001 fd31 	bl	b9358 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>
   b78f6:	4604      	mov	r4, r0
    //         offset += chunkSize;
    //     }
    // }

    // Save to disk
    nodeDatabase.flush(false);
   b78f8:	f7ff ffba 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   b78fc:	6803      	ldr	r3, [r0, #0]
   b78fe:	2100      	movs	r1, #0
   b7900:	68db      	ldr	r3, [r3, #12]
   b7902:	4798      	blx	r3

    return result;
   b7904:	4620      	mov	r0, r4
   b7906:	bd10      	pop	{r4, pc}

000b7908 <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b7908:	b510      	push	{r4, lr}
    Log.info("Resetting NodeID config to: %s", blank.c_str());
   b790a:	4c14      	ldr	r4, [pc, #80]	; (b795c <_ZN10nodeIDData12resetNodeIDsEv+0x54>)
    String blank = "{\"nodes\":[]}";
   b790c:	4914      	ldr	r1, [pc, #80]	; (b7960 <_ZN10nodeIDData12resetNodeIDsEv+0x58>)
void nodeIDData::resetNodeIDs() {
   b790e:	b088      	sub	sp, #32
    String blank = "{\"nodes\":[]}";
   b7910:	4668      	mov	r0, sp
   b7912:	f009 f870 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Resetting NodeID config to: %s", blank.c_str());
   b7916:	9a00      	ldr	r2, [sp, #0]
   b7918:	4912      	ldr	r1, [pc, #72]	; (b7964 <_ZN10nodeIDData12resetNodeIDsEv+0x5c>)
   b791a:	4620      	mov	r0, r4
   b791c:	f7fc fbd6 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    nodeDatabase.set_nodeIDJson(blank);
   b7920:	f7ff ffa6 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   b7924:	9900      	ldr	r1, [sp, #0]
   b7926:	f7ff ffdf 	bl	b78e8 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    nodeDatabase.flush(true);
   b792a:	f7ff ffa1 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   b792e:	6803      	ldr	r3, [r0, #0]
   b7930:	2101      	movs	r1, #1
   b7932:	68db      	ldr	r3, [r3, #12]
   b7934:	4798      	blx	r3
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
   b7936:	f7ff ff9b 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   b793a:	4601      	mov	r1, r0
   b793c:	a804      	add	r0, sp, #16
   b793e:	f7ff ffc1 	bl	b78c4 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b7942:	9a04      	ldr	r2, [sp, #16]
   b7944:	4908      	ldr	r1, [pc, #32]	; (b7968 <_ZN10nodeIDData12resetNodeIDsEv+0x60>)
   b7946:	4620      	mov	r0, r4
   b7948:	f7fc fbc0 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b794c:	a804      	add	r0, sp, #16
   b794e:	f009 f807 	bl	c0960 <_ZN6StringD1Ev>
    String blank = "{\"nodes\":[]}";
   b7952:	4668      	mov	r0, sp
   b7954:	f009 f804 	bl	c0960 <_ZN6StringD1Ev>
}
   b7958:	b008      	add	sp, #32
   b795a:	bd10      	pop	{r4, pc}
   b795c:	2003e634 	.word	0x2003e634
   b7960:	000c75d4 	.word	0x000c75d4
   b7964:	000c75e1 	.word	0x000c75e1
   b7968:	000c7600 	.word	0x000c7600

000b796c <_ZN10nodeIDData10initializeEv>:
void nodeIDData::initialize() {
   b796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Log.info("Erasing FRAM region");
   b796e:	4910      	ldr	r1, [pc, #64]	; (b79b0 <_ZN10nodeIDData10initializeEv+0x44>)
void nodeIDData::initialize() {
   b7970:	4604      	mov	r4, r0
    Log.info("Erasing FRAM region");
   b7972:	4810      	ldr	r0, [pc, #64]	; (b79b4 <_ZN10nodeIDData10initializeEv+0x48>)
   b7974:	f7fc fbaa 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b7978:	25c8      	movs	r5, #200	; 0xc8
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b797a:	f640 46d8 	movw	r6, #3288	; 0xcd8
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b797e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7980:	6803      	ldr	r3, [r0, #0]
   b7982:	4629      	mov	r1, r5
   b7984:	68df      	ldr	r7, [r3, #12]
   b7986:	22ff      	movs	r2, #255	; 0xff
   b7988:	2302      	movs	r3, #2
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b798a:	3501      	adds	r5, #1
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b798c:	47b8      	blx	r7
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b798e:	42b5      	cmp	r5, r6
   b7990:	d1f5      	bne.n	b797e <_ZN10nodeIDData10initializeEv+0x12>
    Log.info("Initializing data");
   b7992:	4909      	ldr	r1, [pc, #36]	; (b79b8 <_ZN10nodeIDData10initializeEv+0x4c>)
   b7994:	4807      	ldr	r0, [pc, #28]	; (b79b4 <_ZN10nodeIDData10initializeEv+0x48>)
   b7996:	f7fc fb99 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    PersistentDataFRAM::initialize();
   b799a:	4620      	mov	r0, r4
   b799c:	f001 fd72 	bl	b9484 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    nodeIDData::resetNodeIDs();
   b79a0:	4620      	mov	r0, r4
   b79a2:	f7ff ffb1 	bl	b7908 <_ZN10nodeIDData12resetNodeIDsEv>
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b79a6:	4620      	mov	r0, r4
}
   b79a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b79ac:	f001 bcc8 	b.w	b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b79b0:	000c7616 	.word	0x000c7616
   b79b4:	2003e634 	.word	0x2003e634
   b79b8:	000c762a 	.word	0x000c762a

000b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b79bc:	b538      	push	{r3, r4, r5, lr}
   b79be:	4604      	mov	r4, r0
   b79c0:	3004      	adds	r0, #4
   b79c2:	460d      	mov	r5, r1
   b79c4:	f7ff fddc 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b79c8:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b79ca:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b79cc:	3b01      	subs	r3, #1
   b79ce:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b79d0:	bf26      	itte	cs
   b79d2:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b79d4:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b79d6:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b79d8:	f008 f9fe 	bl	bfdd8 <os_mutex_recursive_unlock>
        }
   b79dc:	4628      	mov	r0, r5
   b79de:	bd38      	pop	{r3, r4, r5, pc}

000b79e0 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b79e0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b79e2:	2110      	movs	r1, #16
   b79e4:	f7ff ffea 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b79e8:	bd08      	pop	{r3, pc}

000b79ea <_ZNK13sysStatusData20get_connectivityModeEv>:
uint8_t sysStatusData::get_connectivityMode() const {
   b79ea:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, connectivityMode));
   b79ec:	2114      	movs	r1, #20
   b79ee:	f7ff ffe5 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b79f2:	bd08      	pop	{r3, pc}

000b79f4 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b79f4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b79f6:	2115      	movs	r1, #21
   b79f8:	f7ff ffe0 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b79fc:	bd08      	pop	{r3, pc}

000b79fe <_ZNK13sysStatusData20get_alertCodeGatewayEv>:
uint8_t sysStatusData::get_alertCodeGateway() const {
   b79fe:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, alertCodeGateway));
   b7a00:	212e      	movs	r1, #46	; 0x2e
   b7a02:	f7ff ffdb 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a06:	bd08      	pop	{r3, pc}

000b7a08 <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b7a08:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b7a0a:	2138      	movs	r1, #56	; 0x38
   b7a0c:	f7ff ffd6 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a10:	bd08      	pop	{r3, pc}

000b7a12 <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b7a12:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b7a14:	2139      	movs	r1, #57	; 0x39
   b7a16:	f7ff ffd1 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a1a:	bd08      	pop	{r3, pc}

000b7a1c <_ZNK13sysStatusData13get_breakTimeEv>:
uint8_t sysStatusData::get_breakTime() const {
   b7a1c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, breakTime));
   b7a1e:	213a      	movs	r1, #58	; 0x3a
   b7a20:	f7ff ffcc 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a24:	bd08      	pop	{r3, pc}

000b7a26 <_ZNK13sysStatusData22get_breakLengthMinutesEv>:
uint8_t sysStatusData::get_breakLengthMinutes() const {
   b7a26:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, breakLengthMinutes));
   b7a28:	213b      	movs	r1, #59	; 0x3b
   b7a2a:	f7ff ffc7 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a2e:	bd08      	pop	{r3, pc}

000b7a30 <_ZNK13sysStatusData20get_weekendBreakTimeEv>:
uint8_t sysStatusData::get_weekendBreakTime() const {
   b7a30:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, weekendBreakTime));
   b7a32:	213c      	movs	r1, #60	; 0x3c
   b7a34:	f7ff ffc2 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a38:	bd08      	pop	{r3, pc}

000b7a3a <_ZNK13sysStatusData29get_weekendBreakLengthMinutesEv>:
uint8_t sysStatusData::get_weekendBreakLengthMinutes() const {
   b7a3a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, weekendBreakLengthMinutes));
   b7a3c:	213d      	movs	r1, #61	; 0x3d
   b7a3e:	f7ff ffbd 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a42:	bd08      	pop	{r3, pc}

000b7a44 <_ZNK13sysStatusData13get_tokenCoreEv>:
uint8_t sysStatusData::get_tokenCore() const {
   b7a44:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, tokenCore));
   b7a46:	213e      	movs	r1, #62	; 0x3e
   b7a48:	f7ff ffb8 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a4c:	bd08      	pop	{r3, pc}

000b7a4e <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b7a4e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b7a50:	2110      	movs	r1, #16
   b7a52:	f7ff ffb3 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a56:	bd08      	pop	{r3, pc}

000b7a58 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b7a58:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b7a5a:	2111      	movs	r1, #17
   b7a5c:	f7ff ffae 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a60:	bd08      	pop	{r3, pc}

000b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b7a62:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b7a64:	2114      	movs	r1, #20
   b7a66:	f7ff ffa9 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a6a:	bd08      	pop	{r3, pc}

000b7a6c <_ZNK17currentStatusData12get_payload1Ev>:
uint8_t currentStatusData::get_payload1() const {
   b7a6c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload1));
   b7a6e:	211c      	movs	r1, #28
   b7a70:	f7ff ffa4 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a74:	bd08      	pop	{r3, pc}

000b7a76 <_ZNK17currentStatusData12get_payload2Ev>:
uint8_t currentStatusData::get_payload2() const {
   b7a76:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload2));
   b7a78:	211d      	movs	r1, #29
   b7a7a:	f7ff ff9f 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a7e:	bd08      	pop	{r3, pc}

000b7a80 <_ZNK17currentStatusData12get_payload3Ev>:
uint8_t currentStatusData::get_payload3() const {
   b7a80:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload3));
   b7a82:	211e      	movs	r1, #30
   b7a84:	f7ff ff9a 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a88:	bd08      	pop	{r3, pc}

000b7a8a <_ZNK17currentStatusData12get_payload4Ev>:
uint8_t currentStatusData::get_payload4() const {
   b7a8a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload4));
   b7a8c:	211f      	movs	r1, #31
   b7a8e:	f7ff ff95 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a92:	bd08      	pop	{r3, pc}

000b7a94 <_ZNK17currentStatusData12get_payload5Ev>:
uint8_t currentStatusData::get_payload5() const {
   b7a94:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload5));
   b7a96:	2120      	movs	r1, #32
   b7a98:	f7ff ff90 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7a9c:	bd08      	pop	{r3, pc}

000b7a9e <_ZNK17currentStatusData12get_payload6Ev>:
uint8_t currentStatusData::get_payload6() const {
   b7a9e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload6));
   b7aa0:	2121      	movs	r1, #33	; 0x21
   b7aa2:	f7ff ff8b 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7aa6:	bd08      	pop	{r3, pc}

000b7aa8 <_ZNK17currentStatusData12get_payload7Ev>:
uint8_t currentStatusData::get_payload7() const {
   b7aa8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload7));
   b7aaa:	2122      	movs	r1, #34	; 0x22
   b7aac:	f7ff ff86 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7ab0:	bd08      	pop	{r3, pc}

000b7ab2 <_ZNK17currentStatusData12get_payload8Ev>:
uint8_t currentStatusData::get_payload8() const {
   b7ab2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload8));
   b7ab4:	2123      	movs	r1, #35	; 0x23
   b7ab6:	f7ff ff81 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7aba:	bd08      	pop	{r3, pc}

000b7abc <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b7abc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b7abe:	2124      	movs	r1, #36	; 0x24
   b7ac0:	f7ff ff7c 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7ac4:	bd08      	pop	{r3, pc}

000b7ac6 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b7ac6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b7ac8:	2126      	movs	r1, #38	; 0x26
   b7aca:	f7ff ff77 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7ace:	bd08      	pop	{r3, pc}

000b7ad0 <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b7ad0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b7ad2:	2127      	movs	r1, #39	; 0x27
   b7ad4:	f7ff ff72 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7ad8:	bd08      	pop	{r3, pc}

000b7ada <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b7ada:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b7adc:	212c      	movs	r1, #44	; 0x2c
   b7ade:	f7ff ff6d 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7ae2:	bd08      	pop	{r3, pc}

000b7ae4 <_ZNK17currentStatusData13get_openHoursEv>:
uint8_t currentStatusData::get_openHours() const {
   b7ae4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, openHours));
   b7ae6:	212d      	movs	r1, #45	; 0x2d
   b7ae8:	f7ff ff68 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7aec:	bd08      	pop	{r3, pc}

000b7aee <_ZNK17currentStatusData11get_onBreakEv>:
byte currentStatusData::get_onBreak() const {
   b7aee:	b508      	push	{r3, lr}
    return getValue<byte>(offsetof(CurrentData, onBreak));
   b7af0:	212e      	movs	r1, #46	; 0x2e
   b7af2:	f7ff ff63 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7af6:	bd08      	pop	{r3, pc}

000b7af8 <_ZNK17currentStatusData8get_hopsEv>:
uint8_t currentStatusData::get_hops() const {
   b7af8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, hops));
   b7afa:	212f      	movs	r1, #47	; 0x2f
   b7afc:	f7ff ff5e 	bl	b79bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b7b00:	bd08      	pop	{r3, pc}

000b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b7b02:	b570      	push	{r4, r5, r6, lr}
   b7b04:	4604      	mov	r4, r0
   b7b06:	3004      	adds	r0, #4
   b7b08:	460d      	mov	r5, r1
   b7b0a:	4616      	mov	r6, r2
   b7b0c:	f7ff fd38 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b7b10:	68e3      	ldr	r3, [r4, #12]
   b7b12:	3b01      	subs	r3, #1
   b7b14:	42ab      	cmp	r3, r5
   b7b16:	d307      	bcc.n	b7b28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b7b18:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b7b1a:	5d5a      	ldrb	r2, [r3, r5]
   b7b1c:	42b2      	cmp	r2, r6
   b7b1e:	d003      	beq.n	b7b28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b7b20:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b7b22:	4620      	mov	r0, r4
   b7b24:	f001 fc0c 	bl	b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b7b28:	6860      	ldr	r0, [r4, #4]
        }
   b7b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b7b2e:	f008 b953 	b.w	bfdd8 <os_mutex_recursive_unlock>

000b7b32 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b7b32:	b508      	push	{r3, lr}
   b7b34:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b7b36:	2110      	movs	r1, #16
   b7b38:	f7ff ffe3 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7b3c:	bd08      	pop	{r3, pc}

000b7b3e <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b7b3e:	b508      	push	{r3, lr}
   b7b40:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b7b42:	2111      	movs	r1, #17
   b7b44:	f7ff ffdd 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7b48:	bd08      	pop	{r3, pc}

000b7b4a <_ZN13sysStatusData20set_connectivityModeEh>:
void sysStatusData::set_connectivityMode(uint8_t value) {
   b7b4a:	b508      	push	{r3, lr}
   b7b4c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, connectivityMode), value);
   b7b4e:	2114      	movs	r1, #20
   b7b50:	f7ff ffd7 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7b54:	bd08      	pop	{r3, pc}

000b7b56 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b7b56:	b508      	push	{r3, lr}
   b7b58:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b7b5a:	2115      	movs	r1, #21
   b7b5c:	f7ff ffd1 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7b60:	bd08      	pop	{r3, pc}

000b7b62 <_ZN13sysStatusData20set_alertCodeGatewayEh>:
void sysStatusData::set_alertCodeGateway(uint8_t value) {
   b7b62:	b508      	push	{r3, lr}
   b7b64:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeGateway), value);
   b7b66:	212e      	movs	r1, #46	; 0x2e
   b7b68:	f7ff ffcb 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7b6c:	bd08      	pop	{r3, pc}

000b7b6e <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b7b6e:	b508      	push	{r3, lr}
   b7b70:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b7b72:	2138      	movs	r1, #56	; 0x38
   b7b74:	f7ff ffc5 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7b78:	bd08      	pop	{r3, pc}

000b7b7a <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b7b7a:	b508      	push	{r3, lr}
   b7b7c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b7b7e:	2139      	movs	r1, #57	; 0x39
   b7b80:	f7ff ffbf 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7b84:	bd08      	pop	{r3, pc}

000b7b86 <_ZN13sysStatusData13set_breakTimeEh>:
void sysStatusData::set_breakTime(uint8_t value) {
   b7b86:	b508      	push	{r3, lr}
   b7b88:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, breakTime), value);
   b7b8a:	213a      	movs	r1, #58	; 0x3a
   b7b8c:	f7ff ffb9 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7b90:	bd08      	pop	{r3, pc}

000b7b92 <_ZN13sysStatusData22set_breakLengthMinutesEh>:
void sysStatusData::set_breakLengthMinutes(uint8_t value) {
   b7b92:	b508      	push	{r3, lr}
   b7b94:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, breakLengthMinutes), value);
   b7b96:	213b      	movs	r1, #59	; 0x3b
   b7b98:	f7ff ffb3 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7b9c:	bd08      	pop	{r3, pc}

000b7b9e <_ZN13sysStatusData20set_weekendBreakTimeEh>:
void sysStatusData::set_weekendBreakTime(uint8_t value) {
   b7b9e:	b508      	push	{r3, lr}
   b7ba0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, weekendBreakTime), value);
   b7ba2:	213c      	movs	r1, #60	; 0x3c
   b7ba4:	f7ff ffad 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7ba8:	bd08      	pop	{r3, pc}

000b7baa <_ZN13sysStatusData29set_weekendBreakLengthMinutesEh>:
void sysStatusData::set_weekendBreakLengthMinutes(uint8_t value) {
   b7baa:	b508      	push	{r3, lr}
   b7bac:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, weekendBreakLengthMinutes), value);
   b7bae:	213d      	movs	r1, #61	; 0x3d
   b7bb0:	f7ff ffa7 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7bb4:	bd08      	pop	{r3, pc}

000b7bb6 <_ZN13sysStatusData13set_tokenCoreEh>:
void sysStatusData::set_tokenCore(uint8_t value) {
   b7bb6:	b508      	push	{r3, lr}
   b7bb8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, tokenCore), value);
   b7bba:	213e      	movs	r1, #62	; 0x3e
   b7bbc:	f7ff ffa1 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7bc0:	bd08      	pop	{r3, pc}
	...

000b7bc4 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b7bc4:	b510      	push	{r4, lr}
    fram.begin();
   b7bc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7bc8:	f001 f9f0 	bl	b8fac <_ZN6MB85RC5beginEv>
    sysStatus
   b7bcc:	f7ff fd7c 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
            saveDelayMs = value;
   b7bd0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b7bd4:	6803      	ldr	r3, [r0, #0]
   b7bd6:	61c2      	str	r2, [r0, #28]
   b7bd8:	685b      	ldr	r3, [r3, #4]
   b7bda:	4798      	blx	r3
    sysStatus.set_tokenCore(random(1,255));
   b7bdc:	f7ff fd74 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7be0:	21ff      	movs	r1, #255	; 0xff
   b7be2:	4604      	mov	r4, r0
   b7be4:	2001      	movs	r0, #1
   b7be6:	f00b f9fa 	bl	c2fde <_Z6randomii>
   b7bea:	b2c1      	uxtb	r1, r0
   b7bec:	4620      	mov	r0, r4
   b7bee:	f7ff ffe2 	bl	b7bb6 <_ZN13sysStatusData13set_tokenCoreEh>
    Log.info("Token Core is %d", sysStatus.get_tokenCore());
   b7bf2:	f7ff fd69 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7bf6:	f7ff ff25 	bl	b7a44 <_ZNK13sysStatusData13get_tokenCoreEv>
   b7bfa:	4903      	ldr	r1, [pc, #12]	; (b7c08 <_ZN13sysStatusData5setupEv+0x44>)
   b7bfc:	4602      	mov	r2, r0
   b7bfe:	4803      	ldr	r0, [pc, #12]	; (b7c0c <_ZN13sysStatusData5setupEv+0x48>)
   b7c00:	f7fc fa64 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
}
   b7c04:	bd10      	pop	{r4, pc}
   b7c06:	bf00      	nop
   b7c08:	000c763c 	.word	0x000c763c
   b7c0c:	2003e634 	.word	0x2003e634

000b7c10 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b7c10:	b508      	push	{r3, lr}
   b7c12:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b7c14:	2110      	movs	r1, #16
   b7c16:	f7ff ff74 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7c1a:	bd08      	pop	{r3, pc}

000b7c1c <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b7c1c:	b508      	push	{r3, lr}
   b7c1e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b7c20:	2111      	movs	r1, #17
   b7c22:	f7ff ff6e 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7c26:	bd08      	pop	{r3, pc}

000b7c28 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b7c28:	b508      	push	{r3, lr}
   b7c2a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b7c2c:	2114      	movs	r1, #20
   b7c2e:	f7ff ff68 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7c32:	bd08      	pop	{r3, pc}

000b7c34 <_ZN17currentStatusData12set_payload1Eh>:
void currentStatusData::set_payload1(uint8_t value) {
   b7c34:	b508      	push	{r3, lr}
   b7c36:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload1), value);
   b7c38:	211c      	movs	r1, #28
   b7c3a:	f7ff ff62 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}   
   b7c3e:	bd08      	pop	{r3, pc}

000b7c40 <_ZN17currentStatusData12set_payload2Eh>:
void currentStatusData::set_payload2(uint8_t value) {
   b7c40:	b508      	push	{r3, lr}
   b7c42:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload2), value);
   b7c44:	211d      	movs	r1, #29
   b7c46:	f7ff ff5c 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}   
   b7c4a:	bd08      	pop	{r3, pc}

000b7c4c <_ZN17currentStatusData12set_payload3Eh>:
void currentStatusData::set_payload3(uint8_t value) {
   b7c4c:	b508      	push	{r3, lr}
   b7c4e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload3), value);
   b7c50:	211e      	movs	r1, #30
   b7c52:	f7ff ff56 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7c56:	bd08      	pop	{r3, pc}

000b7c58 <_ZN17currentStatusData12set_payload4Eh>:
void currentStatusData::set_payload4(uint8_t value) {
   b7c58:	b508      	push	{r3, lr}
   b7c5a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload4), value);
   b7c5c:	211f      	movs	r1, #31
   b7c5e:	f7ff ff50 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}   
   b7c62:	bd08      	pop	{r3, pc}

000b7c64 <_ZN17currentStatusData12set_payload5Eh>:
void currentStatusData::set_payload5(uint8_t value) {
   b7c64:	b508      	push	{r3, lr}
   b7c66:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload5), value);
   b7c68:	2120      	movs	r1, #32
   b7c6a:	f7ff ff4a 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7c6e:	bd08      	pop	{r3, pc}

000b7c70 <_ZN17currentStatusData12set_payload6Eh>:
void currentStatusData::set_payload6(uint8_t value) {
   b7c70:	b508      	push	{r3, lr}
   b7c72:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload6), value);
   b7c74:	2121      	movs	r1, #33	; 0x21
   b7c76:	f7ff ff44 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7c7a:	bd08      	pop	{r3, pc}

000b7c7c <_ZN17currentStatusData12set_payload7Eh>:
void currentStatusData::set_payload7(uint8_t value) {
   b7c7c:	b508      	push	{r3, lr}
   b7c7e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload7), value);
   b7c80:	2122      	movs	r1, #34	; 0x22
   b7c82:	f7ff ff3e 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7c86:	bd08      	pop	{r3, pc}

000b7c88 <_ZN17currentStatusData12set_payload8Eh>:
void currentStatusData::set_payload8(uint8_t value) {
   b7c88:	b508      	push	{r3, lr}
   b7c8a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload8), value);
   b7c8c:	2123      	movs	r1, #35	; 0x23
   b7c8e:	f7ff ff38 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7c92:	bd08      	pop	{r3, pc}

000b7c94 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b7c94:	b508      	push	{r3, lr}
   b7c96:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b7c98:	2124      	movs	r1, #36	; 0x24
   b7c9a:	f7ff ff32 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7c9e:	bd08      	pop	{r3, pc}

000b7ca0 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b7ca0:	b508      	push	{r3, lr}
   b7ca2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b7ca4:	2126      	movs	r1, #38	; 0x26
   b7ca6:	f7ff ff2c 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7caa:	bd08      	pop	{r3, pc}

000b7cac <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b7cac:	b508      	push	{r3, lr}
   b7cae:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b7cb0:	2127      	movs	r1, #39	; 0x27
   b7cb2:	f7ff ff26 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7cb6:	bd08      	pop	{r3, pc}

000b7cb8 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b7cb8:	b508      	push	{r3, lr}
   b7cba:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b7cbc:	212c      	movs	r1, #44	; 0x2c
   b7cbe:	f7ff ff20 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7cc2:	bd08      	pop	{r3, pc}

000b7cc4 <_ZN17currentStatusData13set_openHoursEh>:
void currentStatusData::set_openHours(uint8_t value) {
   b7cc4:	b508      	push	{r3, lr}
   b7cc6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, openHours), value);
   b7cc8:	212d      	movs	r1, #45	; 0x2d
   b7cca:	f7ff ff1a 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7cce:	bd08      	pop	{r3, pc}

000b7cd0 <_ZN17currentStatusData11set_onBreakEh>:
void currentStatusData::set_onBreak(byte value) {
   b7cd0:	b508      	push	{r3, lr}
   b7cd2:	460a      	mov	r2, r1
    setValue<byte>(offsetof(CurrentData, onBreak), value);
   b7cd4:	212e      	movs	r1, #46	; 0x2e
   b7cd6:	f7ff ff14 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7cda:	bd08      	pop	{r3, pc}

000b7cdc <_ZN17currentStatusData8set_hopsEh>:
void currentStatusData::set_hops(uint8_t value) {
   b7cdc:	b508      	push	{r3, lr}
   b7cde:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, hops), value);
   b7ce0:	212f      	movs	r1, #47	; 0x2f
   b7ce2:	f7ff ff0e 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7ce6:	bd08      	pop	{r3, pc}

000b7ce8 <_ZN17currentStatusData14set_retryCountEh>:
void currentStatusData::set_retryCount(uint8_t value) {
   b7ce8:	b508      	push	{r3, lr}
   b7cea:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, retryCount), value);
   b7cec:	2130      	movs	r1, #48	; 0x30
   b7cee:	f7ff ff08 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7cf2:	bd08      	pop	{r3, pc}

000b7cf4 <_ZN17currentStatusData23set_retransmissionDelayEh>:
void currentStatusData::set_retransmissionDelay(uint8_t value) {
   b7cf4:	b508      	push	{r3, lr}
   b7cf6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, retransmissionDelay), value);
   b7cf8:	2131      	movs	r1, #49	; 0x31
   b7cfa:	f7ff ff02 	bl	b7b02 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b7cfe:	bd08      	pop	{r3, pc}

000b7d00 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b7d00:	b538      	push	{r3, r4, r5, lr}
   b7d02:	4604      	mov	r4, r0
   b7d04:	3004      	adds	r0, #4
   b7d06:	460d      	mov	r5, r1
   b7d08:	f7ff fc3a 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b7d0c:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b7d0e:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b7d10:	3b02      	subs	r3, #2
   b7d12:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b7d14:	bf26      	itte	cs
   b7d16:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b7d18:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b7d1a:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b7d1c:	f008 f85c 	bl	bfdd8 <os_mutex_recursive_unlock>
        }
   b7d20:	4628      	mov	r0, r5
   b7d22:	bd38      	pop	{r3, r4, r5, pc}

000b7d24 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b7d24:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b7d26:	2112      	movs	r1, #18
   b7d28:	f7ff ffea 	bl	b7d00 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b7d2c:	bd08      	pop	{r3, pc}

000b7d2e <_ZNK13sysStatusData16get_messageCountEv>:
uint16_t sysStatusData::get_messageCount() const {
   b7d2e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, messageCount));
   b7d30:	2116      	movs	r1, #22
   b7d32:	f7ff ffe5 	bl	b7d00 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b7d36:	bd08      	pop	{r3, pc}

000b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>:
uint16_t sysStatusData::get_frequencySeconds() const {
   b7d38:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencySeconds));
   b7d3a:	212a      	movs	r1, #42	; 0x2a
   b7d3c:	f7ff ffe0 	bl	b7d00 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b7d40:	bd08      	pop	{r3, pc}
	...

000b7d44 <_ZN13sysStatusData8validateEj>:
bool sysStatusData::validate(size_t dataSize) {
   b7d44:	b513      	push	{r0, r1, r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b7d46:	f001 fb37 	bl	b93b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b7d4a:	4604      	mov	r4, r0
   b7d4c:	b1a0      	cbz	r0, b7d78 <_ZN13sysStatusData8validateEj+0x34>
        if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b7d4e:	f7ff fcbb 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7d52:	f7ff fe59 	bl	b7a08 <_ZNK13sysStatusData12get_openTimeEv>
   b7d56:	280c      	cmp	r0, #12
   b7d58:	d917      	bls.n	b7d8a <_ZN13sysStatusData8validateEj+0x46>
            Log.info("data not valid openTime=%d and closeTime=%d", sysStatus.get_openTime(), sysStatus.get_closeTime());
   b7d5a:	f7ff fcb5 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7d5e:	f7ff fe53 	bl	b7a08 <_ZNK13sysStatusData12get_openTimeEv>
   b7d62:	9001      	str	r0, [sp, #4]
   b7d64:	f7ff fcb0 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7d68:	f7ff fe53 	bl	b7a12 <_ZNK13sysStatusData13get_closeTimeEv>
   b7d6c:	9a01      	ldr	r2, [sp, #4]
   b7d6e:	491b      	ldr	r1, [pc, #108]	; (b7ddc <_ZN13sysStatusData8validateEj+0x98>)
   b7d70:	4603      	mov	r3, r0
   b7d72:	481b      	ldr	r0, [pc, #108]	; (b7de0 <_ZN13sysStatusData8validateEj+0x9c>)
   b7d74:	f7fc f9aa 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b7d78:	4a1a      	ldr	r2, [pc, #104]	; (b7de4 <_ZN13sysStatusData8validateEj+0xa0>)
   b7d7a:	491b      	ldr	r1, [pc, #108]	; (b7de8 <_ZN13sysStatusData8validateEj+0xa4>)
   b7d7c:	4818      	ldr	r0, [pc, #96]	; (b7de0 <_ZN13sysStatusData8validateEj+0x9c>)
   b7d7e:	f7fc f9a5 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b7d82:	2400      	movs	r4, #0
}
   b7d84:	4620      	mov	r0, r4
   b7d86:	b002      	add	sp, #8
   b7d88:	bd10      	pop	{r4, pc}
        if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b7d8a:	f7ff fc9d 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7d8e:	f7ff fe40 	bl	b7a12 <_ZNK13sysStatusData13get_closeTimeEv>
   b7d92:	280b      	cmp	r0, #11
   b7d94:	d9e1      	bls.n	b7d5a <_ZN13sysStatusData8validateEj+0x16>
        else if (sysStatus.get_frequencySeconds() <=0 || sysStatus.get_frequencySeconds() > 60) {
   b7d96:	f7ff fc97 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7d9a:	f7ff ffcd 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b7d9e:	b190      	cbz	r0, b7dc6 <_ZN13sysStatusData8validateEj+0x82>
   b7da0:	f7ff fc92 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7da4:	f7ff ffc8 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b7da8:	283c      	cmp	r0, #60	; 0x3c
   b7daa:	d80c      	bhi.n	b7dc6 <_ZN13sysStatusData8validateEj+0x82>
        else if (sysStatus.get_nodeNumber() != 0) {
   b7dac:	f7ff fc8c 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7db0:	f7ff fe16 	bl	b79e0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b7db4:	2800      	cmp	r0, #0
   b7db6:	d0e5      	beq.n	b7d84 <_ZN13sysStatusData8validateEj+0x40>
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b7db8:	f7ff fc86 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7dbc:	f7ff fe10 	bl	b79e0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b7dc0:	490a      	ldr	r1, [pc, #40]	; (b7dec <_ZN13sysStatusData8validateEj+0xa8>)
   b7dc2:	4602      	mov	r2, r0
   b7dc4:	e005      	b.n	b7dd2 <_ZN13sysStatusData8validateEj+0x8e>
            Log.info("data not valid frequency minutes =%d", sysStatus.get_frequencySeconds());
   b7dc6:	f7ff fc7f 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7dca:	f7ff ffb5 	bl	b7d38 <_ZNK13sysStatusData20get_frequencySecondsEv>
   b7dce:	4908      	ldr	r1, [pc, #32]	; (b7df0 <_ZN13sysStatusData8validateEj+0xac>)
   b7dd0:	4602      	mov	r2, r0
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b7dd2:	4803      	ldr	r0, [pc, #12]	; (b7de0 <_ZN13sysStatusData8validateEj+0x9c>)
   b7dd4:	f7fc f97a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b7dd8:	e7ce      	b.n	b7d78 <_ZN13sysStatusData8validateEj+0x34>
   b7dda:	bf00      	nop
   b7ddc:	000c764d 	.word	0x000c764d
   b7de0:	2003e634 	.word	0x2003e634
   b7de4:	000c758c 	.word	0x000c758c
   b7de8:	000c76bd 	.word	0x000c76bd
   b7dec:	000c769e 	.word	0x000c769e
   b7df0:	000c7679 	.word	0x000c7679

000b7df4 <_ZNK13sysStatusData27get_updatedfrequencySecondsEv>:
uint16_t sysStatusData::get_updatedfrequencySeconds() const {
   b7df4:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,updatedfrequencySeconds));
   b7df6:	212c      	movs	r1, #44	; 0x2c
   b7df8:	f7ff ff82 	bl	b7d00 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b7dfc:	bd08      	pop	{r3, pc}

000b7dfe <_ZNK17currentStatusData9get_tokenEv>:
uint16_t currentStatusData::get_token() const {
   b7dfe:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, token));
   b7e00:	2112      	movs	r1, #18
   b7e02:	f7ff ff7d 	bl	b7d00 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b7e06:	bd08      	pop	{r3, pc}

000b7e08 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b7e08:	b570      	push	{r4, r5, r6, lr}
   b7e0a:	4604      	mov	r4, r0
   b7e0c:	3004      	adds	r0, #4
   b7e0e:	460d      	mov	r5, r1
   b7e10:	4616      	mov	r6, r2
   b7e12:	f7ff fbb5 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b7e16:	68e3      	ldr	r3, [r4, #12]
   b7e18:	3b02      	subs	r3, #2
   b7e1a:	42ab      	cmp	r3, r5
   b7e1c:	d307      	bcc.n	b7e2e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b7e1e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b7e20:	5b5a      	ldrh	r2, [r3, r5]
   b7e22:	42b2      	cmp	r2, r6
   b7e24:	d003      	beq.n	b7e2e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b7e26:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b7e28:	4620      	mov	r0, r4
   b7e2a:	f001 fa89 	bl	b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b7e2e:	6860      	ldr	r0, [r4, #4]
        }
   b7e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b7e34:	f007 bfd0 	b.w	bfdd8 <os_mutex_recursive_unlock>

000b7e38 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b7e38:	b508      	push	{r3, lr}
   b7e3a:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b7e3c:	2112      	movs	r1, #18
   b7e3e:	f7ff ffe3 	bl	b7e08 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b7e42:	bd08      	pop	{r3, pc}

000b7e44 <_ZN13sysStatusData16set_messageCountEt>:
void sysStatusData::set_messageCount(uint16_t value) {
   b7e44:	b508      	push	{r3, lr}
   b7e46:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, messageCount), value);
   b7e48:	2116      	movs	r1, #22
   b7e4a:	f7ff ffdd 	bl	b7e08 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b7e4e:	bd08      	pop	{r3, pc}

000b7e50 <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b7e50:	b508      	push	{r3, lr}
   b7e52:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b7e54:	2128      	movs	r1, #40	; 0x28
   b7e56:	f7ff ffd7 	bl	b7e08 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b7e5a:	bd08      	pop	{r3, pc}

000b7e5c <_ZN13sysStatusData20set_frequencySecondsEt>:
void sysStatusData::set_frequencySeconds(uint16_t value) {
   b7e5c:	b508      	push	{r3, lr}
   b7e5e:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencySeconds), value);
   b7e60:	212a      	movs	r1, #42	; 0x2a
   b7e62:	f7ff ffd1 	bl	b7e08 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b7e66:	bd08      	pop	{r3, pc}

000b7e68 <_ZN13sysStatusData27set_updatedfrequencySecondsEt>:
void sysStatusData::set_updatedfrequencySeconds(uint16_t value) {
   b7e68:	b508      	push	{r3, lr}
   b7e6a:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, updatedfrequencySeconds), value);
   b7e6c:	212c      	movs	r1, #44	; 0x2c
   b7e6e:	f7ff ffcb 	bl	b7e08 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b7e72:	bd08      	pop	{r3, pc}

000b7e74 <_ZN17currentStatusData9set_tokenEt>:
void currentStatusData::set_token(uint16_t value) {
   b7e74:	b508      	push	{r3, lr}
   b7e76:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, token), value);
   b7e78:	2112      	movs	r1, #18
   b7e7a:	f7ff ffc5 	bl	b7e08 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b7e7e:	bd08      	pop	{r3, pc}

000b7e80 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b7e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e82:	4604      	mov	r4, r0
   b7e84:	3004      	adds	r0, #4
   b7e86:	460d      	mov	r5, r1
   b7e88:	f7ff fb7a 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b7e8c:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b7e8e:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b7e90:	3b08      	subs	r3, #8
   b7e92:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b7e94:	bf23      	ittte	cs
   b7e96:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b7e98:	1949      	addcs	r1, r1, r5
   b7e9a:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b7e9e:	2600      	movcc	r6, #0
   b7ea0:	bf38      	it	cc
   b7ea2:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b7ea4:	f007 ff98 	bl	bfdd8 <os_mutex_recursive_unlock>
        }
   b7ea8:	4630      	mov	r0, r6
   b7eaa:	4639      	mov	r1, r7
   b7eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7eae <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b7eae:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b7eb0:	2120      	movs	r1, #32
   b7eb2:	f7ff ffe5 	bl	b7e80 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b7eb6:	bd08      	pop	{r3, pc}

000b7eb8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b7eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7eba:	4604      	mov	r4, r0
   b7ebc:	3004      	adds	r0, #4
   b7ebe:	460d      	mov	r5, r1
   b7ec0:	461e      	mov	r6, r3
   b7ec2:	4617      	mov	r7, r2
   b7ec4:	f7ff fb5c 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b7ec8:	68e3      	ldr	r3, [r4, #12]
   b7eca:	3b08      	subs	r3, #8
   b7ecc:	42ab      	cmp	r3, r5
   b7ece:	d30c      	bcc.n	b7eea <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b7ed0:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b7ed2:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b7ed4:	5958      	ldr	r0, [r3, r5]
   b7ed6:	6851      	ldr	r1, [r2, #4]
   b7ed8:	42b1      	cmp	r1, r6
   b7eda:	bf08      	it	eq
   b7edc:	42b8      	cmpeq	r0, r7
   b7ede:	d004      	beq.n	b7eea <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                        *(T *)p = value;
   b7ee0:	515f      	str	r7, [r3, r5]
                        updateHash();
   b7ee2:	4620      	mov	r0, r4
                        *(T *)p = value;
   b7ee4:	6056      	str	r6, [r2, #4]
                        updateHash();
   b7ee6:	f001 fa2b 	bl	b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b7eea:	6860      	ldr	r0, [r4, #4]
        }
   b7eec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b7ef0:	f007 bf72 	b.w	bfdd8 <os_mutex_recursive_unlock>

000b7ef4 <_ZN13sysStatusData20set_lastHookResponseEx>:
void sysStatusData::set_lastHookResponse(time_t value) {
   b7ef4:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastHookResponse), value);
   b7ef6:	2118      	movs	r1, #24
   b7ef8:	f7ff ffde 	bl	b7eb8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b7efc:	bd08      	pop	{r3, pc}

000b7efe <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b7efe:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b7f00:	2120      	movs	r1, #32
   b7f02:	f7ff ffd9 	bl	b7eb8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b7f06:	bd08      	pop	{r3, pc}

000b7f08 <_ZN13sysStatusData25set_alertTimestampGatewayEx>:
void sysStatusData::set_alertTimestampGateway(time_t value) {
   b7f08:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampGateway), value);
   b7f0a:	2130      	movs	r1, #48	; 0x30
   b7f0c:	f7ff ffd4 	bl	b7eb8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b7f10:	bd08      	pop	{r3, pc}
	...

000b7f14 <_ZN13sysStatusData10initializeEv>:
void sysStatusData::initialize() {
   b7f14:	b510      	push	{r4, lr}
   b7f16:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b7f18:	f001 fab4 	bl	b9484 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("data initialized");
   b7f1c:	4930      	ldr	r1, [pc, #192]	; (b7fe0 <_ZN13sysStatusData10initializeEv+0xcc>)
   b7f1e:	4831      	ldr	r0, [pc, #196]	; (b7fe4 <_ZN13sysStatusData10initializeEv+0xd0>)
   b7f20:	f7fc f8d4 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_nodeNumber(0);                     // Default for a Gateway
   b7f24:	f7ff fbd0 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f28:	2100      	movs	r1, #0
   b7f2a:	f7ff fe02 	bl	b7b32 <_ZN13sysStatusData14set_nodeNumberEh>
    sysStatus.set_structuresVersion(1);
   b7f2e:	f7ff fbcb 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f32:	2101      	movs	r1, #1
   b7f34:	f7ff fe03 	bl	b7b3e <_ZN13sysStatusData21set_structuresVersionEh>
    sysStatus.set_magicNumber(27617);
   b7f38:	f7ff fbc6 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f3c:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b7f40:	f7ff ff7a 	bl	b7e38 <_ZN13sysStatusData15set_magicNumberEt>
    sysStatus.set_connectivityMode(0);
   b7f44:	f7ff fbc0 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f48:	2100      	movs	r1, #0
   b7f4a:	f7ff fdfe 	bl	b7b4a <_ZN13sysStatusData20set_connectivityModeEh>
    sysStatus.set_resetCount(0);
   b7f4e:	f7ff fbbb 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f52:	2100      	movs	r1, #0
   b7f54:	f7ff fdff 	bl	b7b56 <_ZN13sysStatusData14set_resetCountEh>
    sysStatus.set_messageCount(0);
   b7f58:	f7ff fbb6 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f5c:	2100      	movs	r1, #0
   b7f5e:	f7ff ff71 	bl	b7e44 <_ZN13sysStatusData16set_messageCountEt>
    sysStatus.set_lastHookResponse(0);
   b7f62:	f7ff fbb1 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f66:	2200      	movs	r2, #0
   b7f68:	2300      	movs	r3, #0
   b7f6a:	f7ff ffc3 	bl	b7ef4 <_ZN13sysStatusData20set_lastHookResponseEx>
    sysStatus.set_frequencySeconds(60);
   b7f6e:	f7ff fbab 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f72:	213c      	movs	r1, #60	; 0x3c
   b7f74:	f7ff ff72 	bl	b7e5c <_ZN13sysStatusData20set_frequencySecondsEt>
    sysStatus.set_updatedfrequencySeconds(0);
   b7f78:	f7ff fba6 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f7c:	2100      	movs	r1, #0
   b7f7e:	f7ff ff73 	bl	b7e68 <_ZN13sysStatusData27set_updatedfrequencySecondsEt>
    sysStatus.set_alertCodeGateway(0);
   b7f82:	f7ff fba1 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f86:	2100      	movs	r1, #0
   b7f88:	f7ff fdeb 	bl	b7b62 <_ZN13sysStatusData20set_alertCodeGatewayEh>
    sysStatus.set_alertTimestampGateway(0);
   b7f8c:	f7ff fb9c 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f90:	2200      	movs	r2, #0
   b7f92:	2300      	movs	r3, #0
   b7f94:	f7ff ffb8 	bl	b7f08 <_ZN13sysStatusData25set_alertTimestampGatewayEx>
    sysStatus.set_openTime(6);
   b7f98:	f7ff fb96 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7f9c:	2106      	movs	r1, #6
   b7f9e:	f7ff fde6 	bl	b7b6e <_ZN13sysStatusData12set_openTimeEh>
    sysStatus.set_closeTime(22);
   b7fa2:	f7ff fb91 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7fa6:	2116      	movs	r1, #22
   b7fa8:	f7ff fde7 	bl	b7b7a <_ZN13sysStatusData13set_closeTimeEh>
    sysStatus.set_breakTime(14);            // set to 2pm by default
   b7fac:	f7ff fb8c 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7fb0:	210e      	movs	r1, #14
   b7fb2:	f7ff fde8 	bl	b7b86 <_ZN13sysStatusData13set_breakTimeEh>
    sysStatus.set_breakLengthMinutes(30);   // set to 30 minutes by default
   b7fb6:	f7ff fb87 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7fba:	211e      	movs	r1, #30
   b7fbc:	f7ff fde9 	bl	b7b92 <_ZN13sysStatusData22set_breakLengthMinutesEh>
    sysStatus.set_weekendBreakTime(13);            // set to 1pm by default
   b7fc0:	f7ff fb82 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7fc4:	210d      	movs	r1, #13
   b7fc6:	f7ff fdea 	bl	b7b9e <_ZN13sysStatusData20set_weekendBreakTimeEh>
    sysStatus.set_weekendBreakLengthMinutes(30);   // set to 30 minutes by default
   b7fca:	f7ff fb7d 	bl	b76c8 <_ZN13sysStatusData8instanceEv>
   b7fce:	211e      	movs	r1, #30
   b7fd0:	f7ff fdeb 	bl	b7baa <_ZN13sysStatusData29set_weekendBreakLengthMinutesEh>
    updateHash();
   b7fd4:	4620      	mov	r0, r4
}
   b7fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b7fda:	f001 b9b1 	b.w	b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b7fde:	bf00      	nop
   b7fe0:	000c76d2 	.word	0x000c76d2
   b7fe4:	2003e634 	.word	0x2003e634

000b7fe8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>:
        T getValue(size_t offset) const {
   b7fe8:	b538      	push	{r3, r4, r5, lr}
   b7fea:	4604      	mov	r4, r0
   b7fec:	3004      	adds	r0, #4
   b7fee:	460d      	mov	r5, r1
   b7ff0:	f7ff fac6 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b7ff4:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b7ff6:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b7ff8:	3b02      	subs	r3, #2
   b7ffa:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b7ffc:	bf26      	itte	cs
   b7ffe:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b8000:	5f5d      	ldrshcs	r5, [r3, r5]
            T result = 0;
   b8002:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b8004:	f007 fee8 	bl	bfdd8 <os_mutex_recursive_unlock>
        }
   b8008:	4628      	mov	r0, r5
   b800a:	bd38      	pop	{r3, r4, r5, pc}

000b800c <_ZNK17currentStatusData8get_RSSIEv>:
int16_t currentStatusData::get_RSSI() const {
   b800c:	b508      	push	{r3, lr}
    return getValue<int16_t>(offsetof(CurrentData, RSSI));
   b800e:	2128      	movs	r1, #40	; 0x28
   b8010:	f7ff ffea 	bl	b7fe8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>
}
   b8014:	bd08      	pop	{r3, pc}

000b8016 <_ZNK17currentStatusData7get_SNREv>:
int16_t currentStatusData::get_SNR() const {
   b8016:	b508      	push	{r3, lr}
    return getValue<int16_t>(offsetof(CurrentData, SNR));
   b8018:	212a      	movs	r1, #42	; 0x2a
   b801a:	f7ff ffe5 	bl	b7fe8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>
}
   b801e:	bd08      	pop	{r3, pc}

000b8020 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>:
        void setValue(size_t offset, T value)  {
   b8020:	b570      	push	{r4, r5, r6, lr}
   b8022:	4604      	mov	r4, r0
   b8024:	3004      	adds	r0, #4
   b8026:	460d      	mov	r5, r1
   b8028:	4616      	mov	r6, r2
   b802a:	f7ff faa9 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b802e:	68e3      	ldr	r3, [r4, #12]
   b8030:	3b02      	subs	r3, #2
   b8032:	42ab      	cmp	r3, r5
   b8034:	d307      	bcc.n	b8046 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b8036:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b8038:	5f5a      	ldrsh	r2, [r3, r5]
   b803a:	42b2      	cmp	r2, r6
   b803c:	d003      	beq.n	b8046 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                        *(T *)p = value;
   b803e:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b8040:	4620      	mov	r0, r4
   b8042:	f001 f97d 	bl	b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b8046:	6860      	ldr	r0, [r4, #4]
        }
   b8048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b804c:	f007 bec4 	b.w	bfdd8 <os_mutex_recursive_unlock>

000b8050 <_ZN17currentStatusData8set_RSSIEs>:
void currentStatusData::set_RSSI(int16_t value) {
   b8050:	b508      	push	{r3, lr}
   b8052:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, RSSI), value);
   b8054:	2128      	movs	r1, #40	; 0x28
   b8056:	f7ff ffe3 	bl	b8020 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b805a:	bd08      	pop	{r3, pc}

000b805c <_ZN17currentStatusData7set_SNREs>:
void currentStatusData::set_SNR(int16_t value) {
   b805c:	b508      	push	{r3, lr}
   b805e:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, SNR), value);
   b8060:	212a      	movs	r1, #42	; 0x2a
   b8062:	f7ff ffdd 	bl	b8020 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b8066:	bd08      	pop	{r3, pc}

000b8068 <_GLOBAL__sub_I_fram>:
   b8068:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);
   b806a:	f00b fb6d 	bl	c3748 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b806e:	4c05      	ldr	r4, [pc, #20]	; (b8084 <_GLOBAL__sub_I_fram+0x1c>)
   b8070:	4601      	mov	r1, r0
   b8072:	2300      	movs	r3, #0
   b8074:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b8078:	4620      	mov	r0, r4
   b807a:	f000 ff8d 	bl	b8f98 <_ZN6MB85RCC1ER7TwoWireji>
   b807e:	4b02      	ldr	r3, [pc, #8]	; (b8088 <_GLOBAL__sub_I_fram+0x20>)
   b8080:	6023      	str	r3, [r4, #0]
   b8082:	bd10      	pop	{r4, pc}
   b8084:	2003b42c 	.word	0x2003b42c
   b8088:	000c76ec 	.word	0x000c76ec

000b808c <_ZN11BlockCipherC1Ev>:
 */

/**
 * \brief Constructs a block cipher.
 */
BlockCipher::BlockCipher()
   b808c:	4b01      	ldr	r3, [pc, #4]	; (b8094 <_ZN11BlockCipherC1Ev+0x8>)
   b808e:	6003      	str	r3, [r0, #0]
{
}
   b8090:	4770      	bx	lr
   b8092:	bf00      	nop
   b8094:	000c778c 	.word	0x000c778c

000b8098 <_ZN11BlockCipherD1Ev>:
 *
 * \sa clear()
 */
BlockCipher::~BlockCipher()
{
}
   b8098:	4770      	bx	lr

000b809a <_Z5cleanPvj>:
void clean(void *dest, size_t size)
{
    // Force the use of volatile so that we actually clear the memory.
    // Otherwise the compiler might optimise the entire contents of this
    // function away, which will not be secure.
    volatile uint8_t *d = (volatile uint8_t *)dest;
   b809a:	4401      	add	r1, r0
    while (size > 0) {
        *d++ = 0;
   b809c:	2300      	movs	r3, #0
    while (size > 0) {
   b809e:	4288      	cmp	r0, r1
   b80a0:	d002      	beq.n	b80a8 <_Z5cleanPvj+0xe>
        *d++ = 0;
   b80a2:	f800 3b01 	strb.w	r3, [r0], #1
    while (size > 0) {
   b80a6:	e7fa      	b.n	b809e <_Z5cleanPvj+0x4>
        --size;
    }
}
   b80a8:	4770      	bx	lr

000b80aa <_ZNK5Speck9blockSizeEv>:
}

size_t Speck::blockSize() const
{
    return 16;
}
   b80aa:	2010      	movs	r0, #16
   b80ac:	4770      	bx	lr

000b80ae <_ZNK5Speck7keySizeEv>:

size_t Speck::keySize() const
{
    // Also supports 128-bit and 192-bit, but we only report 256-bit.
    return 32;
}
   b80ae:	2020      	movs	r0, #32
   b80b0:	4770      	bx	lr
	...

000b80b4 <_ZN5SpeckD1Ev>:
Speck::~Speck()
   b80b4:	b510      	push	{r4, lr}
   b80b6:	4b06      	ldr	r3, [pc, #24]	; (b80d0 <_ZN5SpeckD1Ev+0x1c>)
   b80b8:	4604      	mov	r4, r0
void clean(void *dest, size_t size);

template <typename T>
inline void clean(T &var)
{
    clean(&var, sizeof(T));
   b80ba:	f44f 7188 	mov.w	r1, #272	; 0x110
   b80be:	f840 3b08 	str.w	r3, [r0], #8
   b80c2:	f7ff ffea 	bl	b809a <_Z5cleanPvj>
   b80c6:	4620      	mov	r0, r4
   b80c8:	f7ff ffe6 	bl	b8098 <_ZN11BlockCipherD1Ev>
}
   b80cc:	4620      	mov	r0, r4
   b80ce:	bd10      	pop	{r4, pc}
   b80d0:	000c77b4 	.word	0x000c77b4

000b80d4 <_ZN5SpeckD0Ev>:
Speck::~Speck()
   b80d4:	b510      	push	{r4, lr}
   b80d6:	4604      	mov	r4, r0
}
   b80d8:	f7ff ffec 	bl	b80b4 <_ZN5SpeckD1Ev>
   b80dc:	4620      	mov	r0, r4
   b80de:	f44f 7190 	mov.w	r1, #288	; 0x120
   b80e2:	f7fb ffdc 	bl	b409e <_ZdlPvj>
   b80e6:	4620      	mov	r0, r4
   b80e8:	bd10      	pop	{r4, pc}

000b80ea <_ZN5Speck12encryptBlockEPhPKh>:
    return true;
#endif
}

void Speck::encryptBlock(uint8_t *output, const uint8_t *input)
{
   b80ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   b80ec:	4684      	mov	ip, r0
   b80ee:	b087      	sub	sp, #28
   b80f0:	460d      	mov	r5, r1
        : "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
          "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", "memory"
    );
#else
    uint64_t x, y;
    const uint64_t *s = k;
   b80f2:	f100 0708 	add.w	r7, r0, #8
    unpack64(x, input);
   b80f6:	6851      	ldr	r1, [r2, #4]
   b80f8:	6810      	ldr	r0, [r2, #0]
   b80fa:	466b      	mov	r3, sp
   b80fc:	c303      	stmia	r3!, {r0, r1}
   b80fe:	ba0e      	rev	r6, r1
   b8100:	ba03      	rev	r3, r0
    unpack64(y, input + 8);
   b8102:	68d1      	ldr	r1, [r2, #12]
   b8104:	6890      	ldr	r0, [r2, #8]
   b8106:	ac02      	add	r4, sp, #8
   b8108:	c403      	stmia	r4!, {r0, r1}
   b810a:	ba0c      	rev	r4, r1
   b810c:	ba01      	rev	r1, r0
    unpack64(x, input);
   b810e:	e9cd 6300 	strd	r6, r3, [sp]
    unpack64(y, input + 8);
   b8112:	e9cd 4102 	strd	r4, r1, [sp, #8]
    for (uint8_t round = rounds; round > 0; --round, ++s) {
   b8116:	f89c 0118 	ldrb.w	r0, [ip, #280]	; 0x118
   b811a:	2200      	movs	r2, #0
   b811c:	b1e8      	cbz	r0, b815a <_ZN5Speck12encryptBlockEPhPKh+0x70>
        x = (rightRotate8_64(x) + y) ^ s[0];
   b811e:	0a32      	lsrs	r2, r6, #8
   b8120:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   b8124:	0a1b      	lsrs	r3, r3, #8
   b8126:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b812a:	683e      	ldr	r6, [r7, #0]
   b812c:	1912      	adds	r2, r2, r4
   b812e:	ea86 0602 	eor.w	r6, r6, r2
   b8132:	687a      	ldr	r2, [r7, #4]
   b8134:	eb41 0303 	adc.w	r3, r1, r3
   b8138:	4053      	eors	r3, r2
        y = leftRotate3_64(y) ^ x;
   b813a:	00ca      	lsls	r2, r1, #3
   b813c:	ea42 7254 	orr.w	r2, r2, r4, lsr #29
   b8140:	00e4      	lsls	r4, r4, #3
   b8142:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
    for (uint8_t round = rounds; round > 0; --round, ++s) {
   b8146:	f100 3cff 	add.w	ip, r0, #4294967295
        y = leftRotate3_64(y) ^ x;
   b814a:	ea82 0103 	eor.w	r1, r2, r3
   b814e:	4074      	eors	r4, r6
    for (uint8_t round = rounds; round > 0; --round, ++s) {
   b8150:	fa5f f08c 	uxtb.w	r0, ip
   b8154:	3708      	adds	r7, #8
   b8156:	2201      	movs	r2, #1
   b8158:	e7e0      	b.n	b811c <_ZN5Speck12encryptBlockEPhPKh+0x32>
   b815a:	b11a      	cbz	r2, b8164 <_ZN5Speck12encryptBlockEPhPKh+0x7a>
   b815c:	e9cd 6300 	strd	r6, r3, [sp]
   b8160:	e9cd 4102 	strd	r4, r1, [sp, #8]
    }
    pack64(output, x);
   b8164:	9b00      	ldr	r3, [sp, #0]
   b8166:	9a01      	ldr	r2, [sp, #4]
   b8168:	ba1b      	rev	r3, r3
   b816a:	ba12      	rev	r2, r2
   b816c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b8170:	ab04      	add	r3, sp, #16
   b8172:	cb03      	ldmia	r3!, {r0, r1}
   b8174:	9a03      	ldr	r2, [sp, #12]
   b8176:	9b02      	ldr	r3, [sp, #8]
   b8178:	6028      	str	r0, [r5, #0]
   b817a:	ba1b      	rev	r3, r3
   b817c:	ba12      	rev	r2, r2
    pack64(output + 8, y);
   b817e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b8182:	ab04      	add	r3, sp, #16
    pack64(output, x);
   b8184:	6069      	str	r1, [r5, #4]
    pack64(output + 8, y);
   b8186:	cb03      	ldmia	r3!, {r0, r1}
   b8188:	60a8      	str	r0, [r5, #8]
   b818a:	60e9      	str	r1, [r5, #12]
#endif
}
   b818c:	b007      	add	sp, #28
   b818e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8190 <_ZN5Speck12decryptBlockEPhPKh>:

void Speck::decryptBlock(uint8_t *output, const uint8_t *input)
{
   b8190:	b5f0      	push	{r4, r5, r6, r7, lr}
        : "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
          "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", "memory"
    );
#else
    uint64_t x, y;
    const uint64_t *s = k + rounds - 1;
   b8192:	f890 6118 	ldrb.w	r6, [r0, #280]	; 0x118
{
   b8196:	b087      	sub	sp, #28
   b8198:	460c      	mov	r4, r1
    const uint64_t *s = k + rounds - 1;
   b819a:	eb00 05c6 	add.w	r5, r0, r6, lsl #3
    unpack64(x, input);
   b819e:	6851      	ldr	r1, [r2, #4]
   b81a0:	6810      	ldr	r0, [r2, #0]
   b81a2:	466b      	mov	r3, sp
   b81a4:	c303      	stmia	r3!, {r0, r1}
   b81a6:	fa91 fc81 	rev.w	ip, r1
   b81aa:	ba07      	rev	r7, r0
    unpack64(y, input + 8);
   b81ac:	68d1      	ldr	r1, [r2, #12]
   b81ae:	6890      	ldr	r0, [r2, #8]
   b81b0:	c303      	stmia	r3!, {r0, r1}
   b81b2:	9b02      	ldr	r3, [sp, #8]
   b81b4:	ba08      	rev	r0, r1
   b81b6:	ba1b      	rev	r3, r3
    unpack64(x, input);
   b81b8:	e9cd c700 	strd	ip, r7, [sp]
    unpack64(y, input + 8);
   b81bc:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b81c0:	2200      	movs	r2, #0
    for (uint8_t round = rounds; round > 0; --round, --s) {
   b81c2:	b1e6      	cbz	r6, b81fe <_ZN5Speck12decryptBlockEPhPKh+0x6e>
        y = rightRotate3_64(x ^ y);
   b81c4:	ea8c 0200 	eor.w	r2, ip, r0
   b81c8:	407b      	eors	r3, r7
   b81ca:	08d0      	lsrs	r0, r2, #3
   b81cc:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
   b81d0:	08db      	lsrs	r3, r3, #3
   b81d2:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
        x = leftRotate8_64((x ^ s[0]) - y);
   b81d6:	e9d5 2100 	ldrd	r2, r1, [r5]
   b81da:	ea8c 0202 	eor.w	r2, ip, r2
   b81de:	1a12      	subs	r2, r2, r0
   b81e0:	ea81 0107 	eor.w	r1, r1, r7
   b81e4:	eb61 0103 	sbc.w	r1, r1, r3
   b81e8:	020f      	lsls	r7, r1, #8
   b81ea:	ea47 6712 	orr.w	r7, r7, r2, lsr #24
    for (uint8_t round = rounds; round > 0; --round, --s) {
   b81ee:	3e01      	subs	r6, #1
        x = leftRotate8_64((x ^ s[0]) - y);
   b81f0:	0212      	lsls	r2, r2, #8
   b81f2:	ea42 6c11 	orr.w	ip, r2, r1, lsr #24
    for (uint8_t round = rounds; round > 0; --round, --s) {
   b81f6:	b2f6      	uxtb	r6, r6
   b81f8:	3d08      	subs	r5, #8
   b81fa:	2201      	movs	r2, #1
   b81fc:	e7e1      	b.n	b81c2 <_ZN5Speck12decryptBlockEPhPKh+0x32>
   b81fe:	b11a      	cbz	r2, b8208 <_ZN5Speck12decryptBlockEPhPKh+0x78>
   b8200:	e9cd c700 	strd	ip, r7, [sp]
   b8204:	e9cd 0302 	strd	r0, r3, [sp, #8]
    }
    pack64(output, x);
   b8208:	9b00      	ldr	r3, [sp, #0]
   b820a:	9a01      	ldr	r2, [sp, #4]
   b820c:	ba1b      	rev	r3, r3
   b820e:	ba12      	rev	r2, r2
   b8210:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b8214:	ab04      	add	r3, sp, #16
   b8216:	cb03      	ldmia	r3!, {r0, r1}
   b8218:	9a03      	ldr	r2, [sp, #12]
   b821a:	9b02      	ldr	r3, [sp, #8]
   b821c:	6020      	str	r0, [r4, #0]
   b821e:	ba1b      	rev	r3, r3
   b8220:	ba12      	rev	r2, r2
    pack64(output + 8, y);
   b8222:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b8226:	ab04      	add	r3, sp, #16
    pack64(output, x);
   b8228:	6061      	str	r1, [r4, #4]
    pack64(output + 8, y);
   b822a:	cb03      	ldmia	r3!, {r0, r1}
   b822c:	60a0      	str	r0, [r4, #8]
   b822e:	60e1      	str	r1, [r4, #12]
#endif
}
   b8230:	b007      	add	sp, #28
   b8232:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8234 <_ZN5Speck6setKeyEPKhj>:
{
   b8234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len == 32) {
   b8238:	2a20      	cmp	r2, #32
{
   b823a:	b088      	sub	sp, #32
   b823c:	4603      	mov	r3, r0
   b823e:	460c      	mov	r4, r1
    if (len == 32) {
   b8240:	d164      	bne.n	b830c <_ZN5Speck6setKeyEPKhj+0xd8>
        unpack64(l[2], key);
   b8242:	6808      	ldr	r0, [r1, #0]
   b8244:	6849      	ldr	r1, [r1, #4]
   b8246:	aa04      	add	r2, sp, #16
   b8248:	c203      	stmia	r2!, {r0, r1}
   b824a:	ba02      	rev	r2, r0
   b824c:	ba09      	rev	r1, r1
        unpack64(l[1], key + 8);
   b824e:	68a0      	ldr	r0, [r4, #8]
        unpack64(l[2], key);
   b8250:	e9cd 1204 	strd	r1, r2, [sp, #16]
        unpack64(l[1], key + 8);
   b8254:	68e1      	ldr	r1, [r4, #12]
   b8256:	aa02      	add	r2, sp, #8
   b8258:	c203      	stmia	r2!, {r0, r1}
   b825a:	ba02      	rev	r2, r0
   b825c:	ba09      	rev	r1, r1
        unpack64(l[0], key + 16);
   b825e:	6920      	ldr	r0, [r4, #16]
        unpack64(l[1], key + 8);
   b8260:	e9cd 1202 	strd	r1, r2, [sp, #8]
        unpack64(l[0], key + 16);
   b8264:	6961      	ldr	r1, [r4, #20]
   b8266:	466a      	mov	r2, sp
   b8268:	c203      	stmia	r2!, {r0, r1}
   b826a:	ba02      	rev	r2, r0
   b826c:	ba09      	rev	r1, r1
   b826e:	e9cd 1200 	strd	r1, r2, [sp]
        unpack64(k[0], key + 24);
   b8272:	69a2      	ldr	r2, [r4, #24]
   b8274:	609a      	str	r2, [r3, #8]
   b8276:	69e2      	ldr	r2, [r4, #28]
   b8278:	60da      	str	r2, [r3, #12]
   b827a:	68d9      	ldr	r1, [r3, #12]
   b827c:	689a      	ldr	r2, [r3, #8]
   b827e:	ba09      	rev	r1, r1
   b8280:	ba12      	rev	r2, r2
   b8282:	e9c3 1202 	strd	r1, r2, [r3, #8]
        m = 4;
   b8286:	2604      	movs	r6, #4
    rounds = 30 + m;
   b8288:	f106 0e1e 	add.w	lr, r6, #30
    uint8_t li_out = m - 1;
   b828c:	1e72      	subs	r2, r6, #1
   b828e:	2700      	movs	r7, #0
    rounds = 30 + m;
   b8290:	f883 e118 	strb.w	lr, [r3, #280]	; 0x118
    uint8_t li_out = m - 1;
   b8294:	b2d2      	uxtb	r2, r2
    uint8_t li_in = 0;
   b8296:	463d      	mov	r5, r7
    for (uint8_t i = 0; i < (rounds - 1); ++i) {
   b8298:	f106 0e1d 	add.w	lr, r6, #29
   b829c:	fa5f f887 	uxtb.w	r8, r7
   b82a0:	45f0      	cmp	r8, lr
   b82a2:	da67      	bge.n	b8374 <_ZN5Speck6setKeyEPKhj+0x140>
        l[li_out] = (k[i] + rightRotate8_64(l[li_in])) ^ i;
   b82a4:	a808      	add	r0, sp, #32
   b82a6:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   b82aa:	e950 a408 	ldrd	sl, r4, [r0, #-32]
   b82ae:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   b82b2:	e9dc 1902 	ldrd	r1, r9, [ip, #8]
   b82b6:	ea4f 201a 	mov.w	r0, sl, lsr #8
   b82ba:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
   b82be:	1840      	adds	r0, r0, r1
   b82c0:	ea4f 2414 	mov.w	r4, r4, lsr #8
   b82c4:	ea80 0008 	eor.w	r0, r0, r8
   b82c8:	ea44 640a 	orr.w	r4, r4, sl, lsl #24
   b82cc:	f10d 0820 	add.w	r8, sp, #32
   b82d0:	eb49 0404 	adc.w	r4, r9, r4
   b82d4:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
   b82d8:	e948 0408 	strd	r0, r4, [r8, #-32]
        k[i + 1] = leftRotate3_64(k[i]) ^ l[li_out];
   b82dc:	ea4f 08c9 	mov.w	r8, r9, lsl #3
   b82e0:	ea48 7851 	orr.w	r8, r8, r1, lsr #29
   b82e4:	00c9      	lsls	r1, r1, #3
   b82e6:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
        if ((++li_in) >= m)
   b82ea:	3501      	adds	r5, #1
        if ((++li_out) >= m)
   b82ec:	3201      	adds	r2, #1
        k[i + 1] = leftRotate3_64(k[i]) ^ l[li_out];
   b82ee:	4041      	eors	r1, r0
   b82f0:	ea88 0404 	eor.w	r4, r8, r4
        if ((++li_in) >= m)
   b82f4:	b2ed      	uxtb	r5, r5
        if ((++li_out) >= m)
   b82f6:	b2d2      	uxtb	r2, r2
        k[i + 1] = leftRotate3_64(k[i]) ^ l[li_out];
   b82f8:	e9cc 1404 	strd	r1, r4, [ip, #16]
            li_in = 0;
   b82fc:	42ae      	cmp	r6, r5
   b82fe:	bf98      	it	ls
   b8300:	2500      	movls	r5, #0
            li_out = 0;
   b8302:	4296      	cmp	r6, r2
   b8304:	bf98      	it	ls
   b8306:	2200      	movls	r2, #0
    for (uint8_t i = 0; i < (rounds - 1); ++i) {
   b8308:	3701      	adds	r7, #1
   b830a:	e7c7      	b.n	b829c <_ZN5Speck6setKeyEPKhj+0x68>
    } else if (len == 24) {
   b830c:	2a18      	cmp	r2, #24
   b830e:	d11b      	bne.n	b8348 <_ZN5Speck6setKeyEPKhj+0x114>
        unpack64(l[1], key);
   b8310:	6808      	ldr	r0, [r1, #0]
   b8312:	6849      	ldr	r1, [r1, #4]
   b8314:	aa02      	add	r2, sp, #8
   b8316:	c203      	stmia	r2!, {r0, r1}
   b8318:	ba02      	rev	r2, r0
   b831a:	ba09      	rev	r1, r1
        unpack64(l[0], key + 8);
   b831c:	68a0      	ldr	r0, [r4, #8]
        unpack64(l[1], key);
   b831e:	e9cd 1202 	strd	r1, r2, [sp, #8]
        unpack64(l[0], key + 8);
   b8322:	68e1      	ldr	r1, [r4, #12]
   b8324:	466a      	mov	r2, sp
   b8326:	c203      	stmia	r2!, {r0, r1}
   b8328:	ba02      	rev	r2, r0
   b832a:	ba09      	rev	r1, r1
   b832c:	e9cd 1200 	strd	r1, r2, [sp]
        unpack64(k[0], key + 16);
   b8330:	6922      	ldr	r2, [r4, #16]
   b8332:	609a      	str	r2, [r3, #8]
   b8334:	6962      	ldr	r2, [r4, #20]
   b8336:	60da      	str	r2, [r3, #12]
   b8338:	68d9      	ldr	r1, [r3, #12]
   b833a:	689a      	ldr	r2, [r3, #8]
   b833c:	ba09      	rev	r1, r1
   b833e:	ba12      	rev	r2, r2
   b8340:	e9c3 1202 	strd	r1, r2, [r3, #8]
        m = 3;
   b8344:	2603      	movs	r6, #3
   b8346:	e79f      	b.n	b8288 <_ZN5Speck6setKeyEPKhj+0x54>
    } else if (len == 16) {
   b8348:	2a10      	cmp	r2, #16
   b834a:	d11b      	bne.n	b8384 <_ZN5Speck6setKeyEPKhj+0x150>
        unpack64(l[0], key);
   b834c:	6808      	ldr	r0, [r1, #0]
   b834e:	6849      	ldr	r1, [r1, #4]
   b8350:	466a      	mov	r2, sp
   b8352:	c203      	stmia	r2!, {r0, r1}
   b8354:	ba02      	rev	r2, r0
   b8356:	ba09      	rev	r1, r1
   b8358:	e9cd 1200 	strd	r1, r2, [sp]
        unpack64(k[0], key + 8);
   b835c:	68a2      	ldr	r2, [r4, #8]
   b835e:	609a      	str	r2, [r3, #8]
   b8360:	68e2      	ldr	r2, [r4, #12]
   b8362:	60da      	str	r2, [r3, #12]
   b8364:	68d9      	ldr	r1, [r3, #12]
   b8366:	689a      	ldr	r2, [r3, #8]
   b8368:	ba09      	rev	r1, r1
   b836a:	ba12      	rev	r2, r2
   b836c:	e9c3 1202 	strd	r1, r2, [r3, #8]
        m = 2;
   b8370:	2602      	movs	r6, #2
   b8372:	e789      	b.n	b8288 <_ZN5Speck6setKeyEPKhj+0x54>
   b8374:	4668      	mov	r0, sp
   b8376:	2120      	movs	r1, #32
   b8378:	f7ff fe8f 	bl	b809a <_Z5cleanPvj>
    return true;
   b837c:	2001      	movs	r0, #1
}
   b837e:	b008      	add	sp, #32
   b8380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return false;
   b8384:	2000      	movs	r0, #0
   b8386:	e7fa      	b.n	b837e <_ZN5Speck6setKeyEPKhj+0x14a>

000b8388 <_ZN5Speck5clearEv>:
   b8388:	f44f 7188 	mov.w	r1, #272	; 0x110
   b838c:	3008      	adds	r0, #8
   b838e:	f7ff be84 	b.w	b809a <_Z5cleanPvj>
	...

000b8394 <_ZN5SpeckC1Ev>:
Speck::Speck()
   b8394:	b510      	push	{r4, lr}
   b8396:	4604      	mov	r4, r0
    : rounds(32)
   b8398:	f7ff fe78 	bl	b808c <_ZN11BlockCipherC1Ev>
   b839c:	4b03      	ldr	r3, [pc, #12]	; (b83ac <_ZN5SpeckC1Ev+0x18>)
   b839e:	6023      	str	r3, [r4, #0]
   b83a0:	2320      	movs	r3, #32
   b83a2:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
}
   b83a6:	4620      	mov	r0, r4
   b83a8:	bd10      	pop	{r4, pc}
   b83aa:	bf00      	nop
   b83ac:	000c77b4 	.word	0x000c77b4

000b83b0 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b83b0:	4770      	bx	lr

000b83b2 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b83b2:	b510      	push	{r4, lr}
}
   b83b4:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b83b6:	4604      	mov	r4, r0
}
   b83b8:	f7fb fe71 	bl	b409e <_ZdlPvj>
   b83bc:	4620      	mov	r0, r4
   b83be:	bd10      	pop	{r4, pc}

000b83c0 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b83c0:	b510      	push	{r4, lr}
   b83c2:	4604      	mov	r4, r0
   b83c4:	b08a      	sub	sp, #40	; 0x28
   b83c6:	4608      	mov	r0, r1
    attr.flags = 0;
   b83c8:	f04f 0c20 	mov.w	ip, #32
   b83cc:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b83ce:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b83d2:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b83d6:	460b      	mov	r3, r1
   b83d8:	aa02      	add	r2, sp, #8
   b83da:	6821      	ldr	r1, [r4, #0]
   b83dc:	f007 fe74 	bl	c00c8 <log_message_v>
}
   b83e0:	b00a      	add	sp, #40	; 0x28
   b83e2:	bd10      	pop	{r4, pc}

000b83e4 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b83e4:	b40e      	push	{r1, r2, r3}
   b83e6:	b503      	push	{r0, r1, lr}
   b83e8:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b83ea:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b83ec:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b83f0:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b83f2:	f7ff ffe5 	bl	b83c0 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b83f6:	b002      	add	sp, #8
   b83f8:	f85d eb04 	ldr.w	lr, [sp], #4
   b83fc:	b003      	add	sp, #12
   b83fe:	4770      	bx	lr

000b8400 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b8400:	b40e      	push	{r1, r2, r3}
   b8402:	b503      	push	{r0, r1, lr}
   b8404:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b8406:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b8408:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b840c:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b840e:	f7ff ffd7 	bl	b83c0 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b8412:	b002      	add	sp, #8
   b8414:	f85d eb04 	ldr.w	lr, [sp], #4
   b8418:	b003      	add	sp, #12
   b841a:	4770      	bx	lr

000b841c <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b841c:	b510      	push	{r4, lr}
   b841e:	7202      	strb	r2, [r0, #8]
   b8420:	22ff      	movs	r2, #255	; 0xff
   b8422:	8142      	strh	r2, [r0, #10]
   b8424:	2200      	movs	r2, #0
   b8426:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b842a:	6142      	str	r2, [r0, #20]
   b842c:	7602      	strb	r2, [r0, #24]
   b842e:	61c2      	str	r2, [r0, #28]
    instance = this;
   b8430:	4a02      	ldr	r2, [pc, #8]	; (b843c <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b8432:	4c03      	ldr	r4, [pc, #12]	; (b8440 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b8434:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b8436:	e9c0 4100 	strd	r4, r1, [r0]
}
   b843a:	bd10      	pop	{r4, pc}
   b843c:	2003b440 	.word	0x2003b440
   b8440:	000c7a14 	.word	0x000c7a14

000b8444 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b8444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8448:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b844c:	4604      	mov	r4, r0
   b844e:	4689      	mov	r9, r1
   b8450:	4616      	mov	r6, r2
   b8452:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b8454:	f1b8 0f00 	cmp.w	r8, #0
   b8458:	d002      	beq.n	b8460 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b845a:	6840      	ldr	r0, [r0, #4]
   b845c:	f00a fda2 	bl	c2fa4 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b8460:	7a21      	ldrb	r1, [r4, #8]
   b8462:	6860      	ldr	r0, [r4, #4]
   b8464:	f00a fd7b 	bl	c2f5e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b8468:	6860      	ldr	r0, [r4, #4]
   b846a:	6803      	ldr	r3, [r0, #0]
   b846c:	4649      	mov	r1, r9
   b846e:	689b      	ldr	r3, [r3, #8]
   b8470:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b8472:	6860      	ldr	r0, [r4, #4]
   b8474:	2100      	movs	r1, #0
   b8476:	f00a fd91 	bl	c2f9c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b847a:	4605      	mov	r5, r0
   b847c:	bb00      	cbnz	r0, b84c0 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b847e:	2301      	movs	r3, #1
   b8480:	7a21      	ldrb	r1, [r4, #8]
   b8482:	6860      	ldr	r0, [r4, #4]
   b8484:	463a      	mov	r2, r7
   b8486:	f00a fd58 	bl	c2f3a <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b848a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b848c:	4603      	mov	r3, r0
        if (count == num) {
   b848e:	d109      	bne.n	b84a4 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b8490:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b8492:	42be      	cmp	r6, r7
   b8494:	d01c      	beq.n	b84d0 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b8496:	6860      	ldr	r0, [r4, #4]
   b8498:	6803      	ldr	r3, [r0, #0]
   b849a:	695b      	ldr	r3, [r3, #20]
   b849c:	4798      	blx	r3
   b849e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b84a2:	e7f6      	b.n	b8492 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b84a4:	490b      	ldr	r1, [pc, #44]	; (b84d4 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b84a6:	480c      	ldr	r0, [pc, #48]	; (b84d8 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b84a8:	464a      	mov	r2, r9
   b84aa:	f7ff ff9b 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b84ae:	f1b8 0f00 	cmp.w	r8, #0
   b84b2:	d002      	beq.n	b84ba <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b84b4:	6860      	ldr	r0, [r4, #4]
   b84b6:	f00a fd7e 	bl	c2fb6 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b84ba:	4628      	mov	r0, r5
   b84bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b84c0:	4603      	mov	r3, r0
   b84c2:	4906      	ldr	r1, [pc, #24]	; (b84dc <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b84c4:	4804      	ldr	r0, [pc, #16]	; (b84d8 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b84c6:	464a      	mov	r2, r9
   b84c8:	f7ff ff8c 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b84cc:	2500      	movs	r5, #0
   b84ce:	e7ee      	b.n	b84ae <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b84d0:	2501      	movs	r5, #1
   b84d2:	e7ec      	b.n	b84ae <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b84d4:	000c77d4 	.word	0x000c77d4
   b84d8:	2003b43c 	.word	0x2003b43c
   b84dc:	000c77f9 	.word	0x000c77f9

000b84e0 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b84e0:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b84e2:	9300      	str	r3, [sp, #0]
   b84e4:	2301      	movs	r3, #1
   b84e6:	f7ff ffad 	bl	b8444 <_ZN6AB180513readRegistersEhPhjb>
}
   b84ea:	b003      	add	sp, #12
   b84ec:	f85d fb04 	ldr.w	pc, [sp], #4

000b84f0 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b84f0:	b513      	push	{r0, r1, r4, lr}
    if (foutPin != PIN_INVALID) {
   b84f2:	8943      	ldrh	r3, [r0, #10]
bool AB1805::detectChip() {
   b84f4:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b84f6:	2bff      	cmp	r3, #255	; 0xff
   b84f8:	d009      	beq.n	b850e <_ZN6AB180510detectChipEv+0x1e>
   b84fa:	f007 fb85 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b84fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b8502:	d204      	bcs.n	b850e <_ZN6AB180510detectChipEv+0x1e>
            if (digitalRead(foutPin) == HIGH) {
   b8504:	8960      	ldrh	r0, [r4, #10]
   b8506:	f00b f87f 	bl	c3608 <digitalRead>
   b850a:	2801      	cmp	r0, #1
   b850c:	e7f4      	b.n	b84f8 <_ZN6AB180510detectChipEv+0x8>
    bResult = readRegister(REG_ID0, value);
   b850e:	2301      	movs	r3, #1
   b8510:	f10d 0207 	add.w	r2, sp, #7
   b8514:	2128      	movs	r1, #40	; 0x28
   b8516:	4620      	mov	r0, r4
   b8518:	f7ff ffe2 	bl	b84e0 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b851c:	b930      	cbnz	r0, b852c <_ZN6AB180510detectChipEv+0x3c>
        _log.info("not detected");
   b851e:	480c      	ldr	r0, [pc, #48]	; (b8550 <_ZN6AB180510detectChipEv+0x60>)
   b8520:	490c      	ldr	r1, [pc, #48]	; (b8554 <_ZN6AB180510detectChipEv+0x64>)
   b8522:	f7fb fdd3 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b8526:	2000      	movs	r0, #0
}
   b8528:	b002      	add	sp, #8
   b852a:	bd10      	pop	{r4, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b852c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b8530:	2b18      	cmp	r3, #24
   b8532:	d1f4      	bne.n	b851e <_ZN6AB180510detectChipEv+0x2e>
        bResult = readRegister(REG_ID1, value);
   b8534:	2301      	movs	r3, #1
   b8536:	f10d 0207 	add.w	r2, sp, #7
   b853a:	2129      	movs	r1, #41	; 0x29
   b853c:	4620      	mov	r0, r4
   b853e:	f7ff ffcf 	bl	b84e0 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b8542:	2800      	cmp	r0, #0
   b8544:	d0eb      	beq.n	b851e <_ZN6AB180510detectChipEv+0x2e>
   b8546:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b854a:	2b05      	cmp	r3, #5
   b854c:	d1e7      	bne.n	b851e <_ZN6AB180510detectChipEv+0x2e>
   b854e:	e7eb      	b.n	b8528 <_ZN6AB180510detectChipEv+0x38>
   b8550:	2003b43c 	.word	0x2003b43c
   b8554:	000c781d 	.word	0x000c781d

000b8558 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b8558:	b507      	push	{r0, r1, r2, lr}
   b855a:	4613      	mov	r3, r2
    uint8_t value = 0;
   b855c:	2200      	movs	r2, #0
   b855e:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b8562:	f10d 0207 	add.w	r2, sp, #7
   b8566:	f7ff ffbb 	bl	b84e0 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b856a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b856e:	b003      	add	sp, #12
   b8570:	f85d fb04 	ldr.w	pc, [sp], #4

000b8574 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b8574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8578:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b857c:	4604      	mov	r4, r0
   b857e:	460f      	mov	r7, r1
   b8580:	4615      	mov	r5, r2
   b8582:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b8584:	f1b8 0f00 	cmp.w	r8, #0
   b8588:	d002      	beq.n	b8590 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b858a:	6840      	ldr	r0, [r0, #4]
   b858c:	f00a fd0a 	bl	c2fa4 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b8590:	7a21      	ldrb	r1, [r4, #8]
   b8592:	6860      	ldr	r0, [r4, #4]
   b8594:	f00a fce3 	bl	c2f5e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b8598:	6860      	ldr	r0, [r4, #4]
   b859a:	6803      	ldr	r3, [r0, #0]
   b859c:	4639      	mov	r1, r7
   b859e:	689b      	ldr	r3, [r3, #8]
   b85a0:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b85a2:	442e      	add	r6, r5
   b85a4:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b85a6:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b85a8:	d005      	beq.n	b85b6 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b85aa:	6803      	ldr	r3, [r0, #0]
   b85ac:	f815 1b01 	ldrb.w	r1, [r5], #1
   b85b0:	689b      	ldr	r3, [r3, #8]
   b85b2:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b85b4:	e7f6      	b.n	b85a4 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b85b6:	2101      	movs	r1, #1
   b85b8:	f00a fcf0 	bl	c2f9c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b85bc:	4603      	mov	r3, r0
   b85be:	b170      	cbz	r0, b85de <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b85c0:	4908      	ldr	r1, [pc, #32]	; (b85e4 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b85c2:	4809      	ldr	r0, [pc, #36]	; (b85e8 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b85c4:	463a      	mov	r2, r7
   b85c6:	f7ff ff0d 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b85ca:	2500      	movs	r5, #0
    }

    if (lock) {
   b85cc:	f1b8 0f00 	cmp.w	r8, #0
   b85d0:	d002      	beq.n	b85d8 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b85d2:	6860      	ldr	r0, [r4, #4]
   b85d4:	f00a fcef 	bl	c2fb6 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b85d8:	4628      	mov	r0, r5
   b85da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b85de:	2501      	movs	r5, #1
   b85e0:	e7f4      	b.n	b85cc <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b85e2:	bf00      	nop
   b85e4:	000c782a 	.word	0x000c782a
   b85e8:	2003b43c 	.word	0x2003b43c

000b85ec <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b85ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b85ee:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b85f2:	9300      	str	r3, [sp, #0]
   b85f4:	f10d 020f 	add.w	r2, sp, #15
   b85f8:	2301      	movs	r3, #1
   b85fa:	f7ff ffbb 	bl	b8574 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b85fe:	b005      	add	sp, #20
   b8600:	f85d fb04 	ldr.w	pc, [sp], #4

000b8604 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b8604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b8606:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b8608:	460c      	mov	r4, r1
   b860a:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b860c:	491a      	ldr	r1, [pc, #104]	; (b8678 <_ZN6AB18056setWDTEi+0x74>)
   b860e:	481b      	ldr	r0, [pc, #108]	; (b867c <_ZN6AB18056setWDTEi+0x78>)
   b8610:	f7fb fd5c 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b8614:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b8616:	bfb8      	it	lt
   b8618:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b861a:	b97c      	cbnz	r4, b863c <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b861c:	2301      	movs	r3, #1
   b861e:	4622      	mov	r2, r4
   b8620:	211b      	movs	r1, #27
   b8622:	4628      	mov	r0, r5
   b8624:	f7ff ffe2 	bl	b85ec <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b8628:	4915      	ldr	r1, [pc, #84]	; (b8680 <_ZN6AB18056setWDTEi+0x7c>)
   b862a:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b862c:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b862e:	4813      	ldr	r0, [pc, #76]	; (b867c <_ZN6AB18056setWDTEi+0x78>)
   b8630:	f7ff fee6 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b8634:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b8636:	616c      	str	r4, [r5, #20]
}
   b8638:	4630      	mov	r0, r6
   b863a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b863c:	2c03      	cmp	r4, #3
   b863e:	dd19      	ble.n	b8674 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b8640:	10a7      	asrs	r7, r4, #2
   b8642:	2f1f      	cmp	r7, #31
   b8644:	bfa8      	it	ge
   b8646:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b8648:	00ba      	lsls	r2, r7, #2
   b864a:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b864e:	2301      	movs	r3, #1
   b8650:	b2d2      	uxtb	r2, r2
   b8652:	211b      	movs	r1, #27
   b8654:	4628      	mov	r0, r5
   b8656:	f7ff ffc9 	bl	b85ec <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b865a:	463a      	mov	r2, r7
   b865c:	4603      	mov	r3, r0
   b865e:	4909      	ldr	r1, [pc, #36]	; (b8684 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b8660:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b8662:	4806      	ldr	r0, [pc, #24]	; (b867c <_ZN6AB18056setWDTEi+0x78>)
   b8664:	f7ff fecc 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b8668:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b866c:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b866e:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b8670:	616f      	str	r7, [r5, #20]
   b8672:	e7e1      	b.n	b8638 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b8674:	2701      	movs	r7, #1
   b8676:	e7e7      	b.n	b8648 <_ZN6AB18056setWDTEi+0x44>
   b8678:	000c784f 	.word	0x000c784f
   b867c:	2003b43c 	.word	0x2003b43c
   b8680:	000c7859 	.word	0x000c7859
   b8684:	000c7875 	.word	0x000c7875

000b8688 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b8688:	4b06      	ldr	r3, [pc, #24]	; (b86a4 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b868a:	681a      	ldr	r2, [r3, #0]
   b868c:	b14a      	cbz	r2, b86a2 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b868e:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b8692:	430b      	orrs	r3, r1
   b8694:	d105      	bne.n	b86a2 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b8696:	68d3      	ldr	r3, [r2, #12]
   b8698:	b11b      	cbz	r3, b86a2 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b869a:	2100      	movs	r1, #0
   b869c:	4610      	mov	r0, r2
   b869e:	f7ff bfb1 	b.w	b8604 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b86a2:	4770      	bx	lr
   b86a4:	2003b440 	.word	0x2003b440

000b86a8 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b86a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b86ac:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b86b0:	4605      	mov	r5, r0
   b86b2:	4616      	mov	r6, r2
   b86b4:	461f      	mov	r7, r3
    if (lock) {
   b86b6:	f1b8 0f00 	cmp.w	r8, #0
   b86ba:	d004      	beq.n	b86c6 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b86bc:	6840      	ldr	r0, [r0, #4]
   b86be:	9101      	str	r1, [sp, #4]
   b86c0:	f00a fc70 	bl	c2fa4 <_ZN7TwoWire4lockEv>
   b86c4:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b86c6:	9101      	str	r1, [sp, #4]
   b86c8:	2300      	movs	r3, #0
   b86ca:	f10d 020f 	add.w	r2, sp, #15
   b86ce:	4628      	mov	r0, r5
   b86d0:	f7ff ff06 	bl	b84e0 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b86d4:	4604      	mov	r4, r0
   b86d6:	b160      	cbz	r0, b86f2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b86d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b86dc:	ea03 0206 	and.w	r2, r3, r6
   b86e0:	433a      	orrs	r2, r7
        if (newValue != value) {
   b86e2:	4293      	cmp	r3, r2
   b86e4:	d005      	beq.n	b86f2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b86e6:	9901      	ldr	r1, [sp, #4]
   b86e8:	2300      	movs	r3, #0
   b86ea:	4628      	mov	r0, r5
   b86ec:	f7ff ff7e 	bl	b85ec <_ZN6AB180513writeRegisterEhhb>
   b86f0:	4604      	mov	r4, r0
    if (lock) {
   b86f2:	f1b8 0f00 	cmp.w	r8, #0
   b86f6:	d002      	beq.n	b86fe <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b86f8:	6868      	ldr	r0, [r5, #4]
   b86fa:	f00a fc5c 	bl	c2fb6 <_ZN7TwoWire6unlockEv>
}
   b86fe:	4620      	mov	r0, r4
   b8700:	b004      	add	sp, #16
   b8702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8706 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b8706:	b513      	push	{r0, r1, r4, lr}
   b8708:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b870a:	f10d 0207 	add.w	r2, sp, #7
   b870e:	f7ff fee7 	bl	b84e0 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b8712:	b128      	cbz	r0, b8720 <_ZN6AB180510isBitClearEhhb+0x1a>
   b8714:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b8718:	421c      	tst	r4, r3
   b871a:	bf0c      	ite	eq
   b871c:	2001      	moveq	r0, #1
   b871e:	2000      	movne	r0, #0
}
   b8720:	b002      	add	sp, #8
   b8722:	bd10      	pop	{r4, pc}

000b8724 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b8724:	b513      	push	{r0, r1, r4, lr}
   b8726:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b8728:	f10d 0207 	add.w	r2, sp, #7
   b872c:	f7ff fed8 	bl	b84e0 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b8730:	b128      	cbz	r0, b873e <_ZN6AB18058isBitSetEhhb+0x1a>
   b8732:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b8736:	421c      	tst	r4, r3
   b8738:	bf14      	ite	ne
   b873a:	2001      	movne	r0, #1
   b873c:	2000      	moveq	r0, #0
}
   b873e:	b002      	add	sp, #8
   b8740:	bd10      	pop	{r4, pc}

000b8742 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b8742:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b8744:	43d2      	mvns	r2, r2
   b8746:	9300      	str	r3, [sp, #0]
   b8748:	b2d2      	uxtb	r2, r2
   b874a:	2300      	movs	r3, #0
   b874c:	f7ff ffac 	bl	b86a8 <_ZN6AB180512maskRegisterEhhhb>
}
   b8750:	b003      	add	sp, #12
   b8752:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8758 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b8758:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b875a:	2301      	movs	r3, #1
   b875c:	f10d 0207 	add.w	r2, sp, #7
   b8760:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b8762:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b8764:	f7ff febc 	bl	b84e0 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b8768:	4605      	mov	r5, r0
   b876a:	b940      	cbnz	r0, b877e <_ZN6AB180516updateWakeReasonEv+0x26>
        _log.error(errorMsg, __LINE__);
   b876c:	491f      	ldr	r1, [pc, #124]	; (b87ec <_ZN6AB180516updateWakeReasonEv+0x94>)
   b876e:	4820      	ldr	r0, [pc, #128]	; (b87f0 <_ZN6AB180516updateWakeReasonEv+0x98>)
   b8770:	f44f 7297 	mov.w	r2, #302	; 0x12e
   b8774:	f7ff fe36 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
}
   b8778:	4628      	mov	r0, r5
   b877a:	b003      	add	sp, #12
   b877c:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b877e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b8782:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b8786:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b878a:	d00b      	beq.n	b87a4 <_ZN6AB180516updateWakeReasonEv+0x4c>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b878c:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b878e:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b8790:	210f      	movs	r1, #15
   b8792:	4620      	mov	r0, r4
   b8794:	f7ff ffd5 	bl	b8742 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b8798:	4a16      	ldr	r2, [pc, #88]	; (b87f4 <_ZN6AB180516updateWakeReasonEv+0x9c>)
        _log.info("wake reason = %s", reason);
   b879a:	4917      	ldr	r1, [pc, #92]	; (b87f8 <_ZN6AB180516updateWakeReasonEv+0xa0>)
   b879c:	4814      	ldr	r0, [pc, #80]	; (b87f0 <_ZN6AB180516updateWakeReasonEv+0x98>)
   b879e:	f7fb fc95 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b87a2:	e7e9      	b.n	b8778 <_ZN6AB180516updateWakeReasonEv+0x20>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b87a4:	2208      	movs	r2, #8
   b87a6:	2117      	movs	r1, #23
   b87a8:	4620      	mov	r0, r4
   b87aa:	f7ff ffbb 	bl	b8724 <_ZN6AB18058isBitSetEhhb>
   b87ae:	b118      	cbz	r0, b87b8 <_ZN6AB180516updateWakeReasonEv+0x60>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b87b0:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b87b2:	4a12      	ldr	r2, [pc, #72]	; (b87fc <_ZN6AB180516updateWakeReasonEv+0xa4>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b87b4:	61e3      	str	r3, [r4, #28]
   b87b6:	e7f0      	b.n	b879a <_ZN6AB180516updateWakeReasonEv+0x42>
    else if ((status & REG_STATUS_TIM) != 0) {
   b87b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b87bc:	071a      	lsls	r2, r3, #28
   b87be:	d509      	bpl.n	b87d4 <_ZN6AB180516updateWakeReasonEv+0x7c>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b87c0:	2303      	movs	r3, #3
   b87c2:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b87c4:	2208      	movs	r2, #8
   b87c6:	2301      	movs	r3, #1
   b87c8:	210f      	movs	r1, #15
   b87ca:	4620      	mov	r0, r4
   b87cc:	f7ff ffb9 	bl	b8742 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b87d0:	4a0b      	ldr	r2, [pc, #44]	; (b8800 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b87d2:	e7e2      	b.n	b879a <_ZN6AB180516updateWakeReasonEv+0x42>
    else if ((status & REG_STATUS_ALM) != 0) {
   b87d4:	075b      	lsls	r3, r3, #29
   b87d6:	d5cf      	bpl.n	b8778 <_ZN6AB180516updateWakeReasonEv+0x20>
        wakeReason = WakeReason::ALARM;
   b87d8:	2204      	movs	r2, #4
   b87da:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b87dc:	2301      	movs	r3, #1
   b87de:	210f      	movs	r1, #15
   b87e0:	4620      	mov	r0, r4
   b87e2:	f7ff ffae 	bl	b8742 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b87e6:	4a07      	ldr	r2, [pc, #28]	; (b8804 <_ZN6AB180516updateWakeReasonEv+0xac>)
   b87e8:	e7d7      	b.n	b879a <_ZN6AB180516updateWakeReasonEv+0x42>
   b87ea:	bf00      	nop
   b87ec:	000c78c8 	.word	0x000c78c8
   b87f0:	2003b43c 	.word	0x2003b43c
   b87f4:	000c7899 	.word	0x000c7899
   b87f8:	000c78e7 	.word	0x000c78e7
   b87fc:	000c78a2 	.word	0x000c78a2
   b8800:	000c78b2 	.word	0x000c78b2
   b8804:	000c78c2 	.word	0x000c78c2

000b8808 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b8808:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b880a:	9300      	str	r3, [sp, #0]
   b880c:	4613      	mov	r3, r2
   b880e:	22ff      	movs	r2, #255	; 0xff
   b8810:	f7ff ff4a 	bl	b86a8 <_ZN6AB180512maskRegisterEhhhb>
}
   b8814:	b003      	add	sp, #12
   b8816:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b881c <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b881e:	460f      	mov	r7, r1
   b8820:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b8822:	2301      	movs	r3, #1
   b8824:	2200      	movs	r2, #0
   b8826:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b8828:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b882a:	f7ff fedf 	bl	b85ec <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b882e:	4604      	mov	r4, r0
   b8830:	b938      	cbnz	r0, b8842 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b8832:	f44f 7252 	mov.w	r2, #840	; 0x348
        _log.error(errorMsg, __LINE__);
   b8836:	491f      	ldr	r1, [pc, #124]	; (b88b4 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b8838:	481f      	ldr	r0, [pc, #124]	; (b88b8 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b883a:	f7ff fdd3 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
}
   b883e:	4620      	mov	r0, r4
   b8840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b8842:	2301      	movs	r3, #1
   b8844:	2223      	movs	r2, #35	; 0x23
   b8846:	2118      	movs	r1, #24
   b8848:	4628      	mov	r0, r5
   b884a:	f7ff fecf 	bl	b85ec <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b884e:	4604      	mov	r4, r0
   b8850:	b910      	cbnz	r0, b8858 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b8852:	f240 324f 	movw	r2, #847	; 0x34f
   b8856:	e7ee      	b.n	b8836 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b8858:	2fff      	cmp	r7, #255	; 0xff
   b885a:	bfa8      	it	ge
   b885c:	27ff      	movge	r7, #255	; 0xff
   b885e:	2f01      	cmp	r7, #1
   b8860:	bfb8      	it	lt
   b8862:	2701      	movlt	r7, #1
   b8864:	2301      	movs	r3, #1
   b8866:	b2fa      	uxtb	r2, r7
   b8868:	2119      	movs	r1, #25
   b886a:	4628      	mov	r0, r5
   b886c:	f7ff febe 	bl	b85ec <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b8870:	4604      	mov	r4, r0
   b8872:	b910      	cbnz	r0, b887a <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b8874:	f44f 7257 	mov.w	r2, #860	; 0x35c
   b8878:	e7dd      	b.n	b8836 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b887a:	2301      	movs	r3, #1
   b887c:	2208      	movs	r2, #8
   b887e:	2112      	movs	r1, #18
   b8880:	4628      	mov	r0, r5
   b8882:	f7ff ffc1 	bl	b8808 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b8886:	4604      	mov	r4, r0
   b8888:	b910      	cbnz	r0, b8890 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b888a:	f240 3263 	movw	r2, #867	; 0x363
   b888e:	e7d2      	b.n	b8836 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b8890:	2e00      	cmp	r6, #0
   b8892:	bf14      	ite	ne
   b8894:	2203      	movne	r2, #3
   b8896:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b8898:	2301      	movs	r3, #1
   b889a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b889e:	2118      	movs	r1, #24
   b88a0:	4628      	mov	r0, r5
   b88a2:	f7ff fea3 	bl	b85ec <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b88a6:	4604      	mov	r4, r0
   b88a8:	2800      	cmp	r0, #0
   b88aa:	d1c8      	bne.n	b883e <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b88ac:	f240 326d 	movw	r2, #877	; 0x36d
   b88b0:	e7c1      	b.n	b8836 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b88b2:	bf00      	nop
   b88b4:	000c78f8 	.word	0x000c78f8
   b88b8:	2003b43c 	.word	0x2003b43c

000b88bc <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b88bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b88c0:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b88c2:	4605      	mov	r5, r0
   b88c4:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b88c6:	484f      	ldr	r0, [pc, #316]	; (b8a04 <_ZN6AB180513deepPowerDownEi+0x148>)
   b88c8:	494f      	ldr	r1, [pc, #316]	; (b8a08 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b88ca:	f7fb fbff 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b88ce:	2100      	movs	r1, #0
   b88d0:	4628      	mov	r0, r5
   b88d2:	f7ff fe97 	bl	b8604 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b88d6:	4604      	mov	r4, r0
   b88d8:	b948      	cbnz	r0, b88ee <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b88da:	f240 22ab 	movw	r2, #683	; 0x2ab
        _log.error(errorMsg, __LINE__);
   b88de:	494b      	ldr	r1, [pc, #300]	; (b8a0c <_ZN6AB180513deepPowerDownEi+0x150>)
   b88e0:	4848      	ldr	r0, [pc, #288]	; (b8a04 <_ZN6AB180513deepPowerDownEi+0x148>)
   b88e2:	f7ff fd7f 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
}
   b88e6:	4620      	mov	r0, r4
   b88e8:	b003      	add	sp, #12
   b88ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b88ee:	2301      	movs	r3, #1
   b88f0:	461a      	mov	r2, r3
   b88f2:	2130      	movs	r1, #48	; 0x30
   b88f4:	4628      	mov	r0, r5
   b88f6:	f7ff ff87 	bl	b8808 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b88fa:	4604      	mov	r4, r0
   b88fc:	b910      	cbnz	r0, b8904 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b88fe:	f240 22b9 	movw	r2, #697	; 0x2b9
   b8902:	e7ec      	b.n	b88de <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b8904:	2210      	movs	r2, #16
   b8906:	2301      	movs	r3, #1
   b8908:	4611      	mov	r1, r2
   b890a:	4628      	mov	r0, r5
   b890c:	f7ff ff19 	bl	b8742 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b8910:	4604      	mov	r4, r0
   b8912:	b910      	cbnz	r0, b891a <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b8914:	f44f 7230 	mov.w	r2, #704	; 0x2c0
   b8918:	e7e1      	b.n	b88de <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b891a:	2301      	movs	r3, #1
   b891c:	2226      	movs	r2, #38	; 0x26
   b891e:	2113      	movs	r1, #19
   b8920:	4628      	mov	r0, r5
   b8922:	f7ff fe63 	bl	b85ec <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b8926:	4604      	mov	r4, r0
   b8928:	b910      	cbnz	r0, b8930 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b892a:	f240 22c7 	movw	r2, #711	; 0x2c7
   b892e:	e7d6      	b.n	b88de <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b8930:	2601      	movs	r6, #1
   b8932:	9600      	str	r6, [sp, #0]
   b8934:	4633      	mov	r3, r6
   b8936:	22fc      	movs	r2, #252	; 0xfc
   b8938:	2111      	movs	r1, #17
   b893a:	4628      	mov	r0, r5
   b893c:	f7ff feb4 	bl	b86a8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b8940:	4604      	mov	r4, r0
   b8942:	b910      	cbnz	r0, b894a <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b8944:	f240 22cf 	movw	r2, #719	; 0x2cf
   b8948:	e7c9      	b.n	b88de <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b894a:	2200      	movs	r2, #0
   b894c:	4639      	mov	r1, r7
   b894e:	4628      	mov	r0, r5
   b8950:	f7ff ff64 	bl	b881c <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b8954:	4604      	mov	r4, r0
   b8956:	b910      	cbnz	r0, b895e <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b8958:	f240 22d6 	movw	r2, #726	; 0x2d6
   b895c:	e7bf      	b.n	b88de <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b895e:	9600      	str	r6, [sp, #0]
   b8960:	2302      	movs	r3, #2
   b8962:	2277      	movs	r2, #119	; 0x77
   b8964:	2110      	movs	r1, #16
   b8966:	4628      	mov	r0, r5
   b8968:	f7ff fe9e 	bl	b86a8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b896c:	4604      	mov	r4, r0
   b896e:	b910      	cbnz	r0, b8976 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b8970:	f240 22df 	movw	r2, #735	; 0x2df
   b8974:	e7b3      	b.n	b88de <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b8976:	4633      	mov	r3, r6
   b8978:	2204      	movs	r2, #4
   b897a:	211c      	movs	r1, #28
   b897c:	4628      	mov	r0, r5
   b897e:	f7ff ff43 	bl	b8808 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b8982:	4604      	mov	r4, r0
   b8984:	b910      	cbnz	r0, b898c <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b8986:	f240 22e6 	movw	r2, #742	; 0x2e6
   b898a:	e7a8      	b.n	b88de <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b898c:	9600      	str	r6, [sp, #0]
   b898e:	2318      	movs	r3, #24
   b8990:	22e3      	movs	r2, #227	; 0xe3
   b8992:	2111      	movs	r1, #17
   b8994:	4628      	mov	r0, r5
   b8996:	f7ff fe87 	bl	b86a8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b899a:	4604      	mov	r4, r0
   b899c:	b910      	cbnz	r0, b89a4 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b899e:	f240 22ed 	movw	r2, #749	; 0x2ed
   b89a2:	e79c      	b.n	b88de <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b89a4:	4633      	mov	r3, r6
   b89a6:	22c0      	movs	r2, #192	; 0xc0
   b89a8:	2117      	movs	r1, #23
   b89aa:	4628      	mov	r0, r5
   b89ac:	f7ff fe1e 	bl	b85ec <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b89b0:	4604      	mov	r4, r0
   b89b2:	b910      	cbnz	r0, b89ba <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b89b4:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   b89b8:	e791      	b.n	b88de <_ZN6AB180513deepPowerDownEi+0x22>
   b89ba:	f007 f925 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b89be:	f8df 9054 	ldr.w	r9, [pc, #84]	; b8a14 <_ZN6AB180513deepPowerDownEi+0x158>
   b89c2:	f8df 8040 	ldr.w	r8, [pc, #64]	; b8a04 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b89c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b89ca:	4606      	mov	r6, r0
   b89cc:	434f      	muls	r7, r1
   b89ce:	f007 f91b 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
   b89d2:	1b80      	subs	r0, r0, r6
   b89d4:	42b8      	cmp	r0, r7
   b89d6:	d20e      	bcs.n	b89f6 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b89d8:	2201      	movs	r2, #1
   b89da:	2117      	movs	r1, #23
   b89dc:	4628      	mov	r0, r5
   b89de:	f7ff fdbb 	bl	b8558 <_ZN6AB180512readRegisterEhb>
   b89e2:	4649      	mov	r1, r9
   b89e4:	4602      	mov	r2, r0
   b89e6:	4640      	mov	r0, r8
   b89e8:	f7fb fb70 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b89ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b89f0:	f009 fbac 	bl	c214c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b89f4:	e7eb      	b.n	b89ce <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b89f6:	4906      	ldr	r1, [pc, #24]	; (b8a10 <_ZN6AB180513deepPowerDownEi+0x154>)
   b89f8:	4802      	ldr	r0, [pc, #8]	; (b8a04 <_ZN6AB180513deepPowerDownEi+0x148>)
   b89fa:	f7ff fcf3 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b89fe:	f007 ff28 	bl	c0852 <_ZN11SystemClass5resetEv>
    return true;
   b8a02:	e770      	b.n	b88e6 <_ZN6AB180513deepPowerDownEi+0x2a>
   b8a04:	2003b43c 	.word	0x2003b43c
   b8a08:	000c7923 	.word	0x000c7923
   b8a0c:	000c7918 	.word	0x000c7918
   b8a10:	000c7949 	.word	0x000c7949
   b8a14:	000c7934 	.word	0x000c7934

000b8a18 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b8a18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8a1c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b8a20:	4605      	mov	r5, r0
   b8a22:	460c      	mov	r4, r1
   b8a24:	4691      	mov	r9, r2
   b8a26:	461f      	mov	r7, r3
    if (lock) {
   b8a28:	f1ba 0f00 	cmp.w	sl, #0
   b8a2c:	d002      	beq.n	b8a34 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b8a2e:	6840      	ldr	r0, [r0, #4]
   b8a30:	f00a fab8 	bl	c2fa4 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b8a34:	b307      	cbz	r7, b8a78 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b8a36:	2f20      	cmp	r7, #32
   b8a38:	463e      	mov	r6, r7
   b8a3a:	bf28      	it	cs
   b8a3c:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b8a3e:	2c7f      	cmp	r4, #127	; 0x7f
   b8a40:	d826      	bhi.n	b8a90 <_ZN6AB18057readRamEjPhjb+0x78>
   b8a42:	1933      	adds	r3, r6, r4
   b8a44:	2b80      	cmp	r3, #128	; 0x80
   b8a46:	d901      	bls.n	b8a4c <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b8a48:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8a4c:	2301      	movs	r3, #1
   b8a4e:	2204      	movs	r2, #4
   b8a50:	213f      	movs	r1, #63	; 0x3f
   b8a52:	4628      	mov	r0, r5
   b8a54:	f7ff fe75 	bl	b8742 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b8a58:	2300      	movs	r3, #0
   b8a5a:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b8a5e:	9300      	str	r3, [sp, #0]
   b8a60:	464a      	mov	r2, r9
   b8a62:	4633      	mov	r3, r6
   b8a64:	b2c9      	uxtb	r1, r1
   b8a66:	4628      	mov	r0, r5
   b8a68:	f7ff fcec 	bl	b8444 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b8a6c:	4680      	mov	r8, r0
   b8a6e:	b128      	cbz	r0, b8a7c <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b8a70:	4434      	add	r4, r6
        dataLen -= count;
   b8a72:	1bbf      	subs	r7, r7, r6
        data += count;
   b8a74:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b8a76:	e7dd      	b.n	b8a34 <_ZN6AB18057readRamEjPhjb+0x1c>
   b8a78:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b8a7c:	f1ba 0f00 	cmp.w	sl, #0
   b8a80:	d002      	beq.n	b8a88 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b8a82:	6868      	ldr	r0, [r5, #4]
   b8a84:	f00a fa97 	bl	c2fb6 <_ZN7TwoWire6unlockEv>
}
   b8a88:	4640      	mov	r0, r8
   b8a8a:	b002      	add	sp, #8
   b8a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8a90:	2301      	movs	r3, #1
   b8a92:	2204      	movs	r2, #4
   b8a94:	213f      	movs	r1, #63	; 0x3f
   b8a96:	4628      	mov	r0, r5
   b8a98:	f7ff feb6 	bl	b8808 <_ZN6AB180514setRegisterBitEhhb>
   b8a9c:	e7dc      	b.n	b8a58 <_ZN6AB18057readRamEjPhjb+0x40>

000b8a9e <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b8a9e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8aa2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b8aa6:	4605      	mov	r5, r0
   b8aa8:	460c      	mov	r4, r1
   b8aaa:	4691      	mov	r9, r2
   b8aac:	461f      	mov	r7, r3
    if (lock) {
   b8aae:	f1ba 0f00 	cmp.w	sl, #0
   b8ab2:	d002      	beq.n	b8aba <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b8ab4:	6840      	ldr	r0, [r0, #4]
   b8ab6:	f00a fa75 	bl	c2fa4 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b8aba:	b307      	cbz	r7, b8afe <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b8abc:	2f1f      	cmp	r7, #31
   b8abe:	463e      	mov	r6, r7
   b8ac0:	bf28      	it	cs
   b8ac2:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b8ac4:	2c7f      	cmp	r4, #127	; 0x7f
   b8ac6:	d826      	bhi.n	b8b16 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b8ac8:	1933      	adds	r3, r6, r4
   b8aca:	2b80      	cmp	r3, #128	; 0x80
   b8acc:	d901      	bls.n	b8ad2 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b8ace:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8ad2:	2301      	movs	r3, #1
   b8ad4:	2204      	movs	r2, #4
   b8ad6:	213f      	movs	r1, #63	; 0x3f
   b8ad8:	4628      	mov	r0, r5
   b8ada:	f7ff fe32 	bl	b8742 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b8ade:	2300      	movs	r3, #0
   b8ae0:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b8ae4:	9300      	str	r3, [sp, #0]
   b8ae6:	464a      	mov	r2, r9
   b8ae8:	4633      	mov	r3, r6
   b8aea:	b2c9      	uxtb	r1, r1
   b8aec:	4628      	mov	r0, r5
   b8aee:	f7ff fd41 	bl	b8574 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b8af2:	4680      	mov	r8, r0
   b8af4:	b128      	cbz	r0, b8b02 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b8af6:	4434      	add	r4, r6
        dataLen -= count;
   b8af8:	1bbf      	subs	r7, r7, r6
        data += count;
   b8afa:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b8afc:	e7dd      	b.n	b8aba <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b8afe:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b8b02:	f1ba 0f00 	cmp.w	sl, #0
   b8b06:	d002      	beq.n	b8b0e <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b8b08:	6868      	ldr	r0, [r5, #4]
   b8b0a:	f00a fa54 	bl	c2fb6 <_ZN7TwoWire6unlockEv>
}
   b8b0e:	4640      	mov	r0, r8
   b8b10:	b002      	add	sp, #8
   b8b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8b16:	2301      	movs	r3, #1
   b8b18:	2204      	movs	r2, #4
   b8b1a:	213f      	movs	r1, #63	; 0x3f
   b8b1c:	4628      	mov	r0, r5
   b8b1e:	f7ff fe73 	bl	b8808 <_ZN6AB180514setRegisterBitEhhb>
   b8b22:	e7dc      	b.n	b8ade <_ZN6AB18058writeRamEjPKhjb+0x40>

000b8b24 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b8b24:	b530      	push	{r4, r5, lr}
   b8b26:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b8b28:	680d      	ldr	r5, [r1, #0]
   b8b2a:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b8b2e:	9503      	str	r5, [sp, #12]
   b8b30:	684d      	ldr	r5, [r1, #4]
   b8b32:	9502      	str	r5, [sp, #8]
   b8b34:	688d      	ldr	r5, [r1, #8]
   b8b36:	9501      	str	r5, [sp, #4]
   b8b38:	68c9      	ldr	r1, [r1, #12]
   b8b3a:	9100      	str	r1, [sp, #0]
   b8b3c:	3301      	adds	r3, #1
   b8b3e:	4904      	ldr	r1, [pc, #16]	; (b8b50 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b8b40:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b8b44:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b8b46:	f008 f865 	bl	c0c14 <_ZN6String6formatEPKcz>
}
   b8b4a:	4620      	mov	r0, r4
   b8b4c:	b005      	add	sp, #20
   b8b4e:	bd30      	pop	{r4, r5, pc}
   b8b50:	000c795b 	.word	0x000c795b

000b8b54 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b8b54:	0903      	lsrs	r3, r0, #4
}
   b8b56:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b8b58:	f000 000f 	and.w	r0, r0, #15
}
   b8b5c:	fb02 0003 	mla	r0, r2, r3, r0
   b8b60:	4770      	bx	lr

000b8b62 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b8b62:	b538      	push	{r3, r4, r5, lr}
   b8b64:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b8b66:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b8b68:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b8b6a:	f7ff fff3 	bl	b8b54 <_ZN6AB180510bcdToValueEh>
   b8b6e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b8b70:	7860      	ldrb	r0, [r4, #1]
   b8b72:	f7ff ffef 	bl	b8b54 <_ZN6AB180510bcdToValueEh>
   b8b76:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b8b78:	78a0      	ldrb	r0, [r4, #2]
   b8b7a:	f7ff ffeb 	bl	b8b54 <_ZN6AB180510bcdToValueEh>
   b8b7e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b8b80:	78e0      	ldrb	r0, [r4, #3]
   b8b82:	f7ff ffe7 	bl	b8b54 <_ZN6AB180510bcdToValueEh>
   b8b86:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b8b88:	7920      	ldrb	r0, [r4, #4]
   b8b8a:	f7ff ffe3 	bl	b8b54 <_ZN6AB180510bcdToValueEh>
   b8b8e:	3801      	subs	r0, #1
   b8b90:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b8b92:	b92d      	cbnz	r5, b8ba0 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b8b94:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b8b96:	7828      	ldrb	r0, [r5, #0]
   b8b98:	f7ff ffdc 	bl	b8b54 <_ZN6AB180510bcdToValueEh>
   b8b9c:	6188      	str	r0, [r1, #24]
}
   b8b9e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b8ba0:	7960      	ldrb	r0, [r4, #5]
   b8ba2:	f7ff ffd7 	bl	b8b54 <_ZN6AB180510bcdToValueEh>
   b8ba6:	3064      	adds	r0, #100	; 0x64
   b8ba8:	1da5      	adds	r5, r4, #6
   b8baa:	6148      	str	r0, [r1, #20]
   b8bac:	e7f3      	b.n	b8b96 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b8bb0 <_ZN6AB180510getRtcAsTmEP2tmRh>:
bool AB1805::getRtcAsTm(struct tm *timeptr, uint8_t &hundredths) {
   b8bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b8bb2:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr, uint8_t &hundredths) {
   b8bb4:	b089      	sub	sp, #36	; 0x24
   b8bb6:	460d      	mov	r5, r1
   b8bb8:	4616      	mov	r6, r2
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b8bba:	2110      	movs	r1, #16
   b8bbc:	461a      	mov	r2, r3
bool AB1805::getRtcAsTm(struct tm *timeptr, uint8_t &hundredths) {
   b8bbe:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b8bc0:	f7ff fda1 	bl	b8706 <_ZN6AB180510isBitClearEhhb>
   b8bc4:	b320      	cbz	r0, b8c10 <_ZN6AB180510getRtcAsTmEP2tmRh+0x60>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b8bc6:	2308      	movs	r3, #8
   b8bc8:	2701      	movs	r7, #1
   b8bca:	4620      	mov	r0, r4
   b8bcc:	9700      	str	r7, [sp, #0]
   b8bce:	eb0d 0203 	add.w	r2, sp, r3
   b8bd2:	2100      	movs	r1, #0
   b8bd4:	f7ff fc36 	bl	b8444 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b8bd8:	4604      	mov	r4, r0
   b8bda:	b1c8      	cbz	r0, b8c10 <_ZN6AB180510getRtcAsTmEP2tmRh+0x60>
            registersToTm(&array[1], timeptr, true);
   b8bdc:	463a      	mov	r2, r7
   b8bde:	4629      	mov	r1, r5
   b8be0:	f10d 0009 	add.w	r0, sp, #9
   b8be4:	f7ff ffbd 	bl	b8b62 <_ZN6AB180513registersToTmEPKhP2tmb>
            hundredths = bcdToValue(array[0]);
   b8be8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   b8bec:	f7ff ffb2 	bl	b8b54 <_ZN6AB180510bcdToValueEh>
   b8bf0:	7030      	strb	r0, [r6, #0]
            _log.info("getRtcAsTm %s.%d", tmToString(timeptr).c_str(), hundredths);
   b8bf2:	a804      	add	r0, sp, #16
   b8bf4:	f7ff ff96 	bl	b8b24 <_ZN6AB180510tmToStringEPK2tm>
   b8bf8:	4809      	ldr	r0, [pc, #36]	; (b8c20 <_ZN6AB180510getRtcAsTmEP2tmRh+0x70>)
   b8bfa:	7833      	ldrb	r3, [r6, #0]
   b8bfc:	9a04      	ldr	r2, [sp, #16]
   b8bfe:	4909      	ldr	r1, [pc, #36]	; (b8c24 <_ZN6AB180510getRtcAsTmEP2tmRh+0x74>)
   b8c00:	f7fb fa64 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b8c04:	a804      	add	r0, sp, #16
   b8c06:	f007 feab 	bl	c0960 <_ZN6StringD1Ev>
}
   b8c0a:	4620      	mov	r0, r4
   b8c0c:	b009      	add	sp, #36	; 0x24
   b8c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b8c10:	2224      	movs	r2, #36	; 0x24
   b8c12:	2100      	movs	r1, #0
   b8c14:	4628      	mov	r0, r5
   b8c16:	f00c fbfb 	bl	c5410 <memset>
   b8c1a:	2400      	movs	r4, #0
   b8c1c:	e7f5      	b.n	b8c0a <_ZN6AB180510getRtcAsTmEP2tmRh+0x5a>
   b8c1e:	bf00      	nop
   b8c20:	2003b43c 	.word	0x2003b43c
   b8c24:	000c7979 	.word	0x000c7979

000b8c28 <_ZN6AB180512getRtcAsTimeERxRh>:
bool AB1805::getRtcAsTime(time_t &time, uint8_t &hundrths) {
   b8c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8c2a:	b09d      	sub	sp, #116	; 0x74
   b8c2c:	460e      	mov	r6, r1
   b8c2e:	4615      	mov	r5, r2
    bool bResult = getRtcAsTm(&tmstruct1, _hundrths1);
   b8c30:	a901      	add	r1, sp, #4
   b8c32:	f10d 0201 	add.w	r2, sp, #1
bool AB1805::getRtcAsTime(time_t &time, uint8_t &hundrths) {
   b8c36:	4607      	mov	r7, r0
    bool bResult = getRtcAsTm(&tmstruct1, _hundrths1);
   b8c38:	f7ff ffba 	bl	b8bb0 <_ZN6AB180510getRtcAsTmEP2tmRh>
    if (_hundrths1 == 0){
   b8c3c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    bool bResult = getRtcAsTm(&tmstruct1, _hundrths1);
   b8c40:	4604      	mov	r4, r0
    if (_hundrths1 == 0){
   b8c42:	b98b      	cbnz	r3, b8c68 <_ZN6AB180512getRtcAsTimeERxRh+0x40>
        bResult = getRtcAsTm(&tmstruct2, _hundrths2);
   b8c44:	f10d 0202 	add.w	r2, sp, #2
   b8c48:	a90a      	add	r1, sp, #40	; 0x28
   b8c4a:	4638      	mov	r0, r7
   b8c4c:	f7ff ffb0 	bl	b8bb0 <_ZN6AB180510getRtcAsTmEP2tmRh>
   b8c50:	4604      	mov	r4, r0
        time = mktime(&tmstruct2);
   b8c52:	a80a      	add	r0, sp, #40	; 0x28
   b8c54:	f007 fc00 	bl	c0458 <mktime>
   b8c58:	e9c6 0100 	strd	r0, r1, [r6]
        hundrths = _hundrths2;
   b8c5c:	f89d 3002 	ldrb.w	r3, [sp, #2]
        hundrths = _hundrths1;
   b8c60:	702b      	strb	r3, [r5, #0]
}
   b8c62:	4620      	mov	r0, r4
   b8c64:	b01d      	add	sp, #116	; 0x74
   b8c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(_hundrths1 == 99){
   b8c68:	2b63      	cmp	r3, #99	; 0x63
   b8c6a:	d10a      	bne.n	b8c82 <_ZN6AB180512getRtcAsTimeERxRh+0x5a>
        bResult = getRtcAsTm(&tmstruct2, _hundrths2);
   b8c6c:	f10d 0202 	add.w	r2, sp, #2
   b8c70:	a90a      	add	r1, sp, #40	; 0x28
   b8c72:	4638      	mov	r0, r7
   b8c74:	f7ff ff9c 	bl	b8bb0 <_ZN6AB180510getRtcAsTmEP2tmRh>
        if(_hundrths2 == 99){
   b8c78:	f89d 3002 	ldrb.w	r3, [sp, #2]
   b8c7c:	2b63      	cmp	r3, #99	; 0x63
        bResult = getRtcAsTm(&tmstruct2, _hundrths2);
   b8c7e:	4604      	mov	r4, r0
        if(_hundrths2 == 99){
   b8c80:	d107      	bne.n	b8c92 <_ZN6AB180512getRtcAsTimeERxRh+0x6a>
        time = mktime(&tmstruct1);
   b8c82:	a801      	add	r0, sp, #4
   b8c84:	f007 fbe8 	bl	c0458 <mktime>
        hundrths = _hundrths1;
   b8c88:	f89d 3001 	ldrb.w	r3, [sp, #1]
        time = mktime(&tmstruct1);
   b8c8c:	e9c6 0100 	strd	r0, r1, [r6]
        hundrths = _hundrths1;
   b8c90:	e7e6      	b.n	b8c60 <_ZN6AB180512getRtcAsTimeERxRh+0x38>
            bResult = getRtcAsTm(&tmstruct3, _hundrths3);
   b8c92:	f10d 0203 	add.w	r2, sp, #3
   b8c96:	a913      	add	r1, sp, #76	; 0x4c
   b8c98:	4638      	mov	r0, r7
   b8c9a:	f7ff ff89 	bl	b8bb0 <_ZN6AB180510getRtcAsTmEP2tmRh>
   b8c9e:	4604      	mov	r4, r0
            time = mktime(&tmstruct3);
   b8ca0:	a813      	add	r0, sp, #76	; 0x4c
   b8ca2:	f007 fbd9 	bl	c0458 <mktime>
            hundrths = _hundrths3;
   b8ca6:	f89d 3003 	ldrb.w	r3, [sp, #3]
            time = mktime(&tmstruct3);
   b8caa:	e9c6 0100 	strd	r0, r1, [r6]
            hundrths = _hundrths3;
   b8cae:	e7d7      	b.n	b8c60 <_ZN6AB180512getRtcAsTimeERxRh+0x38>

000b8cb0 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b8cb0:	230a      	movs	r3, #10
   b8cb2:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b8cb6:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b8cba:	fb91 f2f3 	sdiv	r2, r1, r3
   b8cbe:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b8cc2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b8cc6:	b2c0      	uxtb	r0, r0
   b8cc8:	4770      	bx	lr

000b8cca <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b8cca:	b570      	push	{r4, r5, r6, lr}
   b8ccc:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b8cce:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b8cd0:	460c      	mov	r4, r1
   b8cd2:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b8cd4:	f7ff ffec 	bl	b8cb0 <_ZN6AB180510valueToBcdEi>
   b8cd8:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b8cda:	6868      	ldr	r0, [r5, #4]
   b8cdc:	f7ff ffe8 	bl	b8cb0 <_ZN6AB180510valueToBcdEi>
   b8ce0:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b8ce2:	68a8      	ldr	r0, [r5, #8]
   b8ce4:	f7ff ffe4 	bl	b8cb0 <_ZN6AB180510valueToBcdEi>
   b8ce8:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b8cea:	68e8      	ldr	r0, [r5, #12]
   b8cec:	f7ff ffe0 	bl	b8cb0 <_ZN6AB180510valueToBcdEi>
   b8cf0:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b8cf2:	6928      	ldr	r0, [r5, #16]
   b8cf4:	3001      	adds	r0, #1
   b8cf6:	f7ff ffdb 	bl	b8cb0 <_ZN6AB180510valueToBcdEi>
   b8cfa:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b8cfc:	b92e      	cbnz	r6, b8d0a <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b8cfe:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b8d00:	69a8      	ldr	r0, [r5, #24]
   b8d02:	f7ff ffd5 	bl	b8cb0 <_ZN6AB180510valueToBcdEi>
   b8d06:	7030      	strb	r0, [r6, #0]
}
   b8d08:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b8d0a:	696a      	ldr	r2, [r5, #20]
   b8d0c:	2364      	movs	r3, #100	; 0x64
   b8d0e:	fb92 f0f3 	sdiv	r0, r2, r3
   b8d12:	fb03 2010 	mls	r0, r3, r0, r2
   b8d16:	f7ff ffcb 	bl	b8cb0 <_ZN6AB180510valueToBcdEi>
   b8d1a:	1da6      	adds	r6, r4, #6
   b8d1c:	7160      	strb	r0, [r4, #5]
   b8d1e:	e7ef      	b.n	b8d00 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b8d20 <_ZN6AB180512setRtcFromTmEPK2tmhb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, uint8_t hundredths,  bool lock) {
   b8d20:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8d22:	b087      	sub	sp, #28
   b8d24:	4614      	mov	r4, r2
   b8d26:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s.%d", tmToString(timeptr).c_str(),hundredths);
   b8d28:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, uint8_t hundredths,  bool lock) {
   b8d2a:	461e      	mov	r6, r3
   b8d2c:	460f      	mov	r7, r1
    _log.info("setRtcAsTm %s.%d", tmToString(timeptr).c_str(),hundredths);
   b8d2e:	f7ff fef9 	bl	b8b24 <_ZN6AB180510tmToStringEPK2tm>
   b8d32:	4820      	ldr	r0, [pc, #128]	; (b8db4 <_ZN6AB180512setRtcFromTmEPK2tmhb+0x94>)
   b8d34:	9a02      	ldr	r2, [sp, #8]
   b8d36:	4920      	ldr	r1, [pc, #128]	; (b8db8 <_ZN6AB180512setRtcFromTmEPK2tmhb+0x98>)
   b8d38:	4623      	mov	r3, r4
   b8d3a:	f7fb f9c7 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b8d3e:	a802      	add	r0, sp, #8
   b8d40:	f007 fe0e 	bl	c0960 <_ZN6StringD1Ev>
    if (lock) {
   b8d44:	b116      	cbz	r6, b8d4c <_ZN6AB180512setRtcFromTmEPK2tmhb+0x2c>
        wire.lock();
   b8d46:	6868      	ldr	r0, [r5, #4]
   b8d48:	f00a f92c 	bl	c2fa4 <_ZN7TwoWire4lockEv>
    array[0] = valueToBcd(hundredths); // hundredths
   b8d4c:	4620      	mov	r0, r4
   b8d4e:	f7ff ffaf 	bl	b8cb0 <_ZN6AB180510valueToBcdEi>
    tmToRegisters(timeptr, &array[1], true);
   b8d52:	2201      	movs	r2, #1
    array[0] = valueToBcd(hundredths); // hundredths
   b8d54:	f88d 0008 	strb.w	r0, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b8d58:	f10d 0109 	add.w	r1, sp, #9
   b8d5c:	4638      	mov	r0, r7
   b8d5e:	f7ff ffb4 	bl	b8cca <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b8d62:	2301      	movs	r3, #1
   b8d64:	461a      	mov	r2, r3
   b8d66:	2110      	movs	r1, #16
   b8d68:	4628      	mov	r0, r5
   b8d6a:	f7ff fd4d 	bl	b8808 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b8d6e:	4604      	mov	r4, r0
   b8d70:	b1e8      	cbz	r0, b8dae <_ZN6AB180512setRtcFromTmEPK2tmhb+0x8e>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b8d72:	2100      	movs	r1, #0
   b8d74:	2308      	movs	r3, #8
   b8d76:	9100      	str	r1, [sp, #0]
   b8d78:	eb0d 0203 	add.w	r2, sp, r3
   b8d7c:	4628      	mov	r0, r5
   b8d7e:	f7ff fbf9 	bl	b8574 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b8d82:	4604      	mov	r4, r0
   b8d84:	b160      	cbz	r0, b8da0 <_ZN6AB180512setRtcFromTmEPK2tmhb+0x80>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b8d86:	2301      	movs	r3, #1
   b8d88:	461a      	mov	r2, r3
   b8d8a:	2110      	movs	r1, #16
   b8d8c:	4628      	mov	r0, r5
   b8d8e:	f7ff fcd8 	bl	b8742 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b8d92:	b116      	cbz	r6, b8d9a <_ZN6AB180512setRtcFromTmEPK2tmhb+0x7a>
        wire.unlock();
   b8d94:	6868      	ldr	r0, [r5, #4]
   b8d96:	f00a f90e 	bl	c2fb6 <_ZN7TwoWire6unlockEv>
}
   b8d9a:	4620      	mov	r0, r4
   b8d9c:	b007      	add	sp, #28
   b8d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b8da0:	f240 129b 	movw	r2, #411	; 0x19b
        _log.error(errorMsg, __LINE__);
   b8da4:	4905      	ldr	r1, [pc, #20]	; (b8dbc <_ZN6AB180512setRtcFromTmEPK2tmhb+0x9c>)
   b8da6:	4803      	ldr	r0, [pc, #12]	; (b8db4 <_ZN6AB180512setRtcFromTmEPK2tmhb+0x94>)
   b8da8:	f7ff fb1c 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
   b8dac:	e7f1      	b.n	b8d92 <_ZN6AB180512setRtcFromTmEPK2tmhb+0x72>
   b8dae:	f240 129f 	movw	r2, #415	; 0x19f
   b8db2:	e7f7      	b.n	b8da4 <_ZN6AB180512setRtcFromTmEPK2tmhb+0x84>
   b8db4:	2003b43c 	.word	0x2003b43c
   b8db8:	000c798a 	.word	0x000c798a
   b8dbc:	000c799b 	.word	0x000c799b

000b8dc0 <_ZN6AB180514setRtcFromTimeExhb>:
bool AB1805::setRtcFromTime(time_t time, uint8_t hundredths,  bool lock) {
   b8dc0:	b513      	push	{r0, r1, r4, lr}
   b8dc2:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b8dc4:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, uint8_t hundredths,  bool lock) {
   b8dc6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b8dca:	f00c fad3 	bl	c5374 <gmtime>
    return setRtcFromTm(tm, hundredths, lock);
   b8dce:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b8dd2:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b8dd6:	4601      	mov	r1, r0
    return setRtcFromTm(tm, hundredths, lock);
   b8dd8:	4620      	mov	r0, r4
   b8dda:	f7ff ffa1 	bl	b8d20 <_ZN6AB180512setRtcFromTmEPK2tmhb>
}
   b8dde:	b002      	add	sp, #8
   b8de0:	bd10      	pop	{r4, pc}
	...

000b8de4 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b8de4:	b570      	push	{r4, r5, r6, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b8de6:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b8de8:	b08c      	sub	sp, #48	; 0x30
   b8dea:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b8dec:	2d00      	cmp	r5, #0
   b8dee:	d145      	bne.n	b8e7c <_ZN6AB18054loopEv+0x98>
   b8df0:	f009 f950 	bl	c2094 <_ZN9TimeClass7isValidEv>
   b8df4:	2800      	cmp	r0, #0
   b8df6:	d041      	beq.n	b8e7c <_ZN6AB18054loopEv+0x98>
        tm = 0;
   b8df8:	2200      	movs	r2, #0
   b8dfa:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   b8dfc:	a908      	add	r1, sp, #32
   b8dfe:	4628      	mov	r0, r5
        tm = 0;
   b8e00:	e9cd 2308 	strd	r2, r3, [sp, #32]
        return spark_sync_time_last(nullptr, &tm);
   b8e04:	f007 fa98 	bl	c0338 <spark_sync_time_last>
   b8e08:	2800      	cmp	r0, #0
   b8e0a:	d037      	beq.n	b8e7c <_ZN6AB18054loopEv+0x98>
        timeSet = true;
   b8e0c:	2601      	movs	r6, #1
   b8e0e:	7626      	strb	r6, [r4, #24]
        time_t time = Time.now();   // Current System time after being set by the cloud
   b8e10:	f009 f95d 	bl	c20ce <_ZN9TimeClass3nowEv>
   b8e14:	17c3      	asrs	r3, r0, #31
   b8e16:	e9cd 0304 	strd	r0, r3, [sp, #16]
        getRtcAsTime(RTC_Time,hundredths);
   b8e1a:	f10d 020f 	add.w	r2, sp, #15
   b8e1e:	a906      	add	r1, sp, #24
   b8e20:	4620      	mov	r0, r4
   b8e22:	f7ff ff01 	bl	b8c28 <_ZN6AB180512getRtcAsTimeERxRh>
        int32_t deltaTime_sec = (int64_t)Time.now() - (int64_t)RTC_Time;
   b8e26:	f009 f952 	bl	c20ce <_ZN9TimeClass3nowEv>
   b8e2a:	9b06      	ldr	r3, [sp, #24]
   b8e2c:	1ac0      	subs	r0, r0, r3

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
   b8e2e:	2800      	cmp	r0, #0
   b8e30:	bfb8      	it	lt
   b8e32:	4240      	neglt	r0, r0
        if (abs(deltaTime_sec) > 10){
   b8e34:	280a      	cmp	r0, #10
   b8e36:	dd06      	ble.n	b8e46 <_ZN6AB18054loopEv+0x62>
            setRtcFromTime(time);
   b8e38:	e9cd 5600 	strd	r5, r6, [sp]
   b8e3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b8e40:	4620      	mov	r0, r4
   b8e42:	f7ff ffbd 	bl	b8dc0 <_ZN6AB180514setRtcFromTimeExhb>
        time = 0;
   b8e46:	2300      	movs	r3, #0
   b8e48:	2200      	movs	r2, #0
   b8e4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
        getRtcAsTime(time, hundredths);
   b8e4e:	a904      	add	r1, sp, #16
   b8e50:	f10d 020f 	add.w	r2, sp, #15
   b8e54:	4620      	mov	r0, r4
   b8e56:	f7ff fee7 	bl	b8c28 <_ZN6AB180512getRtcAsTimeERxRh>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b8e5a:	4b13      	ldr	r3, [pc, #76]	; (b8ea8 <_ZN6AB18054loopEv+0xc4>)
   b8e5c:	4913      	ldr	r1, [pc, #76]	; (b8eac <_ZN6AB18054loopEv+0xc8>)
   b8e5e:	681b      	ldr	r3, [r3, #0]
   b8e60:	9300      	str	r3, [sp, #0]
   b8e62:	a808      	add	r0, sp, #32
   b8e64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b8e68:	f009 f8d2 	bl	c2010 <_ZN9TimeClass6formatExPKc>
   b8e6c:	4810      	ldr	r0, [pc, #64]	; (b8eb0 <_ZN6AB18054loopEv+0xcc>)
   b8e6e:	9a08      	ldr	r2, [sp, #32]
   b8e70:	4910      	ldr	r1, [pc, #64]	; (b8eb4 <_ZN6AB18054loopEv+0xd0>)
   b8e72:	f7fb f92b 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b8e76:	a808      	add	r0, sp, #32
   b8e78:	f007 fd72 	bl	c0960 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b8e7c:	6963      	ldr	r3, [r4, #20]
   b8e7e:	b18b      	cbz	r3, b8ea4 <_ZN6AB18054loopEv+0xc0>
   b8e80:	f006 fec2 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b8e84:	6923      	ldr	r3, [r4, #16]
   b8e86:	1ac0      	subs	r0, r0, r3
   b8e88:	6963      	ldr	r3, [r4, #20]
   b8e8a:	4298      	cmp	r0, r3
   b8e8c:	d30a      	bcc.n	b8ea4 <_ZN6AB18054loopEv+0xc0>
   b8e8e:	f006 febb 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b8e92:	f04f 31ff 	mov.w	r1, #4294967295
            lastWatchdogMillis = millis();
   b8e96:	6120      	str	r0, [r4, #16]
            setWDT();
   b8e98:	4620      	mov	r0, r4
}
   b8e9a:	b00c      	add	sp, #48	; 0x30
   b8e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            setWDT();
   b8ea0:	f7ff bbb0 	b.w	b8604 <_ZN6AB18056setWDTEi>
}
   b8ea4:	b00c      	add	sp, #48	; 0x30
   b8ea6:	bd70      	pop	{r4, r5, r6, pc}
   b8ea8:	2003ace4 	.word	0x2003ace4
   b8eac:	2003e660 	.word	0x2003e660
   b8eb0:	2003b43c 	.word	0x2003b43c
   b8eb4:	000c79b6 	.word	0x000c79b6

000b8eb8 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b8eb8:	b530      	push	{r4, r5, lr}
   b8eba:	4604      	mov	r4, r0
   b8ebc:	b08d      	sub	sp, #52	; 0x34
    if (callBegin) {
   b8ebe:	b111      	cbz	r1, b8ec6 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b8ec0:	6840      	ldr	r0, [r0, #4]
   b8ec2:	f00a f81d 	bl	c2f00 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b8ec6:	4620      	mov	r0, r4
   b8ec8:	f7ff fb12 	bl	b84f0 <_ZN6AB180510detectChipEv>
   b8ecc:	ad08      	add	r5, sp, #32
   b8ece:	2800      	cmp	r0, #0
   b8ed0:	d039      	beq.n	b8f46 <_ZN6AB18055setupEb+0x8e>
        updateWakeReason();
   b8ed2:	4620      	mov	r0, r4
   b8ed4:	f7ff fc40 	bl	b8758 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b8ed8:	2301      	movs	r3, #1
   b8eda:	461a      	mov	r2, r3
   b8edc:	2110      	movs	r1, #16
   b8ede:	4620      	mov	r0, r4
   b8ee0:	f7ff fc11 	bl	b8706 <_ZN6AB180510isBitClearEhhb>
   b8ee4:	b1e8      	cbz	r0, b8f22 <_ZN6AB18055setupEb+0x6a>
   b8ee6:	f009 f8d5 	bl	c2094 <_ZN9TimeClass7isValidEv>
   b8eea:	b9d0      	cbnz	r0, b8f22 <_ZN6AB18055setupEb+0x6a>
            getRtcAsTime(time, hundredths);
   b8eec:	f10d 020f 	add.w	r2, sp, #15
   b8ef0:	a904      	add	r1, sp, #16
   b8ef2:	4620      	mov	r0, r4
   b8ef4:	f7ff fe98 	bl	b8c28 <_ZN6AB180512getRtcAsTimeERxRh>
            Time.setTime(time);
   b8ef8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8efc:	f008 ffce 	bl	c1e9c <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b8f00:	4b13      	ldr	r3, [pc, #76]	; (b8f50 <_ZN6AB18055setupEb+0x98>)
   b8f02:	4914      	ldr	r1, [pc, #80]	; (b8f54 <_ZN6AB18055setupEb+0x9c>)
   b8f04:	681b      	ldr	r3, [r3, #0]
   b8f06:	9300      	str	r3, [sp, #0]
   b8f08:	4628      	mov	r0, r5
   b8f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b8f0e:	f009 f87f 	bl	c2010 <_ZN9TimeClass6formatExPKc>
   b8f12:	4811      	ldr	r0, [pc, #68]	; (b8f58 <_ZN6AB18055setupEb+0xa0>)
   b8f14:	9a08      	ldr	r2, [sp, #32]
   b8f16:	4911      	ldr	r1, [pc, #68]	; (b8f5c <_ZN6AB18055setupEb+0xa4>)
   b8f18:	f7fb f8d8 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   b8f1c:	4628      	mov	r0, r5
   b8f1e:	f007 fd1f 	bl	c0960 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8f22:	4b0f      	ldr	r3, [pc, #60]	; (b8f60 <_ZN6AB18055setupEb+0xa8>)
   b8f24:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b8f26:	4b0f      	ldr	r3, [pc, #60]	; (b8f64 <_ZN6AB18055setupEb+0xac>)
   b8f28:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   b8f2a:	4b0f      	ldr	r3, [pc, #60]	; (b8f68 <_ZN6AB18055setupEb+0xb0>)
   b8f2c:	930a      	str	r3, [sp, #40]	; 0x28
    System.on(reset, systemEventStatic);
   b8f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b8f32:	2300      	movs	r3, #0
   b8f34:	a804      	add	r0, sp, #16
   b8f36:	9500      	str	r5, [sp, #0]
   b8f38:	f7fb fd54 	bl	b49e4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b8f3c:	4628      	mov	r0, r5
   b8f3e:	f7fb fa03 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
}
   b8f42:	b00d      	add	sp, #52	; 0x34
   b8f44:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b8f46:	4909      	ldr	r1, [pc, #36]	; (b8f6c <_ZN6AB18055setupEb+0xb4>)
   b8f48:	4803      	ldr	r0, [pc, #12]	; (b8f58 <_ZN6AB18055setupEb+0xa0>)
   b8f4a:	f7ff fa4b 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
   b8f4e:	e7e8      	b.n	b8f22 <_ZN6AB18055setupEb+0x6a>
   b8f50:	2003ace4 	.word	0x2003ace4
   b8f54:	2003e660 	.word	0x2003e660
   b8f58:	2003b43c 	.word	0x2003b43c
   b8f5c:	000c79cc 	.word	0x000c79cc
   b8f60:	000b8689 	.word	0x000b8689
   b8f64:	000b430b 	.word	0x000b430b
   b8f68:	000b42f7 	.word	0x000b42f7
   b8f6c:	000c79e9 	.word	0x000c79e9

000b8f70 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b8f70:	4b01      	ldr	r3, [pc, #4]	; (b8f78 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b8f72:	4a02      	ldr	r2, [pc, #8]	; (b8f7c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b8f74:	601a      	str	r2, [r3, #0]
}
   b8f76:	4770      	bx	lr
   b8f78:	2003b43c 	.word	0x2003b43c
   b8f7c:	000c7a01 	.word	0x000c7a01

000b8f80 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b8f80:	4770      	bx	lr

000b8f82 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b8f82:	b510      	push	{r4, lr}
}
   b8f84:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b8f86:	4604      	mov	r4, r0
}
   b8f88:	f7fb f889 	bl	b409e <_ZdlPvj>
   b8f8c:	4620      	mov	r0, r4
   b8f8e:	bd10      	pop	{r4, pc}

000b8f90 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b8f90:	6803      	ldr	r3, [r0, #0]
   b8f92:	b2c9      	uxtb	r1, r1
   b8f94:	689b      	ldr	r3, [r3, #8]
   b8f96:	4718      	bx	r3

000b8f98 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b8f98:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b8f9a:	4d03      	ldr	r5, [pc, #12]	; (b8fa8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b8f9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b8fa0:	e9c0 5100 	strd	r5, r1, [r0]
}
   b8fa4:	bd30      	pop	{r4, r5, pc}
   b8fa6:	bf00      	nop
   b8fa8:	000c7a2c 	.word	0x000c7a2c

000b8fac <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b8fac:	6840      	ldr	r0, [r0, #4]
   b8fae:	f009 bfa7 	b.w	c2f00 <_ZN7TwoWire5beginEv>

000b8fb2 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b8fb2:	b510      	push	{r4, lr}
   b8fb4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b8fb6:	6800      	ldr	r0, [r0, #0]
   b8fb8:	f009 fffd 	bl	c2fb6 <_ZN7TwoWire6unlockEv>
   b8fbc:	4620      	mov	r0, r4
   b8fbe:	bd10      	pop	{r4, pc}

000b8fc0 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b8fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8fc4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b8fc6:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8fc8:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b8fca:	460d      	mov	r5, r1
   b8fcc:	4616      	mov	r6, r2
   b8fce:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b8fd0:	f009 ffe8 	bl	c2fa4 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b8fd4:	b1a7      	cbz	r7, b9000 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b8fd6:	68e1      	ldr	r1, [r4, #12]
   b8fd8:	6860      	ldr	r0, [r4, #4]
   b8fda:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b8fde:	f009 ffc2 	bl	c2f66 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b8fe2:	0a29      	lsrs	r1, r5, #8
   b8fe4:	6860      	ldr	r0, [r4, #4]
   b8fe6:	f7ff ffd3 	bl	b8f90 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b8fea:	4629      	mov	r1, r5
   b8fec:	6860      	ldr	r0, [r4, #4]
   b8fee:	f7ff ffcf 	bl	b8f90 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b8ff2:	6860      	ldr	r0, [r4, #4]
   b8ff4:	2100      	movs	r1, #0
   b8ff6:	f009 ffd1 	bl	c2f9c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b8ffa:	b148      	cbz	r0, b9010 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b8ffc:	2400      	movs	r4, #0
   b8ffe:	e000      	b.n	b9002 <_ZN6MB85RC8readDataEjPhj+0x42>
   b9000:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9002:	a801      	add	r0, sp, #4
   b9004:	f7ff ffd5 	bl	b8fb2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b9008:	4620      	mov	r0, r4
   b900a:	b003      	add	sp, #12
   b900c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b9010:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b9012:	7b21      	ldrb	r1, [r4, #12]
   b9014:	6860      	ldr	r0, [r4, #4]
   b9016:	46b8      	mov	r8, r7
   b9018:	bf28      	it	cs
   b901a:	f04f 0820 	movcs.w	r8, #32
   b901e:	2301      	movs	r3, #1
   b9020:	4642      	mov	r2, r8
   b9022:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9026:	f009 ff88 	bl	c2f3a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b902a:	f00a fb8d 	bl	c3748 <_Z19__fetch_global_Wirev>
   b902e:	6803      	ldr	r3, [r0, #0]
   b9030:	691b      	ldr	r3, [r3, #16]
   b9032:	4798      	blx	r3
   b9034:	4540      	cmp	r0, r8
   b9036:	dbe1      	blt.n	b8ffc <_ZN6MB85RC8readDataEjPhj+0x3c>
   b9038:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b903c:	f00a fb84 	bl	c3748 <_Z19__fetch_global_Wirev>
   b9040:	6803      	ldr	r3, [r0, #0]
   b9042:	695b      	ldr	r3, [r3, #20]
   b9044:	4798      	blx	r3
   b9046:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b904a:	454e      	cmp	r6, r9
   b904c:	d1f6      	bne.n	b903c <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b904e:	4445      	add	r5, r8
				dataLen--;
   b9050:	eba7 0708 	sub.w	r7, r7, r8
   b9054:	e7be      	b.n	b8fd4 <_ZN6MB85RC8readDataEjPhj+0x14>

000b9056 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9056:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b905a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b905c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b905e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9060:	460e      	mov	r6, r1
   b9062:	4690      	mov	r8, r2
   b9064:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b9066:	f009 ff9d 	bl	c2fa4 <_ZN7TwoWire4lockEv>
   b906a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b906e:	f1b9 0f00 	cmp.w	r9, #0
   b9072:	d02a      	beq.n	b90ca <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b9074:	b34d      	cbz	r5, b90ca <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9076:	68e1      	ldr	r1, [r4, #12]
   b9078:	6860      	ldr	r0, [r4, #4]
   b907a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b907e:	f009 ff72 	bl	c2f66 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9082:	0a31      	lsrs	r1, r6, #8
   b9084:	6860      	ldr	r0, [r4, #4]
   b9086:	f7ff ff83 	bl	b8f90 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b908a:	6860      	ldr	r0, [r4, #4]
   b908c:	4631      	mov	r1, r6
   b908e:	f7ff ff7f 	bl	b8f90 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9092:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b9096:	4647      	mov	r7, r8
   b9098:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b909c:	6860      	ldr	r0, [r4, #4]
   b909e:	f817 1b01 	ldrb.w	r1, [r7], #1
   b90a2:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b90a4:	3d01      	subs	r5, #1
				wire.write(*data);
   b90a6:	689b      	ldr	r3, [r3, #8]
   b90a8:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b90aa:	4555      	cmp	r5, sl
   b90ac:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b90b0:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b90b2:	d001      	beq.n	b90b8 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b90b4:	2d00      	cmp	r5, #0
   b90b6:	d1f1      	bne.n	b909c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b90b8:	6860      	ldr	r0, [r4, #4]
   b90ba:	2101      	movs	r1, #1
   b90bc:	f009 ff6e 	bl	c2f9c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b90c0:	2800      	cmp	r0, #0
   b90c2:	d0d7      	beq.n	b9074 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b90c4:	f04f 0900 	mov.w	r9, #0
   b90c8:	e7d1      	b.n	b906e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b90ca:	a801      	add	r0, sp, #4
   b90cc:	f7ff ff71 	bl	b8fb2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b90d0:	4648      	mov	r0, r9
   b90d2:	b003      	add	sp, #12
   b90d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b90d8 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b90d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b90dc:	b08b      	sub	sp, #44	; 0x2c
   b90de:	460e      	mov	r6, r1
   b90e0:	4615      	mov	r5, r2
   b90e2:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b90e4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b90e6:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b90e8:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b90ea:	f009 ff5b 	bl	c2fa4 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b90ee:	42ae      	cmp	r6, r5
   b90f0:	d229      	bcs.n	b9146 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b90f2:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b90f4:	4425      	add	r5, r4
			while(numBytes > 0) {
   b90f6:	b18c      	cbz	r4, b911c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b90f8:	2c1e      	cmp	r4, #30
   b90fa:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b90fc:	f8d8 3000 	ldr.w	r3, [r8]
   b9100:	bf28      	it	cs
   b9102:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b9104:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b9106:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b910a:	aa02      	add	r2, sp, #8
   b910c:	463b      	mov	r3, r7
   b910e:	4631      	mov	r1, r6
   b9110:	4640      	mov	r0, r8
				framAddrTo -= count;
   b9112:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b9114:	47c8      	blx	r9
				if (!result) {
   b9116:	b948      	cbnz	r0, b912c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9118:	2400      	movs	r4, #0
   b911a:	e000      	b.n	b911e <_ZN6MB85RC8moveDataEjjj+0x46>
   b911c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b911e:	a801      	add	r0, sp, #4
   b9120:	f7ff ff47 	bl	b8fb2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b9124:	4620      	mov	r0, r4
   b9126:	b00b      	add	sp, #44	; 0x2c
   b9128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b912c:	f8d8 3000 	ldr.w	r3, [r8]
   b9130:	aa02      	add	r2, sp, #8
   b9132:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b9136:	4629      	mov	r1, r5
   b9138:	463b      	mov	r3, r7
   b913a:	4640      	mov	r0, r8
   b913c:	47c8      	blx	r9
				if (!result) {
   b913e:	2800      	cmp	r0, #0
   b9140:	d0ea      	beq.n	b9118 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b9142:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b9144:	e7d7      	b.n	b90f6 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b9146:	d9e9      	bls.n	b911c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b9148:	2c00      	cmp	r4, #0
   b914a:	d0e7      	beq.n	b911c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b914c:	f8d8 3000 	ldr.w	r3, [r8]
   b9150:	2c1e      	cmp	r4, #30
   b9152:	4627      	mov	r7, r4
   b9154:	bf28      	it	cs
   b9156:	271e      	movcs	r7, #30
   b9158:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b915c:	aa02      	add	r2, sp, #8
   b915e:	463b      	mov	r3, r7
   b9160:	4631      	mov	r1, r6
   b9162:	4640      	mov	r0, r8
   b9164:	47c8      	blx	r9
				if (!result) {
   b9166:	2800      	cmp	r0, #0
   b9168:	d0d6      	beq.n	b9118 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b916a:	f8d8 3000 	ldr.w	r3, [r8]
   b916e:	aa02      	add	r2, sp, #8
   b9170:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b9174:	4629      	mov	r1, r5
   b9176:	463b      	mov	r3, r7
   b9178:	4640      	mov	r0, r8
   b917a:	47c8      	blx	r9
				if (!result) {
   b917c:	2800      	cmp	r0, #0
   b917e:	d0cb      	beq.n	b9118 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b9180:	443e      	add	r6, r7
				framAddrTo += count;
   b9182:	443d      	add	r5, r7
				numBytes -= count;
   b9184:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b9186:	e7df      	b.n	b9148 <_ZN6MB85RC8moveDataEjjj+0x70>

000b9188 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b9188:	6803      	ldr	r3, [r0, #0]
   b918a:	685b      	ldr	r3, [r3, #4]
   b918c:	4718      	bx	r3

000b918e <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b918e:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b9190:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b9192:	4604      	mov	r4, r0
    if (lastUpdate) {
   b9194:	b133      	cbz	r3, b91a4 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b9196:	b131      	cbz	r1, b91a6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b9198:	6823      	ldr	r3, [r4, #0]
   b919a:	4620      	mov	r0, r4
   b919c:	689b      	ldr	r3, [r3, #8]
   b919e:	4798      	blx	r3
            lastUpdate = 0;
   b91a0:	2300      	movs	r3, #0
   b91a2:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b91a4:	bd10      	pop	{r4, pc}
   b91a6:	f006 fd2f 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b91aa:	69a3      	ldr	r3, [r4, #24]
   b91ac:	1ac0      	subs	r0, r0, r3
   b91ae:	69e3      	ldr	r3, [r4, #28]
   b91b0:	4298      	cmp	r0, r3
   b91b2:	d2f1      	bcs.n	b9198 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b91b4:	e7f6      	b.n	b91a4 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b91b6 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b91b6:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b91b8:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b91ba:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b91bc:	b11b      	cbz	r3, b91c6 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b91be:	f006 fd23 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b91c2:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b91c4:	bd10      	pop	{r4, pc}
        save();
   b91c6:	6803      	ldr	r3, [r0, #0]
}
   b91c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b91cc:	689b      	ldr	r3, [r3, #8]
   b91ce:	4718      	bx	r3

000b91d0 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
   b91d0:	f006 be02 	b.w	bfdd8 <os_mutex_recursive_unlock>

000b91d4 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   b91d4:	b507      	push	{r0, r1, r2, lr}
   b91d6:	4613      	mov	r3, r2
    if (data) {
   b91d8:	b139      	cbz	r1, b91ea <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   b91da:	2200      	movs	r2, #0
   b91dc:	e9cd 2200 	strd	r2, r2, [sp]
   b91e0:	460a      	mov	r2, r1
   b91e2:	6801      	ldr	r1, [r0, #0]
   b91e4:	201e      	movs	r0, #30
   b91e6:	f006 ff7f 	bl	c00e8 <log_dump>
}
   b91ea:	b003      	add	sp, #12
   b91ec:	f85d fb04 	ldr.w	pc, [sp], #4

000b91f0 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
    savedDataHeader->version = savedDataVersion;
    savedDataHeader->size = (uint16_t) savedDataSize;
    savedDataHeader->hash = getHash();
}

void StorageHelperRK::PersistentDataBase::save() {
   b91f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (logData) {
   b91f2:	f890 3020 	ldrb.w	r3, [r0, #32]
void StorageHelperRK::PersistentDataBase::save() {
   b91f6:	4604      	mov	r4, r0
    if (logData) {
   b91f8:	b19b      	cbz	r3, b9222 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x32>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   b91fa:	6883      	ldr	r3, [r0, #8]
   b91fc:	4d0a      	ldr	r5, [pc, #40]	; (b9228 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x38>)
   b91fe:	88da      	ldrh	r2, [r3, #6]
   b9200:	490a      	ldr	r1, [pc, #40]	; (b922c <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3c>)
   b9202:	4628      	mov	r0, r5
   b9204:	f7fa ff62 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   b9208:	68a1      	ldr	r1, [r4, #8]
   b920a:	4628      	mov	r0, r5
   b920c:	88ca      	ldrh	r2, [r1, #6]
   b920e:	f7ff ffe1 	bl	b91d4 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   b9212:	2300      	movs	r3, #0
   b9214:	9300      	str	r3, [sp, #0]
   b9216:	4a06      	ldr	r2, [pc, #24]	; (b9230 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   b9218:	6829      	ldr	r1, [r5, #0]
   b921a:	2301      	movs	r3, #1
   b921c:	201e      	movs	r0, #30
   b921e:	f006 ff5b 	bl	c00d8 <log_write>
        Log.print("\n");
    }
}
   b9222:	b003      	add	sp, #12
   b9224:	bd30      	pop	{r4, r5, pc}
   b9226:	bf00      	nop
   b9228:	2003e634 	.word	0x2003e634
   b922c:	000c7a40 	.word	0x000c7a40
   b9230:	000c9297 	.word	0x000c9297

000b9234 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b9234:	b510      	push	{r4, lr}
   b9236:	4604      	mov	r4, r0
   b9238:	3004      	adds	r0, #4
   b923a:	f7fe f9a1 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b923e:	6823      	ldr	r3, [r4, #0]
   b9240:	68e1      	ldr	r1, [r4, #12]
   b9242:	695b      	ldr	r3, [r3, #20]
   b9244:	4620      	mov	r0, r4
   b9246:	4798      	blx	r3
   b9248:	b918      	cbnz	r0, b9252 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b924a:	6823      	ldr	r3, [r4, #0]
   b924c:	4620      	mov	r0, r4
   b924e:	699b      	ldr	r3, [r3, #24]
   b9250:	4798      	blx	r3
      { _M_device.unlock(); }
   b9252:	6860      	ldr	r0, [r4, #4]
   b9254:	f7ff ffbc 	bl	b91d0 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b9258:	2001      	movs	r0, #1
   b925a:	bd10      	pop	{r4, pc}

000b925c <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:
bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   b925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b925e:	4605      	mov	r5, r0
      { _M_device.lock(); }
   b9260:	3004      	adds	r0, #4
   b9262:	4614      	mov	r4, r2
   b9264:	460e      	mov	r6, r1
   b9266:	461f      	mov	r7, r3
   b9268:	f7fe f98a 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1))) {
   b926c:	68ea      	ldr	r2, [r5, #12]
   b926e:	f1c4 0401 	rsb	r4, r4, #1
   b9272:	4414      	add	r4, r2
   b9274:	42b4      	cmp	r4, r6
   b9276:	d30a      	bcc.n	b928e <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   b9278:	68a9      	ldr	r1, [r5, #8]
            value = p; // copies string
   b927a:	4638      	mov	r0, r7
   b927c:	4431      	add	r1, r6
   b927e:	f007 fc19 	bl	c0ab4 <_ZN6StringaSEPKc>
            result = true;
   b9282:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   b9284:	6868      	ldr	r0, [r5, #4]
   b9286:	f7ff ffa3 	bl	b91d0 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b928a:	4620      	mov	r0, r4
   b928c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   b928e:	2400      	movs	r4, #0
   b9290:	e7f8      	b.n	b9284 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>
	...

000b9294 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b9294:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9296:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b929a:	4f18      	ldr	r7, [pc, #96]	; (b92fc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b929c:	4e18      	ldr	r6, [pc, #96]	; (b9300 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b929e:	4d19      	ldr	r5, [pc, #100]	; (b9304 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b92a0:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b92a2:	42a0      	cmp	r0, r4
   b92a4:	d00c      	beq.n	b92c0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b92a6:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b92aa:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b92ac:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b92b0:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b92b2:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b92b4:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b92b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b92bc:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b92be:	e7f0      	b.n	b92a2 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b92c0:	f001 0403 	and.w	r4, r1, #3
   b92c4:	4404      	add	r4, r0
    k = 0;
   b92c6:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b92c8:	42a0      	cmp	r0, r4
   b92ca:	d004      	beq.n	b92d6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b92cc:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b92d0:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b92d4:	e7f8      	b.n	b92c8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b92d6:	4809      	ldr	r0, [pc, #36]	; (b92fc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b92d8:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b92da:	4809      	ldr	r0, [pc, #36]	; (b9300 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b92dc:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b92e0:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b92e2:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b92e4:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b92e6:	4b08      	ldr	r3, [pc, #32]	; (b9308 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b92e8:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b92ec:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b92ee:	4b07      	ldr	r3, [pc, #28]	; (b930c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b92f0:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b92f4:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b92f6:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b92fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b92fc:	cc9e2d51 	.word	0xcc9e2d51
   b9300:	1b873593 	.word	0x1b873593
   b9304:	e6546b64 	.word	0xe6546b64
   b9308:	85ebca6b 	.word	0x85ebca6b
   b930c:	c2b2ae35 	.word	0xc2b2ae35

000b9310 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b9310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9312:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b9314:	3004      	adds	r0, #4
   b9316:	f7fe f933 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b931a:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b931c:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b931e:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b9320:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b9322:	68a6      	ldr	r6, [r4, #8]
   b9324:	4a05      	ldr	r2, [pc, #20]	; (b933c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b9326:	88f1      	ldrh	r1, [r6, #6]
   b9328:	4630      	mov	r0, r6
   b932a:	f7ff ffb3 	bl	b9294 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b932e:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b9330:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b9332:	6860      	ldr	r0, [r4, #4]
   b9334:	f7ff ff4c 	bl	b91d0 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b9338:	4628      	mov	r0, r5
   b933a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b933c:	851c2a3f 	.word	0x851c2a3f

000b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   b9340:	b570      	push	{r4, r5, r6, lr}
   b9342:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b9344:	6885      	ldr	r5, [r0, #8]
   b9346:	f7ff ffe3 	bl	b9310 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b934a:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   b934c:	6823      	ldr	r3, [r4, #0]
   b934e:	4620      	mov	r0, r4
   b9350:	691b      	ldr	r3, [r3, #16]
}
   b9352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   b9356:	4718      	bx	r3

000b9358 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   b9358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b935c:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b935e:	3004      	adds	r0, #4
   b9360:	4690      	mov	r8, r2
   b9362:	460d      	mov	r5, r1
   b9364:	461f      	mov	r7, r3
   b9366:	f7fe f90b 	bl	b7580 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   b936a:	68e2      	ldr	r2, [r4, #12]
   b936c:	f1c8 0301 	rsb	r3, r8, #1
   b9370:	4413      	add	r3, r2
   b9372:	42ab      	cmp	r3, r5
   b9374:	d319      	bcc.n	b93aa <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   b9376:	4638      	mov	r0, r7
   b9378:	f00c f915 	bl	c55a6 <strlen>
   b937c:	4540      	cmp	r0, r8
   b937e:	d214      	bcs.n	b93aa <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   b9380:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   b9382:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   b9384:	4629      	mov	r1, r5
   b9386:	4638      	mov	r0, r7
   b9388:	f00c f8dd 	bl	c5546 <strcmp>
   b938c:	b158      	cbz	r0, b93a6 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   b938e:	4642      	mov	r2, r8
   b9390:	2100      	movs	r1, #0
   b9392:	4628      	mov	r0, r5
   b9394:	f00c f83c 	bl	c5410 <memset>
                strcpy(p, value);
   b9398:	4639      	mov	r1, r7
   b939a:	4628      	mov	r0, r5
   b939c:	f00c f8dd 	bl	c555a <strcpy>
                updateHash();
   b93a0:	4620      	mov	r0, r4
   b93a2:	f7ff ffcd 	bl	b9340 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   b93a6:	2501      	movs	r5, #1
   b93a8:	e000      	b.n	b93ac <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   b93aa:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   b93ac:	6860      	ldr	r0, [r4, #4]
   b93ae:	f7ff ff0f 	bl	b91d0 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b93b2:	4628      	mov	r0, r5
   b93b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b93b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b93b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b93ba:	4604      	mov	r4, r0
   b93bc:	460d      	mov	r5, r1
    uint32_t hash = getHash();
   b93be:	f7ff ffa7 	bl	b9310 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (logData) {
   b93c2:	f894 3020 	ldrb.w	r3, [r4, #32]
    uint32_t hash = getHash();
   b93c6:	4606      	mov	r6, r0
    if (logData) {
   b93c8:	b193      	cbz	r3, b93f0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        Log.info("validating data size=%d", (int)dataSize);
   b93ca:	4f29      	ldr	r7, [pc, #164]	; (b9470 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b93cc:	4929      	ldr	r1, [pc, #164]	; (b9474 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xbc>)
   b93ce:	462a      	mov	r2, r5
   b93d0:	4638      	mov	r0, r7
   b93d2:	f7fa fe7b 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   b93d6:	68a1      	ldr	r1, [r4, #8]
   b93d8:	462a      	mov	r2, r5
   b93da:	4638      	mov	r0, r7
   b93dc:	f7ff fefa 	bl	b91d4 <_ZNK5spark6Logger4dumpEPKvj>
   b93e0:	2300      	movs	r3, #0
   b93e2:	9300      	str	r3, [sp, #0]
   b93e4:	4a24      	ldr	r2, [pc, #144]	; (b9478 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc0>)
   b93e6:	6839      	ldr	r1, [r7, #0]
   b93e8:	2301      	movs	r3, #1
   b93ea:	201e      	movs	r0, #30
   b93ec:	f006 fe74 	bl	c00d8 <log_write>
    if (dataSize >= 12 && 
   b93f0:	2d0b      	cmp	r5, #11
   b93f2:	d923      	bls.n	b943c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x84>
        savedDataHeader->magic == savedDataMagic && 
   b93f4:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b93f6:	6922      	ldr	r2, [r4, #16]
   b93f8:	6819      	ldr	r1, [r3, #0]
   b93fa:	4291      	cmp	r1, r2
   b93fc:	d11f      	bne.n	b943e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->magic == savedDataMagic && 
   b93fe:	8899      	ldrh	r1, [r3, #4]
   b9400:	8aa2      	ldrh	r2, [r4, #20]
   b9402:	4291      	cmp	r1, r2
   b9404:	d11b      	bne.n	b943e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->version == savedDataVersion &&
   b9406:	88d9      	ldrh	r1, [r3, #6]
   b9408:	b2aa      	uxth	r2, r5
   b940a:	4291      	cmp	r1, r2
   b940c:	d817      	bhi.n	b943e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b940e:	689a      	ldr	r2, [r3, #8]
   b9410:	42b2      	cmp	r2, r6
   b9412:	d114      	bne.n	b943e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        if ((size_t)dataSize < savedDataSize) {
   b9414:	68e2      	ldr	r2, [r4, #12]
   b9416:	42aa      	cmp	r2, r5
   b9418:	d905      	bls.n	b9426 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x6e>
                p[ii] = 0;
   b941a:	2100      	movs	r1, #0
   b941c:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b941e:	68e2      	ldr	r2, [r4, #12]
   b9420:	3501      	adds	r5, #1
   b9422:	42aa      	cmp	r2, r5
   b9424:	d8fa      	bhi.n	b941c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x64>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b9426:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b942a:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b942c:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b942e:	68a5      	ldr	r5, [r4, #8]
   b9430:	f7ff ff6e 	bl	b9310 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b9434:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b9436:	2001      	movs	r0, #1
}
   b9438:	b003      	add	sp, #12
   b943a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b943c:	b19d      	cbz	r5, b9466 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xae>
   b943e:	68a1      	ldr	r1, [r4, #8]
   b9440:	680a      	ldr	r2, [r1, #0]
   b9442:	b192      	cbz	r2, b946a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb2>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b9444:	6888      	ldr	r0, [r1, #8]
   b9446:	888b      	ldrh	r3, [r1, #4]
   b9448:	9001      	str	r0, [sp, #4]
   b944a:	88c9      	ldrh	r1, [r1, #6]
   b944c:	4808      	ldr	r0, [pc, #32]	; (b9470 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b944e:	9100      	str	r1, [sp, #0]
   b9450:	490a      	ldr	r1, [pc, #40]	; (b947c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b9452:	f7fe ffd5 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b9456:	e9cd 5600 	strd	r5, r6, [sp]
   b945a:	8aa3      	ldrh	r3, [r4, #20]
   b945c:	6922      	ldr	r2, [r4, #16]
   b945e:	4908      	ldr	r1, [pc, #32]	; (b9480 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   b9460:	4803      	ldr	r0, [pc, #12]	; (b9470 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b9462:	f7fe ffcd 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
   b9466:	2000      	movs	r0, #0
   b9468:	e7e6      	b.n	b9438 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   b946a:	4610      	mov	r0, r2
   b946c:	e7e4      	b.n	b9438 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   b946e:	bf00      	nop
   b9470:	2003e634 	.word	0x2003e634
   b9474:	000c7a54 	.word	0x000c7a54
   b9478:	000c9297 	.word	0x000c9297
   b947c:	000c7a6c 	.word	0x000c7a6c
   b9480:	000c7a9d 	.word	0x000c7a9d

000b9484 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b9484:	b538      	push	{r3, r4, r5, lr}
   b9486:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b9488:	68c2      	ldr	r2, [r0, #12]
   b948a:	6880      	ldr	r0, [r0, #8]
   b948c:	2100      	movs	r1, #0
   b948e:	f00b ffbf 	bl	c5410 <memset>
    savedDataHeader->magic = savedDataMagic;
   b9492:	68a3      	ldr	r3, [r4, #8]
   b9494:	6922      	ldr	r2, [r4, #16]
   b9496:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b9498:	68a3      	ldr	r3, [r4, #8]
   b949a:	8aa2      	ldrh	r2, [r4, #20]
   b949c:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b949e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b94a2:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b94a4:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b94a6:	68a5      	ldr	r5, [r4, #8]
   b94a8:	f7ff ff32 	bl	b9310 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b94ac:	60a8      	str	r0, [r5, #8]
}
   b94ae:	bd38      	pop	{r3, r4, r5, pc}

000b94b0 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b94b0:	b510      	push	{r4, lr}
   b94b2:	4b05      	ldr	r3, [pc, #20]	; (b94c8 <_ZN10JsonBufferD1Ev+0x18>)
   b94b4:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b94b6:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b94b8:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b94ba:	b91b      	cbnz	r3, b94c4 <_ZN10JsonBufferD1Ev+0x14>
   b94bc:	6840      	ldr	r0, [r0, #4]
   b94be:	b108      	cbz	r0, b94c4 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b94c0:	f006 ff5a 	bl	c0378 <free>
	}
}
   b94c4:	4620      	mov	r0, r4
   b94c6:	bd10      	pop	{r4, pc}
   b94c8:	000c7b04 	.word	0x000c7b04

000b94cc <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b94cc:	b510      	push	{r4, lr}
   b94ce:	4604      	mov	r4, r0
}
   b94d0:	f7ff ffee 	bl	b94b0 <_ZN10JsonBufferD1Ev>
   b94d4:	4620      	mov	r0, r4
   b94d6:	2114      	movs	r1, #20
   b94d8:	f7fa fde1 	bl	b409e <_ZdlPvj>
   b94dc:	4620      	mov	r0, r4
   b94de:	bd10      	pop	{r4, pc}

000b94e0 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b94e0:	b510      	push	{r4, lr}
   b94e2:	4b03      	ldr	r3, [pc, #12]	; (b94f0 <_ZN10JsonWriterD1Ev+0x10>)
   b94e4:	6003      	str	r3, [r0, #0]
   b94e6:	4604      	mov	r4, r0
   b94e8:	f7ff ffe2 	bl	b94b0 <_ZN10JsonBufferD1Ev>

}
   b94ec:	4620      	mov	r0, r4
   b94ee:	bd10      	pop	{r4, pc}
   b94f0:	000c7b24 	.word	0x000c7b24

000b94f4 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b94f4:	b510      	push	{r4, lr}
   b94f6:	4604      	mov	r4, r0
}
   b94f8:	f7ff fff2 	bl	b94e0 <_ZN10JsonWriterD1Ev>
   b94fc:	4620      	mov	r0, r4
   b94fe:	2130      	movs	r1, #48	; 0x30
   b9500:	f7fa fdcd 	bl	b409e <_ZdlPvj>
   b9504:	4620      	mov	r0, r4
   b9506:	bd10      	pop	{r4, pc}

000b9508 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b9508:	b510      	push	{r4, lr}
   b950a:	4b03      	ldr	r3, [pc, #12]	; (b9518 <_ZN12JsonModifierD1Ev+0x10>)
   b950c:	6003      	str	r3, [r0, #0]
   b950e:	4604      	mov	r4, r0
   b9510:	f7ff ffe6 	bl	b94e0 <_ZN10JsonWriterD1Ev>

}
   b9514:	4620      	mov	r0, r4
   b9516:	bd10      	pop	{r4, pc}
   b9518:	000c7b34 	.word	0x000c7b34

000b951c <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b951c:	b510      	push	{r4, lr}
   b951e:	4604      	mov	r4, r0
}
   b9520:	f7ff fff2 	bl	b9508 <_ZN12JsonModifierD1Ev>
   b9524:	4620      	mov	r0, r4
   b9526:	2140      	movs	r1, #64	; 0x40
   b9528:	f7fa fdb9 	bl	b409e <_ZdlPvj>
   b952c:	4620      	mov	r0, r4
   b952e:	bd10      	pop	{r4, pc}

000b9530 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b9530:	b510      	push	{r4, lr}
   b9532:	4b07      	ldr	r3, [pc, #28]	; (b9550 <_ZN10JsonParserD1Ev+0x20>)
   b9534:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b9536:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b9538:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b953a:	b91b      	cbnz	r3, b9544 <_ZN10JsonParserD1Ev+0x14>
   b953c:	6940      	ldr	r0, [r0, #20]
   b953e:	b108      	cbz	r0, b9544 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b9540:	f006 ff1a 	bl	c0378 <free>
JsonParser::~JsonParser() {
   b9544:	4620      	mov	r0, r4
   b9546:	f7ff ffb3 	bl	b94b0 <_ZN10JsonBufferD1Ev>
}
   b954a:	4620      	mov	r0, r4
   b954c:	bd10      	pop	{r4, pc}
   b954e:	bf00      	nop
   b9550:	000c7b14 	.word	0x000c7b14

000b9554 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b9554:	b510      	push	{r4, lr}
   b9556:	4604      	mov	r4, r0
}
   b9558:	f7ff ffea 	bl	b9530 <_ZN10JsonParserD1Ev>
   b955c:	4620      	mov	r0, r4
   b955e:	212c      	movs	r1, #44	; 0x2c
   b9560:	f7fa fd9d 	bl	b409e <_ZdlPvj>
   b9564:	4620      	mov	r0, r4
   b9566:	bd10      	pop	{r4, pc}

000b9568 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b9568:	4a03      	ldr	r2, [pc, #12]	; (b9578 <_ZN10JsonBufferC1Ev+0x10>)
   b956a:	6002      	str	r2, [r0, #0]
   b956c:	2200      	movs	r2, #0
   b956e:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b9572:	60c2      	str	r2, [r0, #12]
   b9574:	7402      	strb	r2, [r0, #16]
}
   b9576:	4770      	bx	lr
   b9578:	000c7b04 	.word	0x000c7b04

000b957c <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b957c:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b957e:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b9580:	4604      	mov	r4, r0
   b9582:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b9584:	b10b      	cbz	r3, b958a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b9586:	2000      	movs	r0, #0
}
   b9588:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b958a:	6840      	ldr	r0, [r0, #4]
   b958c:	b138      	cbz	r0, b959e <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b958e:	f006 fefb 	bl	c0388 <realloc>
		if (newBuffer) {
   b9592:	2800      	cmp	r0, #0
   b9594:	d0f7      	beq.n	b9586 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b9596:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b959a:	2001      	movs	r0, #1
   b959c:	e7f4      	b.n	b9588 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b959e:	4608      	mov	r0, r1
   b95a0:	f006 fee2 	bl	c0368 <malloc>
   b95a4:	e7f5      	b.n	b9592 <_ZN10JsonBuffer8allocateEj+0x16>

000b95a6 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b95a6:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b95a8:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b95aa:	460e      	mov	r6, r1
   b95ac:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b95ae:	18d1      	adds	r1, r2, r3
   b95b0:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b95b2:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b95b4:	b172      	cbz	r2, b95d4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b95b6:	6882      	ldr	r2, [r0, #8]
   b95b8:	428a      	cmp	r2, r1
   b95ba:	d30b      	bcc.n	b95d4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b95bc:	6860      	ldr	r0, [r4, #4]
   b95be:	68e3      	ldr	r3, [r4, #12]
   b95c0:	462a      	mov	r2, r5
   b95c2:	4631      	mov	r1, r6
   b95c4:	4418      	add	r0, r3
   b95c6:	f00b fefb 	bl	c53c0 <memcpy>
	offset += dataLen;
   b95ca:	68e2      	ldr	r2, [r4, #12]
   b95cc:	442a      	add	r2, r5
   b95ce:	60e2      	str	r2, [r4, #12]
	return true;
   b95d0:	2001      	movs	r0, #1
}
   b95d2:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b95d4:	4620      	mov	r0, r4
   b95d6:	f7ff ffd1 	bl	b957c <_ZN10JsonBuffer8allocateEj>
   b95da:	2800      	cmp	r0, #0
   b95dc:	d1ee      	bne.n	b95bc <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b95de:	e7f8      	b.n	b95d2 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b95e0 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b95e0:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b95e2:	2100      	movs	r1, #0
   b95e4:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b95e6:	b123      	cbz	r3, b95f2 <_ZN10JsonBuffer5clearEv+0x12>
   b95e8:	6882      	ldr	r2, [r0, #8]
   b95ea:	b112      	cbz	r2, b95f2 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b95ec:	4618      	mov	r0, r3
   b95ee:	f00b bf0f 	b.w	c5410 <memset>
}
   b95f2:	4770      	bx	lr

000b95f4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b95f4:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b95f6:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b95fa:	2200      	movs	r2, #0
   b95fc:	60c2      	str	r2, [r0, #12]
   b95fe:	2201      	movs	r2, #1
   b9600:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b9602:	6143      	str	r3, [r0, #20]
   b9604:	4a02      	ldr	r2, [pc, #8]	; (b9610 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b9606:	9b02      	ldr	r3, [sp, #8]
   b9608:	6002      	str	r2, [r0, #0]
   b960a:	61c3      	str	r3, [r0, #28]
}
   b960c:	bd10      	pop	{r4, pc}
   b960e:	bf00      	nop
   b9610:	000c7b14 	.word	0x000c7b14

000b9614 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b9614:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b9618:	4283      	cmp	r3, r0
   b961a:	d904      	bls.n	b9626 <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b961c:	7802      	ldrb	r2, [r0, #0]
   b961e:	2a02      	cmp	r2, #2
   b9620:	d002      	beq.n	b9628 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b9622:	3010      	adds	r0, #16
   b9624:	e7f8      	b.n	b9618 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b9626:	2000      	movs	r0, #0
}
   b9628:	4770      	bx	lr

000b962a <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b962a:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b962e:	4298      	cmp	r0, r3
   b9630:	d204      	bcs.n	b963c <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b9632:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b9634:	2b01      	cmp	r3, #1
   b9636:	bf18      	it	ne
   b9638:	2000      	movne	r0, #0
   b963a:	4770      	bx	lr
   b963c:	2000      	movs	r0, #0
}
   b963e:	4770      	bx	lr

000b9640 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b9640:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b9642:	6813      	ldr	r3, [r2, #0]
   b9644:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b9646:	6813      	ldr	r3, [r2, #0]
   b9648:	f103 0410 	add.w	r4, r3, #16
   b964c:	6014      	str	r4, [r2, #0]
   b964e:	6986      	ldr	r6, [r0, #24]
   b9650:	42b4      	cmp	r4, r6
   b9652:	d20a      	bcs.n	b966a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b9654:	699b      	ldr	r3, [r3, #24]
   b9656:	688c      	ldr	r4, [r1, #8]
   b9658:	42a3      	cmp	r3, r4
   b965a:	da01      	bge.n	b9660 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b965c:	42ab      	cmp	r3, r5
   b965e:	ddf2      	ble.n	b9646 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b9660:	42a3      	cmp	r3, r4
   b9662:	bfcc      	ite	gt
   b9664:	2000      	movgt	r0, #0
   b9666:	2001      	movle	r0, #1
   b9668:	e000      	b.n	b966c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b966a:	2000      	movs	r0, #0
}
   b966c:	bd70      	pop	{r4, r5, r6, pc}

000b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b966e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b9670:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b9674:	4604      	mov	r4, r0
   b9676:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b9678:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b967a:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b967c:	9801      	ldr	r0, [sp, #4]
   b967e:	69a3      	ldr	r3, [r4, #24]
   b9680:	4283      	cmp	r3, r0
   b9682:	d90b      	bls.n	b969c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b9684:	6882      	ldr	r2, [r0, #8]
   b9686:	688b      	ldr	r3, [r1, #8]
   b9688:	429a      	cmp	r2, r3
   b968a:	da07      	bge.n	b969c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b968c:	42b5      	cmp	r5, r6
   b968e:	d006      	beq.n	b969e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b9690:	aa01      	add	r2, sp, #4
   b9692:	4620      	mov	r0, r4
		index++;
   b9694:	3501      	adds	r5, #1
		skipObject(container, token);
   b9696:	f7ff ffd3 	bl	b9640 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b969a:	e7ef      	b.n	b967c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b969c:	2000      	movs	r0, #0
}
   b969e:	b002      	add	sp, #8
   b96a0:	bd70      	pop	{r4, r5, r6, pc}

000b96a2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b96a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b96a6:	9d08      	ldr	r5, [sp, #32]
   b96a8:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b96aa:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b96ae:	4604      	mov	r4, r0
   b96b0:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b96b2:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b96b4:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b96b6:	9801      	ldr	r0, [sp, #4]
   b96b8:	69a3      	ldr	r3, [r4, #24]
   b96ba:	4283      	cmp	r3, r0
   b96bc:	d91a      	bls.n	b96f4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b96be:	6882      	ldr	r2, [r0, #8]
   b96c0:	688b      	ldr	r3, [r1, #8]
   b96c2:	429a      	cmp	r2, r3
   b96c4:	da16      	bge.n	b96f4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b96c6:	42ae      	cmp	r6, r5
   b96c8:	d10b      	bne.n	b96e2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b96ca:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b96cc:	aa01      	add	r2, sp, #4
   b96ce:	4620      	mov	r0, r4
   b96d0:	f7ff ffb6 	bl	b9640 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b96d4:	b128      	cbz	r0, b96e2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b96d6:	9b01      	ldr	r3, [sp, #4]
   b96d8:	f8c8 3000 	str.w	r3, [r8]
}
   b96dc:	b002      	add	sp, #8
   b96de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b96e2:	aa01      	add	r2, sp, #4
   b96e4:	4620      	mov	r0, r4
   b96e6:	f7ff ffab 	bl	b9640 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b96ea:	4620      	mov	r0, r4
		index++;
   b96ec:	3601      	adds	r6, #1
		skipObject(container, token);
   b96ee:	f7ff ffa7 	bl	b9640 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b96f2:	e7e0      	b.n	b96b6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b96f4:	2000      	movs	r0, #0
   b96f6:	e7f1      	b.n	b96dc <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b96f8 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b96f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b96fa:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b96fc:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b9700:	4604      	mov	r4, r0
   b9702:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b9704:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b9706:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b9708:	9b01      	ldr	r3, [sp, #4]
   b970a:	69a2      	ldr	r2, [r4, #24]
   b970c:	429a      	cmp	r2, r3
   b970e:	d90f      	bls.n	b9730 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b9710:	6898      	ldr	r0, [r3, #8]
   b9712:	688a      	ldr	r2, [r1, #8]
   b9714:	4290      	cmp	r0, r2
   b9716:	da0b      	bge.n	b9730 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b9718:	42b5      	cmp	r5, r6
   b971a:	d103      	bne.n	b9724 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b971c:	603b      	str	r3, [r7, #0]
			return true;
   b971e:	2001      	movs	r0, #1
}
   b9720:	b003      	add	sp, #12
   b9722:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b9724:	aa01      	add	r2, sp, #4
   b9726:	4620      	mov	r0, r4
		index++;
   b9728:	3501      	adds	r5, #1
		skipObject(container, token);
   b972a:	f7ff ff89 	bl	b9640 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b972e:	e7eb      	b.n	b9708 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b9730:	2000      	movs	r0, #0
   b9732:	e7f5      	b.n	b9720 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b9734 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b9734:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b9736:	3b01      	subs	r3, #1
   b9738:	2400      	movs	r4, #0
   b973a:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b973e:	1bf6      	subs	r6, r6, r7
   b9740:	42a6      	cmp	r6, r4
   b9742:	dd08      	ble.n	b9756 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b9744:	42a3      	cmp	r3, r4
   b9746:	dd06      	ble.n	b9756 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b9748:	6845      	ldr	r5, [r0, #4]
   b974a:	443d      	add	r5, r7
   b974c:	5d2d      	ldrb	r5, [r5, r4]
   b974e:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b9752:	3401      	adds	r4, #1
   b9754:	e7f1      	b.n	b973a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b9756:	2300      	movs	r3, #0
   b9758:	7013      	strb	r3, [r2, #0]
}
   b975a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b975c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b975c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b975e:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b9760:	2310      	movs	r3, #16
   b9762:	466a      	mov	r2, sp
   b9764:	f7ff ffe6 	bl	b9734 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b9768:	4904      	ldr	r1, [pc, #16]	; (b977c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b976a:	4622      	mov	r2, r4
   b976c:	4668      	mov	r0, sp
   b976e:	f006 fe1b 	bl	c03a8 <sscanf>
}
   b9772:	1e43      	subs	r3, r0, #1
   b9774:	4258      	negs	r0, r3
   b9776:	4158      	adcs	r0, r3
   b9778:	b004      	add	sp, #16
   b977a:	bd10      	pop	{r4, pc}
   b977c:	000c867d 	.word	0x000c867d

000b9780 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, unsigned long &result) const {
   b9780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9782:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b9784:	2310      	movs	r3, #16
   b9786:	466a      	mov	r2, sp
   b9788:	f7ff ffd4 	bl	b9734 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%lu", &result) == 1) {
   b978c:	4904      	ldr	r1, [pc, #16]	; (b97a0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm+0x20>)
   b978e:	4622      	mov	r2, r4
   b9790:	4668      	mov	r0, sp
   b9792:	f006 fe09 	bl	c03a8 <sscanf>
}
   b9796:	1e43      	subs	r3, r0, #1
   b9798:	4258      	negs	r0, r3
   b979a:	4158      	adcs	r0, r3
   b979c:	b004      	add	sp, #16
   b979e:	bd10      	pop	{r4, pc}
   b97a0:	000c8f7f 	.word	0x000c8f7f

000b97a4 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b97a4:	b510      	push	{r4, lr}
   b97a6:	4604      	mov	r4, r0
	if (str) {
   b97a8:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b97aa:	460b      	mov	r3, r1
	if (str) {
   b97ac:	b128      	cbz	r0, b97ba <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b97ae:	f007 f9bb 	bl	c0b28 <_ZN6String6concatEc>
		length++;
   b97b2:	68e3      	ldr	r3, [r4, #12]
   b97b4:	3301      	adds	r3, #1
   b97b6:	60e3      	str	r3, [r4, #12]
}
   b97b8:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b97ba:	6860      	ldr	r0, [r4, #4]
   b97bc:	2800      	cmp	r0, #0
   b97be:	d0f8      	beq.n	b97b2 <_ZN16JsonParserString6appendEc+0xe>
   b97c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b97c4:	3a01      	subs	r2, #1
   b97c6:	428a      	cmp	r2, r1
			buf[length] = ch;
   b97c8:	bf88      	it	hi
   b97ca:	5443      	strbhi	r3, [r0, r1]
   b97cc:	e7f1      	b.n	b97b2 <_ZN16JsonParserString6appendEc+0xe>

000b97ce <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b97ce:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b97d0:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b97d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b97d4:	4608      	mov	r0, r1
		str.append((char)unicode);
   b97d6:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b97d8:	d804      	bhi.n	b97e4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b97da:	b003      	add	sp, #12
   b97dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b97e0:	f7ff bfe0 	b.w	b97a4 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b97e4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b97e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b97ec:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b97f0:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b97f4:	d207      	bcs.n	b9806 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b97f6:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b97fa:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b97fc:	f7ff ffd2 	bl	b97a4 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b9800:	9801      	ldr	r0, [sp, #4]
   b9802:	4621      	mov	r1, r4
   b9804:	e7e9      	b.n	b97da <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b9806:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b9808:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b980c:	9001      	str	r0, [sp, #4]
   b980e:	f7ff ffc9 	bl	b97a4 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b9812:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b9816:	9801      	ldr	r0, [sp, #4]
   b9818:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b981c:	e7ee      	b.n	b97fc <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b9820 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b9820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b9824:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b9826:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b9828:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b98f8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b982c:	4680      	mov	r8, r0
   b982e:	460f      	mov	r7, r1
   b9830:	4615      	mov	r5, r2
			escape = false;
   b9832:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b9834:	68b8      	ldr	r0, [r7, #8]
   b9836:	42b0      	cmp	r0, r6
   b9838:	dd5a      	ble.n	b98f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b983a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b983e:	5d99      	ldrb	r1, [r3, r6]
   b9840:	199a      	adds	r2, r3, r6
		if (escape) {
   b9842:	2c00      	cmp	r4, #0
   b9844:	d04b      	beq.n	b98de <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b9846:	2975      	cmp	r1, #117	; 0x75
   b9848:	d805      	bhi.n	b9856 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b984a:	296d      	cmp	r1, #109	; 0x6d
   b984c:	d807      	bhi.n	b985e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b984e:	2962      	cmp	r1, #98	; 0x62
   b9850:	d01e      	beq.n	b9890 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b9852:	2966      	cmp	r1, #102	; 0x66
   b9854:	d01e      	beq.n	b9894 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b9856:	4628      	mov	r0, r5
   b9858:	f7ff ffa4 	bl	b97a4 <_ZN16JsonParserString6appendEc>
				break;
   b985c:	e03d      	b.n	b98da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b985e:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b9862:	2c07      	cmp	r4, #7
   b9864:	d8f7      	bhi.n	b9856 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b9866:	f20f 0c08 	addw	ip, pc, #8
   b986a:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b986e:	bf00      	nop
   b9870:	000b9899 	.word	0x000b9899
   b9874:	000b9857 	.word	0x000b9857
   b9878:	000b9857 	.word	0x000b9857
   b987c:	000b9857 	.word	0x000b9857
   b9880:	000b989d 	.word	0x000b989d
   b9884:	000b9857 	.word	0x000b9857
   b9888:	000b98a1 	.word	0x000b98a1
   b988c:	000b98a5 	.word	0x000b98a5
				str.append('\b');
   b9890:	2108      	movs	r1, #8
   b9892:	e7e0      	b.n	b9856 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b9894:	210c      	movs	r1, #12
   b9896:	e7de      	b.n	b9856 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b9898:	210a      	movs	r1, #10
   b989a:	e7dc      	b.n	b9856 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b989c:	210d      	movs	r1, #13
   b989e:	e7da      	b.n	b9856 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b98a0:	2109      	movs	r1, #9
   b98a2:	e7d8      	b.n	b9856 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b98a4:	1d31      	adds	r1, r6, #4
   b98a6:	4288      	cmp	r0, r1
   b98a8:	dd17      	ble.n	b98da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b98aa:	a902      	add	r1, sp, #8
   b98ac:	3304      	adds	r3, #4
   b98ae:	4433      	add	r3, r6
   b98b0:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b98b2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b98b6:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b98ba:	429a      	cmp	r2, r3
   b98bc:	d1f9      	bne.n	b98b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b98be:	aa01      	add	r2, sp, #4
   b98c0:	4651      	mov	r1, sl
					tmp[4] = 0;
   b98c2:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b98c6:	f006 fd6f 	bl	c03a8 <sscanf>
   b98ca:	2801      	cmp	r0, #1
   b98cc:	d105      	bne.n	b98da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b98ce:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b98d2:	4629      	mov	r1, r5
   b98d4:	f7ff ff7b 	bl	b97ce <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b98d8:	3605      	adds	r6, #5
			escape = false;
   b98da:	2400      	movs	r4, #0
   b98dc:	e004      	b.n	b98e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b98de:	295c      	cmp	r1, #92	; 0x5c
   b98e0:	d004      	beq.n	b98ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b98e2:	4628      	mov	r0, r5
   b98e4:	f7ff ff5e 	bl	b97a4 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b98e8:	3601      	adds	r6, #1
   b98ea:	e7a3      	b.n	b9834 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b98ec:	2401      	movs	r4, #1
   b98ee:	e7fb      	b.n	b98e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b98f0:	2001      	movs	r0, #1
   b98f2:	b004      	add	sp, #16
   b98f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b98f8:	000c94a9 	.word	0x000c94a9

000b98fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b98fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b98fe:	460c      	mov	r4, r1
   b9900:	4606      	mov	r6, r0
	result = "";
   b9902:	490c      	ldr	r1, [pc, #48]	; (b9934 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b9904:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b9906:	4615      	mov	r5, r2
	result = "";
   b9908:	f007 f8d4 	bl	c0ab4 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b990c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b9910:	1ac9      	subs	r1, r1, r3
   b9912:	3101      	adds	r1, #1
   b9914:	4628      	mov	r0, r5
   b9916:	f007 f841 	bl	c099c <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b991a:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b991c:	466a      	mov	r2, sp
   b991e:	4621      	mov	r1, r4
   b9920:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b9922:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b9926:	9500      	str	r5, [sp, #0]
   b9928:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b992a:	f7ff ff79 	bl	b9820 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b992e:	b004      	add	sp, #16
   b9930:	bd70      	pop	{r4, r5, r6, pc}
   b9932:	bf00      	nop
   b9934:	000c9298 	.word	0x000c9298

000b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b9938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b993c:	b089      	sub	sp, #36	; 0x24
   b993e:	4605      	mov	r5, r0
   b9940:	4688      	mov	r8, r1
	String keyName;
   b9942:	a804      	add	r0, sp, #16
   b9944:	4912      	ldr	r1, [pc, #72]	; (b9990 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b9946:	4616      	mov	r6, r2
   b9948:	4699      	mov	r9, r3
	String keyName;
   b994a:	f007 f854 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b994e:	2700      	movs	r7, #0
   b9950:	9700      	str	r7, [sp, #0]
   b9952:	464b      	mov	r3, r9
   b9954:	aa03      	add	r2, sp, #12
   b9956:	4641      	mov	r1, r8
   b9958:	4628      	mov	r0, r5
   b995a:	f7ff fea2 	bl	b96a2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b995e:	4604      	mov	r4, r0
   b9960:	b170      	cbz	r0, b9980 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b9962:	9903      	ldr	r1, [sp, #12]
   b9964:	aa04      	add	r2, sp, #16
   b9966:	4628      	mov	r0, r5
   b9968:	f7ff ffc8 	bl	b98fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b996c:	4604      	mov	r4, r0
   b996e:	b908      	cbnz	r0, b9974 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b9970:	3701      	adds	r7, #1
   b9972:	e7ed      	b.n	b9950 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b9974:	4631      	mov	r1, r6
   b9976:	a804      	add	r0, sp, #16
   b9978:	f007 f904 	bl	c0b84 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b997c:	2800      	cmp	r0, #0
   b997e:	d0f7      	beq.n	b9970 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b9980:	a804      	add	r0, sp, #16
   b9982:	f006 ffed 	bl	c0960 <_ZN6StringD1Ev>
}
   b9986:	4620      	mov	r0, r4
   b9988:	b009      	add	sp, #36	; 0x24
   b998a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b998e:	bf00      	nop
   b9990:	000c9298 	.word	0x000c9298

000b9994 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b9994:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b9996:	2201      	movs	r2, #1
	offset = 0;
   b9998:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b999a:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b999c:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b999e:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b99a2:	4770      	bx	lr

000b99a4 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b99a4:	b508      	push	{r3, lr}
   b99a6:	4603      	mov	r3, r0
   b99a8:	f7ff fdde 	bl	b9568 <_ZN10JsonBufferC1Ev>
   b99ac:	4a04      	ldr	r2, [pc, #16]	; (b99c0 <_ZN10JsonWriterC1Ev+0x1c>)
   b99ae:	601a      	str	r2, [r3, #0]
   b99b0:	f04f 32ff 	mov.w	r2, #4294967295
	init();
   b99b4:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b99b6:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b99b8:	f7ff ffec 	bl	b9994 <_ZN10JsonWriter4initEv>
}
   b99bc:	bd08      	pop	{r3, pc}
   b99be:	bf00      	nop
   b99c0:	000c7b24 	.word	0x000c7b24

000b99c4 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b99c4:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b99c8:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b99ca:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b99cc:	bf3f      	itttt	cc
   b99ce:	6842      	ldrcc	r2, [r0, #4]
   b99d0:	1c5c      	addcc	r4, r3, #1
   b99d2:	60c4      	strcc	r4, [r0, #12]
   b99d4:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b99d6:	bf24      	itt	cs
   b99d8:	2301      	movcs	r3, #1
   b99da:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b99de:	bd10      	pop	{r4, pc}

000b99e0 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b99e0:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b99e2:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b99e4:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b99e6:	b143      	cbz	r3, b99fa <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b99e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b99ec:	7e59      	ldrb	r1, [r3, #25]
   b99ee:	b109      	cbz	r1, b99f4 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b99f0:	f7ff ffe8 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b99f4:	6963      	ldr	r3, [r4, #20]
   b99f6:	3b01      	subs	r3, #1
   b99f8:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b99fa:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b99fe:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b9a00:	4288      	cmp	r0, r1
   b9a02:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b9a06:	bf2a      	itet	cs
   b9a08:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b9a0a:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b9a0c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b9a10:	bd10      	pop	{r4, pc}

000b9a12 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b9a12:	b570      	push	{r4, r5, r6, lr}
   b9a14:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b9a16:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b9a1a:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b9a1c:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b9a1e:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b9a20:	4430      	add	r0, r6
   b9a22:	460a      	mov	r2, r1
   b9a24:	4629      	mov	r1, r5
   b9a26:	f006 fccf 	bl	c03c8 <vsnprintf>
	if (count <= spaceAvailable) {
   b9a2a:	4285      	cmp	r5, r0
		offset += count;
   b9a2c:	bf2d      	iteet	cs
   b9a2e:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b9a30:	68a3      	ldrcc	r3, [r4, #8]
   b9a32:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b9a34:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b9a36:	bf36      	itet	cc
   b9a38:	2301      	movcc	r3, #1
		offset += count;
   b9a3a:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b9a3c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b9a40:	bd70      	pop	{r4, r5, r6, pc}

000b9a42 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b9a42:	b40e      	push	{r1, r2, r3}
   b9a44:	b503      	push	{r0, r1, lr}
   b9a46:	aa03      	add	r2, sp, #12
   b9a48:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b9a4c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b9a4e:	f7ff ffe0 	bl	b9a12 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b9a52:	b002      	add	sp, #8
   b9a54:	f85d eb04 	ldr.w	lr, [sp], #4
   b9a58:	b003      	add	sp, #12
   b9a5a:	4770      	bx	lr

000b9a5c <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b9a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9a60:	4604      	mov	r4, r0
   b9a62:	460e      	mov	r6, r1
	if (quoted) {
   b9a64:	4617      	mov	r7, r2
   b9a66:	b112      	cbz	r2, b9a6e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b9a68:	2122      	movs	r1, #34	; 0x22
   b9a6a:	f7ff ffab 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b9a6e:	f8df 810c 	ldr.w	r8, [pc, #268]	; b9b7c <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b9a72:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b9a74:	5d71      	ldrb	r1, [r6, r5]
   b9a76:	eb06 0905 	add.w	r9, r6, r5
   b9a7a:	2900      	cmp	r1, #0
   b9a7c:	d074      	beq.n	b9b68 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b9a7e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b9a82:	429a      	cmp	r2, r3
   b9a84:	d270      	bcs.n	b9b68 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b9a86:	060b      	lsls	r3, r1, #24
   b9a88:	d534      	bpl.n	b9af4 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b9a8a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b9a8e:	2be0      	cmp	r3, #224	; 0xe0
   b9a90:	f105 0901 	add.w	r9, r5, #1
   b9a94:	d11d      	bne.n	b9ad2 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b9a96:	f816 2009 	ldrb.w	r2, [r6, r9]
   b9a9a:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b9a9e:	2b80      	cmp	r3, #128	; 0x80
   b9aa0:	d139      	bne.n	b9b16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b9aa2:	f105 0902 	add.w	r9, r5, #2
   b9aa6:	f816 3009 	ldrb.w	r3, [r6, r9]
   b9aaa:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b9aae:	2880      	cmp	r0, #128	; 0x80
   b9ab0:	d131      	bne.n	b9b16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b9ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b9ab6:	0192      	lsls	r2, r2, #6
   b9ab8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b9abc:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b9ac0:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b9ac2:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b9ac4:	4641      	mov	r1, r8
   b9ac6:	4620      	mov	r0, r4
   b9ac8:	f7ff ffbb 	bl	b9a42 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b9acc:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b9ace:	3501      	adds	r5, #1
   b9ad0:	e7d0      	b.n	b9a74 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b9ad2:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b9ad6:	2bc0      	cmp	r3, #192	; 0xc0
   b9ad8:	d11d      	bne.n	b9b16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b9ada:	f816 3009 	ldrb.w	r3, [r6, r9]
   b9ade:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b9ae2:	2a80      	cmp	r2, #128	; 0x80
   b9ae4:	d117      	bne.n	b9b16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b9ae6:	0189      	lsls	r1, r1, #6
   b9ae8:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b9aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b9af0:	431a      	orrs	r2, r3
   b9af2:	e7e7      	b.n	b9ac4 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b9af4:	290d      	cmp	r1, #13
   b9af6:	d80a      	bhi.n	b9b0e <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b9af8:	2907      	cmp	r1, #7
   b9afa:	d90c      	bls.n	b9b16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b9afc:	f1a1 0308 	sub.w	r3, r1, #8
   b9b00:	2b05      	cmp	r3, #5
   b9b02:	d808      	bhi.n	b9b16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b9b04:	e8df f003 	tbb	[pc, r3]
   b9b08:	07172309 	.word	0x07172309
   b9b0c:	1d11      	.short	0x1d11
   b9b0e:	2922      	cmp	r1, #34	; 0x22
   b9b10:	d023      	beq.n	b9b5a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b9b12:	295c      	cmp	r1, #92	; 0x5c
   b9b14:	d021      	beq.n	b9b5a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b9b16:	4620      	mov	r0, r4
   b9b18:	e004      	b.n	b9b24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b9b1a:	215c      	movs	r1, #92	; 0x5c
   b9b1c:	4620      	mov	r0, r4
   b9b1e:	f7ff ff51 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b9b22:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b9b24:	f7ff ff4e 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
				break;
   b9b28:	e7d1      	b.n	b9ace <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b9b2a:	215c      	movs	r1, #92	; 0x5c
   b9b2c:	4620      	mov	r0, r4
   b9b2e:	f7ff ff49 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b9b32:	2166      	movs	r1, #102	; 0x66
   b9b34:	e7f6      	b.n	b9b24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b9b36:	215c      	movs	r1, #92	; 0x5c
   b9b38:	4620      	mov	r0, r4
   b9b3a:	f7ff ff43 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b9b3e:	216e      	movs	r1, #110	; 0x6e
   b9b40:	e7f0      	b.n	b9b24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b9b42:	215c      	movs	r1, #92	; 0x5c
   b9b44:	4620      	mov	r0, r4
   b9b46:	f7ff ff3d 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b9b4a:	2172      	movs	r1, #114	; 0x72
   b9b4c:	e7ea      	b.n	b9b24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b9b4e:	215c      	movs	r1, #92	; 0x5c
   b9b50:	4620      	mov	r0, r4
   b9b52:	f7ff ff37 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b9b56:	2174      	movs	r1, #116	; 0x74
   b9b58:	e7e4      	b.n	b9b24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b9b5a:	215c      	movs	r1, #92	; 0x5c
   b9b5c:	4620      	mov	r0, r4
   b9b5e:	f7ff ff31 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b9b62:	f899 1000 	ldrb.w	r1, [r9]
   b9b66:	e7dd      	b.n	b9b24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b9b68:	b12f      	cbz	r7, b9b76 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b9b6a:	4620      	mov	r0, r4
   b9b6c:	2122      	movs	r1, #34	; 0x22
}
   b9b6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b9b72:	f7ff bf27 	b.w	b99c4 <_ZN10JsonWriter10insertCharEc>
}
   b9b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9b7a:	bf00      	nop
   b9b7c:	000c7af4 	.word	0x000c7af4

000b9b80 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b9b80:	6942      	ldr	r2, [r0, #20]
   b9b82:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b9b86:	7e1a      	ldrb	r2, [r3, #24]
   b9b88:	b112      	cbz	r2, b9b90 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b9b8a:	2200      	movs	r2, #0
   b9b8c:	761a      	strb	r2, [r3, #24]
}
   b9b8e:	4770      	bx	lr
		insertChar(',');
   b9b90:	212c      	movs	r1, #44	; 0x2c
   b9b92:	f7ff bf17 	b.w	b99c4 <_ZN10JsonWriter10insertCharEc>

000b9b96 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b9b96:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b9b98:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b9b9a:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b9b9c:	3301      	adds	r3, #1
   b9b9e:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b9ba0:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b9ba2:	d80f      	bhi.n	b9bc4 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b9ba4:	f7ff ffec 	bl	b9b80 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b9ba8:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b9baa:	9901      	ldr	r1, [sp, #4]
   b9bac:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b9bb0:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b9bb2:	2501      	movs	r5, #1
	contextIndex++;
   b9bb4:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b9bb6:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b9bb8:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b9bba:	f7ff ff03 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
   b9bbe:	4628      	mov	r0, r5
}
   b9bc0:	b002      	add	sp, #8
   b9bc2:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b9bc4:	2000      	movs	r0, #0
   b9bc6:	e7fb      	b.n	b9bc0 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b9bc8 <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b9bc8:	b510      	push	{r4, lr}
   b9bca:	4604      	mov	r4, r0
   b9bcc:	f7ff feea 	bl	b99a4 <_ZN10JsonWriterC1Ev>
   b9bd0:	4b05      	ldr	r3, [pc, #20]	; (b9be8 <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b9bd2:	6023      	str	r3, [r4, #0]
   b9bd4:	f04f 32ff 	mov.w	r2, #4294967295
   b9bd8:	2300      	movs	r3, #0
   b9bda:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b9bde:	6321      	str	r1, [r4, #48]	; 0x30
   b9be0:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b9be2:	4620      	mov	r0, r4
   b9be4:	bd10      	pop	{r4, pc}
   b9be6:	bf00      	nop
   b9be8:	000c7b34 	.word	0x000c7b34

000b9bec <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	init();

	return true;
}

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b9bec:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b9bee:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9bf0:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b9bf2:	4604      	mov	r4, r0
   b9bf4:	460e      	mov	r6, r1
	if (start != -1) {
   b9bf6:	d129      	bne.n	b9c4c <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b9bf8:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b9bfa:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b9bfc:	3d01      	subs	r5, #1
   b9bfe:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b9c00:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b9c02:	1b5a      	subs	r2, r3, r5
   b9c04:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b9c06:	6888      	ldr	r0, [r1, #8]
   b9c08:	4428      	add	r0, r5
   b9c0a:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b9c0c:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b9c0e:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b9c10:	dd04      	ble.n	b9c1c <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b9c12:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b9c14:	1941      	adds	r1, r0, r5
   b9c16:	4418      	add	r0, r3
   b9c18:	f00b fbe0 	bl	c53dc <memmove>
   b9c1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b9c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b9c20:	6852      	ldr	r2, [r2, #4]
   b9c22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9c24:	440a      	add	r2, r1
   b9c26:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b9c28:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b9c2a:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b9c2e:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b9c30:	7425      	strb	r5, [r4, #16]
	init();
   b9c32:	f7ff feaf 	bl	b9994 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b9c36:	6963      	ldr	r3, [r4, #20]
   b9c38:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b9c3c:	68f3      	ldr	r3, [r6, #12]
   b9c3e:	fab3 f383 	clz	r3, r3
   b9c42:	095b      	lsrs	r3, r3, #5
   b9c44:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b9c48:	4628      	mov	r0, r5

	return true;
}
   b9c4a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b9c4c:	2000      	movs	r0, #0
   b9c4e:	e7fc      	b.n	b9c4a <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>

000b9c50 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.parse();
	start = -1;
}


JsonParserGeneratorRK::jsmntok_t JsonModifier::tokenWithQuotes(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b9c50:	b530      	push	{r4, r5, lr}
   b9c52:	4604      	mov	r4, r0
   b9c54:	4615      	mov	r5, r2
	JsonParserGeneratorRK::jsmntok_t expandedToken = *tok;
   b9c56:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b9c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (tok->type == JsonParserGeneratorRK::JSMN_STRING) {
   b9c5c:	782b      	ldrb	r3, [r5, #0]
   b9c5e:	2b03      	cmp	r3, #3
		expandedToken.start--;
   b9c60:	bf01      	itttt	eq
   b9c62:	f101 31ff 	addeq.w	r1, r1, #4294967295
		expandedToken.end++;
   b9c66:	3201      	addeq	r2, #1
		expandedToken.start--;
   b9c68:	6061      	streq	r1, [r4, #4]
		expandedToken.end++;
   b9c6a:	60a2      	streq	r2, [r4, #8]
	}
	return expandedToken;
}
   b9c6c:	4620      	mov	r0, r4
   b9c6e:	bd30      	pop	{r4, r5, pc}

000b9c70 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>:

int JsonModifier::findLeftComma(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b9c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9c72:	460a      	mov	r2, r1
   b9c74:	4604      	mov	r4, r0

	JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b9c76:	4601      	mov	r1, r0
   b9c78:	4668      	mov	r0, sp
   b9c7a:	f7ff ffe9 	bl	b9c50 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>

	int ii = expandedToken.start - 1;
   b9c7e:	9b01      	ldr	r3, [sp, #4]
   b9c80:	1e58      	subs	r0, r3, #1
	while(ii >= 0 && jp.getBuffer()[ii] == ' ') {
   b9c82:	2800      	cmp	r0, #0
   b9c84:	db06      	blt.n	b9c94 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
   b9c86:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9c88:	685b      	ldr	r3, [r3, #4]
   b9c8a:	5c1b      	ldrb	r3, [r3, r0]
   b9c8c:	2b20      	cmp	r3, #32
   b9c8e:	d105      	bne.n	b9c9c <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x2c>
		// Whitespace
		ii--;
   b9c90:	3801      	subs	r0, #1
	while(ii >= 0 && jp.getBuffer()[ii] == ' ') {
   b9c92:	e7f6      	b.n	b9c82 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x12>
	}
	// printf("after whitespace check ii=%d c=%c\n", ii, jp.getBuffer()[ii]);

	if (ii < 0 || jp.getBuffer()[ii] != ',') {
		return -1;
   b9c94:	f04f 30ff 	mov.w	r0, #4294967295
	}


	return ii;
}
   b9c98:	b004      	add	sp, #16
   b9c9a:	bd10      	pop	{r4, pc}
		return -1;
   b9c9c:	2b2c      	cmp	r3, #44	; 0x2c
   b9c9e:	bf18      	it	ne
   b9ca0:	f04f 30ff 	movne.w	r0, #4294967295
   b9ca4:	e7f8      	b.n	b9c98 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x28>

000b9ca6 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>:

int JsonModifier::findRightComma(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b9ca6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9ca8:	4604      	mov	r4, r0
   b9caa:	460a      	mov	r2, r1
	JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b9cac:	4601      	mov	r1, r0
   b9cae:	4668      	mov	r0, sp
   b9cb0:	f7ff ffce 	bl	b9c50 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>

	int ii = expandedToken.end;
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b9cb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
	int ii = expandedToken.end;
   b9cb6:	9802      	ldr	r0, [sp, #8]
	size_t getOffset() const { return offset; }
   b9cb8:	68da      	ldr	r2, [r3, #12]
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b9cba:	4282      	cmp	r2, r0
   b9cbc:	d905      	bls.n	b9cca <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
   b9cbe:	6859      	ldr	r1, [r3, #4]
   b9cc0:	5c09      	ldrb	r1, [r1, r0]
   b9cc2:	2920      	cmp	r1, #32
   b9cc4:	d101      	bne.n	b9cca <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
		// Whitespace
		ii++;
   b9cc6:	3001      	adds	r0, #1
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b9cc8:	e7f7      	b.n	b9cba <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x14>
	}

	if (ii < 0 || jp.getBuffer()[ii] != ',') {
   b9cca:	2800      	cmp	r0, #0
   b9ccc:	db07      	blt.n	b9cde <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x38>
   b9cce:	685b      	ldr	r3, [r3, #4]
   b9cd0:	5c1b      	ldrb	r3, [r3, r0]
		return -1;
   b9cd2:	2b2c      	cmp	r3, #44	; 0x2c
   b9cd4:	bf18      	it	ne
   b9cd6:	f04f 30ff 	movne.w	r0, #4294967295
	}

	return ii;
}
   b9cda:	b004      	add	sp, #16
   b9cdc:	bd10      	pop	{r4, pc}
		return -1;
   b9cde:	f04f 30ff 	mov.w	r0, #4294967295
   b9ce2:	e7fa      	b.n	b9cda <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x34>

000b9ce4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b9ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b9ce8:	6844      	ldr	r4, [r0, #4]
   b9cea:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b9cee:	f04f 36ff 	mov.w	r6, #4294967295

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9cf2:	f8d0 e000 	ldr.w	lr, [r0]
   b9cf6:	4596      	cmp	lr, r2
   b9cf8:	f080 81b9 	bcs.w	ba06e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b9cfc:	f811 800e 	ldrb.w	r8, [r1, lr]
   b9d00:	f1b8 0f00 	cmp.w	r8, #0
   b9d04:	f000 81b3 	beq.w	ba06e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b9d08:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b9d0c:	f000 8098 	beq.w	b9e40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b9d10:	d833      	bhi.n	b9d7a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b9d12:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b9d16:	f000 80a6 	beq.w	b9e66 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b9d1a:	d810      	bhi.n	b9d3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b9d1c:	f1a8 0809 	sub.w	r8, r8, #9
   b9d20:	fa5f f888 	uxtb.w	r8, r8
   b9d24:	f1b8 0f17 	cmp.w	r8, #23
   b9d28:	d80d      	bhi.n	b9d46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b9d2a:	4d9f      	ldr	r5, [pc, #636]	; (b9fa8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b9d2c:	fa0c f808 	lsl.w	r8, ip, r8
   b9d30:	ea18 0f05 	tst.w	r8, r5
   b9d34:	d007      	beq.n	b9d46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9d36:	6805      	ldr	r5, [r0, #0]
   b9d38:	3501      	adds	r5, #1
   b9d3a:	6005      	str	r5, [r0, #0]
   b9d3c:	e7d9      	b.n	b9cf2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b9d3e:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b9d42:	f000 8133 	beq.w	b9fac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9d46:	f8d0 8000 	ldr.w	r8, [r0]
   b9d4a:	4542      	cmp	r2, r8
   b9d4c:	d90e      	bls.n	b9d6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b9d4e:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9d52:	b15d      	cbz	r5, b9d6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b9d54:	2d3a      	cmp	r5, #58	; 0x3a
   b9d56:	f200 8169 	bhi.w	ba02c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b9d5a:	2d1f      	cmp	r5, #31
   b9d5c:	f200 8151 	bhi.w	ba002 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b9d60:	2d0a      	cmp	r5, #10
   b9d62:	f200 8160 	bhi.w	ba026 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b9d66:	2d08      	cmp	r5, #8
   b9d68:	f240 8156 	bls.w	ba018 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b9d6c:	2b00      	cmp	r3, #0
   b9d6e:	f040 8162 	bne.w	ba036 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b9d72:	f108 35ff 	add.w	r5, r8, #4294967295
	parser->pos--;
   b9d76:	6005      	str	r5, [r0, #0]
   b9d78:	e0a5      	b.n	b9ec6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b9d7a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b9d7e:	d037      	beq.n	b9df0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b9d80:	d82e      	bhi.n	b9de0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b9d82:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b9d86:	d033      	beq.n	b9df0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b9d88:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b9d8c:	d1db      	bne.n	b9d46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b9d8e:	2b00      	cmp	r3, #0
   b9d90:	d0d1      	beq.n	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b9d92:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b9d96:	6845      	ldr	r5, [r0, #4]
   b9d98:	3d01      	subs	r5, #1
   b9d9a:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b9d9e:	2d00      	cmp	r5, #0
   b9da0:	db55      	blt.n	b9e4e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b9da2:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b9da6:	3701      	adds	r7, #1
   b9da8:	d04d      	beq.n	b9e46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b9daa:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b9dae:	f1ba 3fff 	cmp.w	sl, #4294967295
   b9db2:	d148      	bne.n	b9e46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b9db4:	f898 b000 	ldrb.w	fp, [r8]
   b9db8:	45cb      	cmp	fp, r9
   b9dba:	d14b      	bne.n	b9e54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b9dbc:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b9dc0:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b9dc4:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b9dc8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b9dcc:	f8de 7004 	ldr.w	r7, [lr, #4]
   b9dd0:	3701      	adds	r7, #1
   b9dd2:	d042      	beq.n	b9e5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b9dd4:	f8de 7008 	ldr.w	r7, [lr, #8]
   b9dd8:	3701      	adds	r7, #1
   b9dda:	d13e      	bne.n	b9e5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b9ddc:	6085      	str	r5, [r0, #8]
				break;
   b9dde:	e7aa      	b.n	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b9de0:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b9de4:	d1af      	bne.n	b9d46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b9de6:	2b00      	cmp	r3, #0
   b9de8:	d0a5      	beq.n	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b9dea:	f04f 0901 	mov.w	r9, #1
   b9dee:	e7d2      	b.n	b9d96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b9df0:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b9df2:	2b00      	cmp	r3, #0
   b9df4:	d09f      	beq.n	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b9df6:	6845      	ldr	r5, [r0, #4]
   b9df8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9dfa:	42af      	cmp	r7, r5
   b9dfc:	d94a      	bls.n	b9e94 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b9dfe:	f105 0e01 	add.w	lr, r5, #1
   b9e02:	f8c0 e004 	str.w	lr, [r0, #4]
   b9e06:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b9e0a:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b9e0e:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b9e12:	2500      	movs	r5, #0
   b9e14:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b9e18:	6885      	ldr	r5, [r0, #8]
   b9e1a:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b9e1c:	bf1f      	itttt	ne
   b9e1e:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b9e22:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b9e26:	3501      	addne	r5, #1
   b9e28:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b9e2c:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b9e30:	bf0c      	ite	eq
   b9e32:	2501      	moveq	r5, #1
   b9e34:	2502      	movne	r5, #2
   b9e36:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b9e3a:	6805      	ldr	r5, [r0, #0]
   b9e3c:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b9e40:	6845      	ldr	r5, [r0, #4]
   b9e42:	3d01      	subs	r5, #1
   b9e44:	e7ca      	b.n	b9ddc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b9e46:	3d01      	subs	r5, #1
   b9e48:	f1a8 0810 	sub.w	r8, r8, #16
   b9e4c:	e7a7      	b.n	b9d9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b9e4e:	3501      	adds	r5, #1
   b9e50:	f47f af71 	bne.w	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b9e54:	f06f 0401 	mvn.w	r4, #1
   b9e58:	e01e      	b.n	b9e98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b9e5a:	3d01      	subs	r5, #1
   b9e5c:	1c6f      	adds	r7, r5, #1
   b9e5e:	f1ae 0e10 	sub.w	lr, lr, #16
   b9e62:	d1b3      	bne.n	b9dcc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b9e64:	e767      	b.n	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b9e66:	f10e 0901 	add.w	r9, lr, #1
   b9e6a:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9e6e:	f8d0 8000 	ldr.w	r8, [r0]
   b9e72:	4542      	cmp	r2, r8
   b9e74:	f240 8093 	bls.w	b9f9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b9e78:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9e7c:	2d00      	cmp	r5, #0
   b9e7e:	f000 808e 	beq.w	b9f9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b9e82:	2d22      	cmp	r5, #34	; 0x22
   b9e84:	d130      	bne.n	b9ee8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b9e86:	b1f3      	cbz	r3, b9ec6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b9e88:	6845      	ldr	r5, [r0, #4]
   b9e8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9e8c:	42af      	cmp	r7, r5
   b9e8e:	d806      	bhi.n	b9e9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b9e90:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b9e94:	f04f 34ff 	mov.w	r4, #4294967295
			}
		}
	}

	return count;
}
   b9e98:	4620      	mov	r0, r4
   b9e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b9e9e:	f105 0e01 	add.w	lr, r5, #1
   b9ea2:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b9ea6:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b9eaa:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b9eae:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b9eb2:	2700      	movs	r7, #0
   b9eb4:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b9eb6:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b9eba:	f04f 0a03 	mov.w	sl, #3
   b9ebe:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b9ec2:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b9ec6:	6885      	ldr	r5, [r0, #8]
   b9ec8:	1c6f      	adds	r7, r5, #1
				count++;
   b9eca:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b9ece:	f43f af32 	beq.w	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b9ed2:	2b00      	cmp	r3, #0
   b9ed4:	f43f af2f 	beq.w	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b9ed8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b9edc:	f8de 500c 	ldr.w	r5, [lr, #12]
   b9ee0:	3501      	adds	r5, #1
   b9ee2:	f8ce 500c 	str.w	r5, [lr, #12]
   b9ee6:	e726      	b.n	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b9ee8:	2d5c      	cmp	r5, #92	; 0x5c
   b9eea:	d111      	bne.n	b9f10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b9eec:	f108 0501 	add.w	r5, r8, #1
   b9ef0:	42aa      	cmp	r2, r5
   b9ef2:	d90d      	bls.n	b9f10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b9ef4:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b9ef6:	5d4d      	ldrb	r5, [r1, r5]
   b9ef8:	2d75      	cmp	r5, #117	; 0x75
   b9efa:	d82b      	bhi.n	b9f54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b9efc:	2d6d      	cmp	r5, #109	; 0x6d
   b9efe:	d80b      	bhi.n	b9f18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b9f00:	2d66      	cmp	r5, #102	; 0x66
   b9f02:	d827      	bhi.n	b9f54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b9f04:	2d5b      	cmp	r5, #91	; 0x5b
   b9f06:	d81d      	bhi.n	b9f44 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b9f08:	2d22      	cmp	r5, #34	; 0x22
   b9f0a:	d001      	beq.n	b9f10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b9f0c:	2d2f      	cmp	r5, #47	; 0x2f
   b9f0e:	d121      	bne.n	b9f54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9f10:	6805      	ldr	r5, [r0, #0]
   b9f12:	3501      	adds	r5, #1
   b9f14:	6005      	str	r5, [r0, #0]
   b9f16:	e7aa      	b.n	b9e6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b9f18:	3d6e      	subs	r5, #110	; 0x6e
   b9f1a:	2d07      	cmp	r5, #7
   b9f1c:	d81a      	bhi.n	b9f54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b9f1e:	a701      	add	r7, pc, #4	; (adr r7, b9f24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b9f20:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b9f24:	000b9f11 	.word	0x000b9f11
   b9f28:	000b9f55 	.word	0x000b9f55
   b9f2c:	000b9f55 	.word	0x000b9f55
   b9f30:	000b9f55 	.word	0x000b9f55
   b9f34:	000b9f11 	.word	0x000b9f11
   b9f38:	000b9f55 	.word	0x000b9f55
   b9f3c:	000b9f11 	.word	0x000b9f11
   b9f40:	000b9f5b 	.word	0x000b9f5b
   b9f44:	3d5c      	subs	r5, #92	; 0x5c
   b9f46:	b2ed      	uxtb	r5, r5
   b9f48:	fa0c f505 	lsl.w	r5, ip, r5
   b9f4c:	f240 4741 	movw	r7, #1089	; 0x441
   b9f50:	423d      	tst	r5, r7
   b9f52:	d1dd      	bne.n	b9f10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b9f54:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b9f58:	e77c      	b.n	b9e54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b9f5a:	f108 0502 	add.w	r5, r8, #2
   b9f5e:	6005      	str	r5, [r0, #0]
   b9f60:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9f64:	f8d0 8000 	ldr.w	r8, [r0]
   b9f68:	4542      	cmp	r2, r8
   b9f6a:	d803      	bhi.n	b9f74 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b9f6c:	6805      	ldr	r5, [r0, #0]
   b9f6e:	3d01      	subs	r5, #1
   b9f70:	6005      	str	r5, [r0, #0]
					break;
   b9f72:	e7cd      	b.n	b9f10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9f74:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9f78:	2d00      	cmp	r5, #0
   b9f7a:	d0f7      	beq.n	b9f6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b9f7c:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b9f80:	f1bb 0f09 	cmp.w	fp, #9
   b9f84:	d904      	bls.n	b9f90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b9f86:	f025 0520 	bic.w	r5, r5, #32
   b9f8a:	3d41      	subs	r5, #65	; 0x41
   b9f8c:	2d05      	cmp	r5, #5
   b9f8e:	d8e1      	bhi.n	b9f54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b9f90:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9f94:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b9f98:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9f9a:	d1e3      	bne.n	b9f64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b9f9c:	e7e6      	b.n	b9f6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b9f9e:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b9fa2:	f06f 0402 	mvn.w	r4, #2
   b9fa6:	e777      	b.n	b9e98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b9fa8:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b9fac:	2b00      	cmp	r3, #0
   b9fae:	f43f aec2 	beq.w	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b9fb2:	6885      	ldr	r5, [r0, #8]
   b9fb4:	1c6f      	adds	r7, r5, #1
   b9fb6:	f43f aebe 	beq.w	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b9fba:	012d      	lsls	r5, r5, #4
   b9fbc:	5d5d      	ldrb	r5, [r3, r5]
   b9fbe:	3d01      	subs	r5, #1
   b9fc0:	2d01      	cmp	r5, #1
   b9fc2:	f67f aeb8 	bls.w	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b9fc6:	6845      	ldr	r5, [r0, #4]
   b9fc8:	f105 38ff 	add.w	r8, r5, #4294967295
   b9fcc:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b9fd0:	f1b8 0f00 	cmp.w	r8, #0
   b9fd4:	f6ff aeaf 	blt.w	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b9fd8:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b9fdc:	3d01      	subs	r5, #1
   b9fde:	2d01      	cmp	r5, #1
   b9fe0:	d80a      	bhi.n	b9ff8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b9fe2:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b9fe6:	3501      	adds	r5, #1
   b9fe8:	d006      	beq.n	b9ff8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b9fea:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b9fee:	3501      	adds	r5, #1
   b9ff0:	d102      	bne.n	b9ff8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b9ff2:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b9ff6:	e69e      	b.n	b9d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b9ff8:	f108 38ff 	add.w	r8, r8, #4294967295
   b9ffc:	f1ae 0e10 	sub.w	lr, lr, #16
   ba000:	e7e6      	b.n	b9fd0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   ba002:	f1a5 0920 	sub.w	r9, r5, #32
   ba006:	4f24      	ldr	r7, [pc, #144]	; (ba098 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   ba008:	fa5f f989 	uxtb.w	r9, r9
   ba00c:	fa0c f909 	lsl.w	r9, ip, r9
   ba010:	ea19 0f07 	tst.w	r9, r7
   ba014:	f47f aeaa 	bne.w	b9d6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   ba018:	3d20      	subs	r5, #32
   ba01a:	2d5e      	cmp	r5, #94	; 0x5e
   ba01c:	d89a      	bhi.n	b9f54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   ba01e:	f108 0501 	add.w	r5, r8, #1
   ba022:	6005      	str	r5, [r0, #0]
   ba024:	e68f      	b.n	b9d46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   ba026:	2d0d      	cmp	r5, #13
   ba028:	d1f6      	bne.n	ba018 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   ba02a:	e69f      	b.n	b9d6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   ba02c:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   ba030:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   ba034:	e7f8      	b.n	ba028 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   ba036:	6845      	ldr	r5, [r0, #4]
   ba038:	9f09      	ldr	r7, [sp, #36]	; 0x24
   ba03a:	42af      	cmp	r7, r5
   ba03c:	f67f af28 	bls.w	b9e90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   ba040:	f105 0801 	add.w	r8, r5, #1
   ba044:	ea4f 1905 	mov.w	r9, r5, lsl #4
   ba048:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   ba04c:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   ba050:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   ba054:	2700      	movs	r7, #0
   ba056:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   ba058:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   ba05c:	f04f 0a04 	mov.w	sl, #4
   ba060:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   ba064:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   ba068:	6805      	ldr	r5, [r0, #0]
   ba06a:	3d01      	subs	r5, #1
   ba06c:	e683      	b.n	b9d76 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   ba06e:	2b00      	cmp	r3, #0
   ba070:	f43f af12 	beq.w	b9e98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   ba074:	6842      	ldr	r2, [r0, #4]
   ba076:	1e51      	subs	r1, r2, #1
   ba078:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   ba07c:	2900      	cmp	r1, #0
   ba07e:	f6ff af0b 	blt.w	b9e98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   ba082:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   ba086:	3201      	adds	r2, #1
   ba088:	d003      	beq.n	ba092 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   ba08a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   ba08e:	3201      	adds	r2, #1
   ba090:	d087      	beq.n	b9fa2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   ba092:	3901      	subs	r1, #1
   ba094:	3b10      	subs	r3, #16
   ba096:	e7f1      	b.n	ba07c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   ba098:	04001001 	.word	0x04001001

000ba09c <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   ba09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   ba09e:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   ba0a0:	4604      	mov	r4, r0
	if (offset == 0) {
   ba0a2:	b912      	cbnz	r2, ba0aa <_ZN10JsonParser5parseEv+0xe>
		return false;
   ba0a4:	2000      	movs	r0, #0
}
   ba0a6:	b003      	add	sp, #12
   ba0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   ba0aa:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   ba0ac:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   ba0b0:	b1ab      	cbz	r3, ba0de <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   ba0b2:	2100      	movs	r1, #0
	parser->toknext = 0;
   ba0b4:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   ba0b8:	f04f 31ff 	mov.w	r1, #4294967295
   ba0bc:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   ba0be:	69c1      	ldr	r1, [r0, #28]
   ba0c0:	9100      	str	r1, [sp, #0]
   ba0c2:	6841      	ldr	r1, [r0, #4]
   ba0c4:	4630      	mov	r0, r6
   ba0c6:	f7ff fe0d 	bl	b9ce4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   ba0ca:	1c43      	adds	r3, r0, #1
   ba0cc:	d128      	bne.n	ba120 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   ba0ce:	7c25      	ldrb	r5, [r4, #16]
   ba0d0:	2d00      	cmp	r5, #0
   ba0d2:	d1e7      	bne.n	ba0a4 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   ba0d4:	6960      	ldr	r0, [r4, #20]
   ba0d6:	f006 f94f 	bl	c0378 <free>
			tokens = 0;
   ba0da:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   ba0dc:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   ba0de:	2500      	movs	r5, #0
	parser->toksuper = -1;
   ba0e0:	f04f 37ff 	mov.w	r7, #4294967295
	parser->toknext = 0;
   ba0e4:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   ba0e8:	68e2      	ldr	r2, [r4, #12]
   ba0ea:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   ba0ec:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   ba0ee:	9500      	str	r5, [sp, #0]
   ba0f0:	462b      	mov	r3, r5
   ba0f2:	4630      	mov	r0, r6
   ba0f4:	f7ff fdf6 	bl	b9ce4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   ba0f8:	2800      	cmp	r0, #0
   ba0fa:	dbd3      	blt.n	ba0a4 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   ba0fc:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   ba0fe:	d017      	beq.n	ba130 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   ba100:	0100      	lsls	r0, r0, #4
   ba102:	f006 f931 	bl	c0368 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   ba106:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   ba108:	6160      	str	r0, [r4, #20]
   ba10a:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   ba10c:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   ba10e:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   ba112:	68e2      	ldr	r2, [r4, #12]
   ba114:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   ba116:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   ba118:	4630      	mov	r0, r6
   ba11a:	f7ff fde3 	bl	b9ce4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   ba11e:	e001      	b.n	ba124 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   ba120:	2800      	cmp	r0, #0
   ba122:	dbbf      	blt.n	ba0a4 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   ba124:	6963      	ldr	r3, [r4, #20]
   ba126:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   ba12a:	61a0      	str	r0, [r4, #24]
	return true;
   ba12c:	2001      	movs	r0, #1
   ba12e:	e7ba      	b.n	ba0a6 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   ba130:	6963      	ldr	r3, [r4, #20]
   ba132:	61a3      	str	r3, [r4, #24]
   ba134:	e7fa      	b.n	ba12c <_ZN10JsonParser5parseEv+0x90>

000ba136 <_ZN12JsonModifier14removeKeyValueEPKN21JsonParserGeneratorRK9jsmntok_tEPKc>:
bool JsonModifier::removeKeyValue(const JsonParserGeneratorRK::jsmntok_t *container, const char *key) {
   ba136:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba13a:	b08b      	sub	sp, #44	; 0x2c
   ba13c:	4604      	mov	r4, r0
	bool bResult = jp.getValueTokenByKey(container, key, valueToken);
   ba13e:	ab01      	add	r3, sp, #4
   ba140:	6b00      	ldr	r0, [r0, #48]	; 0x30
   ba142:	f7ff fbf9 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	if (!bResult) {
   ba146:	4605      	mov	r5, r0
   ba148:	b3a0      	cbz	r0, ba1b4 <_ZN12JsonModifier14removeKeyValueEPKN21JsonParserGeneratorRK9jsmntok_tEPKc+0x7e>
	keyToken = &valueToken[-1];
   ba14a:	f8dd 9004 	ldr.w	r9, [sp, #4]
   ba14e:	f1a9 0710 	sub.w	r7, r9, #16
	const JsonParserGeneratorRK::jsmntok_t expandedKeyToken = tokenWithQuotes(keyToken);
   ba152:	463a      	mov	r2, r7
   ba154:	4621      	mov	r1, r4
   ba156:	a802      	add	r0, sp, #8
   ba158:	f7ff fd7a 	bl	b9c50 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>
	const JsonParserGeneratorRK::jsmntok_t expandedValueToken = tokenWithQuotes(valueToken);
   ba15c:	464a      	mov	r2, r9
   ba15e:	4621      	mov	r1, r4
   ba160:	a806      	add	r0, sp, #24
	const JsonParserGeneratorRK::jsmntok_t expandedKeyToken = tokenWithQuotes(keyToken);
   ba162:	f8dd 800c 	ldr.w	r8, [sp, #12]
	const JsonParserGeneratorRK::jsmntok_t expandedValueToken = tokenWithQuotes(valueToken);
   ba166:	f7ff fd73 	bl	b9c50 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>
	int left = findLeftComma(keyToken);
   ba16a:	4639      	mov	r1, r7
   ba16c:	4620      	mov	r0, r4
   ba16e:	f7ff fd7f 	bl	b9c70 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>
	int right = findRightComma(valueToken);
   ba172:	4649      	mov	r1, r9
	int left = findLeftComma(keyToken);
   ba174:	4607      	mov	r7, r0
	int right = findRightComma(valueToken);
   ba176:	4620      	mov	r0, r4
   ba178:	f7ff fd95 	bl	b9ca6 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>
	if (left >= 0 && right >= 0) {
   ba17c:	2f00      	cmp	r7, #0
	const JsonParserGeneratorRK::jsmntok_t expandedValueToken = tokenWithQuotes(valueToken);
   ba17e:	9e08      	ldr	r6, [sp, #32]
	int right = findRightComma(valueToken);
   ba180:	4603      	mov	r3, r0
	if (left >= 0 && right >= 0) {
   ba182:	db03      	blt.n	ba18c <_ZN12JsonModifier14removeKeyValueEPKN21JsonParserGeneratorRK9jsmntok_tEPKc+0x56>
   ba184:	2800      	cmp	r0, #0
   ba186:	db19      	blt.n	ba1bc <_ZN12JsonModifier14removeKeyValueEPKN21JsonParserGeneratorRK9jsmntok_tEPKc+0x86>
		right++;
   ba188:	1c5e      	adds	r6, r3, #1
		left = expandedKeyToken.start;
   ba18a:	e001      	b.n	ba190 <_ZN12JsonModifier14removeKeyValueEPKN21JsonParserGeneratorRK9jsmntok_tEPKc+0x5a>
	if (right >= 0) {
   ba18c:	2800      	cmp	r0, #0
   ba18e:	dafb      	bge.n	ba188 <_ZN12JsonModifier14removeKeyValueEPKN21JsonParserGeneratorRK9jsmntok_tEPKc+0x52>
	origAfter = jp.getOffset() - right;
   ba190:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba192:	68da      	ldr	r2, [r3, #12]
   ba194:	1b92      	subs	r2, r2, r6
	if (origAfter > 0) {
   ba196:	2a00      	cmp	r2, #0
	origAfter = jp.getOffset() - right;
   ba198:	63a2      	str	r2, [r4, #56]	; 0x38
	if (origAfter > 0) {
   ba19a:	dd04      	ble.n	ba1a6 <_ZN12JsonModifier14removeKeyValueEPKN21JsonParserGeneratorRK9jsmntok_tEPKc+0x70>
	char *getBuffer() const { return buffer; }
   ba19c:	6858      	ldr	r0, [r3, #4]
		memmove(jp.getBuffer() + left, jp.getBuffer() + right, origAfter);
   ba19e:	1981      	adds	r1, r0, r6
   ba1a0:	4440      	add	r0, r8
   ba1a2:	f00b f91b 	bl	c53dc <memmove>
	jp.setOffset(left + origAfter);
   ba1a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba1a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
   ba1aa:	4443      	add	r3, r8
	void setOffset(size_t offset) { this->offset = offset; };
   ba1ac:	60d3      	str	r3, [r2, #12]
	jp.parse();
   ba1ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
   ba1b0:	f7ff ff74 	bl	ba09c <_ZN10JsonParser5parseEv>
}
   ba1b4:	4628      	mov	r0, r5
   ba1b6:	b00b      	add	sp, #44	; 0x2c
   ba1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba1bc:	46b8      	mov	r8, r7
   ba1be:	e7e7      	b.n	ba190 <_ZN12JsonModifier14removeKeyValueEPKN21JsonParserGeneratorRK9jsmntok_tEPKc+0x5a>

000ba1c0 <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   ba1c0:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   ba1c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   ba1c4:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   ba1c6:	4604      	mov	r4, r0
	if (start == -1) {
   ba1c8:	d018      	beq.n	ba1fc <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   ba1ca:	6b82      	ldr	r2, [r0, #56]	; 0x38
   ba1cc:	2a00      	cmp	r2, #0
   ba1ce:	dd08      	ble.n	ba1e2 <_ZN12JsonModifier6finishEv+0x22>
	char *getBuffer() const { return buffer; }
   ba1d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   ba1d2:	68e5      	ldr	r5, [r4, #12]
   ba1d4:	6848      	ldr	r0, [r1, #4]
   ba1d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba1d8:	442b      	add	r3, r5
   ba1da:	4401      	add	r1, r0
   ba1dc:	4418      	add	r0, r3
   ba1de:	f00b f8fd 	bl	c53dc <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   ba1e2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   ba1e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   ba1e8:	440b      	add	r3, r1
   ba1ea:	68e1      	ldr	r1, [r4, #12]
   ba1ec:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   ba1ee:	60d3      	str	r3, [r2, #12]
	jp.parse();
   ba1f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
   ba1f2:	f7ff ff53 	bl	ba09c <_ZN10JsonParser5parseEv>
	start = -1;
   ba1f6:	f04f 33ff 	mov.w	r3, #4294967295
   ba1fa:	6363      	str	r3, [r4, #52]	; 0x34
}
   ba1fc:	bd38      	pop	{r3, r4, r5, pc}

000ba1fe <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   ba1fe:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   ba200:	2301      	movs	r3, #1
   ba202:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   ba204:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   ba206:	4604      	mov	r4, r0
        if (th->func) {
   ba208:	b143      	cbz	r3, ba21c <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   ba20a:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba20c:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   ba20e:	2301      	movs	r3, #1
   ba210:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   ba212:	2000      	movs	r0, #0
    }
   ba214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   ba218:	f005 bde6 	b.w	bfde8 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   ba21c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   ba21e:	2800      	cmp	r0, #0
   ba220:	d0f5      	beq.n	ba20e <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   ba222:	6883      	ldr	r3, [r0, #8]
   ba224:	b90b      	cbnz	r3, ba22a <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   ba226:	f009 fae1 	bl	c37ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba22a:	68c3      	ldr	r3, [r0, #12]
   ba22c:	e7ee      	b.n	ba20c <_ZN6Thread3runEPv+0xe>

000ba22e <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   ba22e:	2a01      	cmp	r2, #1
   ba230:	d102      	bne.n	ba238 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba232:	6001      	str	r1, [r0, #0]
      }
   ba234:	2000      	movs	r0, #0
   ba236:	4770      	bx	lr
	  switch (__op)
   ba238:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba23a:	bf04      	itt	eq
   ba23c:	680b      	ldreq	r3, [r1, #0]
   ba23e:	6003      	streq	r3, [r0, #0]
	      break;
   ba240:	e7f8      	b.n	ba234 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000ba242 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   ba242:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   ba244:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   ba246:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   ba248:	b135      	cbz	r5, ba258 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   ba24a:	4628      	mov	r0, r5
   ba24c:	f7fa f87c 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   ba250:	2110      	movs	r1, #16
   ba252:	4628      	mov	r0, r5
   ba254:	f7f9 ff23 	bl	b409e <_ZdlPvj>
   ba258:	4620      	mov	r0, r4
   ba25a:	2114      	movs	r1, #20
      }
   ba25c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   ba260:	f7f9 bf1d 	b.w	b409e <_ZdlPvj>

000ba264 <_ZN6Thread7disposeEv>:
    void dispose()
   ba264:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   ba266:	6803      	ldr	r3, [r0, #0]
   ba268:	4604      	mov	r4, r0
        if (!isValid())
   ba26a:	b1ab      	cbz	r3, ba298 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   ba26c:	6858      	ldr	r0, [r3, #4]
   ba26e:	f005 fd6b 	bl	bfd48 <os_thread_is_current>
   ba272:	b988      	cbnz	r0, ba298 <_ZN6Thread7disposeEv+0x34>
   ba274:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   ba276:	7c5a      	ldrb	r2, [r3, #17]
   ba278:	b912      	cbnz	r2, ba280 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   ba27a:	6858      	ldr	r0, [r3, #4]
   ba27c:	f005 fd6c 	bl	bfd58 <os_thread_join>
        os_thread_cleanup(d_->handle);
   ba280:	6823      	ldr	r3, [r4, #0]
   ba282:	6858      	ldr	r0, [r3, #4]
   ba284:	f005 fd70 	bl	bfd68 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   ba288:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   ba28a:	2300      	movs	r3, #0
   ba28c:	6023      	str	r3, [r4, #0]
	if (__old_p)
   ba28e:	b118      	cbz	r0, ba298 <_ZN6Thread7disposeEv+0x34>
    }
   ba290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba294:	f7ff bfd5 	b.w	ba242 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   ba298:	bd10      	pop	{r4, pc}
	...

000ba29c <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   ba29c:	4a05      	ldr	r2, [pc, #20]	; (ba2b4 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   ba29e:	6002      	str	r2, [r0, #0]
   ba2a0:	2200      	movs	r2, #0
   ba2a2:	6042      	str	r2, [r0, #4]
   ba2a4:	7302      	strb	r2, [r0, #12]
        val_(0) {
   ba2a6:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   ba2aa:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   ba2ae:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   ba2b2:	4770      	bx	lr
   ba2b4:	000c7b58 	.word	0x000c7b58

000ba2b8 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   ba2b8:	b510      	push	{r4, lr}
    if (!_instance) {
   ba2ba:	4c07      	ldr	r4, [pc, #28]	; (ba2d8 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   ba2bc:	6823      	ldr	r3, [r4, #0]
   ba2be:	b943      	cbnz	r3, ba2d2 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   ba2c0:	f240 4064 	movw	r0, #1124	; 0x464
   ba2c4:	f7f9 fee7 	bl	b4096 <_Znwj>
   ba2c8:	4603      	mov	r3, r0
   ba2ca:	b108      	cbz	r0, ba2d0 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   ba2cc:	f7ff ffe6 	bl	ba29c <_ZN19BackgroundPublishRKC1Ev>
   ba2d0:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   ba2d2:	6820      	ldr	r0, [r4, #0]
   ba2d4:	bd10      	pop	{r4, pc}
   ba2d6:	bf00      	nop
   ba2d8:	2003b444 	.word	0x2003b444

000ba2dc <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   ba2dc:	b538      	push	{r3, r4, r5, lr}
   ba2de:	4604      	mov	r4, r0
    if(thread)
   ba2e0:	6840      	ldr	r0, [r0, #4]
   ba2e2:	b190      	cbz	r0, ba30a <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   ba2e4:	2302      	movs	r3, #2
   ba2e6:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   ba2e8:	f7ff ffbc 	bl	ba264 <_ZN6Thread7disposeEv>
        delete thread;
   ba2ec:	6865      	ldr	r5, [r4, #4]
   ba2ee:	b155      	cbz	r5, ba306 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   ba2f0:	4628      	mov	r0, r5
   ba2f2:	f7ff ffb7 	bl	ba264 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   ba2f6:	6828      	ldr	r0, [r5, #0]
   ba2f8:	b108      	cbz	r0, ba2fe <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   ba2fa:	f7ff ffa2 	bl	ba242 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   ba2fe:	2104      	movs	r1, #4
   ba300:	4628      	mov	r0, r5
   ba302:	f7f9 fecc 	bl	b409e <_ZdlPvj>
        thread = NULL;
   ba306:	2300      	movs	r3, #0
   ba308:	6063      	str	r3, [r4, #4]
    }
}
   ba30a:	bd38      	pop	{r3, r4, r5, pc}

000ba30c <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   ba30c:	b510      	push	{r4, lr}
   ba30e:	4b05      	ldr	r3, [pc, #20]	; (ba324 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   ba310:	6003      	str	r3, [r0, #0]
   ba312:	4604      	mov	r4, r0
    stop();
   ba314:	f7ff ffe2 	bl	ba2dc <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   ba318:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   ba31c:	f7fa f814 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
}
   ba320:	4620      	mov	r0, r4
   ba322:	bd10      	pop	{r4, pc}
   ba324:	000c7b58 	.word	0x000c7b58

000ba328 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   ba328:	b510      	push	{r4, lr}
   ba32a:	4604      	mov	r4, r0
}
   ba32c:	f7ff ffee 	bl	ba30c <_ZN19BackgroundPublishRKD1Ev>
   ba330:	4620      	mov	r0, r4
   ba332:	f240 4164 	movw	r1, #1124	; 0x464
   ba336:	f7f9 feb2 	bl	b409e <_ZdlPvj>
   ba33a:	4620      	mov	r0, r4
   ba33c:	bd10      	pop	{r4, pc}

000ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   ba33e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   ba340:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   ba342:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   ba344:	b17c      	cbz	r4, ba366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   ba346:	6863      	ldr	r3, [r4, #4]
   ba348:	3b01      	subs	r3, #1
   ba34a:	6063      	str	r3, [r4, #4]
   ba34c:	b95b      	cbnz	r3, ba366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   ba34e:	6823      	ldr	r3, [r4, #0]
   ba350:	4620      	mov	r0, r4
   ba352:	689b      	ldr	r3, [r3, #8]
   ba354:	4798      	blx	r3
          if (--_M_weak_count == 0)
   ba356:	68a3      	ldr	r3, [r4, #8]
   ba358:	3b01      	subs	r3, #1
   ba35a:	60a3      	str	r3, [r4, #8]
   ba35c:	b91b      	cbnz	r3, ba366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   ba35e:	6823      	ldr	r3, [r4, #0]
   ba360:	4620      	mov	r0, r4
   ba362:	68db      	ldr	r3, [r3, #12]
   ba364:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   ba366:	4628      	mov	r0, r5
   ba368:	bd38      	pop	{r3, r4, r5, pc}

000ba36a <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   ba36a:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba36c:	4604      	mov	r4, r0
   ba36e:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   ba370:	f100 060d 	add.w	r6, r0, #13
   ba374:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   ba378:	7b23      	ldrb	r3, [r4, #12]
   ba37a:	b91b      	cbnz	r3, ba384 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   ba37c:	2001      	movs	r0, #1
   ba37e:	f007 fee5 	bl	c214c <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   ba382:	e7f9      	b.n	ba378 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   ba384:	7b23      	ldrb	r3, [r4, #12]
   ba386:	2b02      	cmp	r3, #2
   ba388:	d064      	beq.n	ba454 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   ba38a:	68a0      	ldr	r0, [r4, #8]
   ba38c:	f005 fcfc 	bl	bfd88 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   ba390:	68a0      	ldr	r0, [r4, #8]
   ba392:	f005 fd01 	bl	bfd98 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   ba396:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   ba39a:	f88d 3000 	strb.w	r3, [sp]
   ba39e:	463a      	mov	r2, r7
   ba3a0:	233c      	movs	r3, #60	; 0x3c
   ba3a2:	4631      	mov	r1, r6
   ba3a4:	a806      	add	r0, sp, #24
   ba3a6:	f008 f9e1 	bl	c276c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   ba3aa:	9d06      	ldr	r5, [sp, #24]
   ba3ac:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   ba3ae:	b933      	cbnz	r3, ba3be <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   ba3b0:	7b23      	ldrb	r3, [r4, #12]
   ba3b2:	2b02      	cmp	r3, #2
   ba3b4:	d003      	beq.n	ba3be <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   ba3b6:	2001      	movs	r0, #1
   ba3b8:	f007 fec8 	bl	c214c <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   ba3bc:	e7f5      	b.n	ba3aa <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   ba3be:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   ba3c2:	b31b      	cbz	r3, ba40c <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   ba3c4:	2000      	movs	r0, #0
   ba3c6:	f005 fecf 	bl	c0168 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba3ca:	b120      	cbz	r0, ba3d6 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   ba3cc:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   ba3ce:	b913      	cbnz	r3, ba3d6 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   ba3d0:	f005 ff7a 	bl	c02c8 <spark_process>
    }
   ba3d4:	e7fa      	b.n	ba3cc <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   ba3d6:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   ba3d8:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   ba3dc:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   ba3de:	1e59      	subs	r1, r3, #1
   ba3e0:	424b      	negs	r3, r1
   ba3e2:	414b      	adcs	r3, r1
   ba3e4:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   ba3e8:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   ba3ec:	e9cd 6703 	strd	r6, r7, [sp, #12]
   ba3f0:	b90b      	cbnz	r3, ba3f6 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   ba3f2:	f009 f9fb 	bl	c37ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba3f6:	ab05      	add	r3, sp, #20
   ba3f8:	9300      	str	r3, [sp, #0]
   ba3fa:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   ba3fe:	ab04      	add	r3, sp, #16
   ba400:	aa03      	add	r2, sp, #12
   ba402:	f10d 010b 	add.w	r1, sp, #11
   ba406:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   ba40a:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   ba40c:	68a0      	ldr	r0, [r4, #8]
   ba40e:	f005 fcbb 	bl	bfd88 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   ba412:	7b23      	ldrb	r3, [r4, #12]
   ba414:	2b02      	cmp	r3, #2
   ba416:	d017      	beq.n	ba448 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   ba418:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   ba41c:	2500      	movs	r5, #0
   ba41e:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   ba422:	b143      	cbz	r3, ba436 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   ba424:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   ba428:	2203      	movs	r2, #3
   ba42a:	4608      	mov	r0, r1
   ba42c:	4798      	blx	r3
	    _M_manager = nullptr;
   ba42e:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   ba432:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   ba436:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   ba438:	68a0      	ldr	r0, [r4, #8]
   ba43a:	7323      	strb	r3, [r4, #12]
   ba43c:	f005 fcac 	bl	bfd98 <os_mutex_unlock>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   ba440:	a807      	add	r0, sp, #28
   ba442:	f7ff ff7c 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba446:	e797      	b.n	ba378 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   ba448:	68a0      	ldr	r0, [r4, #8]
   ba44a:	f005 fca5 	bl	bfd98 <os_mutex_unlock>
   ba44e:	a807      	add	r0, sp, #28
   ba450:	f7ff ff75 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   ba454:	b009      	add	sp, #36	; 0x24
   ba456:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba458 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   ba458:	6800      	ldr	r0, [r0, #0]
   ba45a:	f7ff bf86 	b.w	ba36a <_ZN19BackgroundPublishRK8thread_fEv>

000ba45e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   ba45e:	b513      	push	{r0, r1, r4, lr}
   ba460:	460b      	mov	r3, r1
   ba462:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba464:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba468:	466c      	mov	r4, sp
   ba46a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   ba46e:	e893 0003 	ldmia.w	r3, {r0, r1}
   ba472:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   ba476:	e894 0003 	ldmia.w	r4, {r0, r1}
   ba47a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   ba47e:	b002      	add	sp, #8
   ba480:	bd10      	pop	{r4, pc}
	...

000ba484 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   ba484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba488:	4606      	mov	r6, r0
   ba48a:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   ba48c:	2014      	movs	r0, #20
   ba48e:	4926      	ldr	r1, [pc, #152]	; (ba528 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   ba490:	4617      	mov	r7, r2
   ba492:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   ba494:	f009 f9a0 	bl	c37d8 <_ZnwjRKSt9nothrow_t>
   ba498:	4604      	mov	r4, r0
   ba49a:	b130      	cbz	r0, ba4aa <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   ba49c:	2000      	movs	r0, #0
            exited(false) {
   ba49e:	e9c4 0000 	strd	r0, r0, [r4]
   ba4a2:	e9c4 0002 	strd	r0, r0, [r4, #8]
   ba4a6:	7420      	strb	r0, [r4, #16]
   ba4a8:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   ba4aa:	6034      	str	r4, [r6, #0]
        if (!d_) {
   ba4ac:	2c00      	cmp	r4, #0
   ba4ae:	d031      	beq.n	ba514 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   ba4b0:	491d      	ldr	r1, [pc, #116]	; (ba528 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   ba4b2:	2010      	movs	r0, #16
   ba4b4:	f009 f990 	bl	c37d8 <_ZnwjRKSt9nothrow_t>
   ba4b8:	4605      	mov	r5, r0
   ba4ba:	b168      	cbz	r0, ba4d8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   ba4bc:	2300      	movs	r3, #0
   ba4be:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba4c0:	4601      	mov	r1, r0
   ba4c2:	4638      	mov	r0, r7
   ba4c4:	f7ff ffcb 	bl	ba45e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba4c8:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba4ca:	68aa      	ldr	r2, [r5, #8]
   ba4cc:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba4ce:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba4d0:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba4d2:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba4d4:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba4d6:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   ba4d8:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   ba4da:	6025      	str	r5, [r4, #0]
	if (__old_p)
   ba4dc:	b137      	cbz	r7, ba4ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   ba4de:	4638      	mov	r0, r7
   ba4e0:	f7f9 ff32 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   ba4e4:	2110      	movs	r1, #16
   ba4e6:	4638      	mov	r0, r7
   ba4e8:	f7f9 fdd9 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   ba4ec:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   ba4ee:	6803      	ldr	r3, [r0, #0]
   ba4f0:	b183      	cbz	r3, ba514 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   ba4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba4f4:	464a      	mov	r2, r9
   ba4f6:	e9cd 0300 	strd	r0, r3, [sp]
   ba4fa:	4641      	mov	r1, r8
   ba4fc:	4b0b      	ldr	r3, [pc, #44]	; (ba52c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   ba4fe:	3004      	adds	r0, #4
   ba500:	f005 fc1a 	bl	bfd38 <os_thread_create>
   ba504:	b930      	cbnz	r0, ba514 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   ba506:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   ba508:	7c1b      	ldrb	r3, [r3, #16]
   ba50a:	b94b      	cbnz	r3, ba520 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   ba50c:	2001      	movs	r0, #1
   ba50e:	f005 fb6b 	bl	bfbe8 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   ba512:	e7f8      	b.n	ba506 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   ba514:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   ba516:	2300      	movs	r3, #0
   ba518:	6033      	str	r3, [r6, #0]
	if (__old_p)
   ba51a:	b108      	cbz	r0, ba520 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   ba51c:	f7ff fe91 	bl	ba242 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   ba520:	4630      	mov	r0, r6
   ba522:	b003      	add	sp, #12
   ba524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba528:	000c94ae 	.word	0x000c94ae
   ba52c:	000ba1ff 	.word	0x000ba1ff

000ba530 <_ZN19BackgroundPublishRK5startEv>:
{
   ba530:	b530      	push	{r4, r5, lr}
    if(!thread)
   ba532:	6843      	ldr	r3, [r0, #4]
{
   ba534:	b087      	sub	sp, #28
   ba536:	4604      	mov	r4, r0
    if(!thread)
   ba538:	b9c3      	cbnz	r3, ba56c <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   ba53a:	3008      	adds	r0, #8
   ba53c:	f005 fc1c 	bl	bfd78 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   ba540:	4b0b      	ldr	r3, [pc, #44]	; (ba570 <_ZN19BackgroundPublishRK5startEv+0x40>)
   ba542:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   ba544:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   ba546:	4b0b      	ldr	r3, [pc, #44]	; (ba574 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba548:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   ba54a:	9304      	str	r3, [sp, #16]
   ba54c:	f7f9 fda3 	bl	b4096 <_Znwj>
   ba550:	4605      	mov	r5, r0
   ba552:	b138      	cbz	r0, ba564 <_ZN19BackgroundPublishRK5startEv+0x34>
   ba554:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   ba558:	9300      	str	r3, [sp, #0]
   ba55a:	4907      	ldr	r1, [pc, #28]	; (ba578 <_ZN19BackgroundPublishRK5startEv+0x48>)
   ba55c:	2302      	movs	r3, #2
   ba55e:	aa02      	add	r2, sp, #8
   ba560:	f7ff ff90 	bl	ba484 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   ba564:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   ba566:	a802      	add	r0, sp, #8
   ba568:	f7f9 feee 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
}
   ba56c:	b007      	add	sp, #28
   ba56e:	bd30      	pop	{r4, r5, pc}
   ba570:	000ba459 	.word	0x000ba459
   ba574:	000ba22f 	.word	0x000ba22f
   ba578:	000c7b3c 	.word	0x000c7b3c

000ba57c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   ba57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba580:	4604      	mov	r4, r0
   ba582:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   ba584:	6880      	ldr	r0, [r0, #8]
   ba586:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   ba588:	4698      	mov	r8, r3
   ba58a:	460d      	mov	r5, r1
   ba58c:	4616      	mov	r6, r2
   ba58e:	f005 fbfb 	bl	bfd88 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   ba592:	6863      	ldr	r3, [r4, #4]
   ba594:	b11b      	cbz	r3, ba59e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   ba596:	7b23      	ldrb	r3, [r4, #12]
   ba598:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   ba59c:	b133      	cbz	r3, ba5ac <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   ba59e:	68a0      	ldr	r0, [r4, #8]
   ba5a0:	f005 fbfa 	bl	bfd98 <os_mutex_unlock>
    {
        return false;
   ba5a4:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   ba5a6:	b005      	add	sp, #20
   ba5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba5ac:	68a0      	ldr	r0, [r4, #8]
   ba5ae:	f005 fbf3 	bl	bfd98 <os_mutex_unlock>
    if(!name)
   ba5b2:	2d00      	cmp	r5, #0
   ba5b4:	d03d      	beq.n	ba632 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   ba5b6:	2240      	movs	r2, #64	; 0x40
   ba5b8:	4629      	mov	r1, r5
   ba5ba:	f104 000d 	add.w	r0, r4, #13
   ba5be:	f00b f80e 	bl	c55de <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   ba5c2:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   ba5c6:	b38e      	cbz	r6, ba62c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   ba5c8:	f240 4201 	movw	r2, #1025	; 0x401
   ba5cc:	4631      	mov	r1, r6
   ba5ce:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   ba5d2:	f00b f804 	bl	c55de <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   ba5d6:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   ba5da:	2300      	movs	r3, #0
   ba5dc:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   ba5de:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   ba5e0:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   ba5e4:	b13b      	cbz	r3, ba5f6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba5e6:	2202      	movs	r2, #2
   ba5e8:	4639      	mov	r1, r7
   ba5ea:	4668      	mov	r0, sp
   ba5ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba5ee:	68fb      	ldr	r3, [r7, #12]
   ba5f0:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   ba5f2:	68bb      	ldr	r3, [r7, #8]
   ba5f4:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   ba5f6:	4629      	mov	r1, r5
   ba5f8:	4668      	mov	r0, sp
   ba5fa:	f7ff ff30 	bl	ba45e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba5fe:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba600:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   ba604:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba608:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba60a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   ba60c:	4668      	mov	r0, sp
   ba60e:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   ba612:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   ba616:	9203      	str	r2, [sp, #12]
   ba618:	f7f9 fe96 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   ba61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba61e:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   ba622:	2001      	movs	r0, #1
    event_flags = flags;
   ba624:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   ba628:	7320      	strb	r0, [r4, #12]
    return true;
   ba62a:	e7bc      	b.n	ba5a6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   ba62c:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   ba630:	e7d3      	b.n	ba5da <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   ba632:	4628      	mov	r0, r5
   ba634:	e7b7      	b.n	ba5a6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000ba636 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   ba636:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   ba638:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   ba63a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   ba63e:	2101      	movs	r1, #1
   ba640:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   ba644:	4770      	bx	lr

000ba646 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba646:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   ba648:	6842      	ldr	r2, [r0, #4]
   ba64a:	4603      	mov	r3, r0
   ba64c:	1054      	asrs	r4, r2, #1
   ba64e:	eb01 0062 	add.w	r0, r1, r2, asr #1
   ba652:	07d2      	lsls	r2, r2, #31
   ba654:	bf48      	it	mi
   ba656:	590a      	ldrmi	r2, [r1, r4]
   ba658:	681b      	ldr	r3, [r3, #0]
      }
   ba65a:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba65e:	bf48      	it	mi
   ba660:	58d3      	ldrmi	r3, [r2, r3]
   ba662:	4718      	bx	r3

000ba664 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   ba664:	2a01      	cmp	r2, #1
   ba666:	d102      	bne.n	ba66e <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba668:	6001      	str	r1, [r0, #0]
      }
   ba66a:	2000      	movs	r0, #0
   ba66c:	4770      	bx	lr
	  switch (__op)
   ba66e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba670:	bf04      	itt	eq
   ba672:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   ba676:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   ba67a:	e7f6      	b.n	ba66a <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000ba67c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   ba67c:	2a01      	cmp	r2, #1
   ba67e:	d102      	bne.n	ba686 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba680:	6001      	str	r1, [r0, #0]
      }
   ba682:	2000      	movs	r0, #0
   ba684:	4770      	bx	lr
	  switch (__op)
   ba686:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba688:	bf04      	itt	eq
   ba68a:	680b      	ldreq	r3, [r1, #0]
   ba68c:	6003      	streq	r3, [r0, #0]
	      break;
   ba68e:	e7f8      	b.n	ba682 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000ba690 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   ba690:	6f40      	ldr	r0, [r0, #116]	; 0x74
   ba692:	f005 bb99 	b.w	bfdc8 <os_mutex_recursive_lock>

000ba696 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   ba696:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   ba69a:	4601      	mov	r1, r0
    if (stateHandler) {
   ba69c:	b11b      	cbz	r3, ba6a6 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba69e:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   ba6a2:	30c0      	adds	r0, #192	; 0xc0
   ba6a4:	4718      	bx	r3
}
   ba6a6:	4770      	bx	lr

000ba6a8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   ba6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   ba6aa:	4d12      	ldr	r5, [pc, #72]	; (ba6f4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   ba6ac:	4608      	mov	r0, r1
        eventData = "";
   ba6ae:	2a00      	cmp	r2, #0
   ba6b0:	bf18      	it	ne
   ba6b2:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   ba6b4:	460e      	mov	r6, r1
   ba6b6:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   ba6b8:	f00a ff75 	bl	c55a6 <strlen>
   ba6bc:	2840      	cmp	r0, #64	; 0x40
   ba6be:	d816      	bhi.n	ba6ee <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   ba6c0:	4628      	mov	r0, r5
   ba6c2:	f00a ff70 	bl	c55a6 <strlen>
   ba6c6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   ba6ca:	d810      	bhi.n	ba6ee <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   ba6cc:	3043      	adds	r0, #67	; 0x43
   ba6ce:	f7f9 fce4 	bl	b409a <_Znaj>
    if (event) {
   ba6d2:	4604      	mov	r4, r0
   ba6d4:	b148      	cbz	r0, ba6ea <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   ba6d6:	4631      	mov	r1, r6
        event->flags = flags;
   ba6d8:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   ba6dc:	f00a ff3d 	bl	c555a <strcpy>
        strcpy(event->eventData, eventData);
   ba6e0:	4629      	mov	r1, r5
   ba6e2:	f104 0042 	add.w	r0, r4, #66	; 0x42
   ba6e6:	f00a ff38 	bl	c555a <strcpy>
}
   ba6ea:	4620      	mov	r0, r4
   ba6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   ba6ee:	2400      	movs	r4, #0
   ba6f0:	e7fb      	b.n	ba6ea <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   ba6f2:	bf00      	nop
   ba6f4:	000c9298 	.word	0x000c9298

000ba6f8 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   ba6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba6fa:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   ba6fc:	460a      	mov	r2, r1
   ba6fe:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   ba700:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   ba702:	1d01      	adds	r1, r0, #4
   ba704:	a808      	add	r0, sp, #32
   ba706:	f000 fe3b 	bl	bb380 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba70a:	9808      	ldr	r0, [sp, #32]
   ba70c:	2100      	movs	r1, #0
   ba70e:	f00b f85f 	bl	c57d0 <open>
   ba712:	4605      	mov	r5, r0
   ba714:	a808      	add	r0, sp, #32
   ba716:	f006 f923 	bl	c0960 <_ZN6StringD1Ev>
    if (fd) {
   ba71a:	2d00      	cmp	r5, #0
   ba71c:	d060      	beq.n	ba7e0 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   ba71e:	a908      	add	r1, sp, #32
   ba720:	4628      	mov	r0, r5
   ba722:	f00b f843 	bl	c57ac <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   ba726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba728:	492e      	ldr	r1, [pc, #184]	; (ba7e4 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   ba72a:	482f      	ldr	r0, [pc, #188]	; (ba7e8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba72c:	4632      	mov	r2, r6
   ba72e:	f7fd fe67 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   ba732:	2200      	movs	r2, #0
   ba734:	4611      	mov	r1, r2
   ba736:	4628      	mov	r0, r5
   ba738:	f00b f840 	bl	c57bc <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   ba73c:	2208      	movs	r2, #8
   ba73e:	a906      	add	r1, sp, #24
   ba740:	4628      	mov	r0, r5
   ba742:	f00b f859 	bl	c57f8 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   ba746:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   ba748:	2f4a      	cmp	r7, #74	; 0x4a
   ba74a:	dd39      	ble.n	ba7c0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   ba74c:	4b27      	ldr	r3, [pc, #156]	; (ba7ec <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   ba74e:	9a06      	ldr	r2, [sp, #24]
   ba750:	429a      	cmp	r2, r3
   ba752:	d135      	bne.n	ba7c0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   ba754:	4b26      	ldr	r3, [pc, #152]	; (ba7f0 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   ba756:	9a07      	ldr	r2, [sp, #28]
   ba758:	429a      	cmp	r2, r3
   ba75a:	d131      	bne.n	ba7c0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   ba75c:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   ba760:	4610      	mov	r0, r2
   ba762:	9205      	str	r2, [sp, #20]
   ba764:	f7f9 fc99 	bl	b409a <_Znaj>
            if (result) {
   ba768:	4604      	mov	r4, r0
   ba76a:	b1c0      	cbz	r0, ba79e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   ba76c:	4427      	add	r7, r4
                read(fd, result, eventSize);
   ba76e:	4601      	mov	r1, r0
   ba770:	9a05      	ldr	r2, [sp, #20]
   ba772:	4628      	mov	r0, r5
   ba774:	f00b f840 	bl	c57f8 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   ba778:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   ba77c:	b9ab      	cbnz	r3, ba7aa <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   ba77e:	1c63      	adds	r3, r4, #1
   ba780:	4618      	mov	r0, r3
   ba782:	9305      	str	r3, [sp, #20]
   ba784:	f00a ff0f 	bl	c55a6 <strlen>
   ba788:	283f      	cmp	r0, #63	; 0x3f
   ba78a:	9b05      	ldr	r3, [sp, #20]
   ba78c:	d80d      	bhi.n	ba7aa <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   ba78e:	f104 0242 	add.w	r2, r4, #66	; 0x42
   ba792:	9200      	str	r2, [sp, #0]
   ba794:	4917      	ldr	r1, [pc, #92]	; (ba7f4 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   ba796:	4814      	ldr	r0, [pc, #80]	; (ba7e8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba798:	4632      	mov	r2, r6
   ba79a:	f7fd fe31 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   ba79e:	4628      	mov	r0, r5
   ba7a0:	f00a fffc 	bl	c579c <close>
}
   ba7a4:	4620      	mov	r0, r4
   ba7a6:	b01f      	add	sp, #124	; 0x7c
   ba7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   ba7aa:	4913      	ldr	r1, [pc, #76]	; (ba7f8 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   ba7ac:	480e      	ldr	r0, [pc, #56]	; (ba7e8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba7ae:	4632      	mov	r2, r6
   ba7b0:	f7fd fe26 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   ba7b4:	2143      	movs	r1, #67	; 0x43
   ba7b6:	4620      	mov	r0, r4
   ba7b8:	f7f9 fc71 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   ba7bc:	2400      	movs	r4, #0
   ba7be:	e7ee      	b.n	ba79e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   ba7c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   ba7c4:	9302      	str	r3, [sp, #8]
   ba7c6:	f89d 301d 	ldrb.w	r3, [sp, #29]
   ba7ca:	9301      	str	r3, [sp, #4]
   ba7cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   ba7d0:	9300      	str	r3, [sp, #0]
   ba7d2:	490a      	ldr	r1, [pc, #40]	; (ba7fc <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   ba7d4:	9b06      	ldr	r3, [sp, #24]
   ba7d6:	4804      	ldr	r0, [pc, #16]	; (ba7e8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba7d8:	4632      	mov	r2, r6
   ba7da:	f7fd fe11 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
   ba7de:	e7ed      	b.n	ba7bc <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   ba7e0:	462c      	mov	r4, r5
    return result;
   ba7e2:	e7df      	b.n	ba7a4 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   ba7e4:	000c7b60 	.word	0x000c7b60
   ba7e8:	2003b448 	.word	0x2003b448
   ba7ec:	31b67663 	.word	0x31b67663
   ba7f0:	00410801 	.word	0x00410801
   ba7f4:	000c7b74 	.word	0x000c7b74
   ba7f8:	000c7b96 	.word	0x000c7b96
   ba7fc:	000c7bc4 	.word	0x000c7bc4

000ba800 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   ba800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba804:	4680      	mov	r8, r0
   ba806:	4b28      	ldr	r3, [pc, #160]	; (ba8a8 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   ba808:	f848 3b04 	str.w	r3, [r8], #4
   ba80c:	4604      	mov	r4, r0
   ba80e:	4640      	mov	r0, r8
   ba810:	f000 fcce 	bl	bb1b0 <_ZN14SequentialFileC1Ev>
   ba814:	2202      	movs	r2, #2
   ba816:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba818:	2500      	movs	r5, #0
   ba81a:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   ba81e:	2308      	movs	r3, #8
   ba820:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   ba822:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   ba826:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   ba82a:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   ba82e:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba832:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba834:	2020      	movs	r0, #32
   ba836:	f7f9 fc2e 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba83a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   ba83c:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba83e:	3e01      	subs	r6, #1
   ba840:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   ba842:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   ba846:	4607      	mov	r7, r0
   ba848:	f44f 7000 	mov.w	r0, #512	; 0x200
   ba84c:	f7f9 fc23 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba850:	f500 7300 	add.w	r3, r0, #512	; 0x200
   ba854:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   ba858:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba85c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   ba860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba864:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   ba868:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   ba86c:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   ba870:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba874:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba878:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   ba87c:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   ba880:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   ba884:	4909      	ldr	r1, [pc, #36]	; (ba8ac <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   ba886:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   ba88a:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   ba88e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   ba892:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   ba896:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   ba89a:	4640      	mov	r0, r8
   ba89c:	f000 fcce 	bl	bb23c <_ZN14SequentialFile11withDirPathEPKc>
}
   ba8a0:	4620      	mov	r0, r4
   ba8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba8a6:	bf00      	nop
   ba8a8:	000c7de0 	.word	0x000c7de0
   ba8ac:	000c7c09 	.word	0x000c7c09

000ba8b0 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   ba8b0:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   ba8b2:	4d06      	ldr	r5, [pc, #24]	; (ba8cc <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   ba8b4:	682b      	ldr	r3, [r5, #0]
   ba8b6:	b93b      	cbnz	r3, ba8c8 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   ba8b8:	20d0      	movs	r0, #208	; 0xd0
   ba8ba:	f7f9 fbec 	bl	b4096 <_Znwj>
   ba8be:	4604      	mov	r4, r0
   ba8c0:	b108      	cbz	r0, ba8c6 <_ZN17PublishQueuePosix8instanceEv+0x16>
   ba8c2:	f7ff ff9d 	bl	ba800 <_ZN17PublishQueuePosixC1Ev>
   ba8c6:	602c      	str	r4, [r5, #0]
}
   ba8c8:	6828      	ldr	r0, [r5, #0]
   ba8ca:	bd38      	pop	{r3, r4, r5, pc}
   ba8cc:	2003b44c 	.word	0x2003b44c

000ba8d0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba8d0:	6942      	ldr	r2, [r0, #20]
   ba8d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba8d4:	1a9b      	subs	r3, r3, r2
   ba8d6:	109b      	asrs	r3, r3, #2
   ba8d8:	1e5a      	subs	r2, r3, #1
   ba8da:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   ba8de:	1a5b      	subs	r3, r3, r1
   ba8e0:	109b      	asrs	r3, r3, #2
   ba8e2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba8e6:	6902      	ldr	r2, [r0, #16]
   ba8e8:	6880      	ldr	r0, [r0, #8]
   ba8ea:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba8ec:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba8f0:	4770      	bx	lr

000ba8f2 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   ba8f2:	b538      	push	{r3, r4, r5, lr}
   ba8f4:	4605      	mov	r5, r0
      { _M_device.lock(); }
   ba8f6:	f7ff fecb 	bl	ba690 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   ba8fa:	f105 0078 	add.w	r0, r5, #120	; 0x78
   ba8fe:	f7ff ffe7 	bl	ba8d0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   ba902:	4604      	mov	r4, r0
   ba904:	b950      	cbnz	r0, ba91c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   ba906:	1d28      	adds	r0, r5, #4
   ba908:	f000 ff8e 	bl	bb828 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   ba90c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   ba910:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   ba912:	b11b      	cbz	r3, ba91c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   ba914:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   ba918:	b903      	cbnz	r3, ba91c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   ba91a:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   ba91c:	6f68      	ldr	r0, [r5, #116]	; 0x74
   ba91e:	f005 fa5b 	bl	bfdd8 <os_mutex_recursive_unlock>
}
   ba922:	4620      	mov	r0, r4
   ba924:	bd38      	pop	{r3, r4, r5, pc}

000ba926 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   ba926:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   ba928:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   ba92a:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   ba92c:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba92e:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   ba930:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   ba932:	d002      	beq.n	ba93a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   ba934:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba936:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   ba938:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   ba93a:	68c0      	ldr	r0, [r0, #12]
   ba93c:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba940:	f7f9 fbad 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba944:	6963      	ldr	r3, [r4, #20]
   ba946:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba948:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   ba94a:	685b      	ldr	r3, [r3, #4]
   ba94c:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba94e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba952:	6122      	str	r2, [r4, #16]
   ba954:	e7ef      	b.n	ba936 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000ba958 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   ba958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba95c:	b085      	sub	sp, #20
   ba95e:	4604      	mov	r4, r0
   ba960:	f7ff fe96 	bl	ba690 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   ba964:	f8df 90a4 	ldr.w	r9, [pc, #164]	; baa0c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   ba968:	f8df a0a4 	ldr.w	sl, [pc, #164]	; baa10 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba96c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; baa14 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   ba970:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   ba974:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba978:	4293      	cmp	r3, r2
   ba97a:	d105      	bne.n	ba988 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   ba97c:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba97e:	b005      	add	sp, #20
   ba980:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba984:	f005 ba28 	b.w	bfdd8 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   ba988:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   ba98c:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   ba990:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   ba992:	f7ff ffc8 	bl	ba926 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   ba996:	4640      	mov	r0, r8
   ba998:	f000 feea 	bl	bb770 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba99c:	2300      	movs	r3, #0
   ba99e:	4602      	mov	r2, r0
   ba9a0:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   ba9a2:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba9a4:	4668      	mov	r0, sp
   ba9a6:	f000 fceb 	bl	bb380 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba9aa:	9800      	ldr	r0, [sp, #0]
   ba9ac:	f240 2102 	movw	r1, #514	; 0x202
   ba9b0:	f00a ff0e 	bl	c57d0 <open>
   ba9b4:	4605      	mov	r5, r0
   ba9b6:	4668      	mov	r0, sp
   ba9b8:	f005 ffd2 	bl	c0960 <_ZN6StringD1Ev>
            if (fd) {
   ba9bc:	b1c5      	cbz	r5, ba9f0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   ba9be:	2208      	movs	r2, #8
   ba9c0:	4669      	mov	r1, sp
   ba9c2:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   ba9c4:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   ba9c8:	f00a ff28 	bl	c581c <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   ba9cc:	f107 0042 	add.w	r0, r7, #66	; 0x42
   ba9d0:	f00a fde9 	bl	c55a6 <strlen>
   ba9d4:	4639      	mov	r1, r7
   ba9d6:	f100 0243 	add.w	r2, r0, #67	; 0x43
   ba9da:	4628      	mov	r0, r5
   ba9dc:	f00a ff1e 	bl	c581c <write>
                close(fd);
   ba9e0:	4628      	mov	r0, r5
   ba9e2:	f00a fedb 	bl	c579c <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba9e6:	4808      	ldr	r0, [pc, #32]	; (baa08 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   ba9e8:	4632      	mov	r2, r6
   ba9ea:	4659      	mov	r1, fp
   ba9ec:	f7fd fd08 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   ba9f0:	4631      	mov	r1, r6
   ba9f2:	4640      	mov	r0, r8
   ba9f4:	f000 fefe 	bl	bb7f4 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   ba9f8:	2f00      	cmp	r7, #0
   ba9fa:	d0b9      	beq.n	ba970 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   ba9fc:	2143      	movs	r1, #67	; 0x43
   ba9fe:	4638      	mov	r0, r7
   baa00:	f7f9 fb4d 	bl	b409e <_ZdlPvj>
   baa04:	e7b2      	b.n	ba96c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   baa06:	bf00      	nop
   baa08:	2003b448 	.word	0x2003b448
   baa0c:	31b67663 	.word	0x31b67663
   baa10:	00410801 	.word	0x00410801
   baa14:	000c7c17 	.word	0x000c7c17

000baa18 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   baa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baa1c:	4604      	mov	r4, r0
   baa1e:	f7ff fe37 	bl	ba690 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   baa22:	f104 0078 	add.w	r0, r4, #120	; 0x78
   baa26:	f7ff ff53 	bl	ba8d0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   baa2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa2c:	4298      	cmp	r0, r3
   baa2e:	d902      	bls.n	baa36 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   baa30:	4620      	mov	r0, r4
   baa32:	f7ff ff91 	bl	ba958 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   baa36:	f8df 8044 	ldr.w	r8, [pc, #68]	; baa7c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   baa3a:	4f0f      	ldr	r7, [pc, #60]	; (baa78 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   baa3c:	1d26      	adds	r6, r4, #4
   baa3e:	4630      	mov	r0, r6
   baa40:	f000 fef2 	bl	bb828 <_ZNK14SequentialFile11getQueueLenEv>
   baa44:	6f23      	ldr	r3, [r4, #112]	; 0x70
   baa46:	4298      	cmp	r0, r3
   baa48:	dc04      	bgt.n	baa54 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   baa4a:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   baa4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   baa50:	f005 b9c2 	b.w	bfdd8 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   baa54:	2101      	movs	r1, #1
   baa56:	4630      	mov	r0, r6
   baa58:	f000 fe96 	bl	bb788 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   baa5c:	4605      	mov	r5, r0
   baa5e:	2800      	cmp	r0, #0
   baa60:	d0ed      	beq.n	baa3e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   baa62:	4601      	mov	r1, r0
   baa64:	2200      	movs	r2, #0
   baa66:	4630      	mov	r0, r6
   baa68:	f000 fcc6 	bl	bb3f8 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   baa6c:	462a      	mov	r2, r5
   baa6e:	4641      	mov	r1, r8
   baa70:	4638      	mov	r0, r7
   baa72:	f7f9 fb2b 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   baa76:	e7e2      	b.n	baa3e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   baa78:	2003b448 	.word	0x2003b448
   baa7c:	000c7c34 	.word	0x000c7c34

000baa80 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   baa80:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   baa82:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   baa86:	430b      	orrs	r3, r1
   baa88:	d005      	beq.n	baa96 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   baa8a:	3840      	subs	r0, #64	; 0x40
   baa8c:	ea50 0301 	orrs.w	r3, r0, r1
   baa90:	d10b      	bne.n	baaaa <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   baa92:	2a09      	cmp	r2, #9
   baa94:	d109      	bne.n	baaaa <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   baa96:	4905      	ldr	r1, [pc, #20]	; (baaac <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   baa98:	4805      	ldr	r0, [pc, #20]	; (baab0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   baa9a:	f7fd fcb1 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   baa9e:	f7ff ff07 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   baaa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   baaa6:	f7ff bf57 	b.w	ba958 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   baaaa:	bd08      	pop	{r3, pc}
   baaac:	000c7c47 	.word	0x000c7c47
   baab0:	2003b448 	.word	0x2003b448

000baab4 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   baab4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   baab6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   baab8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   baaba:	b183      	cbz	r3, baade <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   baabc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   baabe:	6945      	ldr	r5, [r0, #20]
   baac0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   baac2:	42ae      	cmp	r6, r5
   baac4:	d906      	bls.n	baad4 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   baac6:	f855 0b04 	ldr.w	r0, [r5], #4
   baaca:	f44f 7100 	mov.w	r1, #512	; 0x200
   baace:	f7f9 fae6 	bl	b409e <_ZdlPvj>
   baad2:	e7f6      	b.n	baac2 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   baad4:	6861      	ldr	r1, [r4, #4]
   baad6:	6820      	ldr	r0, [r4, #0]
   baad8:	0089      	lsls	r1, r1, #2
   baada:	f7f9 fae0 	bl	b409e <_ZdlPvj>
    }
   baade:	4620      	mov	r0, r4
   baae0:	bd70      	pop	{r4, r5, r6, pc}
	...

000baae4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   baae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   baae6:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   baaea:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   baaec:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   baaee:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   baaf0:	b90a      	cbnz	r2, baaf6 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   baaf2:	07d9      	lsls	r1, r3, #31
   baaf4:	d505      	bpl.n	bab02 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   baaf6:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   baafa:	4b0a      	ldr	r3, [pc, #40]	; (bab24 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   baafc:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   baafe:	4b0a      	ldr	r3, [pc, #40]	; (bab28 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   bab00:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   bab02:	4621      	mov	r1, r4
   bab04:	4668      	mov	r0, sp
   bab06:	f7ff fcaa 	bl	ba45e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bab0a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   bab0c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bab0e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bab10:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   bab12:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   bab14:	4668      	mov	r0, sp
   bab16:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bab18:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bab1a:	9203      	str	r2, [sp, #12]
   bab1c:	f7f9 fc14 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
	}
   bab20:	b004      	add	sp, #16
   bab22:	bd10      	pop	{r4, pc}
   bab24:	000ba647 	.word	0x000ba647
   bab28:	000ba665 	.word	0x000ba665

000bab2c <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   bab2c:	b570      	push	{r4, r5, r6, lr}
   bab2e:	b086      	sub	sp, #24
   bab30:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bab32:	f005 fbd9 	bl	c02e8 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   bab36:	b948      	cbnz	r0, bab4c <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   bab38:	4b43      	ldr	r3, [pc, #268]	; (bac48 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   bab3a:	a902      	add	r1, sp, #8
   bab3c:	e9cd 3002 	strd	r3, r0, [sp, #8]
   bab40:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   bab44:	f7ff ffce 	bl	baae4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   bab48:	b006      	add	sp, #24
   bab4a:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   bab4c:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   bab50:	b11d      	cbz	r5, bab5a <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   bab52:	2301      	movs	r3, #1
   bab54:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   bab58:	e7f6      	b.n	bab48 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   bab5a:	f005 f855 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   bab5e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   bab62:	1ac0      	subs	r0, r0, r3
   bab64:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   bab68:	4298      	cmp	r0, r3
   bab6a:	d3ed      	bcc.n	bab48 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   bab6c:	1d26      	adds	r6, r4, #4
   bab6e:	4629      	mov	r1, r5
   bab70:	4630      	mov	r0, r6
   bab72:	f000 fe09 	bl	bb788 <_ZN14SequentialFile16getFileFromQueueEb>
   bab76:	4601      	mov	r1, r0
   bab78:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   bab7c:	2800      	cmp	r0, #0
   bab7e:	d052      	beq.n	bac26 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   bab80:	4620      	mov	r0, r4
   bab82:	f7ff fdb9 	bl	ba6f8 <_ZN17PublishQueuePosix13readQueueFileEi>
   bab86:	4605      	mov	r5, r0
   bab88:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   bab8c:	2800      	cmp	r0, #0
   bab8e:	d035      	beq.n	babfc <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   bab90:	f005 f83a 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   bab94:	ae02      	add	r6, sp, #8
   bab96:	2500      	movs	r5, #0
   bab98:	4b2c      	ldr	r3, [pc, #176]	; (bac4c <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   bab9a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   bab9e:	4631      	mov	r1, r6
   baba0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   baba4:	9302      	str	r3, [sp, #8]
   baba6:	9503      	str	r5, [sp, #12]
   baba8:	f7ff ff9c 	bl	baae4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   babac:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   babb0:	f103 0242 	add.w	r2, r3, #66	; 0x42
   babb4:	9200      	str	r2, [sp, #0]
   babb6:	4926      	ldr	r1, [pc, #152]	; (bac50 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   babb8:	4a26      	ldr	r2, [pc, #152]	; (bac54 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   babba:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   babbe:	42a8      	cmp	r0, r5
   babc0:	bf08      	it	eq
   babc2:	460a      	moveq	r2, r1
   babc4:	3301      	adds	r3, #1
   babc6:	4924      	ldr	r1, [pc, #144]	; (bac58 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   babc8:	4824      	ldr	r0, [pc, #144]	; (bac5c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   babca:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   babce:	f7fd fc17 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   babd2:	f7ff fb71 	bl	ba2b8 <_ZN19BackgroundPublishRK8instanceEv>
   babd6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   babda:	4b21      	ldr	r3, [pc, #132]	; (bac60 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   babdc:	9305      	str	r3, [sp, #20]
   babde:	e9cd 6500 	strd	r6, r5, [sp]
   babe2:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   babe4:	4b1f      	ldr	r3, [pc, #124]	; (bac64 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   babe6:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   babe8:	9304      	str	r3, [sp, #16]
   babea:	f811 3b01 	ldrb.w	r3, [r1], #1
   babee:	3242      	adds	r2, #66	; 0x42
   babf0:	f7ff fcc4 	bl	ba57c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   babf4:	4630      	mov	r0, r6
   babf6:	f7f9 fba7 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   babfa:	e7a5      	b.n	bab48 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   babfc:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   bac00:	4919      	ldr	r1, [pc, #100]	; (bac68 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   bac02:	4816      	ldr	r0, [pc, #88]	; (bac5c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   bac04:	f7f9 fa62 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   bac08:	2101      	movs	r1, #1
   bac0a:	4630      	mov	r0, r6
   bac0c:	f000 fdbc 	bl	bb788 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   bac10:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   bac14:	462a      	mov	r2, r5
   bac16:	4630      	mov	r0, r6
   bac18:	f000 fbee 	bl	bb3f8 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   bac1c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bac20:	2b00      	cmp	r3, #0
   bac22:	d1b5      	bne.n	bab90 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   bac24:	e795      	b.n	bab52 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   bac26:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   bac2a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bac2e:	429a      	cmp	r2, r3
   bac30:	d007      	beq.n	bac42 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   bac32:	681b      	ldr	r3, [r3, #0]
   bac34:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   bac38:	f104 0078 	add.w	r0, r4, #120	; 0x78
   bac3c:	f7ff fe73 	bl	ba926 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   bac40:	e7ec      	b.n	bac1c <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   bac42:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   bac46:	e784      	b.n	bab52 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   bac48:	000bac6d 	.word	0x000bac6d
   bac4c:	000bafed 	.word	0x000bafed
   bac50:	000c7c76 	.word	0x000c7c76
   bac54:	000c7edc 	.word	0x000c7edc
   bac58:	000c7c97 	.word	0x000c7c97
   bac5c:	2003b448 	.word	0x2003b448
   bac60:	000ba637 	.word	0x000ba637
   bac64:	000ba67d 	.word	0x000ba67d
   bac68:	000c7c7a 	.word	0x000c7c7a

000bac6c <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   bac6c:	b513      	push	{r0, r1, r4, lr}
   bac6e:	4604      	mov	r4, r0
   bac70:	f005 fb3a 	bl	c02e8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   bac74:	b190      	cbz	r0, bac9c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   bac76:	f004 ffc7 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   bac7a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   bac7e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   bac82:	4b0d      	ldr	r3, [pc, #52]	; (bacb8 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   bac84:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   bac88:	9300      	str	r3, [sp, #0]
   bac8a:	4669      	mov	r1, sp
   bac8c:	2300      	movs	r3, #0
   bac8e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   bac92:	9301      	str	r3, [sp, #4]
   bac94:	f7ff ff26 	bl	baae4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   bac98:	b002      	add	sp, #8
   bac9a:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   bac9c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   baca0:	b11b      	cbz	r3, bacaa <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   baca2:	2301      	movs	r3, #1
   baca4:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   baca8:	e7f6      	b.n	bac98 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   bacaa:	4620      	mov	r0, r4
   bacac:	f7ff fe21 	bl	ba8f2 <_ZN17PublishQueuePosix12getNumEventsEv>
   bacb0:	2800      	cmp	r0, #0
   bacb2:	d0f6      	beq.n	baca2 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   bacb4:	e7f0      	b.n	bac98 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   bacb6:	bf00      	nop
   bacb8:	000bab2d 	.word	0x000bab2d

000bacbc <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   bacbc:	b570      	push	{r4, r5, r6, lr}
   bacbe:	4605      	mov	r5, r0
   bacc0:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   bacc2:	2000      	movs	r0, #0
   bacc4:	f005 fa60 	bl	c0188 <system_thread_get_state>
   bacc8:	2801      	cmp	r0, #1
   bacca:	d005      	beq.n	bacd8 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   baccc:	493e      	ldr	r1, [pc, #248]	; (badc8 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   bacce:	483f      	ldr	r0, [pc, #252]	; (badcc <_ZN17PublishQueuePosix5setupEv+0x110>)
   bacd0:	f7fd fb88 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
}
   bacd4:	b018      	add	sp, #96	; 0x60
   bacd6:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   bacd8:	f105 0074 	add.w	r0, r5, #116	; 0x74
   bacdc:	f005 f864 	bl	bfda8 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   bace0:	4b3b      	ldr	r3, [pc, #236]	; (badd0 <_ZN17PublishQueuePosix5setupEv+0x114>)
   bace2:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bace4:	4b3b      	ldr	r3, [pc, #236]	; (badd4 <_ZN17PublishQueuePosix5setupEv+0x118>)
   bace6:	9307      	str	r3, [sp, #28]
        };
   bace8:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   bacea:	4b3b      	ldr	r3, [pc, #236]	; (badd8 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   bacec:	9306      	str	r3, [sp, #24]
   bacee:	a808      	add	r0, sp, #32
   bacf0:	f7f9 fe68 	bl	b49c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   bacf4:	a908      	add	r1, sp, #32
   bacf6:	a80c      	add	r0, sp, #48	; 0x30
   bacf8:	f7f9 fe64 	bl	b49c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
   bacfc:	a90c      	add	r1, sp, #48	; 0x30
   bacfe:	a810      	add	r0, sp, #64	; 0x40
   bad00:	f7f9 fe60 	bl	b49c4 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   bad04:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bad06:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   bad08:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bad0a:	f7f9 f9c4 	bl	b4096 <_Znwj>
   bad0e:	4604      	mov	r4, r0
   bad10:	b160      	cbz	r0, bad2c <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   bad12:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bad14:	4601      	mov	r1, r0
   bad16:	a810      	add	r0, sp, #64	; 0x40
   bad18:	f7ff fba1 	bl	ba45e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bad1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   bad1e:	68a2      	ldr	r2, [r4, #8]
   bad20:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   bad22:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   bad24:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bad26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   bad28:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bad2a:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   bad2c:	4b2b      	ldr	r3, [pc, #172]	; (baddc <_ZN17PublishQueuePosix5setupEv+0x120>)
   bad2e:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   bad30:	4b2b      	ldr	r3, [pc, #172]	; (bade0 <_ZN17PublishQueuePosix5setupEv+0x124>)
   bad32:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   bad34:	4b2b      	ldr	r3, [pc, #172]	; (bade4 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bad36:	9414      	str	r4, [sp, #80]	; 0x50
   bad38:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   bad3a:	2010      	movs	r0, #16
        SystemEventContext context = {};
   bad3c:	e9cd 3601 	strd	r3, r6, [sp, #4]
   bad40:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   bad42:	f7f9 f9a8 	bl	b4096 <_Znwj>
   bad46:	4604      	mov	r4, r0
   bad48:	b1d8      	cbz	r0, bad82 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   bad4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   bad4c:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   bad4e:	b133      	cbz	r3, bad5e <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bad50:	2202      	movs	r2, #2
   bad52:	a914      	add	r1, sp, #80	; 0x50
   bad54:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bad56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bad58:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bad5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   bad5c:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   bad5e:	4b22      	ldr	r3, [pc, #136]	; (bade8 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   bad60:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   bad62:	4a22      	ldr	r2, [pc, #136]	; (badec <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   bad64:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   bad66:	ab01      	add	r3, sp, #4
   bad68:	f44f 6004 	mov.w	r0, #2112	; 0x840
   bad6c:	2100      	movs	r1, #0
   bad6e:	f005 f9eb 	bl	c0148 <system_subscribe_event>
        if (r) {
   bad72:	b130      	cbz	r0, bad82 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   bad74:	4620      	mov	r0, r4
   bad76:	f7f9 fae7 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   bad7a:	2110      	movs	r1, #16
   bad7c:	4620      	mov	r0, r4
   bad7e:	f7f9 f98e 	bl	b409e <_ZdlPvj>
   bad82:	a814      	add	r0, sp, #80	; 0x50
   bad84:	f7f9 fae0 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   bad88:	a810      	add	r0, sp, #64	; 0x40
   bad8a:	f7f9 fadd 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   bad8e:	a80c      	add	r0, sp, #48	; 0x30
   bad90:	f7f9 fada 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   bad94:	a808      	add	r0, sp, #32
   bad96:	f7f9 fad7 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   bad9a:	a804      	add	r0, sp, #16
   bad9c:	f7f9 fad4 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   bada0:	f7ff fa8a 	bl	ba2b8 <_ZN19BackgroundPublishRK8instanceEv>
   bada4:	f7ff fbc4 	bl	ba530 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   bada8:	1d28      	adds	r0, r5, #4
   badaa:	f000 fc69 	bl	bb680 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   badae:	4628      	mov	r0, r5
   badb0:	f7ff fe32 	bl	baa18 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   badb4:	4b0e      	ldr	r3, [pc, #56]	; (badf0 <_ZN17PublishQueuePosix5setupEv+0x134>)
   badb6:	9314      	str	r3, [sp, #80]	; 0x50
   badb8:	a914      	add	r1, sp, #80	; 0x50
   badba:	2300      	movs	r3, #0
   badbc:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   badc0:	9315      	str	r3, [sp, #84]	; 0x54
   badc2:	f7ff fe8f 	bl	baae4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   badc6:	e785      	b.n	bacd4 <_ZN17PublishQueuePosix5setupEv+0x18>
   badc8:	000c7cb6 	.word	0x000c7cb6
   badcc:	2003b448 	.word	0x2003b448
   badd0:	000baa81 	.word	0x000baa81
   badd4:	000b430b 	.word	0x000b430b
   badd8:	000b42f7 	.word	0x000b42f7
   baddc:	000b42d1 	.word	0x000b42d1
   bade0:	000b4aed 	.word	0x000b4aed
   bade4:	000c0002 	.word	0x000c0002
   bade8:	000b435b 	.word	0x000b435b
   badec:	000b42a9 	.word	0x000b42a9
   badf0:	000bac6d 	.word	0x000bac6d

000badf4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   badf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   badf8:	4606      	mov	r6, r0
   badfa:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   badfc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   badfe:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bae00:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bae02:	1a47      	subs	r7, r0, r1
   bae04:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bae08:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bae0a:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   bae0e:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bae10:	d927      	bls.n	bae62 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   bae12:	1b5d      	subs	r5, r3, r5
   bae14:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bae16:	6832      	ldr	r2, [r6, #0]
   bae18:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   bae1a:	b10c      	cbz	r4, bae20 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   bae1c:	ea4f 0489 	mov.w	r4, r9, lsl #2
   bae20:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bae22:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   bae24:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bae26:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   bae28:	eba3 0201 	sub.w	r2, r3, r1
   bae2c:	d913      	bls.n	bae56 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   bae2e:	4299      	cmp	r1, r3
   bae30:	d002      	beq.n	bae38 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bae32:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bae34:	f00a fad2 	bl	c53dc <memmove>
	_M_node = __new_node;
   bae38:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   bae3a:	6823      	ldr	r3, [r4, #0]
   bae3c:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bae3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bae42:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bae44:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   bae46:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   bae48:	59e3      	ldr	r3, [r4, r7]
   bae4a:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bae4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bae50:	6233      	str	r3, [r6, #32]
    }
   bae52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   bae56:	4299      	cmp	r1, r3
   bae58:	d0ee      	beq.n	bae38 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bae5a:	1d38      	adds	r0, r7, #4
   bae5c:	1a80      	subs	r0, r0, r2
   bae5e:	4420      	add	r0, r4
   bae60:	e7e8      	b.n	bae34 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bae62:	f103 0802 	add.w	r8, r3, #2
   bae66:	454b      	cmp	r3, r9
   bae68:	bf2c      	ite	cs
   bae6a:	4498      	addcs	r8, r3
   bae6c:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   bae6e:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   bae72:	d301      	bcc.n	bae78 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   bae74:	f008 fcb4 	bl	c37e0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bae78:	ea4f 0088 	mov.w	r0, r8, lsl #2
   bae7c:	f7f9 f90b 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bae80:	eba8 0505 	sub.w	r5, r8, r5
   bae84:	086d      	lsrs	r5, r5, #1
   bae86:	4682      	mov	sl, r0
   bae88:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   bae8a:	b10c      	cbz	r4, bae90 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   bae8c:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   bae90:	6a72      	ldr	r2, [r6, #36]	; 0x24
   bae92:	6971      	ldr	r1, [r6, #20]
   bae94:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   bae96:	442c      	add	r4, r5
	  if (_Num)
   bae98:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bae9a:	4454      	add	r4, sl
   bae9c:	d003      	beq.n	baea6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bae9e:	1a52      	subs	r2, r2, r1
   baea0:	4620      	mov	r0, r4
   baea2:	f00a fa9b 	bl	c53dc <memmove>
	::operator delete(__p
   baea6:	6871      	ldr	r1, [r6, #4]
   baea8:	6830      	ldr	r0, [r6, #0]
   baeaa:	0089      	lsls	r1, r1, #2
   baeac:	f7f9 f8f7 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   baeb0:	e9c6 a800 	strd	sl, r8, [r6]
   baeb4:	e7c0      	b.n	bae38 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000baeb8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   baeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   baeba:	b085      	sub	sp, #20
   baebc:	4604      	mov	r4, r0
   baebe:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   baec2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   baec6:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   baec8:	460f      	mov	r7, r1
   baeca:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   baecc:	f7ff fbec 	bl	ba6a8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   baed0:	4605      	mov	r5, r0
   baed2:	2800      	cmp	r0, #0
   baed4:	d03c      	beq.n	baf50 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   baed6:	4b3f      	ldr	r3, [pc, #252]	; (bafd4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   baed8:	493f      	ldr	r1, [pc, #252]	; (bafd8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   baeda:	4840      	ldr	r0, [pc, #256]	; (bafdc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   baedc:	2e00      	cmp	r6, #0
   baede:	bf18      	it	ne
   baee0:	4633      	movne	r3, r6
   baee2:	463a      	mov	r2, r7
   baee4:	f7fd fa8c 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
   baee8:	4620      	mov	r0, r4
   baeea:	f7ff fbd1 	bl	ba690 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   baeee:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   baef2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   baef6:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   baef8:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   baefa:	f104 0678 	add.w	r6, r4, #120	; 0x78
   baefe:	d029      	beq.n	baf54 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   baf00:	b103      	cbz	r3, baf04 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   baf02:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   baf04:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   baf08:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   baf0a:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   baf0c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   baf10:	4628      	mov	r0, r5
   baf12:	f000 fc89 	bl	bb828 <_ZNK14SequentialFile11getQueueLenEv>
   baf16:	9003      	str	r0, [sp, #12]
   baf18:	4630      	mov	r0, r6
   baf1a:	f7ff fcd9 	bl	ba8d0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   baf1e:	9002      	str	r0, [sp, #8]
   baf20:	f005 f9e2 	bl	c02e8 <spark_cloud_flag_connected>
   baf24:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   baf28:	9000      	str	r0, [sp, #0]
   baf2a:	492d      	ldr	r1, [pc, #180]	; (bafe0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   baf2c:	482b      	ldr	r0, [pc, #172]	; (bafdc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   baf2e:	f7fd fa67 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   baf32:	4628      	mov	r0, r5
   baf34:	f000 fc78 	bl	bb828 <_ZNK14SequentialFile11getQueueLenEv>
   baf38:	2800      	cmp	r0, #0
   baf3a:	d03b      	beq.n	bafb4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   baf3c:	4620      	mov	r0, r4
   baf3e:	f7ff fd0b 	bl	ba958 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   baf42:	4620      	mov	r0, r4
   baf44:	f7ff fd68 	bl	baa18 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   baf48:	6f60      	ldr	r0, [r4, #116]	; 0x74
   baf4a:	f004 ff45 	bl	bfdd8 <os_mutex_recursive_unlock>
    return true;
   baf4e:	2001      	movs	r0, #1
}
   baf50:	b005      	add	sp, #20
   baf52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   baf54:	4630      	mov	r0, r6
   baf56:	f7ff fcbb 	bl	ba8d0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   baf5a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   baf5e:	4298      	cmp	r0, r3
   baf60:	d102      	bne.n	baf68 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   baf62:	4820      	ldr	r0, [pc, #128]	; (bafe4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   baf64:	f008 fc3f 	bl	c37e6 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   baf68:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   baf6c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   baf6e:	1a9a      	subs	r2, r3, r2
   baf70:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   baf72:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   baf76:	2b01      	cmp	r3, #1
   baf78:	d804      	bhi.n	baf84 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   baf7a:	2200      	movs	r2, #0
   baf7c:	2101      	movs	r1, #1
   baf7e:	4630      	mov	r0, r6
   baf80:	f7ff ff38 	bl	badf4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   baf84:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   baf88:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   baf8c:	f7f9 f883 	bl	b4096 <_Znwj>
   baf90:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   baf92:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   baf96:	b103      	cbz	r3, baf9a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   baf98:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   baf9a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   baf9e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bafa0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   bafa4:	685b      	ldr	r3, [r3, #4]
   bafa6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   bafaa:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bafae:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   bafb2:	e7aa      	b.n	baf0a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   bafb4:	4630      	mov	r0, r6
   bafb6:	f7ff fc8b 	bl	ba8d0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   bafba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bafbc:	4298      	cmp	r0, r3
   bafbe:	d8bd      	bhi.n	baf3c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   bafc0:	f005 f992 	bl	c02e8 <spark_cloud_flag_connected>
   bafc4:	2800      	cmp	r0, #0
   bafc6:	d0b9      	beq.n	baf3c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   bafc8:	4907      	ldr	r1, [pc, #28]	; (bafe8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   bafca:	4804      	ldr	r0, [pc, #16]	; (bafdc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   bafcc:	f7fd fa18 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
   bafd0:	e7b7      	b.n	baf42 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   bafd2:	bf00      	nop
   bafd4:	000c9298 	.word	0x000c9298
   bafd8:	000c7cd9 	.word	0x000c7cd9
   bafdc:	2003b448 	.word	0x2003b448
   bafe0:	000c7d31 	.word	0x000c7d31
   bafe4:	000c7d01 	.word	0x000c7d01
   bafe8:	000c7d5d 	.word	0x000c7d5d

000bafec <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   bafec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   bafee:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   baff2:	4604      	mov	r4, r0
    if (!publishComplete) {
   baff4:	2b00      	cmp	r3, #0
   baff6:	d041      	beq.n	bb07c <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   baff8:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   baffc:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   bb000:	2b00      	cmp	r3, #0
   bb002:	d03d      	beq.n	bb080 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   bb004:	4950      	ldr	r1, [pc, #320]	; (bb148 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   bb006:	4851      	ldr	r0, [pc, #324]	; (bb14c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   bb008:	f7fd f9fa 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   bb00c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   bb010:	b1d3      	cbz	r3, bb048 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   bb012:	1d26      	adds	r6, r4, #4
   bb014:	2100      	movs	r1, #0
   bb016:	4630      	mov	r0, r6
   bb018:	f000 fbb6 	bl	bb788 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   bb01c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   bb020:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   bb022:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   bb024:	d10d      	bne.n	bb042 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   bb026:	2101      	movs	r1, #1
   bb028:	4630      	mov	r0, r6
   bb02a:	f000 fbad 	bl	bb788 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   bb02e:	2200      	movs	r2, #0
   bb030:	4629      	mov	r1, r5
   bb032:	4630      	mov	r0, r6
   bb034:	f000 f9e0 	bl	bb3f8 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   bb038:	4945      	ldr	r1, [pc, #276]	; (bb150 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   bb03a:	4844      	ldr	r0, [pc, #272]	; (bb14c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   bb03c:	462a      	mov	r2, r5
   bb03e:	f7fd f9df 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   bb042:	2300      	movs	r3, #0
   bb044:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   bb048:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   bb04c:	b110      	cbz	r0, bb054 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   bb04e:	2143      	movs	r1, #67	; 0x43
   bb050:	f7f9 f825 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   bb054:	2300      	movs	r3, #0
   bb056:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   bb05a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   bb05e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   bb062:	4b3c      	ldr	r3, [pc, #240]	; (bb154 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   bb064:	9300      	str	r3, [sp, #0]
   bb066:	4669      	mov	r1, sp
   bb068:	2300      	movs	r3, #0
   bb06a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   bb06e:	9301      	str	r3, [sp, #4]
   bb070:	f7ff fd38 	bl	baae4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   bb074:	f004 fdc8 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   bb078:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   bb07c:	b002      	add	sp, #8
   bb07e:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   bb080:	4935      	ldr	r1, [pc, #212]	; (bb158 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   bb082:	4832      	ldr	r0, [pc, #200]	; (bb14c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   bb084:	f7fd f9bc 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   bb088:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   bb08c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   bb090:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   bb094:	b14b      	cbz	r3, bb0aa <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   bb096:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   bb09a:	b110      	cbz	r0, bb0a2 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   bb09c:	2143      	movs	r1, #67	; 0x43
   bb09e:	f7f8 fffe 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   bb0a2:	2300      	movs	r3, #0
   bb0a4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   bb0a8:	e7db      	b.n	bb062 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   bb0aa:	4620      	mov	r0, r4
   bb0ac:	f7ff faf0 	bl	ba690 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   bb0b0:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   bb0b4:	4293      	cmp	r3, r2
   bb0b6:	d013      	beq.n	bb0e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   bb0b8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb0bc:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   bb0c0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb0c4:	3b04      	subs	r3, #4
   bb0c6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   bb0ca:	6f60      	ldr	r0, [r4, #116]	; 0x74
   bb0cc:	f004 fe84 	bl	bfdd8 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   bb0d0:	4922      	ldr	r1, [pc, #136]	; (bb15c <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   bb0d2:	481e      	ldr	r0, [pc, #120]	; (bb14c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   bb0d4:	f7fd f994 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   bb0d8:	4620      	mov	r0, r4
   bb0da:	f7ff fc3d 	bl	ba958 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   bb0de:	e7c0      	b.n	bb062 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   bb0e0:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   bb0e4:	4628      	mov	r0, r5
   bb0e6:	f7ff fbf3 	bl	ba8d0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   bb0ea:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bb0ee:	4298      	cmp	r0, r3
   bb0f0:	d102      	bne.n	bb0f8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   bb0f2:	481b      	ldr	r0, [pc, #108]	; (bb160 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   bb0f4:	f008 fb77 	bl	c37e6 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   bb0f8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bb0fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb0fe:	429a      	cmp	r2, r3
   bb100:	d104      	bne.n	bb10c <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   bb102:	2201      	movs	r2, #1
   bb104:	4611      	mov	r1, r2
   bb106:	4628      	mov	r0, r5
   bb108:	f7ff fe74 	bl	badf4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb10c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   bb110:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   bb114:	f7f8 ffbf 	bl	b4096 <_Znwj>
   bb118:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   bb11c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb120:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   bb122:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   bb126:	f853 3c04 	ldr.w	r3, [r3, #-4]
   bb12a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb12e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bb132:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   bb136:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   bb13a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb13e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb142:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   bb146:	e7c0      	b.n	bb0ca <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   bb148:	000c7d70 	.word	0x000c7d70
   bb14c:	2003b448 	.word	0x2003b448
   bb150:	000c7d83 	.word	0x000c7d83
   bb154:	000bab2d 	.word	0x000bab2d
   bb158:	000c7d93 	.word	0x000c7d93
   bb15c:	000c7da5 	.word	0x000c7da5
   bb160:	000c7d01 	.word	0x000c7d01

000bb164 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
        name_(name) {
   bb164:	4b01      	ldr	r3, [pc, #4]	; (bb16c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   bb166:	4a02      	ldr	r2, [pc, #8]	; (bb170 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   bb168:	601a      	str	r2, [r3, #0]
}
   bb16a:	4770      	bx	lr
   bb16c:	2003b448 	.word	0x2003b448
   bb170:	000c7dcc 	.word	0x000c7dcc

000bb174 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   bb174:	b510      	push	{r4, lr}
   bb176:	4b07      	ldr	r3, [pc, #28]	; (bb194 <_ZN17PublishQueuePosixD1Ev+0x20>)
   bb178:	4604      	mov	r4, r0
   bb17a:	f840 3bc0 	str.w	r3, [r0], #192
   bb17e:	f7f9 f8e3 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bb182:	f104 0078 	add.w	r0, r4, #120	; 0x78
   bb186:	f7ff fc95 	bl	baab4 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   bb18a:	1d20      	adds	r0, r4, #4
   bb18c:	f000 f9b8 	bl	bb500 <_ZN14SequentialFileD1Ev>
}
   bb190:	4620      	mov	r0, r4
   bb192:	bd10      	pop	{r4, pc}
   bb194:	000c7de0 	.word	0x000c7de0

000bb198 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   bb198:	b510      	push	{r4, lr}
   bb19a:	4604      	mov	r4, r0
}
   bb19c:	f7ff ffea 	bl	bb174 <_ZN17PublishQueuePosixD1Ev>
   bb1a0:	4620      	mov	r0, r4
   bb1a2:	21d0      	movs	r1, #208	; 0xd0
   bb1a4:	f7f8 ff7b 	bl	b409e <_ZdlPvj>
   bb1a8:	4620      	mov	r0, r4
   bb1aa:	bd10      	pop	{r4, pc}

000bb1ac <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bb1ac:	2001      	movs	r0, #1
   bb1ae:	4770      	bx	lr

000bb1b0 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bb1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb1b2:	4d1f      	ldr	r5, [pc, #124]	; (bb230 <_ZN14SequentialFileC1Ev+0x80>)
   bb1b4:	4b1f      	ldr	r3, [pc, #124]	; (bb234 <_ZN14SequentialFileC1Ev+0x84>)
   bb1b6:	4604      	mov	r4, r0
   bb1b8:	4629      	mov	r1, r5
   bb1ba:	f840 3b04 	str.w	r3, [r0], #4
   bb1be:	f005 fc1a 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bb1c2:	491d      	ldr	r1, [pc, #116]	; (bb238 <_ZN14SequentialFileC1Ev+0x88>)
   bb1c4:	f104 0014 	add.w	r0, r4, #20
   bb1c8:	f005 fc15 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bb1cc:	4629      	mov	r1, r5
   bb1ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb1d2:	f005 fc10 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bb1d6:	2300      	movs	r3, #0
   bb1d8:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bb1dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bb1e0:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bb1e4:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bb1e8:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bb1ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bb1f0:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bb1f2:	2308      	movs	r3, #8
   bb1f4:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb1f6:	2020      	movs	r0, #32
   bb1f8:	f7f8 ff4d 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bb1fc:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bb1fe:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bb200:	3d01      	subs	r5, #1
   bb202:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bb204:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bb208:	4606      	mov	r6, r0
   bb20a:	f44f 7000 	mov.w	r0, #512	; 0x200
   bb20e:	f7f8 ff42 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb212:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bb216:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bb21a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bb21e:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bb220:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bb222:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bb224:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb226:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bb228:	6667      	str	r7, [r4, #100]	; 0x64

}
   bb22a:	4620      	mov	r0, r4
   bb22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb22e:	bf00      	nop
   bb230:	000c9298 	.word	0x000c9298
   bb234:	000c7eec 	.word	0x000c7eec
   bb238:	000c7dec 	.word	0x000c7dec

000bb23c <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bb23c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bb23e:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bb240:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bb242:	4628      	mov	r0, r5
   bb244:	f005 fc36 	bl	c0ab4 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bb248:	490e      	ldr	r1, [pc, #56]	; (bb284 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bb24a:	4668      	mov	r0, sp
   bb24c:	f005 fbd3 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bb250:	4669      	mov	r1, sp
   bb252:	4628      	mov	r0, r5
   bb254:	f005 fca8 	bl	c0ba8 <_ZNK6String8endsWithERKS_>
   bb258:	4606      	mov	r6, r0
   bb25a:	4668      	mov	r0, sp
   bb25c:	f005 fb80 	bl	c0960 <_ZN6StringD1Ev>
   bb260:	b16e      	cbz	r6, bb27e <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bb262:	68e3      	ldr	r3, [r4, #12]
   bb264:	2200      	movs	r2, #0
   bb266:	3b01      	subs	r3, #1
   bb268:	4629      	mov	r1, r5
   bb26a:	4668      	mov	r0, sp
   bb26c:	f005 fcb2 	bl	c0bd4 <_ZNK6String9substringEjj>
   bb270:	4669      	mov	r1, sp
   bb272:	4628      	mov	r0, r5
   bb274:	f005 fc16 	bl	c0aa4 <_ZN6StringaSEOS_>
   bb278:	4668      	mov	r0, sp
   bb27a:	f005 fb71 	bl	c0960 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bb27e:	4620      	mov	r0, r4
   bb280:	b004      	add	sp, #16
   bb282:	bd70      	pop	{r4, r5, r6, pc}
   bb284:	000c7df1 	.word	0x000c7df1

000bb288 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bb288:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bb28a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bb28c:	4604      	mov	r4, r0
    if (!queueMutex) {
   bb28e:	b913      	cbnz	r3, bb296 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bb290:	303c      	adds	r0, #60	; 0x3c
   bb292:	f004 fd71 	bl	bfd78 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bb296:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bb298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bb29c:	f004 bd74 	b.w	bfd88 <os_mutex_lock>

000bb2a0 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bb2a0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bb2a2:	f004 bd79 	b.w	bfd98 <os_mutex_unlock>
	...

000bb2a8 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bb2a8:	b510      	push	{r4, lr}
   bb2aa:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bb2ac:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bb2ae:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bb2b0:	f004 fd12 	bl	bfcd8 <stat>
    if (result == 0) {
   bb2b4:	b9d0      	cbnz	r0, bb2ec <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bb2b6:	9b01      	ldr	r3, [sp, #4]
   bb2b8:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bb2ba:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bb2bc:	d506      	bpl.n	bb2cc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bb2be:	4915      	ldr	r1, [pc, #84]	; (bb314 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bb2c0:	4815      	ldr	r0, [pc, #84]	; (bb318 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb2c2:	f7f8 ff03 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bb2c6:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bb2c8:	b016      	add	sp, #88	; 0x58
   bb2ca:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bb2cc:	4812      	ldr	r0, [pc, #72]	; (bb318 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb2ce:	4913      	ldr	r1, [pc, #76]	; (bb31c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bb2d0:	f7fd f888 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bb2d4:	4620      	mov	r0, r4
   bb2d6:	f00a fa99 	bl	c580c <unlink>
    result = mkdir(path, 0777);
   bb2da:	f240 11ff 	movw	r1, #511	; 0x1ff
   bb2de:	4620      	mov	r0, r4
   bb2e0:	f004 fd02 	bl	bfce8 <mkdir>
    if (result == 0) {
   bb2e4:	b980      	cbnz	r0, bb308 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bb2e6:	490e      	ldr	r1, [pc, #56]	; (bb320 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bb2e8:	4622      	mov	r2, r4
   bb2ea:	e7e9      	b.n	bb2c0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bb2ec:	f005 f884 	bl	c03f8 <__errno>
   bb2f0:	6803      	ldr	r3, [r0, #0]
   bb2f2:	2b02      	cmp	r3, #2
   bb2f4:	d0f1      	beq.n	bb2da <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bb2f6:	f005 f87f 	bl	c03f8 <__errno>
   bb2fa:	490a      	ldr	r1, [pc, #40]	; (bb324 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bb2fc:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bb2fe:	4806      	ldr	r0, [pc, #24]	; (bb318 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb300:	f7fd f870 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bb304:	2000      	movs	r0, #0
   bb306:	e7df      	b.n	bb2c8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bb308:	f005 f876 	bl	c03f8 <__errno>
   bb30c:	4906      	ldr	r1, [pc, #24]	; (bb328 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bb30e:	6802      	ldr	r2, [r0, #0]
   bb310:	e7f5      	b.n	bb2fe <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bb312:	bf00      	nop
   bb314:	000c7dfe 	.word	0x000c7dfe
   bb318:	2003b450 	.word	0x2003b450
   bb31c:	000c7e1b 	.word	0x000c7e1b
   bb320:	000c7e4c 	.word	0x000c7e4c
   bb324:	000c7e38 	.word	0x000c7e38
   bb328:	000c7e5b 	.word	0x000c7e5b

000bb32c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bb32c:	b538      	push	{r3, r4, r5, lr}
   bb32e:	4615      	mov	r5, r2
   bb330:	4604      	mov	r4, r0
    String result = name;
   bb332:	f005 fb60 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bb336:	b14d      	cbz	r5, bb34c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bb338:	782b      	ldrb	r3, [r5, #0]
   bb33a:	b13b      	cbz	r3, bb34c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
   bb33c:	4904      	ldr	r1, [pc, #16]	; (bb350 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bb33e:	4620      	mov	r0, r4
   bb340:	f005 fbe1 	bl	c0b06 <_ZN6String6concatEPKc>
   bb344:	4629      	mov	r1, r5
   bb346:	4620      	mov	r0, r4
   bb348:	f005 fbdd 	bl	c0b06 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bb34c:	4620      	mov	r0, r4
   bb34e:	bd38      	pop	{r3, r4, r5, pc}
   bb350:	000c60e9 	.word	0x000c60e9

000bb354 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bb354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb356:	4605      	mov	r5, r0
   bb358:	460e      	mov	r6, r1
   bb35a:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bb35c:	6949      	ldr	r1, [r1, #20]
   bb35e:	4668      	mov	r0, sp
   bb360:	f005 fc58 	bl	c0c14 <_ZN6String6formatEPKcz>
    const char * c_str() const { return buffer; }
   bb364:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bb366:	b904      	cbnz	r4, bb36a <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bb368:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb36a:	4622      	mov	r2, r4
   bb36c:	4628      	mov	r0, r5
   bb36e:	f7ff ffdd 	bl	bb32c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bb372:	4668      	mov	r0, sp
   bb374:	f005 faf4 	bl	c0960 <_ZN6StringD1Ev>
}
   bb378:	4628      	mov	r0, r5
   bb37a:	b004      	add	sp, #16
   bb37c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb380 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bb380:	b570      	push	{r4, r5, r6, lr}
   bb382:	460c      	mov	r4, r1
   bb384:	b08e      	sub	sp, #56	; 0x38
    String result;
   bb386:	491a      	ldr	r1, [pc, #104]	; (bb3f0 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bb388:	e9cd 3200 	strd	r3, r2, [sp]
   bb38c:	4605      	mov	r5, r0
    String result;
   bb38e:	f005 fb32 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bb392:	68e0      	ldr	r0, [r4, #12]
   bb394:	69e1      	ldr	r1, [r4, #28]
   bb396:	4401      	add	r1, r0
   bb398:	3104      	adds	r1, #4
   bb39a:	4628      	mov	r0, r5
   bb39c:	f005 fafe 	bl	c099c <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
    StringSumHelper(const String &s) : String(s) {}
   bb3a0:	1d21      	adds	r1, r4, #4
   bb3a2:	a806      	add	r0, sp, #24
   bb3a4:	f005 fb73 	bl	c0a8e <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bb3a8:	4912      	ldr	r1, [pc, #72]	; (bb3f4 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bb3aa:	a802      	add	r0, sp, #8
   bb3ac:	f005 fb23 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bb3b0:	a902      	add	r1, sp, #8
   bb3b2:	a806      	add	r0, sp, #24
   bb3b4:	f005 fbc5 	bl	c0b42 <_ZplRK15StringSumHelperRK6String>
   bb3b8:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb3bc:	4606      	mov	r6, r0
   bb3be:	4621      	mov	r1, r4
   bb3c0:	a80a      	add	r0, sp, #40	; 0x28
   bb3c2:	f7ff ffc7 	bl	bb354 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bb3c6:	a90a      	add	r1, sp, #40	; 0x28
   bb3c8:	4630      	mov	r0, r6
   bb3ca:	f005 fbba 	bl	c0b42 <_ZplRK15StringSumHelperRK6String>
   bb3ce:	4601      	mov	r1, r0
   bb3d0:	4628      	mov	r0, r5
   bb3d2:	f005 fb4d 	bl	c0a70 <_ZN6StringaSERKS_>
   bb3d6:	a80a      	add	r0, sp, #40	; 0x28
   bb3d8:	f005 fac2 	bl	c0960 <_ZN6StringD1Ev>
   bb3dc:	a802      	add	r0, sp, #8
   bb3de:	f005 fabf 	bl	c0960 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bb3e2:	a806      	add	r0, sp, #24
   bb3e4:	f005 fabc 	bl	c0960 <_ZN6StringD1Ev>
}
   bb3e8:	4628      	mov	r0, r5
   bb3ea:	b00e      	add	sp, #56	; 0x38
   bb3ec:	bd70      	pop	{r4, r5, r6, pc}
   bb3ee:	bf00      	nop
   bb3f0:	000c9298 	.word	0x000c9298
   bb3f4:	000c7df1 	.word	0x000c7df1

000bb3f8 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bb3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bb3fc:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bb3fe:	b08e      	sub	sp, #56	; 0x38
   bb400:	4605      	mov	r5, r0
   bb402:	460f      	mov	r7, r1
    if (allExtensions) {
   bb404:	2a00      	cmp	r2, #0
   bb406:	d04a      	beq.n	bb49e <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bb408:	6840      	ldr	r0, [r0, #4]
   bb40a:	f004 fc7d 	bl	bfd08 <opendir>
        if (dir) {
   bb40e:	4606      	mov	r6, r0
   bb410:	2800      	cmp	r0, #0
   bb412:	d054      	beq.n	bb4be <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bb414:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bb4cc <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bb418:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bb4c8 <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bb41c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bb4c4 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bb420:	4630      	mov	r0, r6
   bb422:	f004 fc79 	bl	bfd18 <readdir>
                if (!ent) {
   bb426:	2800      	cmp	r0, #0
   bb428:	d033      	beq.n	bb492 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bb42a:	7a82      	ldrb	r2, [r0, #10]
   bb42c:	2a08      	cmp	r2, #8
   bb42e:	d1f7      	bne.n	bb420 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bb430:	f100 040b 	add.w	r4, r0, #11
   bb434:	6969      	ldr	r1, [r5, #20]
   bb436:	aa01      	add	r2, sp, #4
   bb438:	4620      	mov	r0, r4
   bb43a:	f004 ffb5 	bl	c03a8 <sscanf>
   bb43e:	2801      	cmp	r0, #1
   bb440:	d1ee      	bne.n	bb420 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bb442:	9b01      	ldr	r3, [sp, #4]
   bb444:	42bb      	cmp	r3, r7
   bb446:	d1eb      	bne.n	bb420 <_ZN14SequentialFile13removeFileNumEib+0x28>
    StringSumHelper(const String &s) : String(s) {}
   bb448:	1d29      	adds	r1, r5, #4
   bb44a:	a80a      	add	r0, sp, #40	; 0x28
   bb44c:	f005 fb1f 	bl	c0a8e <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bb450:	4651      	mov	r1, sl
   bb452:	a806      	add	r0, sp, #24
   bb454:	f005 facf 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bb458:	a906      	add	r1, sp, #24
   bb45a:	a80a      	add	r0, sp, #40	; 0x28
   bb45c:	f005 fb71 	bl	c0b42 <_ZplRK15StringSumHelperRK6String>
   bb460:	4621      	mov	r1, r4
   bb462:	f005 fb7a 	bl	c0b5a <_ZplRK15StringSumHelperPKc>
   bb466:	4601      	mov	r1, r0
   bb468:	a802      	add	r0, sp, #8
   bb46a:	f005 fb10 	bl	c0a8e <_ZN6StringC1ERKS_>
   bb46e:	a806      	add	r0, sp, #24
   bb470:	f005 fa76 	bl	c0960 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bb474:	a80a      	add	r0, sp, #40	; 0x28
   bb476:	f005 fa73 	bl	c0960 <_ZN6StringD1Ev>
                        unlink(path);
   bb47a:	9802      	ldr	r0, [sp, #8]
   bb47c:	f00a f9c6 	bl	c580c <unlink>
                        _log.trace("removed %s", path.c_str());
   bb480:	4640      	mov	r0, r8
   bb482:	9a02      	ldr	r2, [sp, #8]
   bb484:	4649      	mov	r1, r9
   bb486:	f7fc ffbb 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bb48a:	a802      	add	r0, sp, #8
   bb48c:	f005 fa68 	bl	c0960 <_ZN6StringD1Ev>
                    continue;
   bb490:	e7c6      	b.n	bb420 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bb492:	4630      	mov	r0, r6
}
   bb494:	b00e      	add	sp, #56	; 0x38
   bb496:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bb49a:	f004 bc45 	b.w	bfd28 <closedir>
        String path = getPathForFileNum(fileNum); 
   bb49e:	460a      	mov	r2, r1
   bb4a0:	4601      	mov	r1, r0
   bb4a2:	a80a      	add	r0, sp, #40	; 0x28
   bb4a4:	f7ff ff6c 	bl	bb380 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bb4a8:	980a      	ldr	r0, [sp, #40]	; 0x28
   bb4aa:	f00a f9af 	bl	c580c <unlink>
        _log.trace("removed %s", path.c_str());
   bb4ae:	4805      	ldr	r0, [pc, #20]	; (bb4c4 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bb4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bb4b2:	4905      	ldr	r1, [pc, #20]	; (bb4c8 <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bb4b4:	f7fc ffa4 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bb4b8:	a80a      	add	r0, sp, #40	; 0x28
   bb4ba:	f005 fa51 	bl	c0960 <_ZN6StringD1Ev>
}
   bb4be:	b00e      	add	sp, #56	; 0x38
   bb4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb4c4:	2003b450 	.word	0x2003b450
   bb4c8:	000c7df3 	.word	0x000c7df3
   bb4cc:	000c7df1 	.word	0x000c7df1

000bb4d0 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bb4d0:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bb4d2:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bb4d4:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bb4d6:	b183      	cbz	r3, bb4fa <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bb4d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bb4da:	6945      	ldr	r5, [r0, #20]
   bb4dc:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bb4de:	42ae      	cmp	r6, r5
   bb4e0:	d906      	bls.n	bb4f0 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bb4e2:	f855 0b04 	ldr.w	r0, [r5], #4
   bb4e6:	f44f 7100 	mov.w	r1, #512	; 0x200
   bb4ea:	f7f8 fdd8 	bl	b409e <_ZdlPvj>
   bb4ee:	e7f6      	b.n	bb4de <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bb4f0:	6861      	ldr	r1, [r4, #4]
   bb4f2:	6820      	ldr	r0, [r4, #0]
   bb4f4:	0089      	lsls	r1, r1, #2
   bb4f6:	f7f8 fdd2 	bl	b409e <_ZdlPvj>
    }
   bb4fa:	4620      	mov	r0, r4
   bb4fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb500 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bb500:	b510      	push	{r4, lr}
   bb502:	4b09      	ldr	r3, [pc, #36]	; (bb528 <_ZN14SequentialFileD1Ev+0x28>)
   bb504:	4604      	mov	r4, r0
   bb506:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bb50a:	f7ff ffe1 	bl	bb4d0 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bb50e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb512:	f005 fa25 	bl	c0960 <_ZN6StringD1Ev>
   bb516:	f104 0014 	add.w	r0, r4, #20
   bb51a:	f005 fa21 	bl	c0960 <_ZN6StringD1Ev>
   bb51e:	1d20      	adds	r0, r4, #4
   bb520:	f005 fa1e 	bl	c0960 <_ZN6StringD1Ev>
}
   bb524:	4620      	mov	r0, r4
   bb526:	bd10      	pop	{r4, pc}
   bb528:	000c7eec 	.word	0x000c7eec

000bb52c <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bb52c:	b510      	push	{r4, lr}
   bb52e:	4604      	mov	r4, r0
}
   bb530:	f7ff ffe6 	bl	bb500 <_ZN14SequentialFileD1Ev>
   bb534:	4620      	mov	r0, r4
   bb536:	2168      	movs	r1, #104	; 0x68
   bb538:	f7f8 fdb1 	bl	b409e <_ZdlPvj>
   bb53c:	4620      	mov	r0, r4
   bb53e:	bd10      	pop	{r4, pc}

000bb540 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bb540:	68c3      	ldr	r3, [r0, #12]
   bb542:	68ca      	ldr	r2, [r1, #12]
   bb544:	1a9b      	subs	r3, r3, r2
   bb546:	109b      	asrs	r3, r3, #2
   bb548:	1e5a      	subs	r2, r3, #1
   bb54a:	e9d0 3000 	ldrd	r3, r0, [r0]
   bb54e:	1a1b      	subs	r3, r3, r0
   bb550:	109b      	asrs	r3, r3, #2
   bb552:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bb556:	6888      	ldr	r0, [r1, #8]
   bb558:	680a      	ldr	r2, [r1, #0]
   bb55a:	1a80      	subs	r0, r0, r2
      }
   bb55c:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bb560:	4770      	bx	lr
	...

000bb564 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bb564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bb568:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bb56a:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bb56c:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bb56e:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bb570:	4604      	mov	r4, r0
   bb572:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bb574:	d007      	beq.n	bb586 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb576:	b10b      	cbz	r3, bb57c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bb578:	680a      	ldr	r2, [r1, #0]
   bb57a:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bb57c:	69a3      	ldr	r3, [r4, #24]
   bb57e:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bb580:	61a3      	str	r3, [r4, #24]
      }
   bb582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bb586:	f100 0108 	add.w	r1, r0, #8
   bb58a:	3018      	adds	r0, #24
   bb58c:	f7ff ffd8 	bl	bb540 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bb590:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bb594:	4298      	cmp	r0, r3
   bb596:	d102      	bne.n	bb59e <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bb598:	4838      	ldr	r0, [pc, #224]	; (bb67c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bb59a:	f008 f924 	bl	c37e6 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bb59e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bb5a0:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bb5a2:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bb5a4:	1a11      	subs	r1, r2, r0
   bb5a6:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bb5aa:	2901      	cmp	r1, #1
   bb5ac:	d825      	bhi.n	bb5fa <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bb5ae:	6961      	ldr	r1, [r4, #20]
   bb5b0:	eba2 0801 	sub.w	r8, r2, r1
   bb5b4:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bb5b8:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bb5ba:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bb5be:	d936      	bls.n	bb62e <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bb5c0:	1b5d      	subs	r5, r3, r5
   bb5c2:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bb5c4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bb5c8:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bb5ca:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bb5cc:	eba3 0201 	sub.w	r2, r3, r1
   bb5d0:	d926      	bls.n	bb620 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bb5d2:	428b      	cmp	r3, r1
   bb5d4:	d002      	beq.n	bb5dc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bb5d6:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bb5d8:	f009 ff00 	bl	c53dc <memmove>
	_M_node = __new_node;
   bb5dc:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bb5de:	682b      	ldr	r3, [r5, #0]
   bb5e0:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb5e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bb5e6:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bb5e8:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bb5ec:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bb5ee:	f855 3008 	ldr.w	r3, [r5, r8]
   bb5f2:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb5f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bb5f8:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb5fa:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bb5fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bb600:	f7f8 fd49 	bl	b4096 <_Znwj>
   bb604:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bb606:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb608:	b10b      	cbz	r3, bb60e <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bb60a:	683a      	ldr	r2, [r7, #0]
   bb60c:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bb60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb610:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bb612:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bb614:	685b      	ldr	r3, [r3, #4]
   bb616:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb618:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bb61c:	6222      	str	r2, [r4, #32]
   bb61e:	e7af      	b.n	bb580 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bb620:	428b      	cmp	r3, r1
   bb622:	d0db      	beq.n	bb5dc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bb624:	f108 0004 	add.w	r0, r8, #4
   bb628:	1a80      	subs	r0, r0, r2
   bb62a:	4428      	add	r0, r5
   bb62c:	e7d4      	b.n	bb5d8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bb62e:	f103 0902 	add.w	r9, r3, #2
   bb632:	2b01      	cmp	r3, #1
   bb634:	bf2c      	ite	cs
   bb636:	4499      	addcs	r9, r3
   bb638:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bb63c:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bb640:	d301      	bcc.n	bb646 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bb642:	f008 f8cd 	bl	c37e0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb646:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bb64a:	f7f8 fd24 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bb64e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bb650:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bb652:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bb656:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bb658:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bb65a:	4291      	cmp	r1, r2
   bb65c:	4682      	mov	sl, r0
   bb65e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bb662:	d003      	beq.n	bb66c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bb664:	1a52      	subs	r2, r2, r1
   bb666:	4628      	mov	r0, r5
   bb668:	f009 feb8 	bl	c53dc <memmove>
	::operator delete(__p
   bb66c:	6861      	ldr	r1, [r4, #4]
   bb66e:	6820      	ldr	r0, [r4, #0]
   bb670:	0089      	lsls	r1, r1, #2
   bb672:	f7f8 fd14 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bb676:	e9c4 a900 	strd	sl, r9, [r4]
   bb67a:	e7af      	b.n	bb5dc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bb67c:	000c7d01 	.word	0x000c7d01

000bb680 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bb680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bb684:	68c3      	ldr	r3, [r0, #12]
   bb686:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bb688:	b086      	sub	sp, #24
   bb68a:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bb68c:	d808      	bhi.n	bb6a0 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bb68e:	4934      	ldr	r1, [pc, #208]	; (bb760 <_ZN14SequentialFile7scanDirEv+0xe0>)
   bb690:	4834      	ldr	r0, [pc, #208]	; (bb764 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bb692:	f7fc fea7 	bl	b83e4 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bb696:	2600      	movs	r6, #0
}
   bb698:	4630      	mov	r0, r6
   bb69a:	b006      	add	sp, #24
   bb69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bb6a0:	6840      	ldr	r0, [r0, #4]
   bb6a2:	f7ff fe01 	bl	bb2a8 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bb6a6:	4606      	mov	r6, r0
   bb6a8:	2800      	cmp	r0, #0
   bb6aa:	d0f4      	beq.n	bb696 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bb6ac:	6963      	ldr	r3, [r4, #20]
   bb6ae:	6862      	ldr	r2, [r4, #4]
   bb6b0:	492d      	ldr	r1, [pc, #180]	; (bb768 <_ZN14SequentialFile7scanDirEv+0xe8>)
   bb6b2:	482c      	ldr	r0, [pc, #176]	; (bb764 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bb6b4:	f7fc fea4 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bb6b8:	6860      	ldr	r0, [r4, #4]
   bb6ba:	f004 fb25 	bl	bfd08 <opendir>
    if (!dir) {
   bb6be:	4607      	mov	r7, r0
   bb6c0:	2800      	cmp	r0, #0
   bb6c2:	d0e8      	beq.n	bb696 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bb6c4:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bb6c6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bb76c <_ZN14SequentialFile7scanDirEv+0xec>
   bb6ca:	f8df 8098 	ldr.w	r8, [pc, #152]	; bb764 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bb6ce:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bb6d0:	4638      	mov	r0, r7
   bb6d2:	f004 fb21 	bl	bfd18 <readdir>
        if (!ent) {
   bb6d6:	4605      	mov	r5, r0
   bb6d8:	2800      	cmp	r0, #0
   bb6da:	d039      	beq.n	bb750 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bb6dc:	7a83      	ldrb	r3, [r0, #10]
   bb6de:	2b08      	cmp	r3, #8
   bb6e0:	d1f6      	bne.n	bb6d0 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bb6e2:	350b      	adds	r5, #11
   bb6e4:	6961      	ldr	r1, [r4, #20]
   bb6e6:	aa01      	add	r2, sp, #4
   bb6e8:	4628      	mov	r0, r5
   bb6ea:	f004 fe5d 	bl	c03a8 <sscanf>
   bb6ee:	2801      	cmp	r0, #1
   bb6f0:	d1ee      	bne.n	bb6d0 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bb6f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bb6f4:	b17b      	cbz	r3, bb716 <_ZN14SequentialFile7scanDirEv+0x96>
   bb6f6:	4629      	mov	r1, r5
   bb6f8:	a802      	add	r0, sp, #8
   bb6fa:	f005 f97c 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bb6fe:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bb702:	a802      	add	r0, sp, #8
   bb704:	f005 fa50 	bl	c0ba8 <_ZNK6String8endsWithERKS_>
   bb708:	4682      	mov	sl, r0
   bb70a:	a802      	add	r0, sp, #8
   bb70c:	f005 f928 	bl	c0960 <_ZN6StringD1Ev>
   bb710:	f1ba 0f00 	cmp.w	sl, #0
   bb714:	d0dc      	beq.n	bb6d0 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bb716:	6823      	ldr	r3, [r4, #0]
   bb718:	4629      	mov	r1, r5
   bb71a:	689b      	ldr	r3, [r3, #8]
   bb71c:	4620      	mov	r0, r4
   bb71e:	4798      	blx	r3
   bb720:	2800      	cmp	r0, #0
   bb722:	d0d5      	beq.n	bb6d0 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bb724:	9a01      	ldr	r2, [sp, #4]
   bb726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bb728:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bb72a:	bfb8      	it	lt
   bb72c:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bb72e:	462b      	mov	r3, r5
   bb730:	4649      	mov	r1, r9
   bb732:	4640      	mov	r0, r8
   bb734:	f7fc fe64 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bb738:	4620      	mov	r0, r4
   bb73a:	f7ff fda5 	bl	bb288 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bb73e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bb742:	a901      	add	r1, sp, #4
   bb744:	f7ff ff0e 	bl	bb564 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bb748:	4620      	mov	r0, r4
   bb74a:	f7ff fda9 	bl	bb2a0 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bb74e:	e7bf      	b.n	bb6d0 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bb750:	4638      	mov	r0, r7
   bb752:	f004 fae9 	bl	bfd28 <closedir>
    scanDirCompleted = true;
   bb756:	2301      	movs	r3, #1
   bb758:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bb75c:	e79c      	b.n	bb698 <_ZN14SequentialFile7scanDirEv+0x18>
   bb75e:	bf00      	nop
   bb760:	000c7e71 	.word	0x000c7e71
   bb764:	2003b450 	.word	0x2003b450
   bb768:	000c7e86 	.word	0x000c7e86
   bb76c:	000c7ea2 	.word	0x000c7ea2

000bb770 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bb770:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bb772:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bb776:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bb778:	b90b      	cbnz	r3, bb77e <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bb77a:	f7ff ff81 	bl	bb680 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bb77e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bb780:	3001      	adds	r0, #1
   bb782:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bb784:	bd10      	pop	{r4, pc}
	...

000bb788 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bb788:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bb78a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bb78e:	4604      	mov	r4, r0
   bb790:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bb792:	b90b      	cbnz	r3, bb798 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bb794:	f7ff ff74 	bl	bb680 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bb798:	4620      	mov	r0, r4
   bb79a:	f7ff fd75 	bl	bb288 <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bb79e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bb7a0:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bb7a2:	429a      	cmp	r2, r3
   bb7a4:	d020      	beq.n	bb7e8 <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bb7a6:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bb7aa:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bb7ac:	b126      	cbz	r6, bb7b8 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bb7ae:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bb7b0:	4293      	cmp	r3, r2
   bb7b2:	d00c      	beq.n	bb7ce <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bb7b4:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bb7b6:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bb7b8:	4620      	mov	r0, r4
   bb7ba:	f7ff fd71 	bl	bb2a0 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bb7be:	b125      	cbz	r5, bb7ca <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bb7c0:	490a      	ldr	r1, [pc, #40]	; (bb7ec <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bb7c2:	480b      	ldr	r0, [pc, #44]	; (bb7f0 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bb7c4:	462a      	mov	r2, r5
   bb7c6:	f7fc fe1b 	bl	b8400 <_ZNK5spark6Logger5traceEPKcz>
}
   bb7ca:	4628      	mov	r0, r5
   bb7cc:	bd70      	pop	{r4, r5, r6, pc}
   bb7ce:	f44f 7100 	mov.w	r1, #512	; 0x200
   bb7d2:	f7f8 fc64 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bb7d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb7d8:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bb7da:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bb7dc:	685b      	ldr	r3, [r3, #4]
   bb7de:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb7e0:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bb7e4:	6522      	str	r2, [r4, #80]	; 0x50
   bb7e6:	e7e6      	b.n	bb7b6 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bb7e8:	2500      	movs	r5, #0
   bb7ea:	e7e5      	b.n	bb7b8 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bb7ec:	000c7eb8 	.word	0x000c7eb8
   bb7f0:	2003b450 	.word	0x2003b450

000bb7f4 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bb7f4:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bb7f6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bb7fa:	9101      	str	r1, [sp, #4]
   bb7fc:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bb7fe:	b90b      	cbnz	r3, bb804 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bb800:	f7ff ff3e 	bl	bb680 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bb804:	9b01      	ldr	r3, [sp, #4]
   bb806:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bb808:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bb80a:	bfb8      	it	lt
   bb80c:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bb80e:	4620      	mov	r0, r4
   bb810:	f7ff fd3a 	bl	bb288 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bb814:	a901      	add	r1, sp, #4
   bb816:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bb81a:	f7ff fea3 	bl	bb564 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bb81e:	4620      	mov	r0, r4
   bb820:	f7ff fd3e 	bl	bb2a0 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bb824:	b002      	add	sp, #8
   bb826:	bd10      	pop	{r4, pc}

000bb828 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bb828:	b538      	push	{r3, r4, r5, lr}
   bb82a:	4604      	mov	r4, r0
    queueMutexLock();
   bb82c:	f7ff fd2c 	bl	bb288 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bb830:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bb834:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bb838:	f7ff fe82 	bl	bb540 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bb83c:	4605      	mov	r5, r0
    queueMutexUnlock();
   bb83e:	4620      	mov	r0, r4
   bb840:	f7ff fd2e 	bl	bb2a0 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bb844:	4628      	mov	r0, r5
   bb846:	bd38      	pop	{r3, r4, r5, pc}

000bb848 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bb848:	4b01      	ldr	r3, [pc, #4]	; (bb850 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bb84a:	4a02      	ldr	r2, [pc, #8]	; (bb854 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bb84c:	601a      	str	r2, [r3, #0]
}
   bb84e:	4770      	bx	lr
   bb850:	2003b450 	.word	0x2003b450
   bb854:	000c7ed5 	.word	0x000c7ed5

000bb858 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   bb858:	4770      	bx	lr

000bb85a <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   bb85a:	4770      	bx	lr

000bb85c <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   bb85c:	b510      	push	{r4, lr}
}
   bb85e:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   bb860:	4604      	mov	r4, r0
}
   bb862:	f7f8 fc1c 	bl	b409e <_ZdlPvj>
   bb866:	4620      	mov	r0, r4
   bb868:	bd10      	pop	{r4, pc}

000bb86a <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   bb86a:	b510      	push	{r4, lr}
}
   bb86c:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   bb86e:	4604      	mov	r4, r0
}
   bb870:	f7f8 fc15 	bl	b409e <_ZdlPvj>
   bb874:	4620      	mov	r0, r4
   bb876:	bd10      	pop	{r4, pc}

000bb878 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   bb878:	b510      	push	{r4, lr}
   bb87a:	4b05      	ldr	r3, [pc, #20]	; (bb890 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   bb87c:	4604      	mov	r4, r0
   bb87e:	f840 3b1c 	str.w	r3, [r0], #28
   bb882:	f005 f86d 	bl	c0960 <_ZN6StringD1Ev>
   bb886:	1d20      	adds	r0, r4, #4
   bb888:	f005 f86a 	bl	c0960 <_ZN6StringD1Ev>
}
   bb88c:	4620      	mov	r0, r4
   bb88e:	bd10      	pop	{r4, pc}
   bb890:	000c7f64 	.word	0x000c7f64

000bb894 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   bb894:	b510      	push	{r4, lr}
   bb896:	4604      	mov	r4, r0
}
   bb898:	f7ff ffee 	bl	bb878 <_ZN22LocalTimePosixTimezoneD1Ev>
   bb89c:	4620      	mov	r0, r4
   bb89e:	2158      	movs	r1, #88	; 0x58
   bb8a0:	f7f8 fbfd 	bl	b409e <_ZdlPvj>
   bb8a4:	4620      	mov	r0, r4
   bb8a6:	bd10      	pop	{r4, pc}

000bb8a8 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   bb8a8:	b510      	push	{r4, lr}
   bb8aa:	4b04      	ldr	r3, [pc, #16]	; (bb8bc <_ZN9LocalTimeD1Ev+0x14>)
   bb8ac:	4604      	mov	r4, r0
   bb8ae:	f840 3b04 	str.w	r3, [r0], #4
   bb8b2:	f7ff ffe1 	bl	bb878 <_ZN22LocalTimePosixTimezoneD1Ev>
   bb8b6:	4620      	mov	r0, r4
   bb8b8:	bd10      	pop	{r4, pc}
   bb8ba:	bf00      	nop
   bb8bc:	000c7f34 	.word	0x000c7f34

000bb8c0 <_ZN9LocalTimeD0Ev>:
   bb8c0:	b510      	push	{r4, lr}
   bb8c2:	4604      	mov	r4, r0
   bb8c4:	f7ff fff0 	bl	bb8a8 <_ZN9LocalTimeD1Ev>
   bb8c8:	4620      	mov	r0, r4
   bb8ca:	2160      	movs	r1, #96	; 0x60
   bb8cc:	f7f8 fbe7 	bl	b409e <_ZdlPvj>
   bb8d0:	4620      	mov	r0, r4
   bb8d2:	bd10      	pop	{r4, pc}

000bb8d4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   bb8d4:	f020 0302 	bic.w	r3, r0, #2
   bb8d8:	2b01      	cmp	r3, #1
   bb8da:	d003      	beq.n	bb8e4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   bb8dc:	1f43      	subs	r3, r0, #5
   bb8de:	4258      	negs	r0, r3
   bb8e0:	4158      	adcs	r0, r3
   bb8e2:	4770      	bx	lr
   bb8e4:	4618      	mov	r0, r3
   bb8e6:	4770      	bx	lr

000bb8e8 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   bb8e8:	f991 3004 	ldrsb.w	r3, [r1, #4]
   bb8ec:	7103      	strb	r3, [r0, #4]
   bb8ee:	f991 3005 	ldrsb.w	r3, [r1, #5]
   bb8f2:	7143      	strb	r3, [r0, #5]
   bb8f4:	f991 3006 	ldrsb.w	r3, [r1, #6]
   bb8f8:	7183      	strb	r3, [r0, #6]
   bb8fa:	f991 3007 	ldrsb.w	r3, [r1, #7]
   bb8fe:	71c3      	strb	r3, [r0, #7]
   bb900:	4770      	bx	lr

000bb902 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   bb902:	b538      	push	{r3, r4, r5, lr}
   bb904:	4604      	mov	r4, r0
   bb906:	460d      	mov	r5, r1
   bb908:	3004      	adds	r0, #4
   bb90a:	3104      	adds	r1, #4
   bb90c:	f005 f8b0 	bl	c0a70 <_ZN6StringaSERKS_>
   bb910:	f105 0114 	add.w	r1, r5, #20
   bb914:	f104 0014 	add.w	r0, r4, #20
   bb918:	f7ff ffe6 	bl	bb8e8 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   bb91c:	f105 011c 	add.w	r1, r5, #28
   bb920:	f104 001c 	add.w	r0, r4, #28
   bb924:	f005 f8a4 	bl	c0a70 <_ZN6StringaSERKS_>
   bb928:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   bb92c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   bb930:	f7ff ffda 	bl	bb8e8 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   bb934:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   bb938:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   bb93c:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   bb940:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   bb944:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   bb948:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   bb94c:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   bb950:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   bb954:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   bb958:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bb95c:	f7ff ffc4 	bl	bb8e8 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   bb960:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   bb964:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   bb968:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   bb96c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   bb970:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   bb974:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   bb978:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   bb97c:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   bb980:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   bb984:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   bb988:	f7ff ffae 	bl	bb8e8 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   bb98c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   bb990:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   bb994:	bd38      	pop	{r3, r4, r5, pc}

000bb996 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb996:	680b      	ldr	r3, [r1, #0]
   bb998:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bb99a:	684b      	ldr	r3, [r1, #4]
   bb99c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bb99e:	b113      	cbz	r3, bb9a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bb9a0:	685a      	ldr	r2, [r3, #4]
   bb9a2:	3201      	adds	r2, #1
   bb9a4:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb9a6:	4770      	bx	lr

000bb9a8 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   bb9a8:	4a02      	ldr	r2, [pc, #8]	; (bb9b4 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   bb9aa:	6002      	str	r2, [r0, #0]
   bb9ac:	684a      	ldr	r2, [r1, #4]
   bb9ae:	6042      	str	r2, [r0, #4]
   bb9b0:	4770      	bx	lr
   bb9b2:	bf00      	nop
   bb9b4:	000c7f44 	.word	0x000c7f44

000bb9b8 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   bb9b8:	694a      	ldr	r2, [r1, #20]
   bb9ba:	6803      	ldr	r3, [r0, #0]
   bb9bc:	f362 0316 	bfi	r3, r2, #0, #23
   bb9c0:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   bb9c2:	690b      	ldr	r3, [r1, #16]
   bb9c4:	1c5a      	adds	r2, r3, #1
   bb9c6:	8843      	ldrh	r3, [r0, #2]
   bb9c8:	f362 13ca 	bfi	r3, r2, #7, #4
   bb9cc:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   bb9ce:	68ca      	ldr	r2, [r1, #12]
   bb9d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   bb9d4:	f362 03c7 	bfi	r3, r2, #3, #5
   bb9d8:	70c3      	strb	r3, [r0, #3]
}
   bb9da:	4770      	bx	lr

000bb9dc <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   bb9dc:	4a02      	ldr	r2, [pc, #8]	; (bb9e8 <_ZN12LocalTimeHMSC1Ev+0xc>)
   bb9de:	6002      	str	r2, [r0, #0]
   bb9e0:	2200      	movs	r2, #0
   bb9e2:	6042      	str	r2, [r0, #4]
}
   bb9e4:	4770      	bx	lr
   bb9e6:	bf00      	nop
   bb9e8:	000c7f44 	.word	0x000c7f44

000bb9ec <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   bb9ec:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   bb9ee:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   bb9f0:	b087      	sub	sp, #28
    hour = minute = second = 0;
   bb9f2:	8083      	strh	r3, [r0, #4]
   bb9f4:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   bb9f6:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   bb9f8:	ab05      	add	r3, sp, #20
   bb9fa:	9300      	str	r3, [sp, #0]
   bb9fc:	4913      	ldr	r1, [pc, #76]	; (bba4c <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   bb9fe:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   bba00:	ab04      	add	r3, sp, #16
   bba02:	aa03      	add	r2, sp, #12
   bba04:	4628      	mov	r0, r5
   bba06:	f004 fccf 	bl	c03a8 <sscanf>
   bba0a:	2803      	cmp	r0, #3
   bba0c:	d107      	bne.n	bba1e <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   bba0e:	9b03      	ldr	r3, [sp, #12]
   bba10:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   bba12:	9b04      	ldr	r3, [sp, #16]
   bba14:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   bba16:	9b05      	ldr	r3, [sp, #20]
   bba18:	71a3      	strb	r3, [r4, #6]
}
   bba1a:	b007      	add	sp, #28
   bba1c:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   bba1e:	490c      	ldr	r1, [pc, #48]	; (bba50 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   bba20:	ab04      	add	r3, sp, #16
   bba22:	aa03      	add	r2, sp, #12
   bba24:	4628      	mov	r0, r5
   bba26:	f004 fcbf 	bl	c03a8 <sscanf>
   bba2a:	2802      	cmp	r0, #2
   bba2c:	d104      	bne.n	bba38 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   bba2e:	9b03      	ldr	r3, [sp, #12]
   bba30:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   bba32:	9b04      	ldr	r3, [sp, #16]
   bba34:	7163      	strb	r3, [r4, #5]
   bba36:	e7f0      	b.n	bba1a <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   bba38:	4906      	ldr	r1, [pc, #24]	; (bba54 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   bba3a:	aa03      	add	r2, sp, #12
   bba3c:	4628      	mov	r0, r5
   bba3e:	f004 fcb3 	bl	c03a8 <sscanf>
   bba42:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   bba44:	bf04      	itt	eq
   bba46:	9b03      	ldreq	r3, [sp, #12]
   bba48:	7123      	strbeq	r3, [r4, #4]
}
   bba4a:	e7e6      	b.n	bba1a <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   bba4c:	000c7ef8 	.word	0x000c7ef8
   bba50:	000c7efb 	.word	0x000c7efb
   bba54:	000c867d 	.word	0x000c867d

000bba58 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   bba58:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   bba5c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   bba60:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   bba64:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   bba66:	bfb8      	it	lt
   bba68:	4808      	ldrlt	r0, [pc, #32]	; (bba8c <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   bba6a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   bba6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   bba72:	bfbd      	ittte	lt
   bba74:	fb00 3002 	mlalt	r0, r0, r2, r3
   bba78:	1840      	addlt	r0, r0, r1
   bba7a:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   bba7c:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   bba80:	bfa4      	itt	ge
   bba82:	fb00 3002 	mlage	r0, r0, r2, r3
   bba86:	1840      	addge	r0, r0, r1
}
   bba88:	4770      	bx	lr
   bba8a:	bf00      	nop
   bba8c:	fffff1f0 	.word	0xfffff1f0

000bba90 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   bba90:	b508      	push	{r3, lr}
   bba92:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   bba96:	b14b      	cbz	r3, bbaac <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   bba98:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   bba9c:	b943      	cbnz	r3, bbab0 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   bba9e:	302c      	adds	r0, #44	; 0x2c
   bbaa0:	f7ff ffda 	bl	bba58 <_ZNK12LocalTimeHMS9toSecondsEv>
   bbaa4:	fab0 f080 	clz	r0, r0
   bbaa8:	0940      	lsrs	r0, r0, #5
   bbaaa:	bd08      	pop	{r3, pc}
   bbaac:	2001      	movs	r0, #1
   bbaae:	e7fc      	b.n	bbaaa <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   bbab0:	2000      	movs	r0, #0
   bbab2:	e7fa      	b.n	bbaaa <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000bbab4 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   bbab4:	f990 3007 	ldrsb.w	r3, [r0, #7]
   bbab8:	b943      	cbnz	r3, bbacc <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   bbaba:	f990 3004 	ldrsb.w	r3, [r0, #4]
   bbabe:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   bbac0:	f990 3005 	ldrsb.w	r3, [r0, #5]
   bbac4:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   bbac6:	f990 3006 	ldrsb.w	r3, [r0, #6]
   bbaca:	600b      	str	r3, [r1, #0]
}
   bbacc:	4770      	bx	lr

000bbace <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   bbace:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   bbad2:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   bbad4:	b9b3      	cbnz	r3, bbb04 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   bbad6:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   bbada:	688c      	ldr	r4, [r1, #8]
   bbadc:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   bbade:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   bbae2:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   bbae4:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   bbae8:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   bbaea:	bfb5      	itete	lt
   bbaec:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   bbaee:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   bbaf0:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   bbaf2:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   bbaf4:	bfb5      	itete	lt
   bbaf6:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   bbafa:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   bbafe:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   bbb00:	189b      	addge	r3, r3, r2
   bbb02:	600b      	str	r3, [r1, #0]
}
   bbb04:	bd30      	pop	{r4, r5, pc}
	...

000bbb08 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   bbb08:	b508      	push	{r3, lr}
   bbb0a:	4a05      	ldr	r2, [pc, #20]	; (bbb20 <_ZN15LocalTimeChangeC1Ev+0x18>)
   bbb0c:	6002      	str	r2, [r0, #0]
   bbb0e:	2200      	movs	r2, #0
   bbb10:	4603      	mov	r3, r0
   bbb12:	6042      	str	r2, [r0, #4]
   bbb14:	3008      	adds	r0, #8
   bbb16:	f7ff ff61 	bl	bb9dc <_ZN12LocalTimeHMSC1Ev>
}
   bbb1a:	4618      	mov	r0, r3
   bbb1c:	bd08      	pop	{r3, pc}
   bbb1e:	bf00      	nop
   bbb20:	000c7f54 	.word	0x000c7f54

000bbb24 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   bbb24:	2300      	movs	r3, #0
   bbb26:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   bbb28:	8183      	strh	r3, [r0, #12]
   bbb2a:	7383      	strb	r3, [r0, #14]
}
   bbb2c:	4770      	bx	lr
	...

000bbb30 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   bbb30:	b530      	push	{r4, r5, lr}
   bbb32:	4604      	mov	r4, r0
   bbb34:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   bbb36:	460d      	mov	r5, r1
   bbb38:	b111      	cbz	r1, bbb40 <_ZN15LocalTimeChange5parseEPKc+0x10>
   bbb3a:	780b      	ldrb	r3, [r1, #0]
   bbb3c:	2b4d      	cmp	r3, #77	; 0x4d
   bbb3e:	d005      	beq.n	bbb4c <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   bbb40:	4620      	mov	r0, r4
}
   bbb42:	b007      	add	sp, #28
   bbb44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   bbb48:	f7ff bfec 	b.w	bbb24 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   bbb4c:	ab05      	add	r3, sp, #20
   bbb4e:	9300      	str	r3, [sp, #0]
   bbb50:	4911      	ldr	r1, [pc, #68]	; (bbb98 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   bbb52:	ab04      	add	r3, sp, #16
   bbb54:	aa03      	add	r2, sp, #12
   bbb56:	4628      	mov	r0, r5
   bbb58:	f004 fc26 	bl	c03a8 <sscanf>
   bbb5c:	2803      	cmp	r0, #3
   bbb5e:	d116      	bne.n	bbb8e <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   bbb60:	9b03      	ldr	r3, [sp, #12]
   bbb62:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   bbb64:	9b04      	ldr	r3, [sp, #16]
   bbb66:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   bbb68:	9b05      	ldr	r3, [sp, #20]
   bbb6a:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   bbb6c:	212f      	movs	r1, #47	; 0x2f
   bbb6e:	4628      	mov	r0, r5
   bbb70:	f009 fcd2 	bl	c5518 <strchr>
        if (cp) {
   bbb74:	b140      	cbz	r0, bbb88 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   bbb76:	1c41      	adds	r1, r0, #1
   bbb78:	f104 0008 	add.w	r0, r4, #8
   bbb7c:	f7ff ff36 	bl	bb9ec <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   bbb80:	2301      	movs	r3, #1
   bbb82:	71e3      	strb	r3, [r4, #7]
}
   bbb84:	b007      	add	sp, #28
   bbb86:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   bbb88:	81a0      	strh	r0, [r4, #12]
   bbb8a:	73a0      	strb	r0, [r4, #14]
}
   bbb8c:	e7f8      	b.n	bbb80 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   bbb8e:	4620      	mov	r0, r4
   bbb90:	f7ff ffc8 	bl	bbb24 <_ZN15LocalTimeChange5clearEv>
   bbb94:	e7f6      	b.n	bbb84 <_ZN15LocalTimeChange5parseEPKc+0x54>
   bbb96:	bf00      	nop
   bbb98:	000c7f13 	.word	0x000c7f13

000bbb9c <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   bbb9c:	4b10      	ldr	r3, [pc, #64]	; (bbbe0 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   bbb9e:	4911      	ldr	r1, [pc, #68]	; (bbbe4 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   bbba0:	b510      	push	{r4, lr}
   bbba2:	4604      	mov	r4, r0
   bbba4:	f840 3b04 	str.w	r3, [r0], #4
   bbba8:	f004 ff25 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bbbac:	f104 0014 	add.w	r0, r4, #20
   bbbb0:	f7ff ff14 	bl	bb9dc <_ZN12LocalTimeHMSC1Ev>
   bbbb4:	490b      	ldr	r1, [pc, #44]	; (bbbe4 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   bbbb6:	f104 001c 	add.w	r0, r4, #28
   bbbba:	f004 ff1c 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bbbbe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   bbbc2:	f7ff ff0b 	bl	bb9dc <_ZN12LocalTimeHMSC1Ev>
   bbbc6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bbbca:	f7ff ff9d 	bl	bbb08 <_ZN15LocalTimeChangeC1Ev>
   bbbce:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bbbd2:	f7ff ff99 	bl	bbb08 <_ZN15LocalTimeChangeC1Ev>
   bbbd6:	2300      	movs	r3, #0
   bbbd8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   bbbdc:	4620      	mov	r0, r4
   bbbde:	bd10      	pop	{r4, pc}
   bbbe0:	000c7f64 	.word	0x000c7f64
   bbbe4:	000c9298 	.word	0x000c9298

000bbbe8 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   bbbe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbbec:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   bbbee:	4608      	mov	r0, r1
   bbbf0:	f009 fcbc 	bl	c556c <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   bbbf4:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   bbbf6:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   bbbf8:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   bbbfa:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   bbbfe:	493f      	ldr	r1, [pc, #252]	; (bbcfc <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   bbc00:	9801      	ldr	r0, [sp, #4]
   bbc02:	aa01      	add	r2, sp, #4
   bbc04:	f009 fd3a 	bl	c567c <strtok_r>
   bbc08:	4601      	mov	r1, r0
   bbc0a:	2800      	cmp	r0, #0
   bbc0c:	d062      	beq.n	bbcd4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   bbc0e:	2d01      	cmp	r5, #1
   bbc10:	f105 0301 	add.w	r3, r5, #1
   bbc14:	d053      	beq.n	bbcbe <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   bbc16:	2d02      	cmp	r5, #2
   bbc18:	d056      	beq.n	bbcc8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   bbc1a:	2d00      	cmp	r5, #0
   bbc1c:	d146      	bne.n	bbcac <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   bbc1e:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   bbc20:	f892 9000 	ldrb.w	r9, [r2]
   bbc24:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   bbc28:	4615      	mov	r5, r2
   bbc2a:	4617      	mov	r7, r2
   bbc2c:	f102 0201 	add.w	r2, r2, #1
   bbc30:	d8f6      	bhi.n	bbc20 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   bbc32:	2200      	movs	r2, #0
   bbc34:	702a      	strb	r2, [r5, #0]
                standardName = start;
   bbc36:	f104 001c 	add.w	r0, r4, #28
   bbc3a:	f004 ff3b 	bl	c0ab4 <_ZN6StringaSEPKc>
                valid = true;
   bbc3e:	2201      	movs	r2, #1
                *cp = save2;
   bbc40:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   bbc44:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   bbc48:	782a      	ldrb	r2, [r5, #0]
   bbc4a:	b36a      	cbz	r2, bbca8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   bbc4c:	f897 a000 	ldrb.w	sl, [r7]
   bbc50:	f10a 32ff 	add.w	r2, sl, #4294967295
   bbc54:	2a3f      	cmp	r2, #63	; 0x3f
   bbc56:	46b9      	mov	r9, r7
   bbc58:	46bb      	mov	fp, r7
   bbc5a:	f107 0701 	add.w	r7, r7, #1
   bbc5e:	d9f5      	bls.n	bbc4c <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   bbc60:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   bbc62:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   bbc66:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   bbc6a:	4629      	mov	r1, r5
   bbc6c:	4638      	mov	r0, r7
   bbc6e:	f7ff febd 	bl	bb9ec <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   bbc72:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   bbc76:	f1ba 0f00 	cmp.w	sl, #0
   bbc7a:	d015      	beq.n	bbca8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   bbc7c:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   bbc7e:	f81b ab01 	ldrb.w	sl, [fp], #1
   bbc82:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   bbc86:	d8f9      	bhi.n	bbc7c <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   bbc88:	2200      	movs	r2, #0
   bbc8a:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   bbc8c:	4649      	mov	r1, r9
   bbc8e:	1d20      	adds	r0, r4, #4
   bbc90:	f004 ff10 	bl	c0ab4 <_ZN6StringaSEPKc>
                        *cp = save2;
   bbc94:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   bbc98:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   bbc9c:	f1ba 0f00 	cmp.w	sl, #0
   bbca0:	d006      	beq.n	bbcb0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   bbca2:	4629      	mov	r1, r5
   bbca4:	f7ff fea2 	bl	bb9ec <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   bbca8:	2501      	movs	r5, #1
   bbcaa:	e7a8      	b.n	bbbfe <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   bbcac:	461d      	mov	r5, r3
   bbcae:	e7a6      	b.n	bbbfe <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   bbcb0:	4639      	mov	r1, r7
   bbcb2:	f7ff fe19 	bl	bb8e8 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   bbcb6:	7e23      	ldrb	r3, [r4, #24]
   bbcb8:	3b01      	subs	r3, #1
   bbcba:	7623      	strb	r3, [r4, #24]
   bbcbc:	e7f4      	b.n	bbca8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   bbcbe:	4640      	mov	r0, r8
   bbcc0:	f7ff ff36 	bl	bbb30 <_ZN15LocalTimeChange5parseEPKc>
                break;
   bbcc4:	2502      	movs	r5, #2
   bbcc6:	e79a      	b.n	bbbfe <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   bbcc8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bbccc:	f7ff ff30 	bl	bbb30 <_ZN15LocalTimeChange5parseEPKc>
                break;
   bbcd0:	2503      	movs	r5, #3
   bbcd2:	e794      	b.n	bbbfe <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   bbcd4:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   bbcd8:	b143      	cbz	r3, bbcec <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   bbcda:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   bbcde:	b92a      	cbnz	r2, bbcec <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   bbce0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bbce4:	f7ff ff1e 	bl	bbb24 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   bbce8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   bbcec:	4630      	mov	r0, r6
   bbcee:	f004 fb43 	bl	c0378 <free>

    return valid;
}
   bbcf2:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   bbcf6:	b003      	add	sp, #12
   bbcf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbcfc:	000c7f1d 	.word	0x000c7f1d

000bbd00 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   bbd00:	b538      	push	{r3, r4, r5, lr}
   bbd02:	4b13      	ldr	r3, [pc, #76]	; (bbd50 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   bbd04:	4604      	mov	r4, r0
   bbd06:	460d      	mov	r5, r1
   bbd08:	f840 3b04 	str.w	r3, [r0], #4
   bbd0c:	4911      	ldr	r1, [pc, #68]	; (bbd54 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   bbd0e:	f004 fe72 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bbd12:	f104 0014 	add.w	r0, r4, #20
   bbd16:	f7ff fe61 	bl	bb9dc <_ZN12LocalTimeHMSC1Ev>
   bbd1a:	490e      	ldr	r1, [pc, #56]	; (bbd54 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   bbd1c:	f104 001c 	add.w	r0, r4, #28
   bbd20:	f004 fe69 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
   bbd24:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   bbd28:	f7ff fe58 	bl	bb9dc <_ZN12LocalTimeHMSC1Ev>
   bbd2c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bbd30:	f7ff feea 	bl	bbb08 <_ZN15LocalTimeChangeC1Ev>
   bbd34:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bbd38:	f7ff fee6 	bl	bbb08 <_ZN15LocalTimeChangeC1Ev>
   bbd3c:	2300      	movs	r3, #0
   bbd3e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   bbd42:	4629      	mov	r1, r5
   bbd44:	4620      	mov	r0, r4
   bbd46:	f7ff ff4f 	bl	bbbe8 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   bbd4a:	4620      	mov	r0, r4
   bbd4c:	bd38      	pop	{r3, r4, r5, pc}
   bbd4e:	bf00      	nop
   bbd50:	000c7f64 	.word	0x000c7f64
   bbd54:	000c9298 	.word	0x000c9298

000bbd58 <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   bbd58:	b508      	push	{r3, lr}
   bbd5a:	4603      	mov	r3, r0
    LocalTimeHMS result;
   bbd5c:	f7ff fe3e 	bl	bb9dc <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   bbd60:	688a      	ldr	r2, [r1, #8]
   bbd62:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   bbd64:	684a      	ldr	r2, [r1, #4]
   bbd66:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   bbd68:	680a      	ldr	r2, [r1, #0]
   bbd6a:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   bbd6c:	4618      	mov	r0, r3
   bbd6e:	bd08      	pop	{r3, pc}

000bbd70 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   bbd70:	b513      	push	{r0, r1, r4, lr}
   bbd72:	4b07      	ldr	r3, [pc, #28]	; (bbd90 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   bbd74:	6003      	str	r3, [r0, #0]
   bbd76:	2300      	movs	r3, #0
   bbd78:	6043      	str	r3, [r0, #4]
   bbd7a:	4604      	mov	r4, r0
    *this = value.hms();
   bbd7c:	4668      	mov	r0, sp
   bbd7e:	f7ff ffeb 	bl	bbd58 <_ZNK14LocalTimeValue3hmsEv>
   bbd82:	4620      	mov	r0, r4
   bbd84:	4669      	mov	r1, sp
   bbd86:	f7ff fdaf 	bl	bb8e8 <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   bbd8a:	b002      	add	sp, #8
   bbd8c:	bd10      	pop	{r4, pc}
   bbd8e:	bf00      	nop
   bbd90:	000c7f44 	.word	0x000c7f44

000bbd94 <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   bbd94:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   bbd96:	2300      	movs	r3, #0
   bbd98:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   bbd9a:	a801      	add	r0, sp, #4
   bbd9c:	9301      	str	r3, [sp, #4]
   bbd9e:	f7ff fe0b 	bl	bb9b8 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   bbda2:	9801      	ldr	r0, [sp, #4]
   bbda4:	b003      	add	sp, #12
   bbda6:	f85d fb04 	ldr.w	pc, [sp], #4

000bbdaa <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   bbdaa:	b510      	push	{r4, lr}
   bbdac:	4604      	mov	r4, r0
    *this = value.ymd();
   bbdae:	4608      	mov	r0, r1
   bbdb0:	f7ff fff0 	bl	bbd94 <_ZNK14LocalTimeValue3ymdEv>
   bbdb4:	6020      	str	r0, [r4, #0]
}
   bbdb6:	bd10      	pop	{r4, pc}

000bbdb8 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   bbdb8:	b510      	push	{r4, lr}
   bbdba:	4604      	mov	r4, r0
   bbdbc:	b088      	sub	sp, #32
   bbdbe:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   bbdc0:	3068      	adds	r0, #104	; 0x68
   bbdc2:	a901      	add	r1, sp, #4
   bbdc4:	f009 faa2 	bl	c530c <asctime_r>
    int len = strlen(ascstr);
   bbdc8:	a801      	add	r0, sp, #4
   bbdca:	f009 fbec 	bl	c55a6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bbdce:	ab08      	add	r3, sp, #32
   bbdd0:	4418      	add	r0, r3
   bbdd2:	2300      	movs	r3, #0
   bbdd4:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   bbdd8:	a901      	add	r1, sp, #4
   bbdda:	4620      	mov	r0, r4
   bbddc:	f004 fe0b 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bbde0:	4620      	mov	r0, r4
   bbde2:	b008      	add	sp, #32
   bbde4:	bd10      	pop	{r4, pc}
	...

000bbde8 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   bbde8:	b538      	push	{r3, r4, r5, lr}
   bbdea:	4604      	mov	r4, r0
    if (config.isZ()) {
   bbdec:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   bbdee:	460d      	mov	r5, r1
    if (config.isZ()) {
   bbdf0:	f7ff fe4e 	bl	bba90 <_ZNK22LocalTimePosixTimezone3isZEv>
   bbdf4:	b128      	cbz	r0, bbe02 <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   bbdf6:	4909      	ldr	r1, [pc, #36]	; (bbe1c <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   bbdf8:	4620      	mov	r0, r4
   bbdfa:	f004 fdfc 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   bbdfe:	4620      	mov	r0, r4
   bbe00:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   bbe02:	6828      	ldr	r0, [r5, #0]
   bbe04:	f7ff fd66 	bl	bb8d4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   bbe08:	b128      	cbz	r0, bbe16 <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   bbe0a:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   bbe0e:	4620      	mov	r0, r4
   bbe10:	f004 fe3d 	bl	c0a8e <_ZN6StringC1ERKS_>
   bbe14:	e7f3      	b.n	bbdfe <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   bbe16:	f105 0120 	add.w	r1, r5, #32
   bbe1a:	e7f8      	b.n	bbe0e <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   bbe1c:	000c7f1f 	.word	0x000c7f1f

000bbe20 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   bbe20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbe24:	4680      	mov	r8, r0
   bbe26:	b0a8      	sub	sp, #160	; 0xa0
   bbe28:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bbe2a:	4615      	mov	r5, r2
   bbe2c:	b12a      	cbz	r2, bbe3a <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   bbe2e:	4b47      	ldr	r3, [pc, #284]	; (bbf4c <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   bbe30:	4610      	mov	r0, r2
   bbe32:	6819      	ldr	r1, [r3, #0]
   bbe34:	f009 fb87 	bl	c5546 <strcmp>
   bbe38:	b938      	cbnz	r0, bbe4a <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   bbe3a:	4621      	mov	r1, r4
   bbe3c:	4640      	mov	r0, r8
   bbe3e:	f7ff ffbb 	bl	bbdb8 <_ZN16LocalTimeConvert7timeStrEv>
}
   bbe42:	4640      	mov	r0, r8
   bbe44:	b028      	add	sp, #160	; 0xa0
   bbe46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bbe4a:	4629      	mov	r1, r5
   bbe4c:	223f      	movs	r2, #63	; 0x3f
   bbe4e:	a818      	add	r0, sp, #96	; 0x60
   bbe50:	f009 fbc5 	bl	c55de <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bbe54:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bbe56:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bbe58:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bbe5c:	f009 fba3 	bl	c55a6 <strlen>
    String zoneNameStr = zoneName();
   bbe60:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bbe62:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   bbe64:	a803      	add	r0, sp, #12
   bbe66:	f7ff ffbf 	bl	bbde8 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   bbe6a:	1d20      	adds	r0, r4, #4
   bbe6c:	f7ff fe10 	bl	bba90 <_ZNK22LocalTimePosixTimezone3isZEv>
   bbe70:	b348      	cbz	r0, bbec6 <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   bbe72:	4937      	ldr	r1, [pc, #220]	; (bbf50 <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   bbe74:	a807      	add	r0, sp, #28
   bbe76:	f009 fb70 	bl	c555a <strcpy>
   bbe7a:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   bbe7c:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   bbe7e:	f105 3aff 	add.w	sl, r5, #4294967295
   bbe82:	45ba      	cmp	sl, r7
   bbe84:	d94c      	bls.n	bbf20 <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bbe86:	7833      	ldrb	r3, [r6, #0]
   bbe88:	2b25      	cmp	r3, #37	; 0x25
   bbe8a:	f107 0901 	add.w	r9, r7, #1
   bbe8e:	d117      	bne.n	bbec0 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   bbe90:	7873      	ldrb	r3, [r6, #1]
   bbe92:	2b7a      	cmp	r3, #122	; 0x7a
   bbe94:	d136      	bne.n	bbf04 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   bbe96:	a807      	add	r0, sp, #28
   bbe98:	f009 fb85 	bl	c55a6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bbe9c:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   bbe9e:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bbea0:	1838      	adds	r0, r7, r0
   bbea2:	ebaa 0207 	sub.w	r2, sl, r7
   bbea6:	1cb1      	adds	r1, r6, #2
   bbea8:	4418      	add	r0, r3
   bbeaa:	f009 fa89 	bl	c53c0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bbeae:	462a      	mov	r2, r5
   bbeb0:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   bbeb2:	4630      	mov	r0, r6
   bbeb4:	f009 fa84 	bl	c53c0 <memcpy>
            len = strlen(format_str);
   bbeb8:	a818      	add	r0, sp, #96	; 0x60
   bbeba:	f009 fb74 	bl	c55a6 <strlen>
   bbebe:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bbec0:	3601      	adds	r6, #1
   bbec2:	464f      	mov	r7, r9
   bbec4:	e7db      	b.n	bbe7e <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   bbec6:	6820      	ldr	r0, [r4, #0]
   bbec8:	f7ff fd04 	bl	bb8d4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   bbecc:	b1b8      	cbz	r0, bbefe <_ZN16LocalTimeConvert6formatEPKc+0xde>
   bbece:	f104 0018 	add.w	r0, r4, #24
   bbed2:	f7ff fdc1 	bl	bba58 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   bbed6:	223c      	movs	r2, #60	; 0x3c
   bbed8:	fb90 f3f2 	sdiv	r3, r0, r2
   bbedc:	2b00      	cmp	r3, #0
   bbede:	bfb8      	it	lt
   bbee0:	425b      	neglt	r3, r3
   bbee2:	fbb3 f1f2 	udiv	r1, r3, r2
   bbee6:	fb02 3311 	mls	r3, r2, r1, r3
   bbeea:	9300      	str	r3, [sp, #0]
   bbeec:	4a19      	ldr	r2, [pc, #100]	; (bbf54 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   bbeee:	4b1a      	ldr	r3, [pc, #104]	; (bbf58 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   bbef0:	fb90 f3f3 	sdiv	r3, r0, r3
   bbef4:	2110      	movs	r1, #16
   bbef6:	a807      	add	r0, sp, #28
   bbef8:	f004 fa5e 	bl	c03b8 <snprintf>
   bbefc:	e7bd      	b.n	bbe7a <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   bbefe:	f104 0030 	add.w	r0, r4, #48	; 0x30
   bbf02:	e7e6      	b.n	bbed2 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   bbf04:	2b5a      	cmp	r3, #90	; 0x5a
   bbf06:	d1db      	bne.n	bbec0 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
    inline unsigned int length(void) const {return len;}
   bbf08:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bbf0a:	ab18      	add	r3, sp, #96	; 0x60
   bbf0c:	1978      	adds	r0, r7, r5
   bbf0e:	ebaa 0207 	sub.w	r2, sl, r7
   bbf12:	1cb1      	adds	r1, r6, #2
   bbf14:	4418      	add	r0, r3
   bbf16:	f009 fa53 	bl	c53c0 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   bbf1a:	9903      	ldr	r1, [sp, #12]
   bbf1c:	462a      	mov	r2, r5
   bbf1e:	e7c8      	b.n	bbeb2 <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   bbf20:	2100      	movs	r1, #0
   bbf22:	222e      	movs	r2, #46	; 0x2e
   bbf24:	a80c      	add	r0, sp, #48	; 0x30
   bbf26:	910b      	str	r1, [sp, #44]	; 0x2c
   bbf28:	f009 fa72 	bl	c5410 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   bbf2c:	f104 0368 	add.w	r3, r4, #104	; 0x68
   bbf30:	aa18      	add	r2, sp, #96	; 0x60
   bbf32:	2132      	movs	r1, #50	; 0x32
   bbf34:	a80b      	add	r0, sp, #44	; 0x2c
   bbf36:	f004 fa77 	bl	c0428 <strftime>
    return String(buf);    
   bbf3a:	a90b      	add	r1, sp, #44	; 0x2c
   bbf3c:	4640      	mov	r0, r8
   bbf3e:	f004 fd5a 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   bbf42:	a803      	add	r0, sp, #12
   bbf44:	f004 fd0c 	bl	c0960 <_ZN6StringD1Ev>
   bbf48:	e77b      	b.n	bbe42 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   bbf4a:	bf00      	nop
   bbf4c:	2003ace4 	.word	0x2003ace4
   bbf50:	000c7f1f 	.word	0x000c7f1f
   bbf54:	000c7f21 	.word	0x000c7f21
   bbf58:	fffff1f0 	.word	0xfffff1f0

000bbf5c <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   bbf5c:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   bbf5e:	4d09      	ldr	r5, [pc, #36]	; (bbf84 <_ZN9LocalTime8instanceEv+0x28>)
   bbf60:	682b      	ldr	r3, [r5, #0]
   bbf62:	b963      	cbnz	r3, bbf7e <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   bbf64:	2060      	movs	r0, #96	; 0x60
   bbf66:	f7f8 f896 	bl	b4096 <_Znwj>
   bbf6a:	4604      	mov	r4, r0
   bbf6c:	b130      	cbz	r0, bbf7c <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   bbf6e:	4b06      	ldr	r3, [pc, #24]	; (bbf88 <_ZN9LocalTime8instanceEv+0x2c>)
   bbf70:	f840 3b04 	str.w	r3, [r0], #4
   bbf74:	f7ff fe12 	bl	bbb9c <_ZN22LocalTimePosixTimezoneC1Ev>
   bbf78:	2364      	movs	r3, #100	; 0x64
   bbf7a:	65e3      	str	r3, [r4, #92]	; 0x5c
   bbf7c:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   bbf7e:	6828      	ldr	r0, [r5, #0]
   bbf80:	bd38      	pop	{r3, r4, r5, pc}
   bbf82:	bf00      	nop
   bbf84:	2003b454 	.word	0x2003b454
   bbf88:	000c7f34 	.word	0x000c7f34

000bbf8c <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   bbf8c:	f004 ba64 	b.w	c0458 <mktime>

000bbf90 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   bbf90:	3901      	subs	r1, #1
   bbf92:	290b      	cmp	r1, #11
   bbf94:	d815      	bhi.n	bbfc2 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   bbf96:	e8df f001 	tbb	[pc, r1]
   bbf9a:	0816      	.short	0x0816
   bbf9c:	06160616 	.word	0x06160616
   bbfa0:	16061616 	.word	0x16061616
   bbfa4:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   bbfa6:	201e      	movs	r0, #30
   bbfa8:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   bbfaa:	0783      	lsls	r3, r0, #30
   bbfac:	d10d      	bne.n	bbfca <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   bbfae:	2364      	movs	r3, #100	; 0x64
   bbfb0:	fb90 f2f3 	sdiv	r2, r0, r3
   bbfb4:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   bbfb8:	2800      	cmp	r0, #0
   bbfba:	bf0c      	ite	eq
   bbfbc:	201c      	moveq	r0, #28
   bbfbe:	201d      	movne	r0, #29
   bbfc0:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   bbfc2:	2000      	movs	r0, #0
   bbfc4:	4770      	bx	lr
            return 31;
   bbfc6:	201f      	movs	r0, #31
   bbfc8:	4770      	bx	lr
                return 28;
   bbfca:	201c      	movs	r0, #28
}
   bbfcc:	4770      	bx	lr

000bbfce <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   bbfce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   bbfd0:	2301      	movs	r3, #1
   bbfd2:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   bbfd4:	f990 3004 	ldrsb.w	r3, [r0, #4]
   bbfd8:	3b01      	subs	r3, #1
   bbfda:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   bbfdc:	2300      	movs	r3, #0
   bbfde:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   bbfe2:	4606      	mov	r6, r0
   bbfe4:	460c      	mov	r4, r1
   bbfe6:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   bbfe8:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   bbfea:	4620      	mov	r0, r4
   bbfec:	f7ff ffce 	bl	bbf8c <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   bbff0:	f996 3006 	ldrsb.w	r3, [r6, #6]
   bbff4:	69a2      	ldr	r2, [r4, #24]
   bbff6:	429a      	cmp	r2, r3
   bbff8:	d003      	beq.n	bc002 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   bbffa:	68e3      	ldr	r3, [r4, #12]
   bbffc:	3301      	adds	r3, #1
   bbffe:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   bc000:	e7f3      	b.n	bbfea <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   bc002:	f996 5005 	ldrsb.w	r5, [r6, #5]
   bc006:	2d01      	cmp	r5, #1
   bc008:	d013      	beq.n	bc032 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   bc00a:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   bc00c:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   bc00e:	3d01      	subs	r5, #1
   bc010:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   bc014:	441d      	add	r5, r3
   bc016:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   bc018:	f996 1004 	ldrsb.w	r1, [r6, #4]
   bc01c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   bc020:	f7ff ffb6 	bl	bbf90 <_ZN9LocalTime14lastDayOfMonthEii>
   bc024:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   bc026:	bfc4      	itt	gt
   bc028:	3d07      	subgt	r5, #7
   bc02a:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   bc02c:	4620      	mov	r0, r4
   bc02e:	f7ff ffad 	bl	bbf8c <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   bc032:	4621      	mov	r1, r4
   bc034:	f106 0008 	add.w	r0, r6, #8
   bc038:	f7ff fd3c 	bl	bbab4 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   bc03c:	4638      	mov	r0, r7
   bc03e:	f7ff fd46 	bl	bbace <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   bc042:	4620      	mov	r0, r4
}
   bc044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   bc048:	f004 ba06 	b.w	c0458 <mktime>

000bc04c <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   bc04c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   bc04e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   bc052:	b085      	sub	sp, #20
   bc054:	4604      	mov	r4, r0
    if (!config.isValid()) {
   bc056:	b92b      	cbnz	r3, bc064 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   bc058:	f7ff ff80 	bl	bbf5c <_ZN9LocalTime8instanceEv>
   bc05c:	1d01      	adds	r1, r0, #4
   bc05e:	1d20      	adds	r0, r4, #4
   bc060:	f7ff fc4f 	bl	bb902 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   bc064:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   bc068:	2b00      	cmp	r3, #0
   bc06a:	d065      	beq.n	bc138 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   bc06c:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   bc070:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   bc074:	4639      	mov	r1, r7
   bc076:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   bc078:	463e      	mov	r6, r7
   bc07a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   bc07e:	f004 f9db 	bl	c0438 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   bc082:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bc084:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   bc088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bc08a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bc08c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bc08e:	6833      	ldr	r3, [r6, #0]
   bc090:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   bc092:	f104 0130 	add.w	r1, r4, #48	; 0x30
   bc096:	a802      	add	r0, sp, #8
   bc098:	f7ff fc86 	bl	bb9a8 <_ZN12LocalTimeHMSC1ERKS_>
   bc09c:	aa02      	add	r2, sp, #8
   bc09e:	4639      	mov	r1, r7
   bc0a0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   bc0a4:	f7ff ff93 	bl	bbfce <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   bc0a8:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   bc0ac:	f104 0118 	add.w	r1, r4, #24
   bc0b0:	a802      	add	r0, sp, #8
   bc0b2:	f7ff fc79 	bl	bb9a8 <_ZN12LocalTimeHMSC1ERKS_>
   bc0b6:	aa02      	add	r2, sp, #8
   bc0b8:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   bc0bc:	f104 0048 	add.w	r0, r4, #72	; 0x48
   bc0c0:	f7ff ff85 	bl	bbfce <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   bc0c4:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   bc0c8:	4286      	cmp	r6, r0
   bc0ca:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   bc0ce:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   bc0d2:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   bc0d6:	da23      	bge.n	bc120 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   bc0d8:	42b2      	cmp	r2, r6
   bc0da:	eb73 0505 	sbcs.w	r5, r3, r5
   bc0de:	da19      	bge.n	bc114 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   bc0e0:	2300      	movs	r3, #0
        position = Position::NO_DST;
   bc0e2:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   bc0e4:	6820      	ldr	r0, [r4, #0]
   bc0e6:	f7ff fbf5 	bl	bb8d4 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   bc0ea:	f104 0168 	add.w	r1, r4, #104	; 0x68
   bc0ee:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   bc0f2:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   bc0f4:	bb10      	cbnz	r0, bc13c <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   bc0f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   bc0fa:	f7ff fcad 	bl	bba58 <_ZNK12LocalTimeHMS9toSecondsEv>
   bc0fe:	1a2d      	subs	r5, r5, r0
   bc100:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   bc104:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   bc108:	9901      	ldr	r1, [sp, #4]
   bc10a:	a802      	add	r0, sp, #8
   bc10c:	f004 f994 	bl	c0438 <localtime_r>
}
   bc110:	b005      	add	sp, #20
   bc112:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   bc114:	4282      	cmp	r2, r0
   bc116:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   bc118:	bfb4      	ite	lt
   bc11a:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   bc11c:	2302      	movge	r3, #2
   bc11e:	e7e0      	b.n	bc0e2 <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   bc120:	4282      	cmp	r2, r0
   bc122:	eb73 0101 	sbcs.w	r1, r3, r1
   bc126:	da01      	bge.n	bc12c <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   bc128:	2303      	movs	r3, #3
   bc12a:	e7da      	b.n	bc0e2 <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   bc12c:	42b2      	cmp	r2, r6
   bc12e:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   bc130:	bfb4      	ite	lt
   bc132:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   bc134:	2305      	movge	r3, #5
   bc136:	e7d4      	b.n	bc0e2 <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   bc138:	2306      	movs	r3, #6
   bc13a:	e7d2      	b.n	bc0e2 <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   bc13c:	f104 0018 	add.w	r0, r4, #24
   bc140:	e7db      	b.n	bc0fa <_ZN16LocalTimeConvert7convertEv+0xae>

000bc142 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bc142:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   bc144:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bc146:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bc148:	4668      	mov	r0, sp
   bc14a:	f7ff fc24 	bl	bb996 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   bc14e:	466a      	mov	r2, sp
   bc150:	4629      	mov	r1, r5
   bc152:	4620      	mov	r0, r4
   bc154:	f007 f8e8 	bl	c3328 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   bc158:	a801      	add	r0, sp, #4
   bc15a:	f7fe f8f0 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc15e:	4620      	mov	r0, r4
   bc160:	b003      	add	sp, #12
   bc162:	bd30      	pop	{r4, r5, pc}

000bc164 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   bc164:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   bc166:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bc168:	4604      	mov	r4, r0
   bc16a:	4668      	mov	r0, sp
   bc16c:	f7ff fc13 	bl	bb996 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   bc170:	466a      	mov	r2, sp
   bc172:	4629      	mov	r1, r5
   bc174:	4620      	mov	r0, r4
   bc176:	f007 f8b3 	bl	c32e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bc17a:	a801      	add	r0, sp, #4
   bc17c:	f7fe f8df 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc180:	4620      	mov	r0, r4
   bc182:	b003      	add	sp, #12
   bc184:	bd30      	pop	{r4, r5, pc}

000bc186 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bc186:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   bc188:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bc18a:	4604      	mov	r4, r0
   bc18c:	4668      	mov	r0, sp
   bc18e:	f7ff fc02 	bl	bb996 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   bc192:	466a      	mov	r2, sp
   bc194:	4629      	mov	r1, r5
   bc196:	4620      	mov	r0, r4
   bc198:	f007 f84b 	bl	c3232 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bc19c:	a801      	add	r0, sp, #4
   bc19e:	f7fe f8ce 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc1a2:	4620      	mov	r0, r4
   bc1a4:	b003      	add	sp, #12
   bc1a6:	bd30      	pop	{r4, r5, pc}

000bc1a8 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   bc1a8:	2001      	movs	r0, #1
   bc1aa:	4770      	bx	lr

000bc1ac <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   bc1ac:	7903      	ldrb	r3, [r0, #4]
   bc1ae:	2b03      	cmp	r3, #3
   bc1b0:	d0fc      	beq.n	bc1ac <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   bc1b2:	2001      	movs	r0, #1
   bc1b4:	4770      	bx	lr

000bc1b6 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   bc1b6:	2000      	movs	r0, #0
   bc1b8:	4770      	bx	lr

000bc1ba <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   bc1ba:	7181      	strb	r1, [r0, #6]
}
   bc1bc:	4770      	bx	lr

000bc1be <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   bc1be:	7141      	strb	r1, [r0, #5]
}
   bc1c0:	4770      	bx	lr

000bc1c2 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   bc1c2:	72c1      	strb	r1, [r0, #11]
}
   bc1c4:	4770      	bx	lr

000bc1c6 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   bc1c6:	7301      	strb	r1, [r0, #12]
}
   bc1c8:	4770      	bx	lr

000bc1ca <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   bc1ca:	7341      	strb	r1, [r0, #13]
}
   bc1cc:	4770      	bx	lr

000bc1ce <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   bc1ce:	7b83      	ldrb	r3, [r0, #14]
   bc1d0:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   bc1d4:	4311      	orrs	r1, r2
   bc1d6:	7381      	strb	r1, [r0, #14]
}
   bc1d8:	4770      	bx	lr

000bc1da <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   bc1da:	79c0      	ldrb	r0, [r0, #7]
}
   bc1dc:	4770      	bx	lr

000bc1de <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   bc1de:	7a00      	ldrb	r0, [r0, #8]
}
   bc1e0:	4770      	bx	lr

000bc1e2 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   bc1e2:	7a40      	ldrb	r0, [r0, #9]
}
   bc1e4:	4770      	bx	lr

000bc1e6 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   bc1e6:	7a80      	ldrb	r0, [r0, #10]
}
   bc1e8:	4770      	bx	lr

000bc1ea <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   bc1ea:	8a00      	ldrh	r0, [r0, #16]
}
   bc1ec:	b200      	sxth	r0, r0
   bc1ee:	4770      	bx	lr

000bc1f0 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   bc1f0:	7900      	ldrb	r0, [r0, #4]
}
   bc1f2:	4770      	bx	lr

000bc1f4 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   bc1f4:	7101      	strb	r1, [r0, #4]
}
   bc1f6:	4770      	bx	lr

000bc1f8 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   bc1f8:	8a40      	ldrh	r0, [r0, #18]
}
   bc1fa:	b280      	uxth	r0, r0
   bc1fc:	4770      	bx	lr

000bc1fe <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   bc1fe:	8a80      	ldrh	r0, [r0, #20]
}
   bc200:	b280      	uxth	r0, r0
   bc202:	4770      	bx	lr

000bc204 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   bc204:	8ac0      	ldrh	r0, [r0, #22]
}
   bc206:	b280      	uxth	r0, r0
   bc208:	4770      	bx	lr

000bc20a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   bc20a:	b538      	push	{r3, r4, r5, lr}
   bc20c:	4605      	mov	r5, r0
   bc20e:	460c      	mov	r4, r1
    while (!available())
   bc210:	682b      	ldr	r3, [r5, #0]
   bc212:	4628      	mov	r0, r5
   bc214:	68db      	ldr	r3, [r3, #12]
   bc216:	4798      	blx	r3
   bc218:	b928      	cbnz	r0, bc226 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   bc21a:	2c00      	cmp	r4, #0
   bc21c:	d0f8      	beq.n	bc210 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   bc21e:	4620      	mov	r0, r4
   bc220:	f005 ff94 	bl	c214c <delay>
   bc224:	e7f4      	b.n	bc210 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   bc226:	bd38      	pop	{r3, r4, r5, pc}

000bc228 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   bc228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc22a:	4605      	mov	r5, r0
   bc22c:	460f      	mov	r7, r1
   bc22e:	4614      	mov	r4, r2
   bc230:	f003 fcea 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
   bc234:	4606      	mov	r6, r0
   bc236:	f003 fce7 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   bc23a:	1b80      	subs	r0, r0, r6
   bc23c:	42b8      	cmp	r0, r7
   bc23e:	d20a      	bcs.n	bc256 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   bc240:	682b      	ldr	r3, [r5, #0]
   bc242:	4628      	mov	r0, r5
   bc244:	68db      	ldr	r3, [r3, #12]
   bc246:	4798      	blx	r3
   bc248:	b930      	cbnz	r0, bc258 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   bc24a:	2c00      	cmp	r4, #0
   bc24c:	d0f3      	beq.n	bc236 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   bc24e:	4620      	mov	r0, r4
   bc250:	f005 ff7c 	bl	c214c <delay>
   bc254:	e7ef      	b.n	bc236 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   bc256:	2000      	movs	r0, #0
}
   bc258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc25a <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   bc25a:	b570      	push	{r4, r5, r6, lr}
   bc25c:	4604      	mov	r4, r0
   bc25e:	460e      	mov	r6, r1
   bc260:	f003 fcd2 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
   bc264:	4605      	mov	r5, r0
   bc266:	f003 fccf 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   bc26a:	1b40      	subs	r0, r0, r5
   bc26c:	42b0      	cmp	r0, r6
   bc26e:	d204      	bcs.n	bc27a <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   bc270:	7923      	ldrb	r3, [r4, #4]
   bc272:	2b03      	cmp	r3, #3
   bc274:	d0f7      	beq.n	bc266 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   bc276:	2001      	movs	r0, #1
}
   bc278:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   bc27a:	2000      	movs	r0, #0
   bc27c:	e7fc      	b.n	bc278 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000bc27e <_ZN15RHGenericDriver7waitCADEv>:
{
   bc27e:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   bc280:	69c3      	ldr	r3, [r0, #28]
{
   bc282:	4604      	mov	r4, r0
    if (!_cad_timeout)
   bc284:	b1b3      	cbz	r3, bc2b4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   bc286:	f003 fcbf 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   bc28a:	2664      	movs	r6, #100	; 0x64
   bc28c:	4605      	mov	r5, r0
    while (isChannelActive())
   bc28e:	6823      	ldr	r3, [r4, #0]
   bc290:	4620      	mov	r0, r4
   bc292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc294:	4798      	blx	r3
   bc296:	b168      	cbz	r0, bc2b4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   bc298:	f003 fcb6 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   bc29c:	69e3      	ldr	r3, [r4, #28]
   bc29e:	1b40      	subs	r0, r0, r5
   bc2a0:	4298      	cmp	r0, r3
   bc2a2:	d809      	bhi.n	bc2b8 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   bc2a4:	210a      	movs	r1, #10
   bc2a6:	2001      	movs	r0, #1
   bc2a8:	f006 fe99 	bl	c2fde <_Z6randomii>
   bc2ac:	4370      	muls	r0, r6
   bc2ae:	f005 ff4d 	bl	c214c <delay>
    while (isChannelActive())
   bc2b2:	e7ec      	b.n	bc28e <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   bc2b4:	2001      	movs	r0, #1
}
   bc2b6:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   bc2b8:	2000      	movs	r0, #0
   bc2ba:	e7fc      	b.n	bc2b6 <_ZN15RHGenericDriver7waitCADEv+0x38>

000bc2bc <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   bc2bc:	4a06      	ldr	r2, [pc, #24]	; (bc2d8 <_ZN15RHGenericDriverC1Ev+0x1c>)
   bc2be:	6002      	str	r2, [r0, #0]
   bc2c0:	21ff      	movs	r1, #255	; 0xff
   bc2c2:	2200      	movs	r2, #0
   bc2c4:	7102      	strb	r2, [r0, #4]
   bc2c6:	7141      	strb	r1, [r0, #5]
   bc2c8:	8242      	strh	r2, [r0, #18]
   bc2ca:	72c1      	strb	r1, [r0, #11]
   bc2cc:	8282      	strh	r2, [r0, #20]
   bc2ce:	8181      	strh	r1, [r0, #12]
   bc2d0:	7382      	strb	r2, [r0, #14]
   bc2d2:	82c2      	strh	r2, [r0, #22]
   bc2d4:	61c2      	str	r2, [r0, #28]
}
   bc2d6:	4770      	bx	lr
   bc2d8:	000c7f74 	.word	0x000c7f74

000bc2dc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   bc2dc:	4770      	bx	lr

000bc2de <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   bc2de:	b510      	push	{r4, lr}
  }
   bc2e0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   bc2e2:	4604      	mov	r4, r0
  }
   bc2e4:	f7f7 fedb 	bl	b409e <_ZdlPvj>
   bc2e8:	4620      	mov	r0, r4
   bc2ea:	bd10      	pop	{r4, pc}

000bc2ec <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bc2ec:	b40e      	push	{r1, r2, r3}
   bc2ee:	b503      	push	{r0, r1, lr}
   bc2f0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   bc2f2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bc2f4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   bc2f8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   bc2fa:	f004 fe12 	bl	c0f22 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   bc2fe:	b002      	add	sp, #8
   bc300:	f85d eb04 	ldr.w	lr, [sp], #4
   bc304:	b003      	add	sp, #12
   bc306:	4770      	bx	lr

000bc308 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   bc308:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc30a:	4604      	mov	r4, r0
   bc30c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   bc30e:	7922      	ldrb	r2, [r4, #4]
   bc310:	68a3      	ldr	r3, [r4, #8]
   bc312:	b132      	cbz	r2, bc322 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   bc314:	b9a3      	cbnz	r3, bc340 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   bc316:	490b      	ldr	r1, [pc, #44]	; (bc344 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   bc318:	b002      	add	sp, #8
   bc31a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   bc31e:	f004 bcf7 	b.w	c0d10 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bc322:	4a09      	ldr	r2, [pc, #36]	; (bc348 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   bc324:	7b26      	ldrb	r6, [r4, #12]
   bc326:	4d09      	ldr	r5, [pc, #36]	; (bc34c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   bc328:	4909      	ldr	r1, [pc, #36]	; (bc350 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   bc32a:	7b64      	ldrb	r4, [r4, #13]
   bc32c:	2e01      	cmp	r6, #1
   bc32e:	bf18      	it	ne
   bc330:	4629      	movne	r1, r5
   bc332:	e9cd 1400 	strd	r1, r4, [sp]
   bc336:	4907      	ldr	r1, [pc, #28]	; (bc354 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   bc338:	f7ff ffd8 	bl	bc2ec <_ZN5Print6printfEPKcz>
  }
   bc33c:	b002      	add	sp, #8
   bc33e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bc340:	4a05      	ldr	r2, [pc, #20]	; (bc358 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   bc342:	e7ef      	b.n	bc324 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   bc344:	000c7ffd 	.word	0x000c7ffd
   bc348:	000c9298 	.word	0x000c9298
   bc34c:	000c7ff9 	.word	0x000c7ff9
   bc350:	000c7ff5 	.word	0x000c7ff5
   bc354:	000c8013 	.word	0x000c8013
   bc358:	000c7fec 	.word	0x000c7fec

000bc35c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bc35c:	b510      	push	{r4, lr}
   bc35e:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   bc360:	f000 fa1a 	bl	bc798 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   bc364:	4b05      	ldr	r3, [pc, #20]	; (bc37c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   bc366:	6023      	str	r3, [r4, #0]
  {
   bc368:	4b05      	ldr	r3, [pc, #20]	; (bc380 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   bc36a:	60a3      	str	r3, [r4, #8]
   bc36c:	2301      	movs	r3, #1
   bc36e:	7323      	strb	r3, [r4, #12]
   bc370:	2300      	movs	r3, #0
   bc372:	6123      	str	r3, [r4, #16]
   bc374:	82a3      	strh	r3, [r4, #20]
{
}
   bc376:	4620      	mov	r0, r4
   bc378:	bd10      	pop	{r4, pc}
   bc37a:	bf00      	nop
   bc37c:	000c804c 	.word	0x000c804c
   bc380:	000c8038 	.word	0x000c8038

000bc384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   bc384:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   bc386:	4c0b      	ldr	r4, [pc, #44]	; (bc3b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   bc388:	7821      	ldrb	r1, [r4, #0]
   bc38a:	f3bf 8f5b 	dmb	ish
   bc38e:	f011 0101 	ands.w	r1, r1, #1
   bc392:	d10b      	bne.n	bc3ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bc394:	4620      	mov	r0, r4
   bc396:	9101      	str	r1, [sp, #4]
   bc398:	f7f7 fe90 	bl	b40bc <__cxa_guard_acquire>
   bc39c:	9901      	ldr	r1, [sp, #4]
   bc39e:	b128      	cbz	r0, bc3ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bc3a0:	4805      	ldr	r0, [pc, #20]	; (bc3b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bc3a2:	f004 f957 	bl	c0654 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bc3a6:	4620      	mov	r0, r4
   bc3a8:	f7f7 fe8d 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   bc3ac:	4802      	ldr	r0, [pc, #8]	; (bc3b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bc3ae:	b002      	add	sp, #8
   bc3b0:	bd10      	pop	{r4, pc}
   bc3b2:	bf00      	nop
   bc3b4:	2003b458 	.word	0x2003b458
   bc3b8:	2003b45c 	.word	0x2003b45c

000bc3bc <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   bc3bc:	b507      	push	{r0, r1, r2, lr}
   bc3be:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   bc3c0:	f7ff ffe0 	bl	bc384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bc3c4:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   bc3c6:	b003      	add	sp, #12
   bc3c8:	f85d eb04 	ldr.w	lr, [sp], #4
   bc3cc:	f004 b9fa 	b.w	c07c4 <_ZN8SPIClass8transferEh>

000bc3d0 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   bc3d0:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   bc3d2:	f7ff ffd7 	bl	bc384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   bc3d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bc3da:	f004 b9f9 	b.w	c07d0 <_ZN8SPIClass15attachInterruptEv>

000bc3de <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   bc3de:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   bc3e0:	f7ff ffd0 	bl	bc384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   bc3e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bc3e8:	f004 b9f3 	b.w	c07d2 <_ZN8SPIClass15detachInterruptEv>

000bc3ec <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   bc3ec:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   bc3ee:	7903      	ldrb	r3, [r0, #4]
   bc3f0:	2b04      	cmp	r3, #4
   bc3f2:	d020      	beq.n	bc436 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   bc3f4:	2b03      	cmp	r3, #3
   bc3f6:	d020      	beq.n	bc43a <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   bc3f8:	2b02      	cmp	r3, #2
   bc3fa:	d020      	beq.n	bc43e <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   bc3fc:	4a11      	ldr	r2, [pc, #68]	; (bc444 <_ZN13RHHardwareSPI5beginEv+0x58>)
   bc3fe:	4912      	ldr	r1, [pc, #72]	; (bc448 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   bc400:	2b01      	cmp	r3, #1
   bc402:	bf18      	it	ne
   bc404:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   bc406:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   bc408:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   bc40a:	3901      	subs	r1, #1
   bc40c:	bf18      	it	ne
   bc40e:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   bc410:	b133      	cbz	r3, bc420 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   bc412:	2b01      	cmp	r3, #1
   bc414:	d004      	beq.n	bc420 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   bc416:	2b02      	cmp	r3, #2
   bc418:	d002      	beq.n	bc420 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   bc41a:	2b03      	cmp	r3, #3
   bc41c:	bf18      	it	ne
   bc41e:	2300      	movne	r3, #0
class SPISettings : public Printable {
   bc420:	2400      	movs	r4, #0
   bc422:	7304      	strb	r4, [r0, #12]
   bc424:	6102      	str	r2, [r0, #16]
   bc426:	7501      	strb	r1, [r0, #20]
   bc428:	7543      	strb	r3, [r0, #21]
        instance().begin();
   bc42a:	f7ff ffab 	bl	bc384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   bc42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bc432:	f004 b919 	b.w	c0668 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   bc436:	4a05      	ldr	r2, [pc, #20]	; (bc44c <_ZN13RHHardwareSPI5beginEv+0x60>)
   bc438:	e7e5      	b.n	bc406 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   bc43a:	4a05      	ldr	r2, [pc, #20]	; (bc450 <_ZN13RHHardwareSPI5beginEv+0x64>)
   bc43c:	e7e3      	b.n	bc406 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   bc43e:	4a05      	ldr	r2, [pc, #20]	; (bc454 <_ZN13RHHardwareSPI5beginEv+0x68>)
   bc440:	e7e1      	b.n	bc406 <_ZN13RHHardwareSPI5beginEv+0x1a>
   bc442:	bf00      	nop
   bc444:	001e8480 	.word	0x001e8480
   bc448:	000f4240 	.word	0x000f4240
   bc44c:	00f42400 	.word	0x00f42400
   bc450:	007a1200 	.word	0x007a1200
   bc454:	003d0900 	.word	0x003d0900

000bc458 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   bc458:	b508      	push	{r3, lr}
        instance().end();
   bc45a:	f7ff ff93 	bl	bc384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   bc45e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bc462:	f004 b915 	b.w	c0690 <_ZN8SPIClass3endEv>

000bc466 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   bc466:	b510      	push	{r4, lr}
   bc468:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   bc46a:	f7ff ff8b 	bl	bc384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bc46e:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   bc472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bc476:	f004 b937 	b.w	c06e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000bc47a <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   bc47a:	b508      	push	{r3, lr}
        instance().endTransaction();
   bc47c:	f7ff ff82 	bl	bc384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   bc480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bc484:	f004 b916 	b.w	c06b4 <_ZN8SPIClass14endTransactionEv>

000bc488 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   bc488:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   bc48a:	f7ff ff7b 	bl	bc384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   bc48e:	bd08      	pop	{r3, pc}

000bc490 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   bc490:	2300      	movs	r3, #0
   bc492:	4802      	ldr	r0, [pc, #8]	; (bc49c <_GLOBAL__sub_I_hardware_spi+0xc>)
   bc494:	461a      	mov	r2, r3
   bc496:	4619      	mov	r1, r3
   bc498:	f7ff bf60 	b.w	bc35c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   bc49c:	2003b464 	.word	0x2003b464

000bc4a0 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   bc4a0:	4770      	bx	lr

000bc4a2 <_ZN8RHRouter4initEv>:
{
   bc4a2:	b510      	push	{r4, lr}
   bc4a4:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   bc4a6:	3004      	adds	r0, #4
   bc4a8:	f000 f9b6 	bl	bc818 <_ZN10RHDatagram4initEv>
    if (ret)
   bc4ac:	b110      	cbz	r0, bc4b4 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   bc4ae:	231e      	movs	r3, #30
   bc4b0:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   bc4b4:	bd10      	pop	{r4, pc}

000bc4b6 <_ZN8RHRouter10getRouteToEh>:
{
   bc4b6:	b510      	push	{r4, lr}
   bc4b8:	4602      	mov	r2, r0
   bc4ba:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   bc4bc:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   bc4c0:	428c      	cmp	r4, r1
   bc4c2:	d108      	bne.n	bc4d6 <_ZN8RHRouter10getRouteToEh+0x20>
   bc4c4:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   bc4c8:	b12c      	cbz	r4, bc4d6 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   bc4ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bc4ce:	f503 738c 	add.w	r3, r3, #280	; 0x118
   bc4d2:	4418      	add	r0, r3
}
   bc4d4:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bc4d6:	3301      	adds	r3, #1
   bc4d8:	2b32      	cmp	r3, #50	; 0x32
   bc4da:	f102 0203 	add.w	r2, r2, #3
   bc4de:	d1ed      	bne.n	bc4bc <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   bc4e0:	2000      	movs	r0, #0
   bc4e2:	e7f7      	b.n	bc4d4 <_ZN8RHRouter10getRouteToEh+0x1e>

000bc4e4 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   bc4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bc4e6:	780b      	ldrb	r3, [r1, #0]
   bc4e8:	2bff      	cmp	r3, #255	; 0xff
{
   bc4ea:	4605      	mov	r5, r0
   bc4ec:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bc4ee:	d006      	beq.n	bc4fe <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   bc4f0:	4619      	mov	r1, r3
   bc4f2:	9201      	str	r2, [sp, #4]
   bc4f4:	f7ff ffdf 	bl	bc4b6 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   bc4f8:	b158      	cbz	r0, bc512 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   bc4fa:	7843      	ldrb	r3, [r0, #1]
   bc4fc:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   bc4fe:	4621      	mov	r1, r4
   bc500:	1d28      	adds	r0, r5, #4
   bc502:	f000 fa07 	bl	bc914 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   bc506:	2800      	cmp	r0, #0
   bc508:	bf14      	ite	ne
   bc50a:	2000      	movne	r0, #0
   bc50c:	2005      	moveq	r0, #5
}
   bc50e:	b003      	add	sp, #12
   bc510:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bc512:	2002      	movs	r0, #2
   bc514:	e7fb      	b.n	bc50e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000bc516 <_ZN8RHRouter11deleteRouteEh>:
{
   bc516:	b510      	push	{r4, lr}
   bc518:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   bc51c:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   bc51e:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   bc522:	f503 708c 	add.w	r0, r3, #280	; 0x118
   bc526:	f203 111b 	addw	r1, r3, #283	; 0x11b
   bc52a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bc52e:	4421      	add	r1, r4
   bc530:	4420      	add	r0, r4
   bc532:	f008 ff45 	bl	c53c0 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   bc536:	2300      	movs	r3, #0
   bc538:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   bc53c:	bd10      	pop	{r4, pc}

000bc53e <_ZN8RHRouter13deleteRouteToEh>:
{
   bc53e:	b538      	push	{r3, r4, r5, lr}
   bc540:	460a      	mov	r2, r1
   bc542:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bc544:	f500 748c 	add.w	r4, r0, #280	; 0x118
   bc548:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   bc54c:	b2d9      	uxtb	r1, r3
   bc54e:	5d65      	ldrb	r5, [r4, r5]
   bc550:	4295      	cmp	r5, r2
   bc552:	d103      	bne.n	bc55c <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   bc554:	f7ff ffdf 	bl	bc516 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   bc558:	2001      	movs	r0, #1
}
   bc55a:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bc55c:	3301      	adds	r3, #1
   bc55e:	2b32      	cmp	r3, #50	; 0x32
   bc560:	d1f2      	bne.n	bc548 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   bc562:	2000      	movs	r0, #0
   bc564:	e7f9      	b.n	bc55a <_ZN8RHRouter13deleteRouteToEh+0x1c>

000bc566 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   bc566:	2100      	movs	r1, #0
   bc568:	f7ff bfd5 	b.w	bc516 <_ZN8RHRouter11deleteRouteEh>

000bc56c <_ZN8RHRouter10addRouteToEhhh>:
{
   bc56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc56e:	4616      	mov	r6, r2
   bc570:	461f      	mov	r7, r3
   bc572:	4604      	mov	r4, r0
   bc574:	460d      	mov	r5, r1
   bc576:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bc578:	f500 728c 	add.w	r2, r0, #280	; 0x118
   bc57c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bc580:	5c11      	ldrb	r1, [r2, r0]
   bc582:	42a9      	cmp	r1, r5
   bc584:	d105      	bne.n	bc592 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   bc586:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   bc588:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bc58c:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   bc590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bc592:	3301      	adds	r3, #1
   bc594:	2b32      	cmp	r3, #50	; 0x32
   bc596:	d1f1      	bne.n	bc57c <_ZN8RHRouter10addRouteToEhhh+0x10>
   bc598:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   bc59a:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   bc59e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bc5a2:	5c11      	ldrb	r1, [r2, r0]
   bc5a4:	b919      	cbnz	r1, bc5ae <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   bc5a6:	4420      	add	r0, r4
   bc5a8:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   bc5ac:	e7ec      	b.n	bc588 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bc5ae:	3301      	adds	r3, #1
   bc5b0:	2b32      	cmp	r3, #50	; 0x32
   bc5b2:	d1f4      	bne.n	bc59e <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   bc5b4:	4620      	mov	r0, r4
   bc5b6:	f7ff ffd6 	bl	bc566 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bc5ba:	4620      	mov	r0, r4
   bc5bc:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   bc5c0:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   bc5c4:	b92a      	cbnz	r2, bc5d2 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   bc5c6:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   bc5ca:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bc5ce:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bc5d2:	3003      	adds	r0, #3
   bc5d4:	4298      	cmp	r0, r3
   bc5d6:	d1f3      	bne.n	bc5c0 <_ZN8RHRouter10addRouteToEhhh+0x54>
   bc5d8:	e7da      	b.n	bc590 <_ZN8RHRouter10addRouteToEhhh+0x24>

000bc5da <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bc5da:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   bc5de:	2200      	movs	r2, #0
   bc5e0:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bc5e4:	3003      	adds	r0, #3
   bc5e6:	4298      	cmp	r0, r3
   bc5e8:	d1fa      	bne.n	bc5e0 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   bc5ea:	4770      	bx	lr

000bc5ec <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   bc5ec:	b510      	push	{r4, lr}
   bc5ee:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   bc5f0:	3004      	adds	r0, #4
   bc5f2:	f000 f961 	bl	bc8b8 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   bc5f6:	4b05      	ldr	r3, [pc, #20]	; (bc60c <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   bc5f8:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bc5fa:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   bc5fe:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bc600:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   bc604:	f7ff ffe9 	bl	bc5da <_ZN8RHRouter17clearRoutingTableEv>
}
   bc608:	4620      	mov	r0, r4
   bc60a:	bd10      	pop	{r4, pc}
   bc60c:	000c8080 	.word	0x000c8080

000bc610 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   bc610:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bc614:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bc616:	6840      	ldr	r0, [r0, #4]
{
   bc618:	9101      	str	r1, [sp, #4]
   bc61a:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bc61c:	6803      	ldr	r3, [r0, #0]
{
   bc61e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bc622:	699b      	ldr	r3, [r3, #24]
{
   bc624:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   bc628:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bc62a:	4798      	blx	r3
   bc62c:	f106 0805 	add.w	r8, r6, #5
   bc630:	4580      	cmp	r8, r0
   bc632:	d81c      	bhi.n	bc66e <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   bc634:	4d10      	ldr	r5, [pc, #64]	; (bc678 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   bc636:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   bc638:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   bc63c:	2300      	movs	r3, #0
   bc63e:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   bc640:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   bc644:	70eb      	strb	r3, [r5, #3]
   bc646:	1c5a      	adds	r2, r3, #1
   bc648:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   bc64c:	1d68      	adds	r0, r5, #5
   bc64e:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   bc650:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   bc652:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   bc656:	f008 feb3 	bl	c53c0 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bc65a:	6823      	ldr	r3, [r4, #0]
   bc65c:	685b      	ldr	r3, [r3, #4]
   bc65e:	fa5f f288 	uxtb.w	r2, r8
   bc662:	4629      	mov	r1, r5
   bc664:	4620      	mov	r0, r4
}
   bc666:	b002      	add	sp, #8
   bc668:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bc66c:	4718      	bx	r3
}
   bc66e:	2001      	movs	r0, #1
   bc670:	b002      	add	sp, #8
   bc672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc676:	bf00      	nop
   bc678:	2003b47c 	.word	0x2003b47c

000bc67c <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   bc67c:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   bc67e:	f89d 4010 	ldrb.w	r4, [sp, #16]
   bc682:	9401      	str	r4, [sp, #4]
   bc684:	7a04      	ldrb	r4, [r0, #8]
   bc686:	9400      	str	r4, [sp, #0]
   bc688:	f7ff ffc2 	bl	bc610 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   bc68c:	b002      	add	sp, #8
   bc68e:	bd10      	pop	{r4, pc}

000bc690 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   bc690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc694:	b087      	sub	sp, #28
   bc696:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bc698:	23ff      	movs	r3, #255	; 0xff
   bc69a:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bc69e:	f10d 0317 	add.w	r3, sp, #23
   bc6a2:	9302      	str	r3, [sp, #8]
   bc6a4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; bc778 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   bc6a8:	f10d 0316 	add.w	r3, sp, #22
   bc6ac:	9301      	str	r3, [sp, #4]
   bc6ae:	f10d 0315 	add.w	r3, sp, #21
   bc6b2:	9300      	str	r3, [sp, #0]
{  
   bc6b4:	4604      	mov	r4, r0
   bc6b6:	4688      	mov	r8, r1
   bc6b8:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bc6ba:	ab05      	add	r3, sp, #20
   bc6bc:	f10d 0213 	add.w	r2, sp, #19
   bc6c0:	4649      	mov	r1, r9
   bc6c2:	3004      	adds	r0, #4
{  
   bc6c4:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bc6c8:	f000 f9c8 	bl	bca5c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   bc6cc:	4605      	mov	r5, r0
   bc6ce:	b908      	cbnz	r0, bc6d4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   bc6d0:	2500      	movs	r5, #0
   bc6d2:	e038      	b.n	bc746 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   bc6d4:	6823      	ldr	r3, [r4, #0]
   bc6d6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bc6da:	681b      	ldr	r3, [r3, #0]
   bc6dc:	4649      	mov	r1, r9
   bc6de:	4620      	mov	r0, r4
   bc6e0:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   bc6e2:	f899 3000 	ldrb.w	r3, [r9]
   bc6e6:	7a22      	ldrb	r2, [r4, #8]
   bc6e8:	429a      	cmp	r2, r3
   bc6ea:	d001      	beq.n	bc6f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   bc6ec:	2bff      	cmp	r3, #255	; 0xff
   bc6ee:	d12e      	bne.n	bc74e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   bc6f0:	b117      	cbz	r7, bc6f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   bc6f2:	4b21      	ldr	r3, [pc, #132]	; (bc778 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bc6f4:	785b      	ldrb	r3, [r3, #1]
   bc6f6:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   bc6f8:	f1bb 0f00 	cmp.w	fp, #0
   bc6fc:	d003      	beq.n	bc706 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   bc6fe:	4b1e      	ldr	r3, [pc, #120]	; (bc778 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bc700:	781b      	ldrb	r3, [r3, #0]
   bc702:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   bc706:	f1ba 0f00 	cmp.w	sl, #0
   bc70a:	d003      	beq.n	bc714 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   bc70c:	4b1a      	ldr	r3, [pc, #104]	; (bc778 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bc70e:	78db      	ldrb	r3, [r3, #3]
   bc710:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   bc714:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bc716:	b11b      	cbz	r3, bc720 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   bc718:	4b17      	ldr	r3, [pc, #92]	; (bc778 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bc71a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bc71c:	791b      	ldrb	r3, [r3, #4]
   bc71e:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   bc720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc722:	b11b      	cbz	r3, bc72c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   bc724:	4b14      	ldr	r3, [pc, #80]	; (bc778 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bc726:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bc728:	789b      	ldrb	r3, [r3, #2]
   bc72a:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bc72c:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   bc730:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bc732:	4912      	ldr	r1, [pc, #72]	; (bc77c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bc734:	3b05      	subs	r3, #5
   bc736:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bc738:	429a      	cmp	r2, r3
		*len = msgLen;
   bc73a:	bf88      	it	hi
   bc73c:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bc73e:	7832      	ldrb	r2, [r6, #0]
   bc740:	4640      	mov	r0, r8
   bc742:	f008 fe3d 	bl	c53c0 <memcpy>
}
   bc746:	4628      	mov	r0, r5
   bc748:	b007      	add	sp, #28
   bc74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   bc74e:	f899 3002 	ldrb.w	r3, [r9, #2]
   bc752:	1c5a      	adds	r2, r3, #1
   bc754:	f889 2002 	strb.w	r2, [r9, #2]
   bc758:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   bc75c:	429a      	cmp	r2, r3
   bc75e:	d9b7      	bls.n	bc6d0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   bc760:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   bc764:	2b00      	cmp	r3, #0
   bc766:	d0b3      	beq.n	bc6d0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   bc768:	6823      	ldr	r3, [r4, #0]
   bc76a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bc76e:	685b      	ldr	r3, [r3, #4]
   bc770:	4649      	mov	r1, r9
   bc772:	4620      	mov	r0, r4
   bc774:	4798      	blx	r3
   bc776:	e7ab      	b.n	bc6d0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   bc778:	2003b47c 	.word	0x2003b47c
   bc77c:	2003b481 	.word	0x2003b481

000bc780 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   bc780:	4770      	bx	lr

000bc782 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   bc782:	4770      	bx	lr

000bc784 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   bc784:	4770      	bx	lr

000bc786 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   bc786:	4770      	bx	lr

000bc788 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   bc788:	4770      	bx	lr

000bc78a <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   bc78a:	7141      	strb	r1, [r0, #5]
}
   bc78c:	4770      	bx	lr

000bc78e <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   bc78e:	7181      	strb	r1, [r0, #6]
}
   bc790:	4770      	bx	lr

000bc792 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   bc792:	7101      	strb	r1, [r0, #4]
}
   bc794:	4770      	bx	lr
	...

000bc798 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bc798:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   bc79a:	4d03      	ldr	r5, [pc, #12]	; (bc7a8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   bc79c:	6005      	str	r5, [r0, #0]
   bc79e:	7101      	strb	r1, [r0, #4]
   bc7a0:	7142      	strb	r2, [r0, #5]
   bc7a2:	7183      	strb	r3, [r0, #6]
}
   bc7a4:	bd30      	pop	{r4, r5, pc}
   bc7a6:	bf00      	nop
   bc7a8:	000c8090 	.word	0x000c8090

000bc7ac <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   bc7ac:	6001      	str	r1, [r0, #0]
   bc7ae:	7102      	strb	r2, [r0, #4]
{
}
   bc7b0:	4770      	bx	lr

000bc7b2 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   bc7b2:	6800      	ldr	r0, [r0, #0]
   bc7b4:	6803      	ldr	r3, [r0, #0]
   bc7b6:	68db      	ldr	r3, [r3, #12]
   bc7b8:	4718      	bx	r3

000bc7ba <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   bc7ba:	6800      	ldr	r0, [r0, #0]
   bc7bc:	6803      	ldr	r3, [r0, #0]
   bc7be:	6a1b      	ldr	r3, [r3, #32]
   bc7c0:	4718      	bx	r3

000bc7c2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   bc7c2:	6800      	ldr	r0, [r0, #0]
   bc7c4:	6803      	ldr	r3, [r0, #0]
   bc7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc7c8:	4718      	bx	r3

000bc7ca <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   bc7ca:	7900      	ldrb	r0, [r0, #4]
   bc7cc:	4770      	bx	lr

000bc7ce <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   bc7ce:	6800      	ldr	r0, [r0, #0]
   bc7d0:	6803      	ldr	r3, [r0, #0]
   bc7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bc7d4:	4718      	bx	r3

000bc7d6 <_ZN10RHDatagram6sendtoEPhhh>:
{
   bc7d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc7d8:	4605      	mov	r5, r0
   bc7da:	460c      	mov	r4, r1
    setHeaderTo(address);
   bc7dc:	4619      	mov	r1, r3
{
   bc7de:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   bc7e0:	f7ff fff5 	bl	bc7ce <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   bc7e4:	6828      	ldr	r0, [r5, #0]
   bc7e6:	9a01      	ldr	r2, [sp, #4]
   bc7e8:	6803      	ldr	r3, [r0, #0]
   bc7ea:	695b      	ldr	r3, [r3, #20]
   bc7ec:	4621      	mov	r1, r4
}
   bc7ee:	b003      	add	sp, #12
   bc7f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   bc7f4:	4718      	bx	r3

000bc7f6 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   bc7f6:	6800      	ldr	r0, [r0, #0]
   bc7f8:	6803      	ldr	r3, [r0, #0]
   bc7fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc7fc:	4718      	bx	r3

000bc7fe <_ZN10RHDatagram14setThisAddressEh>:
{
   bc7fe:	b538      	push	{r3, r4, r5, lr}
   bc800:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   bc802:	6800      	ldr	r0, [r0, #0]
   bc804:	6803      	ldr	r3, [r0, #0]
{
   bc806:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   bc808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc80a:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   bc80c:	4629      	mov	r1, r5
   bc80e:	4620      	mov	r0, r4
   bc810:	f7ff fff1 	bl	bc7f6 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   bc814:	7125      	strb	r5, [r4, #4]
}
   bc816:	bd38      	pop	{r3, r4, r5, pc}

000bc818 <_ZN10RHDatagram4initEv>:
{
   bc818:	b538      	push	{r3, r4, r5, lr}
   bc81a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   bc81c:	6800      	ldr	r0, [r0, #0]
   bc81e:	6803      	ldr	r3, [r0, #0]
   bc820:	689b      	ldr	r3, [r3, #8]
   bc822:	4798      	blx	r3
    if (ret)
   bc824:	4605      	mov	r5, r0
   bc826:	b118      	cbz	r0, bc830 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   bc828:	7921      	ldrb	r1, [r4, #4]
   bc82a:	4620      	mov	r0, r4
   bc82c:	f7ff ffe7 	bl	bc7fe <_ZN10RHDatagram14setThisAddressEh>
}
   bc830:	4628      	mov	r0, r5
   bc832:	bd38      	pop	{r3, r4, r5, pc}

000bc834 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   bc834:	6800      	ldr	r0, [r0, #0]
   bc836:	6803      	ldr	r3, [r0, #0]
   bc838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc83a:	4718      	bx	r3

000bc83c <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   bc83c:	6800      	ldr	r0, [r0, #0]
   bc83e:	6803      	ldr	r3, [r0, #0]
   bc840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc842:	4718      	bx	r3

000bc844 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   bc844:	6800      	ldr	r0, [r0, #0]
   bc846:	6803      	ldr	r3, [r0, #0]
   bc848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc84a:	4718      	bx	r3

000bc84c <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   bc84c:	6800      	ldr	r0, [r0, #0]
   bc84e:	6803      	ldr	r3, [r0, #0]
   bc850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc852:	4718      	bx	r3

000bc854 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   bc854:	6800      	ldr	r0, [r0, #0]
   bc856:	6803      	ldr	r3, [r0, #0]
   bc858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc85a:	4718      	bx	r3

000bc85c <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   bc85c:	6800      	ldr	r0, [r0, #0]
   bc85e:	6803      	ldr	r3, [r0, #0]
   bc860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc862:	4718      	bx	r3

000bc864 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   bc864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc868:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   bc86a:	6800      	ldr	r0, [r0, #0]
{
   bc86c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   bc86e:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   bc870:	6803      	ldr	r3, [r0, #0]
   bc872:	691b      	ldr	r3, [r3, #16]
{
   bc874:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   bc878:	4798      	blx	r3
   bc87a:	4605      	mov	r5, r0
   bc87c:	b1c8      	cbz	r0, bc8b2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   bc87e:	b11e      	cbz	r6, bc888 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   bc880:	4620      	mov	r0, r4
   bc882:	f7ff ffe3 	bl	bc84c <_ZN10RHDatagram10headerFromEv>
   bc886:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   bc888:	f1b9 0f00 	cmp.w	r9, #0
   bc88c:	d004      	beq.n	bc898 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   bc88e:	4620      	mov	r0, r4
   bc890:	f7ff ffd8 	bl	bc844 <_ZN10RHDatagram8headerToEv>
   bc894:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   bc898:	f1b8 0f00 	cmp.w	r8, #0
   bc89c:	d004      	beq.n	bc8a8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   bc89e:	4620      	mov	r0, r4
   bc8a0:	f7ff ffd8 	bl	bc854 <_ZN10RHDatagram8headerIdEv>
   bc8a4:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   bc8a8:	b11f      	cbz	r7, bc8b2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   bc8aa:	4620      	mov	r0, r4
   bc8ac:	f7ff ffd6 	bl	bc85c <_ZN10RHDatagram11headerFlagsEv>
   bc8b0:	7038      	strb	r0, [r7, #0]
}
   bc8b2:	4628      	mov	r0, r5
   bc8b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bc8b8 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   bc8b8:	b510      	push	{r4, lr}
   bc8ba:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   bc8bc:	f7ff ff76 	bl	bc7ac <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   bc8c0:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   bc8c2:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   bc8c4:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   bc8c6:	2303      	movs	r3, #3
    _retransmissions = 0;
   bc8c8:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   bc8ca:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   bc8cc:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   bc8ce:	f44f 7280 	mov.w	r2, #256	; 0x100
   bc8d2:	f104 0011 	add.w	r0, r4, #17
   bc8d6:	f008 fd9b 	bl	c5410 <memset>
}
   bc8da:	4620      	mov	r0, r4
   bc8dc:	bd10      	pop	{r4, pc}

000bc8de <_ZN18RHReliableDatagram10setTimeoutEt>:

////////////////////////////////////////////////////////////////////
// Public methods
void RHReliableDatagram::setTimeout(uint16_t timeout)
{
    _timeout = timeout;
   bc8de:	81c1      	strh	r1, [r0, #14]
}
   bc8e0:	4770      	bx	lr

000bc8e2 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   bc8e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bc8e4:	4604      	mov	r4, r0
   bc8e6:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   bc8e8:	f7ff ffa4 	bl	bc834 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   bc8ec:	4620      	mov	r0, r4
   bc8ee:	2200      	movs	r2, #0
   bc8f0:	2180      	movs	r1, #128	; 0x80
   bc8f2:	f7ff ffa3 	bl	bc83c <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   bc8f6:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   bc8f8:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   bc8fa:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   bc8fe:	f10d 010f 	add.w	r1, sp, #15
   bc902:	2201      	movs	r2, #1
   bc904:	4620      	mov	r0, r4
   bc906:	f7ff ff66 	bl	bc7d6 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   bc90a:	4620      	mov	r0, r4
   bc90c:	f7ff ff55 	bl	bc7ba <_ZN10RHDatagram14waitPacketSentEv>
}
   bc910:	b004      	add	sp, #16
   bc912:	bd10      	pop	{r4, pc}

000bc914 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   bc914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bc918:	7b07      	ldrb	r7, [r0, #12]
   bc91a:	3701      	adds	r7, #1
   bc91c:	b2ff      	uxtb	r7, r7
		buf[len-2]++; // Increment the number of re-transmissions
   bc91e:	f1a2 0b02 	sub.w	fp, r2, #2
{
   bc922:	b089      	sub	sp, #36	; 0x24
   bc924:	4605      	mov	r5, r0
   bc926:	460e      	mov	r6, r1
   bc928:	4691      	mov	r9, r2
   bc92a:	469a      	mov	sl, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bc92c:	7307      	strb	r7, [r0, #12]
    uint8_t retries = 0;
   bc92e:	f04f 0800 	mov.w	r8, #0
		buf[len-2]++; // Increment the number of re-transmissions
   bc932:	448b      	add	fp, r1
    while (retries++ <= _retries)
   bc934:	7c2a      	ldrb	r2, [r5, #16]
   bc936:	4643      	mov	r3, r8
   bc938:	429a      	cmp	r2, r3
   bc93a:	f108 0801 	add.w	r8, r8, #1
   bc93e:	fa5f f888 	uxtb.w	r8, r8
   bc942:	f0c0 8087 	bcc.w	bca54 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x140>
	setHeaderId(thisSequenceNumber);
   bc946:	4639      	mov	r1, r7
   bc948:	4628      	mov	r0, r5
   bc94a:	f7ff ff73 	bl	bc834 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   bc94e:	f1b8 0f01 	cmp.w	r8, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   bc952:	bf0d      	iteet	eq
   bc954:	22c0      	moveq	r2, #192	; 0xc0
   bc956:	2280      	movne	r2, #128	; 0x80
   bc958:	2140      	movne	r1, #64	; 0x40
   bc95a:	2100      	moveq	r1, #0
   bc95c:	4628      	mov	r0, r5
   bc95e:	f7ff ff6d 	bl	bc83c <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   bc962:	4653      	mov	r3, sl
   bc964:	464a      	mov	r2, r9
   bc966:	4631      	mov	r1, r6
   bc968:	4628      	mov	r0, r5
   bc96a:	f7ff ff34 	bl	bc7d6 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   bc96e:	4628      	mov	r0, r5
   bc970:	f7ff ff23 	bl	bc7ba <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   bc974:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   bc978:	d06e      	beq.n	bca58 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x144>
	if (retries > 1)
   bc97a:	f1b8 0f01 	cmp.w	r8, #1
	    _retransmissions++;
   bc97e:	bf82      	ittt	hi
   bc980:	68ab      	ldrhi	r3, [r5, #8]
   bc982:	3301      	addhi	r3, #1
   bc984:	60ab      	strhi	r3, [r5, #8]
   bc986:	f003 f93f 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   bc98a:	f44f 7180 	mov.w	r1, #256	; 0x100
   bc98e:	9005      	str	r0, [sp, #20]
   bc990:	2000      	movs	r0, #0
   bc992:	89ec      	ldrh	r4, [r5, #14]
   bc994:	f006 fb23 	bl	c2fde <_Z6randomii>
   bc998:	4360      	muls	r0, r4
   bc99a:	bf48      	it	mi
   bc99c:	30ff      	addmi	r0, #255	; 0xff
   bc99e:	eb04 2320 	add.w	r3, r4, r0, asr #8
	timeout = (timeout/10)*10;
   bc9a2:	b29b      	uxth	r3, r3
   bc9a4:	200a      	movs	r0, #10
	if (buf[5] == 0){
   bc9a6:	7971      	ldrb	r1, [r6, #5]
	timeout = (timeout/10)*10;
   bc9a8:	fbb3 f3f0 	udiv	r3, r3, r0
   bc9ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   bc9b0:	005b      	lsls	r3, r3, #1
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   bc9b2:	9a05      	ldr	r2, [sp, #20]
	timeout = (timeout/10)*10;
   bc9b4:	b29b      	uxth	r3, r3
	if (buf[5] == 0){
   bc9b6:	b971      	cbnz	r1, bc9d6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xc2>
		if (buf[len-1] + timeout/10 >= 255){
   bc9b8:	fbb3 f0f0 	udiv	r0, r3, r0
		buf[len-2]++; // Increment the number of re-transmissions
   bc9bc:	f89b 1000 	ldrb.w	r1, [fp]
		if (buf[len-1] + timeout/10 >= 255){
   bc9c0:	f109 34ff 	add.w	r4, r9, #4294967295
		buf[len-2]++; // Increment the number of re-transmissions
   bc9c4:	3101      	adds	r1, #1
   bc9c6:	f88b 1000 	strb.w	r1, [fp]
		if (buf[len-1] + timeout/10 >= 255){
   bc9ca:	5d31      	ldrb	r1, [r6, r4]
   bc9cc:	4401      	add	r1, r0
   bc9ce:	29fe      	cmp	r1, #254	; 0xfe
			buf[len-1] = 255; // Max value of a byte is 255. If greater than this value, then simply set it to 255. 
   bc9d0:	bfc8      	it	gt
   bc9d2:	21ff      	movgt	r1, #255	; 0xff
			buf[len-1] = buf[len-1] + timeout/10; // Accumulate the total timeout between all re-transmissions so we know end to end total timeout delay. Accuracy is hundreths of a second with a max timeout of 255. If greater than 255 (2.5 seconds) then just set it to 255 indicating max delay. 
   bc9d4:	5531      	strb	r1, [r6, r4]
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   bc9d6:	189c      	adds	r4, r3, r2
   bc9d8:	f003 f916 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
   bc9dc:	1a20      	subs	r0, r4, r0
   bc9de:	2800      	cmp	r0, #0
   bc9e0:	dda8      	ble.n	bc934 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x20>
	    if (waitAvailableTimeout(timeLeft))
   bc9e2:	b281      	uxth	r1, r0
   bc9e4:	2200      	movs	r2, #0
   bc9e6:	4628      	mov	r0, r5
   bc9e8:	f7ff feeb 	bl	bc7c2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bc9ec:	2800      	cmp	r0, #0
   bc9ee:	d0f3      	beq.n	bc9d8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xc4>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   bc9f0:	f10d 031f 	add.w	r3, sp, #31
   bc9f4:	9302      	str	r3, [sp, #8]
   bc9f6:	f10d 031e 	add.w	r3, sp, #30
   bc9fa:	9301      	str	r3, [sp, #4]
   bc9fc:	2200      	movs	r2, #0
   bc9fe:	f10d 031d 	add.w	r3, sp, #29
   bca02:	9300      	str	r3, [sp, #0]
   bca04:	4611      	mov	r1, r2
   bca06:	ab07      	add	r3, sp, #28
   bca08:	4628      	mov	r0, r5
   bca0a:	f7ff ff2b 	bl	bc864 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bca0e:	2800      	cmp	r0, #0
   bca10:	d0e2      	beq.n	bc9d8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xc4>
		    if (   from == address 
   bca12:	f89d 201c 	ldrb.w	r2, [sp, #28]
			   && (flags & RH_FLAGS_ACK) 
   bca16:	f99d 301f 	ldrsb.w	r3, [sp, #31]
		    if (   from == address 
   bca1a:	4552      	cmp	r2, sl
   bca1c:	d10e      	bne.n	bca3c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x128>
			   && to == _thisAddress 
   bca1e:	f895 c004 	ldrb.w	ip, [r5, #4]
   bca22:	f89d 101d 	ldrb.w	r1, [sp, #29]
   bca26:	458c      	cmp	ip, r1
   bca28:	d108      	bne.n	bca3c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x128>
			   && (flags & RH_FLAGS_ACK) 
   bca2a:	2b00      	cmp	r3, #0
   bca2c:	da08      	bge.n	bca40 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x12c>
			   && (id == thisSequenceNumber))
   bca2e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   bca32:	42bb      	cmp	r3, r7
   bca34:	d1d0      	bne.n	bc9d8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xc4>
}
   bca36:	b009      	add	sp, #36	; 0x24
   bca38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   bca3c:	2b00      	cmp	r3, #0
   bca3e:	dbcb      	blt.n	bc9d8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xc4>
				&& (id == _seenIds[from]))
   bca40:	18a9      	adds	r1, r5, r2
   bca42:	f89d 301e 	ldrb.w	r3, [sp, #30]
   bca46:	7c49      	ldrb	r1, [r1, #17]
   bca48:	4299      	cmp	r1, r3
   bca4a:	d1c5      	bne.n	bc9d8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xc4>
			acknowledge(id, from);
   bca4c:	4628      	mov	r0, r5
   bca4e:	f7ff ff48 	bl	bc8e2 <_ZN18RHReliableDatagram11acknowledgeEhh>
   bca52:	e7c1      	b.n	bc9d8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xc4>
    return false;
   bca54:	2000      	movs	r0, #0
   bca56:	e7ee      	b.n	bca36 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x122>
	    return true;
   bca58:	2001      	movs	r0, #1
   bca5a:	e7ec      	b.n	bca36 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x122>

000bca5c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   bca5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bca60:	b089      	sub	sp, #36	; 0x24
   bca62:	e9cd 2104 	strd	r2, r1, [sp, #16]
   bca66:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   bca6a:	9f12      	ldr	r7, [sp, #72]	; 0x48
   bca6c:	4604      	mov	r4, r0
   bca6e:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bca70:	f7ff fe9f 	bl	bc7b2 <_ZN10RHDatagram9availableEv>
   bca74:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   bca78:	b920      	cbnz	r0, bca84 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   bca7a:	2500      	movs	r5, #0
}
   bca7c:	4628      	mov	r0, r5
   bca7e:	b009      	add	sp, #36	; 0x24
   bca80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bca84:	f10d 031f 	add.w	r3, sp, #31
   bca88:	9302      	str	r3, [sp, #8]
   bca8a:	f10d 031e 	add.w	r3, sp, #30
   bca8e:	9301      	str	r3, [sp, #4]
   bca90:	f10d 031d 	add.w	r3, sp, #29
   bca94:	9300      	str	r3, [sp, #0]
   bca96:	4620      	mov	r0, r4
   bca98:	ab07      	add	r3, sp, #28
   bca9a:	f7ff fee3 	bl	bc864 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bca9e:	4605      	mov	r5, r0
   bcaa0:	2800      	cmp	r0, #0
   bcaa2:	d0ea      	beq.n	bca7a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   bcaa4:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   bcaa8:	2b00      	cmp	r3, #0
   bcaaa:	dbe6      	blt.n	bca7a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   bcaac:	7922      	ldrb	r2, [r4, #4]
   bcaae:	f89d 301d 	ldrb.w	r3, [sp, #29]
   bcab2:	429a      	cmp	r2, r3
   bcab4:	d106      	bne.n	bcac4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   bcab6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bcaba:	f89d 101e 	ldrb.w	r1, [sp, #30]
   bcabe:	4620      	mov	r0, r4
   bcac0:	f7ff ff0f 	bl	bc8e2 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   bcac4:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bcac8:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bcacc:	f89d 301e 	ldrb.w	r3, [sp, #30]
   bcad0:	f012 0f40 	tst.w	r2, #64	; 0x40
   bcad4:	440c      	add	r4, r1
   bcad6:	d002      	beq.n	bcade <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   bcad8:	7c60      	ldrb	r0, [r4, #17]
   bcada:	4298      	cmp	r0, r3
   bcadc:	d0cd      	beq.n	bca7a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   bcade:	b106      	cbz	r6, bcae2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   bcae0:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   bcae2:	f1b9 0f00 	cmp.w	r9, #0
   bcae6:	d003      	beq.n	bcaf0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   bcae8:	f89d 101d 	ldrb.w	r1, [sp, #29]
   bcaec:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   bcaf0:	f1b8 0f00 	cmp.w	r8, #0
   bcaf4:	d001      	beq.n	bcafa <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   bcaf6:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   bcafa:	b107      	cbz	r7, bcafe <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   bcafc:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   bcafe:	7463      	strb	r3, [r4, #17]
		return true;
   bcb00:	e7bc      	b.n	bca7c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000bcb02 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bcb02:	2001      	movs	r0, #1
   bcb04:	4770      	bx	lr

000bcb06 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bcb06:	20fb      	movs	r0, #251	; 0xfb
   bcb08:	4770      	bx	lr

000bcb0a <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bcb0a:	4770      	bx	lr

000bcb0c <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bcb0c:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bcb0e:	7903      	ldrb	r3, [r0, #4]
   bcb10:	2b05      	cmp	r3, #5
{
   bcb12:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bcb14:	d010      	beq.n	bcb38 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bcb16:	6803      	ldr	r3, [r0, #0]
   bcb18:	2105      	movs	r1, #5
   bcb1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bcb1e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bcb20:	2207      	movs	r2, #7
   bcb22:	2101      	movs	r1, #1
   bcb24:	4620      	mov	r0, r4
   bcb26:	f000 fcee 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bcb2a:	2280      	movs	r2, #128	; 0x80
   bcb2c:	2140      	movs	r1, #64	; 0x40
   bcb2e:	4620      	mov	r0, r4
   bcb30:	f000 fce9 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   bcb34:	2305      	movs	r3, #5
   bcb36:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   bcb38:	7923      	ldrb	r3, [r4, #4]
   bcb3a:	2b05      	cmp	r3, #5
   bcb3c:	d0fc      	beq.n	bcb38 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   bcb3e:	7e20      	ldrb	r0, [r4, #24]
}
   bcb40:	bd10      	pop	{r4, pc}

000bcb42 <_ZN7RH_RF95D0Ev>:
   bcb42:	b510      	push	{r4, lr}
   bcb44:	f44f 7198 	mov.w	r1, #304	; 0x130
   bcb48:	4604      	mov	r4, r0
   bcb4a:	f7f7 faa8 	bl	b409e <_ZdlPvj>
   bcb4e:	4620      	mov	r0, r4
   bcb50:	bd10      	pop	{r4, pc}

000bcb52 <_ZN7RH_RF955sleepEv>:
{
   bcb52:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   bcb54:	7903      	ldrb	r3, [r0, #4]
   bcb56:	2b01      	cmp	r3, #1
{
   bcb58:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   bcb5a:	d00b      	beq.n	bcb74 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   bcb5c:	6803      	ldr	r3, [r0, #0]
   bcb5e:	2101      	movs	r1, #1
   bcb60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bcb64:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   bcb66:	2200      	movs	r2, #0
   bcb68:	2101      	movs	r1, #1
   bcb6a:	4620      	mov	r0, r4
   bcb6c:	f000 fccb 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   bcb70:	2301      	movs	r3, #1
   bcb72:	7123      	strb	r3, [r4, #4]
}
   bcb74:	2001      	movs	r0, #1
   bcb76:	bd10      	pop	{r4, pc}

000bcb78 <_ZN7RH_RF954recvEPhS0_>:
{
   bcb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   bcb7a:	6803      	ldr	r3, [r0, #0]
   bcb7c:	68db      	ldr	r3, [r3, #12]
{
   bcb7e:	4604      	mov	r4, r0
   bcb80:	460f      	mov	r7, r1
   bcb82:	4615      	mov	r5, r2
    if (!available())
   bcb84:	4798      	blx	r3
   bcb86:	4606      	mov	r6, r0
   bcb88:	b1b0      	cbz	r0, bcbb8 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   bcb8a:	b187      	cbz	r7, bcbae <_ZN7RH_RF954recvEPhS0_+0x36>
   bcb8c:	b17d      	cbz	r5, bcbae <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   bcb8e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   bcb92:	782a      	ldrb	r2, [r5, #0]
   bcb94:	3b03      	subs	r3, #3
   bcb96:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   bcb98:	bfde      	ittt	le
   bcb9a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   bcb9e:	3b04      	suble	r3, #4
   bcba0:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   bcba2:	782a      	ldrb	r2, [r5, #0]
   bcba4:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   bcba8:	4638      	mov	r0, r7
   bcbaa:	f008 fc09 	bl	c53c0 <memcpy>
    _rxBufValid = false;
   bcbae:	2300      	movs	r3, #0
   bcbb0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bcbb4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   bcbb8:	4630      	mov	r0, r6
   bcbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcbbc <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   bcbbc:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   bcbbe:	b538      	push	{r3, r4, r5, lr}
   bcbc0:	4605      	mov	r5, r0
   bcbc2:	460c      	mov	r4, r1
	if (power > 20)
   bcbc4:	dc14      	bgt.n	bcbf0 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   bcbc6:	2901      	cmp	r1, #1
   bcbc8:	dd14      	ble.n	bcbf4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   bcbca:	2911      	cmp	r1, #17
   bcbcc:	dd13      	ble.n	bcbf6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   bcbce:	2207      	movs	r2, #7
   bcbd0:	214d      	movs	r1, #77	; 0x4d
   bcbd2:	4628      	mov	r0, r5
   bcbd4:	f000 fc97 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   bcbd8:	3c03      	subs	r4, #3
   bcbda:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bcbdc:	1ea2      	subs	r2, r4, #2
   bcbde:	f062 027f 	orn	r2, r2, #127	; 0x7f
   bcbe2:	4628      	mov	r0, r5
   bcbe4:	b2d2      	uxtb	r2, r2
}
   bcbe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bcbea:	2109      	movs	r1, #9
   bcbec:	f000 bc8b 	b.w	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   bcbf0:	2414      	movs	r4, #20
   bcbf2:	e7ec      	b.n	bcbce <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   bcbf4:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bcbf6:	2204      	movs	r2, #4
   bcbf8:	214d      	movs	r1, #77	; 0x4d
   bcbfa:	4628      	mov	r0, r5
   bcbfc:	f000 fc83 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
   bcc00:	e7ec      	b.n	bcbdc <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000bcc04 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   bcc04:	b538      	push	{r3, r4, r5, lr}
   bcc06:	4604      	mov	r4, r0
   bcc08:	4615      	mov	r5, r2
    _rxBufValid(0)
   bcc0a:	461a      	mov	r2, r3
   bcc0c:	f000 fc4a 	bl	bd4a4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   bcc10:	4b09      	ldr	r3, [pc, #36]	; (bcc38 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   bcc12:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   bcc14:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   bcc16:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   bcc18:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   bcc1c:	2201      	movs	r2, #1
    _rxBufValid(0)
   bcc1e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bcc22:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   bcc26:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   bcc2a:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   bcc2e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   bcc32:	4620      	mov	r0, r4
   bcc34:	bd38      	pop	{r3, r4, r5, pc}
   bcc36:	bf00      	nop
   bcc38:	000c8124 	.word	0x000c8124

000bcc3c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   bcc3c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   bcc40:	2b03      	cmp	r3, #3
   bcc42:	d91b      	bls.n	bcc7c <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   bcc44:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   bcc48:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   bcc4a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   bcc4e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   bcc50:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   bcc54:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   bcc56:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   bcc5a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   bcc5c:	7983      	ldrb	r3, [r0, #6]
   bcc5e:	b933      	cbnz	r3, bcc6e <_ZN7RH_RF9513validateRxBufEv+0x32>
   bcc60:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   bcc62:	7942      	ldrb	r2, [r0, #5]
   bcc64:	429a      	cmp	r2, r3
   bcc66:	d002      	beq.n	bcc6e <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   bcc68:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   bcc6a:	2bff      	cmp	r3, #255	; 0xff
   bcc6c:	d106      	bne.n	bcc7c <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   bcc6e:	8a83      	ldrh	r3, [r0, #20]
   bcc70:	3301      	adds	r3, #1
   bcc72:	b29b      	uxth	r3, r3
   bcc74:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   bcc76:	2301      	movs	r3, #1
   bcc78:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   bcc7c:	4770      	bx	lr
	...

000bcc80 <_ZN7RH_RF9512setFrequencyEm>:
{
   bcc80:	b570      	push	{r4, r5, r6, lr}
   bcc82:	4604      	mov	r4, r0
    uint32_t frf = (centre_x100 * 10000.0) / RH_RF95_FSTEP;
   bcc84:	4608      	mov	r0, r1
{
   bcc86:	460d      	mov	r5, r1
    uint32_t frf = (centre_x100 * 10000.0) / RH_RF95_FSTEP;
   bcc88:	f007 ff7e 	bl	c4b88 <__aeabi_ui2d>
   bcc8c:	a315      	add	r3, pc, #84	; (adr r3, bcce4 <_ZN7RH_RF9512setFrequencyEm+0x64>)
   bcc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcc92:	f007 fff3 	bl	c4c7c <__aeabi_dmul>
   bcc96:	a315      	add	r3, pc, #84	; (adr r3, bccec <_ZN7RH_RF9512setFrequencyEm+0x6c>)
   bcc98:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcc9c:	f008 f918 	bl	c4ed0 <__aeabi_ddiv>
   bcca0:	f008 fac4 	bl	c522c <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bcca4:	2106      	movs	r1, #6
    uint32_t frf = (centre_x100 * 10000.0) / RH_RF95_FSTEP;
   bcca6:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bcca8:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bccac:	4620      	mov	r0, r4
   bccae:	f000 fc2a 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bccb2:	f3c6 2207 	ubfx	r2, r6, #8, #8
   bccb6:	2107      	movs	r1, #7
   bccb8:	4620      	mov	r0, r4
   bccba:	f000 fc24 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bccbe:	b2f2      	uxtb	r2, r6
   bccc0:	2108      	movs	r1, #8
   bccc2:	4620      	mov	r0, r4
   bccc4:	f000 fc1f 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre_x100/100 >= 779.0);
   bccc8:	4905      	ldr	r1, [pc, #20]	; (bcce0 <_ZN7RH_RF9512setFrequencyEm+0x60>)
   bccca:	428d      	cmp	r5, r1
   bcccc:	bf94      	ite	ls
   bccce:	2500      	movls	r5, #0
   bccd0:	2501      	movhi	r5, #1
   bccd2:	f884 5129 	strb.w	r5, [r4, #297]	; 0x129
}
   bccd6:	2001      	movs	r0, #1
   bccd8:	bd70      	pop	{r4, r5, r6, pc}
   bccda:	bf00      	nop
   bccdc:	f3af 8000 	nop.w
   bcce0:	0001304b 	.word	0x0001304b
   bcce4:	00000000 	.word	0x00000000
   bcce8:	40c38800 	.word	0x40c38800
   bccec:	00000000 	.word	0x00000000
   bccf0:	404e8480 	.word	0x404e8480

000bccf4 <_ZN7RH_RF9511setModeIdleEv>:
{
   bccf4:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bccf6:	7903      	ldrb	r3, [r0, #4]
   bccf8:	2b02      	cmp	r3, #2
{
   bccfa:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bccfc:	d00b      	beq.n	bcd16 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bccfe:	6803      	ldr	r3, [r0, #0]
   bcd00:	2102      	movs	r1, #2
   bcd02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bcd06:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bcd08:	2201      	movs	r2, #1
   bcd0a:	4611      	mov	r1, r2
   bcd0c:	4620      	mov	r0, r4
   bcd0e:	f000 fbfa 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bcd12:	2302      	movs	r3, #2
   bcd14:	7123      	strb	r3, [r4, #4]
}
   bcd16:	bd10      	pop	{r4, pc}

000bcd18 <_ZN7RH_RF9515handleInterruptEv>:
{
   bcd18:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bcd1a:	2112      	movs	r1, #18
{
   bcd1c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bcd1e:	f000 fbd1 	bl	bd4c4 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bcd22:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bcd24:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bcd26:	4620      	mov	r0, r4
   bcd28:	f000 fbcc 	bl	bd4c4 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bcd2c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bcd2e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bcd30:	2112      	movs	r1, #18
   bcd32:	4620      	mov	r0, r4
   bcd34:	f000 fbe7 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   bcd38:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   bcd3a:	2b04      	cmp	r3, #4
   bcd3c:	d107      	bne.n	bcd4e <_ZN7RH_RF9515handleInterruptEv+0x36>
   bcd3e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   bcd42:	d117      	bne.n	bcd74 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   bcd44:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   bcd48:	b10b      	cbz	r3, bcd4e <_ZN7RH_RF9515handleInterruptEv+0x36>
   bcd4a:	0670      	lsls	r0, r6, #25
   bcd4c:	d512      	bpl.n	bcd74 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   bcd4e:	7923      	ldrb	r3, [r4, #4]
   bcd50:	2b04      	cmp	r3, #4
   bcd52:	d101      	bne.n	bcd58 <_ZN7RH_RF9515handleInterruptEv+0x40>
   bcd54:	0669      	lsls	r1, r5, #25
   bcd56:	d422      	bmi.n	bcd9e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   bcd58:	7923      	ldrb	r3, [r4, #4]
   bcd5a:	2b03      	cmp	r3, #3
   bcd5c:	d101      	bne.n	bcd62 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   bcd5e:	072a      	lsls	r2, r5, #28
   bcd60:	d468      	bmi.n	bce34 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   bcd62:	7923      	ldrb	r3, [r4, #4]
   bcd64:	2b05      	cmp	r3, #5
   bcd66:	d10e      	bne.n	bcd86 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   bcd68:	076b      	lsls	r3, r5, #29
   bcd6a:	d50c      	bpl.n	bcd86 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   bcd6c:	f005 0501 	and.w	r5, r5, #1
   bcd70:	7625      	strb	r5, [r4, #24]
   bcd72:	e063      	b.n	bce3c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   bcd74:	8a63      	ldrh	r3, [r4, #18]
   bcd76:	3301      	adds	r3, #1
   bcd78:	b29b      	uxth	r3, r3
   bcd7a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   bcd7c:	2300      	movs	r3, #0
   bcd7e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bcd82:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bcd86:	22ff      	movs	r2, #255	; 0xff
   bcd88:	2112      	movs	r1, #18
   bcd8a:	4620      	mov	r0, r4
   bcd8c:	f000 fbbb 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bcd90:	4620      	mov	r0, r4
   bcd92:	22ff      	movs	r2, #255	; 0xff
}
   bcd94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bcd98:	2112      	movs	r1, #18
   bcd9a:	f000 bbb4 	b.w	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bcd9e:	2113      	movs	r1, #19
   bcda0:	4620      	mov	r0, r4
   bcda2:	f000 fb8f 	bl	bd4c4 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bcda6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bcda8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bcdaa:	4620      	mov	r0, r4
   bcdac:	f000 fb8a 	bl	bd4c4 <_ZN11RHSPIDriver7spiReadEh>
   bcdb0:	210d      	movs	r1, #13
   bcdb2:	4602      	mov	r2, r0
   bcdb4:	4620      	mov	r0, r4
   bcdb6:	f000 fba6 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   bcdba:	f104 0229 	add.w	r2, r4, #41	; 0x29
   bcdbe:	462b      	mov	r3, r5
   bcdc0:	2100      	movs	r1, #0
   bcdc2:	4620      	mov	r0, r4
   bcdc4:	f000 fbc4 	bl	bd550 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bcdc8:	2119      	movs	r1, #25
	_bufLen = len;
   bcdca:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bcdce:	4620      	mov	r0, r4
   bcdd0:	f000 fb78 	bl	bd4c4 <_ZN11RHSPIDriver7spiReadEh>
   bcdd4:	b240      	sxtb	r0, r0
   bcdd6:	2800      	cmp	r0, #0
   bcdd8:	bfb8      	it	lt
   bcdda:	3003      	addlt	r0, #3
   bcddc:	1080      	asrs	r0, r0, #2
   bcdde:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bcde2:	211a      	movs	r1, #26
   bcde4:	4620      	mov	r0, r4
   bcde6:	f000 fb6d 	bl	bd4c4 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   bcdea:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bcdee:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   bcdf0:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bcdf2:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bcdf4:	bfa9      	itett	ge
   bcdf6:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   bcdf8:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bcdfa:	b21b      	sxthge	r3, r3
   bcdfc:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   bcdfe:	bfb2      	itee	lt
   bce00:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bce02:	220f      	movge	r2, #15
   bce04:	fb93 f3f2 	sdivge	r3, r3, r2
   bce08:	b21b      	sxth	r3, r3
   bce0a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   bce0c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   bce10:	b16b      	cbz	r3, bce2e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   bce12:	8a23      	ldrh	r3, [r4, #16]
   bce14:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   bce16:	b21b      	sxth	r3, r3
   bce18:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   bce1a:	4620      	mov	r0, r4
   bce1c:	f7ff ff0e 	bl	bcc3c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   bce20:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   bce24:	2b00      	cmp	r3, #0
   bce26:	d0ae      	beq.n	bcd86 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   bce28:	f7ff ff64 	bl	bccf4 <_ZN7RH_RF9511setModeIdleEv>
   bce2c:	e7ab      	b.n	bcd86 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   bce2e:	8a23      	ldrh	r3, [r4, #16]
   bce30:	3ba4      	subs	r3, #164	; 0xa4
   bce32:	e7f0      	b.n	bce16 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bce34:	8ae3      	ldrh	r3, [r4, #22]
   bce36:	3301      	adds	r3, #1
   bce38:	b29b      	uxth	r3, r3
   bce3a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bce3c:	4620      	mov	r0, r4
   bce3e:	e7f3      	b.n	bce28 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bce40 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bce40:	4b02      	ldr	r3, [pc, #8]	; (bce4c <_ZN7RH_RF954isr0Ev+0xc>)
   bce42:	6818      	ldr	r0, [r3, #0]
   bce44:	b108      	cbz	r0, bce4a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bce46:	f7ff bf67 	b.w	bcd18 <_ZN7RH_RF9515handleInterruptEv>
}
   bce4a:	4770      	bx	lr
   bce4c:	2003b57c 	.word	0x2003b57c

000bce50 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bce50:	4b02      	ldr	r3, [pc, #8]	; (bce5c <_ZN7RH_RF954isr1Ev+0xc>)
   bce52:	6858      	ldr	r0, [r3, #4]
   bce54:	b108      	cbz	r0, bce5a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bce56:	f7ff bf5f 	b.w	bcd18 <_ZN7RH_RF9515handleInterruptEv>
}
   bce5a:	4770      	bx	lr
   bce5c:	2003b57c 	.word	0x2003b57c

000bce60 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bce60:	4b02      	ldr	r3, [pc, #8]	; (bce6c <_ZN7RH_RF954isr2Ev+0xc>)
   bce62:	6898      	ldr	r0, [r3, #8]
   bce64:	b108      	cbz	r0, bce6a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bce66:	f7ff bf57 	b.w	bcd18 <_ZN7RH_RF9515handleInterruptEv>
}
   bce6a:	4770      	bx	lr
   bce6c:	2003b57c 	.word	0x2003b57c

000bce70 <_ZN7RH_RF959setModeRxEv>:
{
   bce70:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bce72:	7903      	ldrb	r3, [r0, #4]
   bce74:	2b04      	cmp	r3, #4
{
   bce76:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bce78:	d010      	beq.n	bce9c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bce7a:	6803      	ldr	r3, [r0, #0]
   bce7c:	2104      	movs	r1, #4
   bce7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bce82:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   bce84:	2205      	movs	r2, #5
   bce86:	2101      	movs	r1, #1
   bce88:	4620      	mov	r0, r4
   bce8a:	f000 fb3c 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   bce8e:	2200      	movs	r2, #0
   bce90:	2140      	movs	r1, #64	; 0x40
   bce92:	4620      	mov	r0, r4
   bce94:	f000 fb37 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   bce98:	2304      	movs	r3, #4
   bce9a:	7123      	strb	r3, [r4, #4]
}
   bce9c:	bd10      	pop	{r4, pc}

000bce9e <_ZN7RH_RF959availableEv>:
{
   bce9e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   bcea0:	7903      	ldrb	r3, [r0, #4]
   bcea2:	2b03      	cmp	r3, #3
{
   bcea4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   bcea6:	d005      	beq.n	bceb4 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   bcea8:	f7ff ffe2 	bl	bce70 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   bceac:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   bceb0:	b2c0      	uxtb	r0, r0
}
   bceb2:	bd10      	pop	{r4, pc}
	return false;
   bceb4:	2000      	movs	r0, #0
   bceb6:	e7fc      	b.n	bceb2 <_ZN7RH_RF959availableEv+0x14>

000bceb8 <_ZN7RH_RF959setModeTxEv>:
{
   bceb8:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   bceba:	7903      	ldrb	r3, [r0, #4]
   bcebc:	2b03      	cmp	r3, #3
{
   bcebe:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   bcec0:	d010      	beq.n	bcee4 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   bcec2:	6803      	ldr	r3, [r0, #0]
   bcec4:	2103      	movs	r1, #3
   bcec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bceca:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   bcecc:	2203      	movs	r2, #3
   bcece:	2101      	movs	r1, #1
   bced0:	4620      	mov	r0, r4
   bced2:	f000 fb18 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   bced6:	2240      	movs	r2, #64	; 0x40
   bced8:	4611      	mov	r1, r2
   bceda:	4620      	mov	r0, r4
   bcedc:	f000 fb13 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   bcee0:	2303      	movs	r3, #3
   bcee2:	7123      	strb	r3, [r4, #4]
}
   bcee4:	bd10      	pop	{r4, pc}

000bcee6 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bcee6:	2afb      	cmp	r2, #251	; 0xfb
{
   bcee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bceea:	4604      	mov	r4, r0
   bceec:	460f      	mov	r7, r1
   bceee:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bcef0:	d902      	bls.n	bcef8 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   bcef2:	2600      	movs	r6, #0
}
   bcef4:	4630      	mov	r0, r6
   bcef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   bcef8:	6803      	ldr	r3, [r0, #0]
   bcefa:	6a1b      	ldr	r3, [r3, #32]
   bcefc:	4798      	blx	r3
    setModeIdle();
   bcefe:	4620      	mov	r0, r4
   bcf00:	f7ff fef8 	bl	bccf4 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   bcf04:	6823      	ldr	r3, [r4, #0]
   bcf06:	4620      	mov	r0, r4
   bcf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcf0a:	4798      	blx	r3
   bcf0c:	4606      	mov	r6, r0
   bcf0e:	2800      	cmp	r0, #0
   bcf10:	d0ef      	beq.n	bcef2 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   bcf12:	2200      	movs	r2, #0
   bcf14:	210d      	movs	r1, #13
   bcf16:	4620      	mov	r0, r4
   bcf18:	f000 faf5 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   bcf1c:	7ae2      	ldrb	r2, [r4, #11]
   bcf1e:	2100      	movs	r1, #0
   bcf20:	4620      	mov	r0, r4
   bcf22:	f000 faf0 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   bcf26:	7b22      	ldrb	r2, [r4, #12]
   bcf28:	2100      	movs	r1, #0
   bcf2a:	4620      	mov	r0, r4
   bcf2c:	f000 faeb 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   bcf30:	7b62      	ldrb	r2, [r4, #13]
   bcf32:	2100      	movs	r1, #0
   bcf34:	4620      	mov	r0, r4
   bcf36:	f000 fae6 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   bcf3a:	7ba2      	ldrb	r2, [r4, #14]
   bcf3c:	2100      	movs	r1, #0
   bcf3e:	4620      	mov	r0, r4
   bcf40:	f000 fae1 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   bcf44:	462b      	mov	r3, r5
   bcf46:	463a      	mov	r2, r7
   bcf48:	2100      	movs	r1, #0
   bcf4a:	4620      	mov	r0, r4
   bcf4c:	f000 fb29 	bl	bd5a2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   bcf50:	1d2a      	adds	r2, r5, #4
   bcf52:	b2d2      	uxtb	r2, r2
   bcf54:	2122      	movs	r1, #34	; 0x22
   bcf56:	4620      	mov	r0, r4
   bcf58:	f000 fad5 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   bcf5c:	4620      	mov	r0, r4
   bcf5e:	f7ff ffab 	bl	bceb8 <_ZN7RH_RF959setModeTxEv>
    return true;
   bcf62:	e7c7      	b.n	bcef4 <_ZN7RH_RF954sendEPKhh+0xe>

000bcf64 <_ZN7RH_RF9510setTxPowerEab>:
{
   bcf64:	b510      	push	{r4, lr}
   bcf66:	4604      	mov	r4, r0
    _useRFO = useRFO;
   bcf68:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   bcf6c:	b172      	cbz	r2, bcf8c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   bcf6e:	f381 0204 	usat	r2, #4, r1
   bcf72:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   bcf76:	b2d2      	uxtb	r2, r2
   bcf78:	2109      	movs	r1, #9
   bcf7a:	f000 fac4 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bcf7e:	4620      	mov	r0, r4
   bcf80:	2204      	movs	r2, #4
}
   bcf82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bcf86:	214d      	movs	r1, #77	; 0x4d
   bcf88:	f000 babd 	b.w	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
}
   bcf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bcf90:	f7ff be14 	b.w	bcbbc <_ZN7RH_RF9510setTxPowerEab.part.0>

000bcf94 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bcf94:	b538      	push	{r3, r4, r5, lr}
   bcf96:	460c      	mov	r4, r1
   bcf98:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bcf9a:	780a      	ldrb	r2, [r1, #0]
   bcf9c:	211d      	movs	r1, #29
   bcf9e:	f000 fab2 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bcfa2:	7862      	ldrb	r2, [r4, #1]
   bcfa4:	211e      	movs	r1, #30
   bcfa6:	4628      	mov	r0, r5
   bcfa8:	f000 faad 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bcfac:	78a2      	ldrb	r2, [r4, #2]
   bcfae:	4628      	mov	r0, r5
   bcfb0:	2126      	movs	r1, #38	; 0x26
}
   bcfb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bcfb6:	f000 baa6 	b.w	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bcfbc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bcfbc:	2905      	cmp	r1, #5
{
   bcfbe:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bcfc0:	d80f      	bhi.n	bcfe2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bcfc2:	4b09      	ldr	r3, [pc, #36]	; (bcfe8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bcfc4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bcfc8:	185c      	adds	r4, r3, r1
   bcfca:	5a5a      	ldrh	r2, [r3, r1]
   bcfcc:	78a3      	ldrb	r3, [r4, #2]
   bcfce:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bcfd2:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bcfd4:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   bcfd8:	f7ff ffdc 	bl	bcf94 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   bcfdc:	2001      	movs	r0, #1
}
   bcfde:	b002      	add	sp, #8
   bcfe0:	bd10      	pop	{r4, pc}
        return false;
   bcfe2:	2000      	movs	r0, #0
   bcfe4:	e7fb      	b.n	bcfde <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   bcfe6:	bf00      	nop
   bcfe8:	000c810c 	.word	0x000c810c

000bcfec <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bcfec:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bcfee:	0a0a      	lsrs	r2, r1, #8
{
   bcff0:	4605      	mov	r5, r0
   bcff2:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bcff4:	2120      	movs	r1, #32
   bcff6:	f000 fa86 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bcffa:	b2e2      	uxtb	r2, r4
   bcffc:	4628      	mov	r0, r5
   bcffe:	2121      	movs	r1, #33	; 0x21
}
   bd000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bd004:	f000 ba7f 	b.w	bd506 <_ZN11RHSPIDriver8spiWriteEhh>

000bd008 <_ZN7RH_RF954initEv>:
{
   bd008:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd00a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bd00c:	f000 fa2a 	bl	bd464 <_ZN11RHSPIDriver4initEv>
   bd010:	4606      	mov	r6, r0
   bd012:	b918      	cbnz	r0, bd01c <_ZN7RH_RF954initEv+0x14>
	return false;
   bd014:	2600      	movs	r6, #0
}
   bd016:	4630      	mov	r0, r6
   bd018:	b002      	add	sp, #8
   bd01a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bd01c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bd020:	2dff      	cmp	r5, #255	; 0xff
   bd022:	d054      	beq.n	bd0ce <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bd024:	4629      	mov	r1, r5
   bd026:	4620      	mov	r0, r4
   bd028:	f000 fae3 	bl	bd5f2 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bd02c:	2280      	movs	r2, #128	; 0x80
   bd02e:	2101      	movs	r1, #1
   bd030:	4620      	mov	r0, r4
   bd032:	f000 fa68 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bd036:	200a      	movs	r0, #10
   bd038:	f005 f888 	bl	c214c <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bd03c:	2101      	movs	r1, #1
   bd03e:	4620      	mov	r0, r4
   bd040:	f000 fa40 	bl	bd4c4 <_ZN11RHSPIDriver7spiReadEh>
   bd044:	2880      	cmp	r0, #128	; 0x80
   bd046:	d1e5      	bne.n	bd014 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bd048:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bd04c:	28ff      	cmp	r0, #255	; 0xff
   bd04e:	d01c      	beq.n	bd08a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bd050:	2100      	movs	r1, #0
   bd052:	f006 faaf 	bl	c35b4 <pinMode>
	if (_myInterruptIndex == 0xff)
   bd056:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bd05a:	2bff      	cmp	r3, #255	; 0xff
   bd05c:	d107      	bne.n	bd06e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bd05e:	4a26      	ldr	r2, [pc, #152]	; (bd0f8 <_ZN7RH_RF954initEv+0xf0>)
   bd060:	7813      	ldrb	r3, [r2, #0]
   bd062:	2b03      	cmp	r3, #3
   bd064:	d8d6      	bhi.n	bd014 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bd066:	1c59      	adds	r1, r3, #1
   bd068:	7011      	strb	r1, [r2, #0]
   bd06a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bd06e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bd072:	4b22      	ldr	r3, [pc, #136]	; (bd0fc <_ZN7RH_RF954initEv+0xf4>)
   bd074:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bd078:	bb62      	cbnz	r2, bd0d4 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bd07a:	4921      	ldr	r1, [pc, #132]	; (bd100 <_ZN7RH_RF954initEv+0xf8>)
   bd07c:	9200      	str	r2, [sp, #0]
   bd07e:	f04f 33ff 	mov.w	r3, #4294967295
   bd082:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bd084:	b2a8      	uxth	r0, r5
   bd086:	f005 fde1 	bl	c2c4c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bd08a:	2200      	movs	r2, #0
   bd08c:	210e      	movs	r1, #14
   bd08e:	4620      	mov	r0, r4
   bd090:	f000 fa39 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bd094:	2200      	movs	r2, #0
   bd096:	210f      	movs	r1, #15
   bd098:	4620      	mov	r0, r4
   bd09a:	f000 fa34 	bl	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bd09e:	4620      	mov	r0, r4
   bd0a0:	f7ff fe28 	bl	bccf4 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bd0a4:	2100      	movs	r1, #0
   bd0a6:	4620      	mov	r0, r4
   bd0a8:	f7ff ff88 	bl	bcfbc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bd0ac:	4620      	mov	r0, r4
   bd0ae:	2108      	movs	r1, #8
   bd0b0:	f7ff ff9c 	bl	bcfec <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bd0b4:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   bd0b8:	4620      	mov	r0, r4
   bd0ba:	f7ff fde1 	bl	bcc80 <_ZN7RH_RF9512setFrequencyEm>
    _useRFO = useRFO;
   bd0be:	2300      	movs	r3, #0
   bd0c0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bd0c4:	210d      	movs	r1, #13
   bd0c6:	4620      	mov	r0, r4
   bd0c8:	f7ff fd78 	bl	bcbbc <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bd0cc:	e7a3      	b.n	bd016 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bd0ce:	f04f 35ff 	mov.w	r5, #4294967295
   bd0d2:	e7ab      	b.n	bd02c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bd0d4:	2a01      	cmp	r2, #1
   bd0d6:	f04f 0300 	mov.w	r3, #0
   bd0da:	d104      	bne.n	bd0e6 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bd0dc:	9300      	str	r3, [sp, #0]
   bd0de:	4909      	ldr	r1, [pc, #36]	; (bd104 <_ZN7RH_RF954initEv+0xfc>)
   bd0e0:	f04f 33ff 	mov.w	r3, #4294967295
   bd0e4:	e7ce      	b.n	bd084 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bd0e6:	2a02      	cmp	r2, #2
   bd0e8:	d194      	bne.n	bd014 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bd0ea:	9300      	str	r3, [sp, #0]
   bd0ec:	4906      	ldr	r1, [pc, #24]	; (bd108 <_ZN7RH_RF954initEv+0x100>)
   bd0ee:	f04f 33ff 	mov.w	r3, #4294967295
   bd0f2:	2201      	movs	r2, #1
   bd0f4:	e7c6      	b.n	bd084 <_ZN7RH_RF954initEv+0x7c>
   bd0f6:	bf00      	nop
   bd0f8:	2003b57b 	.word	0x2003b57b
   bd0fc:	2003b57c 	.word	0x2003b57c
   bd100:	000bce41 	.word	0x000bce41
   bd104:	000bce51 	.word	0x000bce51
   bd108:	000bce61 	.word	0x000bce61

000bd10c <_ZN7RH_RF957lastSNREv>:
}

int RH_RF95::lastSNR()
{
    return _lastSNR;
}
   bd10c:	f990 012a 	ldrsb.w	r0, [r0, #298]	; 0x12a
   bd110:	4770      	bx	lr
   bd112:	0000      	movs	r0, r0
   bd114:	0000      	movs	r0, r0
	...

000bd118 <_ZN7RH_RF9514setLowDatarateEv>:
    // CR is bits 3..1 of RH_RF95_REG_1D_MODEM_CONFIG1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1, (spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) & ~RH_RF95_CODING_RATE) | cr);
}
 
void RH_RF95::setLowDatarate()
{
   bd118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // "To avoid issues surrounding  drift  of  the  crystal  reference  oscillator  due  to  either  temperature  change  
    // or  motion,the  low  data  rate optimization  bit  is  used. Specifically for 125  kHz  bandwidth  and  SF  =  11  and  12,  
    // this  adds  a  small  overhead  to increase robustness to reference frequency variations over the timescale of the LoRa packet."
 
    // read current value for BW and SF
    uint8_t BW = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) >> 4;	// bw is in bits 7..4
   bd11c:	211d      	movs	r1, #29
{
   bd11e:	b08b      	sub	sp, #44	; 0x2c
   bd120:	4607      	mov	r7, r0
    uint8_t BW = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) >> 4;	// bw is in bits 7..4
   bd122:	f000 f9cf 	bl	bd4c4 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
   bd126:	211e      	movs	r1, #30
    uint8_t BW = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) >> 4;	// bw is in bits 7..4
   bd128:	4606      	mov	r6, r0
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
   bd12a:	4638      	mov	r0, r7
   bd12c:	f000 f9ca 	bl	bd4c4 <_ZN11RHSPIDriver7spiReadEh>
   
    // calculate symbol time (see Semtech AN1200.22 section 4)
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
   bd130:	4d27      	ldr	r5, [pc, #156]	; (bd1d0 <_ZN7RH_RF9514setLowDatarateEv+0xb8>)
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
   bd132:	4684      	mov	ip, r0
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
   bd134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd136:	466c      	mov	r4, sp
   bd138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd13a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd13c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd13e:	e895 0003 	ldmia.w	r5, {r0, r1}
   
    float bandwidth = bw_tab[BW];
   bd142:	ab0a      	add	r3, sp, #40	; 0x28
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
   bd144:	e884 0003 	stmia.w	r4, {r0, r1}
    float bandwidth = bw_tab[BW];
   bd148:	f3c6 1607 	ubfx	r6, r6, #4, #8
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   bd14c:	f3cc 1007 	ubfx	r0, ip, #4, #8
   bd150:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   bd154:	f007 fd18 	bl	c4b88 <__aeabi_ui2d>
   bd158:	ed9f 0b1b 	vldr	d0, [pc, #108]	; bd1c8 <_ZN7RH_RF9514setLowDatarateEv+0xb0>
   bd15c:	ec41 0b11 	vmov	d1, r0, r1
   bd160:	f856 5c28 	ldr.w	r5, [r6, #-40]
   bd164:	f006 fb48 	bl	c37f8 <pow>
    // https://www.thethingsnetwork.org/forum/t/a-point-to-note-lora-low-data-rate-optimisation-flag/12007
    // the LDR bit should be set if the Symbol Time is > 16ms
    // So the threshold used here is 16.0ms
 
    // the LDR is bit 3 of RH_RF95_REG_26_MODEM_CONFIG3
    uint8_t current = spiRead(RH_RF95_REG_26_MODEM_CONFIG3) & ~RH_RF95_LOW_DATA_RATE_OPTIMIZE; // mask off the LDR bit
   bd168:	2126      	movs	r1, #38	; 0x26
   bd16a:	4638      	mov	r0, r7
   bd16c:	ec59 8b10 	vmov	r8, r9, d0
   bd170:	f000 f9a8 	bl	bd4c4 <_ZN11RHSPIDriver7spiReadEh>
    float symbolTime = 1000.0 * pow(2, SF) / bandwidth;	// ms
   bd174:	4b17      	ldr	r3, [pc, #92]	; (bd1d4 <_ZN7RH_RF9514setLowDatarateEv+0xbc>)
    uint8_t current = spiRead(RH_RF95_REG_26_MODEM_CONFIG3) & ~RH_RF95_LOW_DATA_RATE_OPTIMIZE; // mask off the LDR bit
   bd176:	f000 04f7 	and.w	r4, r0, #247	; 0xf7
    float symbolTime = 1000.0 * pow(2, SF) / bandwidth;	// ms
   bd17a:	2200      	movs	r2, #0
   bd17c:	4640      	mov	r0, r8
   bd17e:	4649      	mov	r1, r9
   bd180:	f007 fd7c 	bl	c4c7c <__aeabi_dmul>
   bd184:	4680      	mov	r8, r0
   bd186:	4628      	mov	r0, r5
   bd188:	4689      	mov	r9, r1
   bd18a:	f007 fd1f 	bl	c4bcc <__aeabi_f2d>
   bd18e:	4602      	mov	r2, r0
   bd190:	460b      	mov	r3, r1
   bd192:	4640      	mov	r0, r8
   bd194:	4649      	mov	r1, r9
   bd196:	f007 fe9b 	bl	c4ed0 <__aeabi_ddiv>
   bd19a:	f008 f867 	bl	c526c <__aeabi_d2f>
    if (symbolTime > 16.0)
   bd19e:	ee07 0a10 	vmov	s14, r0
   bd1a2:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   bd1a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bd1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current | RH_RF95_LOW_DATA_RATE_OPTIMIZE);
   bd1ae:	bfcc      	ite	gt
   bd1b0:	f044 0208 	orrgt.w	r2, r4, #8
    else
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current);
   bd1b4:	4622      	movle	r2, r4
   bd1b6:	2126      	movs	r1, #38	; 0x26
   bd1b8:	4638      	mov	r0, r7
   
}
   bd1ba:	b00b      	add	sp, #44	; 0x2c
   bd1bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current);
   bd1c0:	f000 b9a1 	b.w	bd506 <_ZN11RHSPIDriver8spiWriteEhh>
   bd1c4:	f3af 8000 	nop.w
   bd1c8:	00000000 	.word	0x00000000
   bd1cc:	40000000 	.word	0x40000000
   bd1d0:	000c80e4 	.word	0x000c80e4
   bd1d4:	408f4000 	.word	0x408f4000

000bd1d8 <_ZN17RHEncryptedDriver4initEv>:
    virtual bool init() { return _driver.init();};
   bd1d8:	6a00      	ldr	r0, [r0, #32]
   bd1da:	6803      	ldr	r3, [r0, #0]
   bd1dc:	689b      	ldr	r3, [r3, #8]
   bd1de:	4718      	bx	r3

000bd1e0 <_ZN17RHEncryptedDriver9availableEv>:
    virtual bool available() { return _driver.available();};
   bd1e0:	6a00      	ldr	r0, [r0, #32]
   bd1e2:	6803      	ldr	r3, [r0, #0]
   bd1e4:	68db      	ldr	r3, [r3, #12]
   bd1e6:	4718      	bx	r3

000bd1e8 <_ZN17RHEncryptedDriver14waitPacketSentEv>:
    virtual bool            waitPacketSent() { return _driver.waitPacketSent();} ;
   bd1e8:	6a00      	ldr	r0, [r0, #32]
   bd1ea:	6803      	ldr	r3, [r0, #0]
   bd1ec:	6a1b      	ldr	r3, [r3, #32]
   bd1ee:	4718      	bx	r3

000bd1f0 <_ZN17RHEncryptedDriver14waitPacketSentEt>:
    virtual bool            waitPacketSent(uint16_t timeout) {return _driver.waitPacketSent(timeout);} ;
   bd1f0:	6a00      	ldr	r0, [r0, #32]
   bd1f2:	6803      	ldr	r3, [r0, #0]
   bd1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd1f6:	4718      	bx	r3

000bd1f8 <_ZN17RHEncryptedDriver20waitAvailableTimeoutEt>:
    virtual bool            waitAvailableTimeout(uint16_t timeout) {return _driver.waitAvailableTimeout(timeout);};
   bd1f8:	6a00      	ldr	r0, [r0, #32]
   bd1fa:	6803      	ldr	r3, [r0, #0]
   bd1fc:	2200      	movs	r2, #0
   bd1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd200:	4718      	bx	r3

000bd202 <_ZN17RHEncryptedDriver7waitCADEv>:
    virtual bool            waitCAD() { return _driver.waitCAD();};
   bd202:	6a00      	ldr	r0, [r0, #32]
   bd204:	6803      	ldr	r3, [r0, #0]
   bd206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd208:	4718      	bx	r3

000bd20a <_ZN17RHEncryptedDriver15isChannelActiveEv>:
    virtual bool            isChannelActive() { return _driver.isChannelActive();};
   bd20a:	6a00      	ldr	r0, [r0, #32]
   bd20c:	6803      	ldr	r3, [r0, #0]
   bd20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd210:	4718      	bx	r3

000bd212 <_ZN17RHEncryptedDriver14setThisAddressEh>:
    virtual void setThisAddress(uint8_t thisAddress) { _driver.setThisAddress(thisAddress);};
   bd212:	6a00      	ldr	r0, [r0, #32]
   bd214:	6803      	ldr	r3, [r0, #0]
   bd216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd218:	4718      	bx	r3

000bd21a <_ZN17RHEncryptedDriver11setHeaderToEh>:
    virtual void           setHeaderTo(uint8_t to){ _driver.setHeaderTo(to);};
   bd21a:	6a00      	ldr	r0, [r0, #32]
   bd21c:	6803      	ldr	r3, [r0, #0]
   bd21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bd220:	4718      	bx	r3

000bd222 <_ZN17RHEncryptedDriver13setHeaderFromEh>:
    virtual void           setHeaderFrom(uint8_t from){ _driver.setHeaderFrom(from);};
   bd222:	6a00      	ldr	r0, [r0, #32]
   bd224:	6803      	ldr	r3, [r0, #0]
   bd226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd228:	4718      	bx	r3

000bd22a <_ZN17RHEncryptedDriver11setHeaderIdEh>:
    virtual void           setHeaderId(uint8_t id){ _driver.setHeaderId(id);};
   bd22a:	6a00      	ldr	r0, [r0, #32]
   bd22c:	6803      	ldr	r3, [r0, #0]
   bd22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd230:	4718      	bx	r3

000bd232 <_ZN17RHEncryptedDriver14setHeaderFlagsEhh>:
    virtual void           setHeaderFlags(uint8_t set, uint8_t clear = RH_FLAGS_APPLICATION_SPECIFIC) { _driver.setHeaderFlags(set, clear);};
   bd232:	6a00      	ldr	r0, [r0, #32]
   bd234:	6803      	ldr	r3, [r0, #0]
   bd236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd238:	4718      	bx	r3

000bd23a <_ZN17RHEncryptedDriver14setPromiscuousEb>:
    virtual void           setPromiscuous(bool promiscuous){ _driver.setPromiscuous(promiscuous);};
   bd23a:	6a00      	ldr	r0, [r0, #32]
   bd23c:	6803      	ldr	r3, [r0, #0]
   bd23e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd240:	4718      	bx	r3

000bd242 <_ZN17RHEncryptedDriver8headerToEv>:
    virtual uint8_t        headerTo() { return _driver.headerTo();};
   bd242:	6a00      	ldr	r0, [r0, #32]
   bd244:	6803      	ldr	r3, [r0, #0]
   bd246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd248:	4718      	bx	r3

000bd24a <_ZN17RHEncryptedDriver10headerFromEv>:
    virtual uint8_t        headerFrom() { return _driver.headerFrom();};
   bd24a:	6a00      	ldr	r0, [r0, #32]
   bd24c:	6803      	ldr	r3, [r0, #0]
   bd24e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd250:	4718      	bx	r3

000bd252 <_ZN17RHEncryptedDriver8headerIdEv>:
    virtual uint8_t        headerId() { return _driver.headerId();};
   bd252:	6a00      	ldr	r0, [r0, #32]
   bd254:	6803      	ldr	r3, [r0, #0]
   bd256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd258:	4718      	bx	r3

000bd25a <_ZN17RHEncryptedDriver11headerFlagsEv>:
    virtual uint8_t        headerFlags() { return _driver.headerFlags();};
   bd25a:	6a00      	ldr	r0, [r0, #32]
   bd25c:	6803      	ldr	r3, [r0, #0]
   bd25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd260:	4718      	bx	r3

000bd262 <_ZN17RHEncryptedDriver8lastRssiEv>:
    int16_t        lastRssi() { return _driver.lastRssi();};
   bd262:	6a00      	ldr	r0, [r0, #32]
   bd264:	6803      	ldr	r3, [r0, #0]
   bd266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bd268:	4718      	bx	r3

000bd26a <_ZN17RHEncryptedDriver4modeEv>:
    RHMode          mode() { return _driver.mode();};
   bd26a:	6a00      	ldr	r0, [r0, #32]
   bd26c:	6803      	ldr	r3, [r0, #0]
   bd26e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bd270:	4718      	bx	r3

000bd272 <_ZN17RHEncryptedDriver7setModeEN15RHGenericDriver6RHModeE>:
    void            setMode(RHMode mode) { _driver.setMode(mode);};
   bd272:	6a00      	ldr	r0, [r0, #32]
   bd274:	6803      	ldr	r3, [r0, #0]
   bd276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bd278:	4718      	bx	r3

000bd27a <_ZN17RHEncryptedDriver5sleepEv>:
    virtual bool    sleep() { return _driver.sleep();};
   bd27a:	6a00      	ldr	r0, [r0, #32]
   bd27c:	6803      	ldr	r3, [r0, #0]
   bd27e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bd280:	4718      	bx	r3

000bd282 <_ZN17RHEncryptedDriver5rxBadEv>:
    /// Returns the count of the number of bad received packets (ie packets with bad lengths, checksum etc)
    /// which were rejected and not delivered to the application.
    /// Caution: not all drivers can correctly report this count. Some underlying hardware only report
    /// good packets.
    /// \return The number of bad packets received.
    virtual uint16_t       rxBad() { return _driver.rxBad();};
   bd282:	6a00      	ldr	r0, [r0, #32]
   bd284:	6803      	ldr	r3, [r0, #0]
   bd286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd288:	4718      	bx	r3

000bd28a <_ZN17RHEncryptedDriver6rxGoodEv>:

    /// Returns the count of the number of 
    /// good received packets
    /// \return The number of good packets received.
    virtual uint16_t       rxGood() { return _driver.rxGood();};
   bd28a:	6a00      	ldr	r0, [r0, #32]
   bd28c:	6803      	ldr	r3, [r0, #0]
   bd28e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd290:	4718      	bx	r3

000bd292 <_ZN17RHEncryptedDriver6txGoodEv>:

    /// Returns the count of the number of 
    /// packets successfully transmitted (though not necessarily received by the destination)
    /// \return The number of packets successfully transmitted
    virtual uint16_t       txGood() { return _driver.txGood();};
   bd292:	6a00      	ldr	r0, [r0, #32]
   bd294:	6803      	ldr	r3, [r0, #0]
   bd296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   bd298:	4718      	bx	r3

000bd29a <_ZN17RHEncryptedDriver16maxMessageLengthEv>:
#endif
    return status;
}

uint8_t RHEncryptedDriver::maxMessageLength()
{
   bd29a:	b538      	push	{r3, r4, r5, lr}
   bd29c:	4605      	mov	r5, r0
    int driver_len = _driver.maxMessageLength();
   bd29e:	6a00      	ldr	r0, [r0, #32]
   bd2a0:	6803      	ldr	r3, [r0, #0]
   bd2a2:	699b      	ldr	r3, [r3, #24]
   bd2a4:	4798      	blx	r3
   bd2a6:	4604      	mov	r4, r0
    
#ifndef ALLOW_MULTIPLE_MSG
    driver_len = ((int)(driver_len/_blockcipher.blockSize()) ) * _blockcipher.blockSize();
   bd2a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
   bd2aa:	6803      	ldr	r3, [r0, #0]
   bd2ac:	689b      	ldr	r3, [r3, #8]
   bd2ae:	4798      	blx	r3
   bd2b0:	fbb4 f4f0 	udiv	r4, r4, r0
   bd2b4:	6a68      	ldr	r0, [r5, #36]	; 0x24
   bd2b6:	6803      	ldr	r3, [r0, #0]
   bd2b8:	689b      	ldr	r3, [r3, #8]
   bd2ba:	4798      	blx	r3
   bd2bc:	4360      	muls	r0, r4
#endif

#ifdef STRICT_CONTENT_LEN
    driver_len--;
   bd2be:	3801      	subs	r0, #1
#endif
    return driver_len;
}
   bd2c0:	b2c0      	uxtb	r0, r0
   bd2c2:	bd38      	pop	{r3, r4, r5, pc}

000bd2c4 <_ZN17RHEncryptedDriverD1Ev>:
class RHEncryptedDriver : public RHGenericDriver
   bd2c4:	4770      	bx	lr

000bd2c6 <_ZN17RHEncryptedDriverD0Ev>:
   bd2c6:	b510      	push	{r4, lr}
   bd2c8:	2134      	movs	r1, #52	; 0x34
   bd2ca:	4604      	mov	r4, r0
   bd2cc:	f7f6 fee7 	bl	b409e <_ZdlPvj>
   bd2d0:	4620      	mov	r0, r4
   bd2d2:	bd10      	pop	{r4, pc}

000bd2d4 <_ZN17RHEncryptedDriver4recvEPhS0_>:
{
   bd2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd2d8:	ed2d 8b02 	vpush	{d8}
   bd2dc:	4605      	mov	r5, r0
    bool status = _driver.recv(_buffer, len);
   bd2de:	6a00      	ldr	r0, [r0, #32]
   bd2e0:	6803      	ldr	r3, [r0, #0]
{
   bd2e2:	b083      	sub	sp, #12
    bool status = _driver.recv(_buffer, len);
   bd2e4:	691b      	ldr	r3, [r3, #16]
{
   bd2e6:	460e      	mov	r6, r1
    bool status = _driver.recv(_buffer, len);
   bd2e8:	6b29      	ldr	r1, [r5, #48]	; 0x30
{
   bd2ea:	4693      	mov	fp, r2
    bool status = _driver.recv(_buffer, len);
   bd2ec:	4798      	blx	r3
    if (status && buf && len)
   bd2ee:	4682      	mov	sl, r0
   bd2f0:	2800      	cmp	r0, #0
   bd2f2:	d039      	beq.n	bd368 <_ZN17RHEncryptedDriver4recvEPhS0_+0x94>
   bd2f4:	2e00      	cmp	r6, #0
   bd2f6:	d037      	beq.n	bd368 <_ZN17RHEncryptedDriver4recvEPhS0_+0x94>
   bd2f8:	f1bb 0f00 	cmp.w	fp, #0
   bd2fc:	d034      	beq.n	bd368 <_ZN17RHEncryptedDriver4recvEPhS0_+0x94>
	int blockSize = _blockcipher.blockSize(); // Size of blocks used by encryption
   bd2fe:	6a68      	ldr	r0, [r5, #36]	; 0x24
   bd300:	6803      	ldr	r3, [r0, #0]
   bd302:	689b      	ldr	r3, [r3, #8]
   bd304:	4798      	blx	r3
	int nbBlocks = *len / blockSize; 	  // Number of blocks in that message
   bd306:	f89b 3000 	ldrb.w	r3, [fp]
   bd30a:	fb93 f2f0 	sdiv	r2, r3, r0
   bd30e:	9201      	str	r2, [sp, #4]
	if (nbBlocks * blockSize == *len)
   bd310:	4342      	muls	r2, r0
   bd312:	4293      	cmp	r3, r2
	int blockSize = _blockcipher.blockSize(); // Size of blocks used by encryption
   bd314:	4604      	mov	r4, r0
	if (nbBlocks * blockSize == *len)
   bd316:	d127      	bne.n	bd368 <_ZN17RHEncryptedDriver4recvEPhS0_+0x94>
		    memmove(buf, buf+1, blockSize - 1);
   bd318:	1e43      	subs	r3, r0, #1
   bd31a:	ee08 3a10 	vmov	s16, r3
   bd31e:	1c73      	adds	r3, r6, #1
   bd320:	2700      	movs	r7, #0
   bd322:	ee08 3a90 	vmov	s17, r3
	    for (int k = 0; k < nbBlocks; k++)
   bd326:	46b9      	mov	r9, r7
    int h = 0; // Index of output _buffer
   bd328:	46b8      	mov	r8, r7
	    for (int k = 0; k < nbBlocks; k++)
   bd32a:	9b01      	ldr	r3, [sp, #4]
   bd32c:	454b      	cmp	r3, r9
   bd32e:	dd1b      	ble.n	bd368 <_ZN17RHEncryptedDriver4recvEPhS0_+0x94>
		_blockcipher.decryptBlock(&buf[h], &_buffer[k*blockSize]); // Decrypt that block into buf	
   bd330:	6a68      	ldr	r0, [r5, #36]	; 0x24
   bd332:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   bd334:	6803      	ldr	r3, [r0, #0]
   bd336:	eb06 0108 	add.w	r1, r6, r8
   bd33a:	699b      	ldr	r3, [r3, #24]
   bd33c:	443a      	add	r2, r7
   bd33e:	4798      	blx	r3
		h += blockSize;
   bd340:	44a0      	add	r8, r4
		if (k == 0)
   bd342:	f1b9 0f00 	cmp.w	r9, #0
   bd346:	d10b      	bne.n	bd360 <_ZN17RHEncryptedDriver4recvEPhS0_+0x8c>
		    *len = buf[0]; // First byte contains length
   bd348:	7833      	ldrb	r3, [r6, #0]
   bd34a:	f88b 3000 	strb.w	r3, [fp]
		    memmove(buf, buf+1, blockSize - 1);
   bd34e:	ee18 2a10 	vmov	r2, s16
   bd352:	ee18 1a90 	vmov	r1, s17
   bd356:	4630      	mov	r0, r6
		    h--;	   // First block is of length--
   bd358:	f108 38ff 	add.w	r8, r8, #4294967295
		    memmove(buf, buf+1, blockSize - 1);
   bd35c:	f008 f83e 	bl	c53dc <memmove>
	    for (int k = 0; k < nbBlocks; k++)
   bd360:	f109 0901 	add.w	r9, r9, #1
   bd364:	4427      	add	r7, r4
   bd366:	e7e0      	b.n	bd32a <_ZN17RHEncryptedDriver4recvEPhS0_+0x56>
}
   bd368:	4650      	mov	r0, sl
   bd36a:	b003      	add	sp, #12
   bd36c:	ecbd 8b02 	vpop	{d8}
   bd370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd374 <_ZN17RHEncryptedDriver4sendEPKhh>:
{
   bd374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (len > maxMessageLength())
   bd378:	6803      	ldr	r3, [r0, #0]
   bd37a:	699b      	ldr	r3, [r3, #24]
{
   bd37c:	4616      	mov	r6, r2
   bd37e:	4604      	mov	r4, r0
   bd380:	468a      	mov	sl, r1
    if (len > maxMessageLength())
   bd382:	4798      	blx	r3
   bd384:	42b0      	cmp	r0, r6
   bd386:	d34f      	bcc.n	bd428 <_ZN17RHEncryptedDriver4sendEPKhh+0xb4>
    int blockSize = _blockcipher.blockSize(); // Size of blocks used by encryption
   bd388:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd38a:	6803      	ldr	r3, [r0, #0]
   bd38c:	689b      	ldr	r3, [r3, #8]
   bd38e:	4798      	blx	r3
   bd390:	4605      	mov	r5, r0
    if (len == 0) // PassThru
   bd392:	b946      	cbnz	r6, bd3a6 <_ZN17RHEncryptedDriver4sendEPKhh+0x32>
	return _driver.send(data, len);
   bd394:	6a20      	ldr	r0, [r4, #32]
   bd396:	6803      	ldr	r3, [r0, #0]
   bd398:	695b      	ldr	r3, [r3, #20]
   bd39a:	4632      	mov	r2, r6
   bd39c:	4651      	mov	r1, sl
}
   bd39e:	b003      	add	sp, #12
   bd3a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!_driver.send(_buffer, k*blockSize))  // We now send that message with it's new length
   bd3a4:	4718      	bx	r3
    if (_cipheringBlocks.blockSize != blockSize)
   bd3a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd3a8:	4298      	cmp	r0, r3
   bd3aa:	d005      	beq.n	bd3b8 <_ZN17RHEncryptedDriver4sendEPKhh+0x44>
	_cipheringBlocks.inputBlock = (uint8_t *)realloc(_cipheringBlocks.inputBlock, blockSize);
   bd3ac:	4601      	mov	r1, r0
   bd3ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   bd3b0:	f002 ffea 	bl	c0388 <realloc>
	_cipheringBlocks.blockSize = blockSize;	
   bd3b4:	e9c4 500a 	strd	r5, r0, [r4, #40]	; 0x28
    int max_message_length = maxMessageLength();
   bd3b8:	6823      	ldr	r3, [r4, #0]
   bd3ba:	4620      	mov	r0, r4
   bd3bc:	699b      	ldr	r3, [r3, #24]
   bd3be:	4798      	blx	r3
    uint8_t nbBpM = (max_message_length + 1) / blockSize; // Max number of blocks per message
   bd3c0:	f04f 0800 	mov.w	r8, #0
   bd3c4:	3001      	adds	r0, #1
   bd3c6:	fb90 f0f5 	sdiv	r0, r0, r5
    for (k = 0; k < nbBpM && k * blockSize < len + 1; k++)
   bd3ca:	b2c3      	uxtb	r3, r0
    int k = 0, j = 0; // k is block index, j is original message index
   bd3cc:	46c1      	mov	r9, r8
    for (k = 0; k < nbBpM && k * blockSize < len + 1; k++)
   bd3ce:	4647      	mov	r7, r8
   bd3d0:	9301      	str	r3, [sp, #4]
	int h = 0; // h is block content index
   bd3d2:	46c3      	mov	fp, r8
    for (k = 0; k < nbBpM && k * blockSize < len + 1; k++)
   bd3d4:	9b01      	ldr	r3, [sp, #4]
   bd3d6:	42bb      	cmp	r3, r7
   bd3d8:	dd1e      	ble.n	bd418 <_ZN17RHEncryptedDriver4sendEPKhh+0xa4>
   bd3da:	4546      	cmp	r6, r8
   bd3dc:	db1c      	blt.n	bd418 <_ZN17RHEncryptedDriver4sendEPKhh+0xa4>
	if (k == 0)
   bd3de:	b987      	cbnz	r7, bd402 <_ZN17RHEncryptedDriver4sendEPKhh+0x8e>
	    _cipheringBlocks.inputBlock[h++] = len; // put in first byte of first block the message length
   bd3e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd3e2:	701e      	strb	r6, [r3, #0]
   bd3e4:	2301      	movs	r3, #1
	while (h < blockSize)
   bd3e6:	429d      	cmp	r5, r3
		_cipheringBlocks.inputBlock[h++] = data[j++];
   bd3e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	while (h < blockSize)
   bd3ea:	dd0c      	ble.n	bd406 <_ZN17RHEncryptedDriver4sendEPKhh+0x92>
	    if (j < len)
   bd3ec:	454e      	cmp	r6, r9
		_cipheringBlocks.inputBlock[h++] = data[j++];
   bd3ee:	bfc5      	ittet	gt
   bd3f0:	f81a 1009 	ldrbgt.w	r1, [sl, r9]
   bd3f4:	54d1      	strbgt	r1, [r2, r3]
		_cipheringBlocks.inputBlock[h++] = 0; // Completing with trailing 0
   bd3f6:	f802 b003 	strble.w	fp, [r2, r3]
		_cipheringBlocks.inputBlock[h++] = data[j++];
   bd3fa:	f109 0901 	addgt.w	r9, r9, #1
		_cipheringBlocks.inputBlock[h++] = 0; // Completing with trailing 0
   bd3fe:	3301      	adds	r3, #1
   bd400:	e7f1      	b.n	bd3e6 <_ZN17RHEncryptedDriver4sendEPKhh+0x72>
	int h = 0; // h is block content index
   bd402:	2300      	movs	r3, #0
   bd404:	e7ef      	b.n	bd3e6 <_ZN17RHEncryptedDriver4sendEPKhh+0x72>
	_blockcipher.encryptBlock(&_buffer[k * blockSize], _cipheringBlocks.inputBlock); // Cipher that message into _buffer
   bd406:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd408:	6b21      	ldr	r1, [r4, #48]	; 0x30
   bd40a:	6803      	ldr	r3, [r0, #0]
   bd40c:	4441      	add	r1, r8
   bd40e:	695b      	ldr	r3, [r3, #20]
   bd410:	4798      	blx	r3
    for (k = 0; k < nbBpM && k * blockSize < len + 1; k++)
   bd412:	3701      	adds	r7, #1
   bd414:	44a8      	add	r8, r5
   bd416:	e7dd      	b.n	bd3d4 <_ZN17RHEncryptedDriver4sendEPKhh+0x60>
    if (!_driver.send(_buffer, k*blockSize))  // We now send that message with it's new length
   bd418:	6a20      	ldr	r0, [r4, #32]
   bd41a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   bd41c:	6803      	ldr	r3, [r0, #0]
   bd41e:	fb17 f205 	smulbb	r2, r7, r5
   bd422:	695b      	ldr	r3, [r3, #20]
   bd424:	b2d2      	uxtb	r2, r2
   bd426:	e7ba      	b.n	bd39e <_ZN17RHEncryptedDriver4sendEPKhh+0x2a>
}
   bd428:	2000      	movs	r0, #0
   bd42a:	b003      	add	sp, #12
   bd42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd430 <_ZN17RHEncryptedDriverC1ER15RHGenericDriverR11BlockCipher>:
RHEncryptedDriver::RHEncryptedDriver(RHGenericDriver& driver, BlockCipher& blockcipher)
   bd430:	b570      	push	{r4, r5, r6, lr}
   bd432:	4604      	mov	r4, r0
   bd434:	460d      	mov	r5, r1
   bd436:	4616      	mov	r6, r2
      _blockcipher(blockcipher)
   bd438:	f7fe ff40 	bl	bc2bc <_ZN15RHGenericDriverC1Ev>
   bd43c:	4b08      	ldr	r3, [pc, #32]	; (bd460 <_ZN17RHEncryptedDriverC1ER15RHGenericDriverR11BlockCipher+0x30>)
   bd43e:	6023      	str	r3, [r4, #0]
    typedef struct
    {
	size_t  blockSize    = 0;
	uint8_t *inputBlock  = NULL;
	//uint8_t *outputBlock = NULL;		
    } CipherBlocks;
   bd440:	2300      	movs	r3, #0
   bd442:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
   bd446:	e9c4 5608 	strd	r5, r6, [r4, #32]
    _buffer = (uint8_t *)calloc(_driver.maxMessageLength(), sizeof(uint8_t));
   bd44a:	682b      	ldr	r3, [r5, #0]
   bd44c:	4628      	mov	r0, r5
   bd44e:	699b      	ldr	r3, [r3, #24]
   bd450:	4798      	blx	r3
   bd452:	2101      	movs	r1, #1
   bd454:	f007 ff86 	bl	c5364 <calloc>
   bd458:	6320      	str	r0, [r4, #48]	; 0x30
}
   bd45a:	4620      	mov	r0, r4
   bd45c:	bd70      	pop	{r4, r5, r6, pc}
   bd45e:	bf00      	nop
   bd460:	000c81b0 	.word	0x000c81b0

000bd464 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   bd464:	b510      	push	{r4, lr}
   bd466:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   bd468:	6a00      	ldr	r0, [r0, #32]
   bd46a:	6803      	ldr	r3, [r0, #0]
   bd46c:	68db      	ldr	r3, [r3, #12]
   bd46e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   bd470:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   bd474:	28ff      	cmp	r0, #255	; 0xff
   bd476:	d002      	beq.n	bd47e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   bd478:	2101      	movs	r1, #1
   bd47a:	f006 f89b 	bl	c35b4 <pinMode>

    deselectSlave();
   bd47e:	6823      	ldr	r3, [r4, #0]
   bd480:	4620      	mov	r0, r4
   bd482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bd484:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   bd486:	2064      	movs	r0, #100	; 0x64
   bd488:	f004 fe60 	bl	c214c <delay>
#endif
    
    return true;
}
   bd48c:	2001      	movs	r0, #1
   bd48e:	bd10      	pop	{r4, pc}

000bd490 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   bd490:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bd494:	2100      	movs	r1, #0
   bd496:	f006 b89e 	b.w	c35d6 <digitalWrite>

000bd49a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   bd49a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bd49e:	2101      	movs	r1, #1
   bd4a0:	f006 b899 	b.w	c35d6 <digitalWrite>

000bd4a4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   bd4a4:	b570      	push	{r4, r5, r6, lr}
   bd4a6:	4604      	mov	r4, r0
   bd4a8:	460d      	mov	r5, r1
   bd4aa:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   bd4ac:	f7fe ff06 	bl	bc2bc <_ZN15RHGenericDriverC1Ev>
   bd4b0:	4b03      	ldr	r3, [pc, #12]	; (bd4c0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   bd4b2:	6023      	str	r3, [r4, #0]
   bd4b4:	6226      	str	r6, [r4, #32]
   bd4b6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   bd4ba:	4620      	mov	r0, r4
   bd4bc:	bd70      	pop	{r4, r5, r6, pc}
   bd4be:	bf00      	nop
   bd4c0:	000c8234 	.word	0x000c8234

000bd4c4 <_ZN11RHSPIDriver7spiReadEh>:
{
   bd4c4:	b538      	push	{r3, r4, r5, lr}
   bd4c6:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bd4c8:	6a00      	ldr	r0, [r0, #32]
   bd4ca:	6803      	ldr	r3, [r0, #0]
   bd4cc:	6a1b      	ldr	r3, [r3, #32]
{
   bd4ce:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bd4d0:	4798      	blx	r3
    selectSlave();
   bd4d2:	6823      	ldr	r3, [r4, #0]
   bd4d4:	4620      	mov	r0, r4
   bd4d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bd4d8:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   bd4da:	6a20      	ldr	r0, [r4, #32]
   bd4dc:	6803      	ldr	r3, [r0, #0]
   bd4de:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   bd4e2:	681b      	ldr	r3, [r3, #0]
   bd4e4:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bd4e6:	6a20      	ldr	r0, [r4, #32]
   bd4e8:	6803      	ldr	r3, [r0, #0]
   bd4ea:	2100      	movs	r1, #0
   bd4ec:	681b      	ldr	r3, [r3, #0]
   bd4ee:	4798      	blx	r3
    deselectSlave();
   bd4f0:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bd4f2:	4605      	mov	r5, r0
    deselectSlave();
   bd4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bd4f6:	4620      	mov	r0, r4
   bd4f8:	4798      	blx	r3
    _spi.endTransaction();
   bd4fa:	6a20      	ldr	r0, [r4, #32]
   bd4fc:	6803      	ldr	r3, [r0, #0]
   bd4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd500:	4798      	blx	r3
}
   bd502:	4628      	mov	r0, r5
   bd504:	bd38      	pop	{r3, r4, r5, pc}

000bd506 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   bd506:	b570      	push	{r4, r5, r6, lr}
   bd508:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bd50a:	6a00      	ldr	r0, [r0, #32]
   bd50c:	6803      	ldr	r3, [r0, #0]
   bd50e:	6a1b      	ldr	r3, [r3, #32]
{
   bd510:	4616      	mov	r6, r2
   bd512:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bd514:	4798      	blx	r3
    selectSlave();
   bd516:	6823      	ldr	r3, [r4, #0]
   bd518:	4620      	mov	r0, r4
   bd51a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bd51c:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   bd51e:	6a20      	ldr	r0, [r4, #32]
   bd520:	6803      	ldr	r3, [r0, #0]
   bd522:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bd526:	681b      	ldr	r3, [r3, #0]
   bd528:	4798      	blx	r3
   bd52a:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   bd52c:	6a20      	ldr	r0, [r4, #32]
   bd52e:	6803      	ldr	r3, [r0, #0]
   bd530:	4631      	mov	r1, r6
   bd532:	681b      	ldr	r3, [r3, #0]
   bd534:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bd536:	2001      	movs	r0, #1
   bd538:	f002 fb5e 	bl	bfbf8 <HAL_Delay_Microseconds>
    deselectSlave();
   bd53c:	6823      	ldr	r3, [r4, #0]
   bd53e:	4620      	mov	r0, r4
   bd540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bd542:	4798      	blx	r3
    _spi.endTransaction();
   bd544:	6a20      	ldr	r0, [r4, #32]
   bd546:	6803      	ldr	r3, [r0, #0]
   bd548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd54a:	4798      	blx	r3
}
   bd54c:	4628      	mov	r0, r5
   bd54e:	bd70      	pop	{r4, r5, r6, pc}

000bd550 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   bd550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd552:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bd554:	6a00      	ldr	r0, [r0, #32]
{
   bd556:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bd558:	6803      	ldr	r3, [r0, #0]
   bd55a:	6a1b      	ldr	r3, [r3, #32]
{
   bd55c:	460f      	mov	r7, r1
   bd55e:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bd560:	4798      	blx	r3
    selectSlave();
   bd562:	6823      	ldr	r3, [r4, #0]
   bd564:	4620      	mov	r0, r4
   bd566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bd568:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   bd56a:	6a20      	ldr	r0, [r4, #32]
   bd56c:	6803      	ldr	r3, [r0, #0]
   bd56e:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   bd572:	681b      	ldr	r3, [r3, #0]
   bd574:	4798      	blx	r3
   bd576:	442e      	add	r6, r5
   bd578:	4607      	mov	r7, r0
    while (len--)
   bd57a:	42b5      	cmp	r5, r6
   bd57c:	d007      	beq.n	bd58e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   bd57e:	6a20      	ldr	r0, [r4, #32]
   bd580:	6803      	ldr	r3, [r0, #0]
   bd582:	2100      	movs	r1, #0
   bd584:	681b      	ldr	r3, [r3, #0]
   bd586:	4798      	blx	r3
   bd588:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   bd58c:	e7f5      	b.n	bd57a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   bd58e:	6823      	ldr	r3, [r4, #0]
   bd590:	4620      	mov	r0, r4
   bd592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bd594:	4798      	blx	r3
    _spi.endTransaction();
   bd596:	6a20      	ldr	r0, [r4, #32]
   bd598:	6803      	ldr	r3, [r0, #0]
   bd59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd59c:	4798      	blx	r3
}
   bd59e:	4638      	mov	r0, r7
   bd5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd5a2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   bd5a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd5a4:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bd5a6:	6a00      	ldr	r0, [r0, #32]
{
   bd5a8:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bd5aa:	6803      	ldr	r3, [r0, #0]
   bd5ac:	6a1b      	ldr	r3, [r3, #32]
{
   bd5ae:	460f      	mov	r7, r1
   bd5b0:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bd5b2:	4798      	blx	r3
    selectSlave();
   bd5b4:	6823      	ldr	r3, [r4, #0]
   bd5b6:	4620      	mov	r0, r4
   bd5b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bd5ba:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   bd5bc:	6a20      	ldr	r0, [r4, #32]
   bd5be:	6803      	ldr	r3, [r0, #0]
   bd5c0:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   bd5c4:	681b      	ldr	r3, [r3, #0]
   bd5c6:	4798      	blx	r3
   bd5c8:	442e      	add	r6, r5
   bd5ca:	4607      	mov	r7, r0
    while (len--)
   bd5cc:	42b5      	cmp	r5, r6
   bd5ce:	d006      	beq.n	bd5de <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   bd5d0:	6a20      	ldr	r0, [r4, #32]
   bd5d2:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd5d6:	6803      	ldr	r3, [r0, #0]
   bd5d8:	681b      	ldr	r3, [r3, #0]
   bd5da:	4798      	blx	r3
    while (len--)
   bd5dc:	e7f6      	b.n	bd5cc <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   bd5de:	6823      	ldr	r3, [r4, #0]
   bd5e0:	4620      	mov	r0, r4
   bd5e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bd5e4:	4798      	blx	r3
    _spi.endTransaction();
   bd5e6:	6a20      	ldr	r0, [r4, #32]
   bd5e8:	6803      	ldr	r3, [r0, #0]
   bd5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd5ec:	4798      	blx	r3
}
   bd5ee:	4638      	mov	r0, r7
   bd5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd5f2 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bd5f2:	6a00      	ldr	r0, [r0, #32]
   bd5f4:	6803      	ldr	r3, [r0, #0]
   bd5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd5f8:	4718      	bx	r3

000bd5fa <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   bd5fa:	2a01      	cmp	r2, #1
   bd5fc:	d105      	bne.n	bd60a <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   bd5fe:	7a00      	ldrb	r0, [r0, #8]
   bd600:	780b      	ldrb	r3, [r1, #0]
   bd602:	1a1b      	subs	r3, r3, r0
   bd604:	4258      	negs	r0, r3
   bd606:	4158      	adcs	r0, r3
   bd608:	4770      	bx	lr
   bd60a:	2000      	movs	r0, #0
}
   bd60c:	4770      	bx	lr
	...

000bd610 <_ZN6RHMesh5doArpEh>:
{
   bd610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bd614:	4c25      	ldr	r4, [pc, #148]	; (bd6ac <_ZN6RHMesh5doArpEh+0x9c>)
   bd616:	2301      	movs	r3, #1
{
   bd618:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bd61a:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   bd61c:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bd61e:	2300      	movs	r3, #0
{
   bd620:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   bd622:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bd624:	9300      	str	r3, [sp, #0]
   bd626:	2203      	movs	r2, #3
   bd628:	23ff      	movs	r3, #255	; 0xff
   bd62a:	4621      	mov	r1, r4
{
   bd62c:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bd62e:	f7ff f825 	bl	bc67c <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   bd632:	b120      	cbz	r0, bd63e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   bd634:	2500      	movs	r5, #0
}
   bd636:	4628      	mov	r0, r5
   bd638:	b006      	add	sp, #24
   bd63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   bd63e:	23fa      	movs	r3, #250	; 0xfa
   bd640:	f88d 3017 	strb.w	r3, [sp, #23]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bd644:	f002 fae0 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   bd648:	f106 0904 	add.w	r9, r6, #4
   bd64c:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   bd64e:	f208 55dc 	addw	r5, r8, #1500	; 0x5dc
   bd652:	f002 fad9 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
   bd656:	1a29      	subs	r1, r5, r0
   bd658:	2900      	cmp	r1, #0
   bd65a:	ddeb      	ble.n	bd634 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   bd65c:	2200      	movs	r2, #0
   bd65e:	b289      	uxth	r1, r1
   bd660:	4648      	mov	r0, r9
   bd662:	f7ff f8ae 	bl	bc7c2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bd666:	2800      	cmp	r0, #0
   bd668:	d0f3      	beq.n	bd652 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   bd66a:	2300      	movs	r3, #0
   bd66c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   bd670:	e9cd 3300 	strd	r3, r3, [sp]
   bd674:	f10d 0217 	add.w	r2, sp, #23
   bd678:	4621      	mov	r1, r4
   bd67a:	4630      	mov	r0, r6
   bd67c:	f7ff f808 	bl	bc690 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bd680:	4605      	mov	r5, r0
   bd682:	2800      	cmp	r0, #0
   bd684:	d0e3      	beq.n	bd64e <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   bd686:	f89d 3017 	ldrb.w	r3, [sp, #23]
   bd68a:	2b01      	cmp	r3, #1
   bd68c:	d9df      	bls.n	bd64e <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bd68e:	f894 a000 	ldrb.w	sl, [r4]
   bd692:	f1ba 0f02 	cmp.w	sl, #2
   bd696:	d1da      	bne.n	bd64e <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   bd698:	4648      	mov	r0, r9
   bd69a:	f7ff f8d7 	bl	bc84c <_ZN10RHDatagram10headerFromEv>
   bd69e:	4653      	mov	r3, sl
   bd6a0:	4602      	mov	r2, r0
   bd6a2:	4639      	mov	r1, r7
   bd6a4:	4630      	mov	r0, r6
   bd6a6:	f7fe ff61 	bl	bc56c <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   bd6aa:	e7c4      	b.n	bd636 <_ZN6RHMesh5doArpEh+0x26>
   bd6ac:	2003b588 	.word	0x2003b588

000bd6b0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   bd6b0:	2a01      	cmp	r2, #1
{
   bd6b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bd6b6:	4607      	mov	r7, r0
   bd6b8:	460e      	mov	r6, r1
   bd6ba:	4614      	mov	r4, r2
    if (   messageLen > 1 
   bd6bc:	d93b      	bls.n	bd736 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bd6be:	794d      	ldrb	r5, [r1, #5]
   bd6c0:	2d02      	cmp	r5, #2
   bd6c2:	d130      	bne.n	bd726 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   bd6c4:	f100 0804 	add.w	r8, r0, #4
   bd6c8:	79c9      	ldrb	r1, [r1, #7]
   bd6ca:	9101      	str	r1, [sp, #4]
   bd6cc:	4640      	mov	r0, r8
   bd6ce:	f7ff f8bd 	bl	bc84c <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bd6d2:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   bd6d4:	462b      	mov	r3, r5
   bd6d6:	4602      	mov	r2, r0
   bd6d8:	9901      	ldr	r1, [sp, #4]
   bd6da:	4638      	mov	r0, r7
   bd6dc:	f7fe ff46 	bl	bc56c <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bd6e0:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   bd6e2:	f106 0308 	add.w	r3, r6, #8
   bd6e6:	2400      	movs	r4, #0
   bd6e8:	4622      	mov	r2, r4
   bd6ea:	4295      	cmp	r5, r2
   bd6ec:	f104 0401 	add.w	r4, r4, #1
   bd6f0:	b2e4      	uxtb	r4, r4
   bd6f2:	d904      	bls.n	bd6fe <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   bd6f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd6f8:	7a39      	ldrb	r1, [r7, #8]
   bd6fa:	4291      	cmp	r1, r2
   bd6fc:	d1f4      	bne.n	bd6e8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   bd6fe:	f104 0108 	add.w	r1, r4, #8
   bd702:	440e      	add	r6, r1
	while (i < numRoutes)
   bd704:	42a5      	cmp	r5, r4
   bd706:	d916      	bls.n	bd736 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   bd708:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd70c:	9101      	str	r1, [sp, #4]
   bd70e:	4640      	mov	r0, r8
   bd710:	f7ff f89c 	bl	bc84c <_ZN10RHDatagram10headerFromEv>
   bd714:	3401      	adds	r4, #1
   bd716:	4602      	mov	r2, r0
   bd718:	9901      	ldr	r1, [sp, #4]
   bd71a:	2302      	movs	r3, #2
   bd71c:	4638      	mov	r0, r7
   bd71e:	b2e4      	uxtb	r4, r4
   bd720:	f7fe ff24 	bl	bc56c <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   bd724:	e7ee      	b.n	bd704 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   bd726:	2d03      	cmp	r5, #3
   bd728:	d105      	bne.n	bd736 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   bd72a:	7989      	ldrb	r1, [r1, #6]
}
   bd72c:	b002      	add	sp, #8
   bd72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   bd732:	f7fe bf04 	b.w	bc53e <_ZN8RHRouter13deleteRouteToEh>
}
   bd736:	b002      	add	sp, #8
   bd738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd73c <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   bd73c:	b510      	push	{r4, lr}
   bd73e:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   bd740:	f7fe ff54 	bl	bc5ec <_ZN8RHRouterC1ER15RHGenericDriverh>
   bd744:	4b01      	ldr	r3, [pc, #4]	; (bd74c <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   bd746:	6023      	str	r3, [r4, #0]
}
   bd748:	4620      	mov	r0, r4
   bd74a:	bd10      	pop	{r4, pc}
   bd74c:	000c82bc 	.word	0x000c82bc

000bd750 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   bd750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd754:	4614      	mov	r4, r2
   bd756:	f89d 7020 	ldrb.w	r7, [sp, #32]
   bd75a:	4605      	mov	r5, r0
   bd75c:	4688      	mov	r8, r1
   bd75e:	461e      	mov	r6, r3
   bd760:	f002 fa52 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   bd764:	2cf9      	cmp	r4, #249	; 0xf9
   bd766:	4681      	mov	r9, r0
   bd768:	d839      	bhi.n	bd7de <_ZN6RHMesh10sendtoWaitEPhhhh+0x8e>
    if (address != RH_BROADCAST_ADDRESS)
   bd76a:	2eff      	cmp	r6, #255	; 0xff
   bd76c:	d125      	bne.n	bd7ba <_ZN6RHMesh10sendtoWaitEPhhhh+0x6a>
   bd76e:	f002 fa4b 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
	if (buf[len-1] + meshRouteDiscovertDelay >= 255){
   bd772:	1e63      	subs	r3, r4, #1
	uint16_t meshRouteDiscovertDelay = (millis() - Strt_millis)/10;
   bd774:	220a      	movs	r2, #10
   bd776:	eba0 0009 	sub.w	r0, r0, r9
   bd77a:	fbb0 f0f2 	udiv	r0, r0, r2
	if (buf[len-1] + meshRouteDiscovertDelay >= 255){
   bd77e:	f818 2003 	ldrb.w	r2, [r8, r3]
   bd782:	fa12 f180 	uxtah	r1, r2, r0
   bd786:	29fe      	cmp	r1, #254	; 0xfe
   bd788:	dc27      	bgt.n	bd7da <_ZN6RHMesh10sendtoWaitEPhhhh+0x8a>
		buf[len-1] = buf[len-1] + meshRouteDiscovertDelay;
   bd78a:	4402      	add	r2, r0
   bd78c:	b2d2      	uxtb	r2, r2
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bd78e:	f8df 9054 	ldr.w	r9, [pc, #84]	; bd7e4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x94>
   bd792:	f808 2003 	strb.w	r2, [r8, r3]
   bd796:	4648      	mov	r0, r9
   bd798:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   bd79a:	4622      	mov	r2, r4
   bd79c:	4641      	mov	r1, r8
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bd79e:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   bd7a2:	f007 fe0d 	bl	c53c0 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bd7a6:	1c62      	adds	r2, r4, #1
   bd7a8:	9708      	str	r7, [sp, #32]
   bd7aa:	4633      	mov	r3, r6
   bd7ac:	4649      	mov	r1, r9
   bd7ae:	4628      	mov	r0, r5
   bd7b0:	b2d2      	uxtb	r2, r2
}
   bd7b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bd7b6:	f7fe bf61 	b.w	bc67c <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   bd7ba:	4631      	mov	r1, r6
   bd7bc:	4628      	mov	r0, r5
   bd7be:	f7fe fe7a 	bl	bc4b6 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   bd7c2:	2800      	cmp	r0, #0
   bd7c4:	d1d3      	bne.n	bd76e <_ZN6RHMesh10sendtoWaitEPhhhh+0x1e>
   bd7c6:	682b      	ldr	r3, [r5, #0]
   bd7c8:	4631      	mov	r1, r6
   bd7ca:	689b      	ldr	r3, [r3, #8]
   bd7cc:	4628      	mov	r0, r5
   bd7ce:	4798      	blx	r3
   bd7d0:	2800      	cmp	r0, #0
   bd7d2:	d1cc      	bne.n	bd76e <_ZN6RHMesh10sendtoWaitEPhhhh+0x1e>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bd7d4:	2002      	movs	r0, #2
}
   bd7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf[len-1] = 255;
   bd7da:	22ff      	movs	r2, #255	; 0xff
   bd7dc:	e7d7      	b.n	bd78e <_ZN6RHMesh10sendtoWaitEPhhhh+0x3e>
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   bd7de:	2001      	movs	r0, #1
   bd7e0:	e7f9      	b.n	bd7d6 <_ZN6RHMesh10sendtoWaitEPhhhh+0x86>
   bd7e2:	bf00      	nop
   bd7e4:	2003b588 	.word	0x2003b588

000bd7e8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   bd7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd7ec:	b089      	sub	sp, #36	; 0x24
   bd7ee:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bd7f0:	23fa      	movs	r3, #250	; 0xfa
   bd7f2:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bd7f6:	f10d 031f 	add.w	r3, sp, #31
   bd7fa:	9303      	str	r3, [sp, #12]
   bd7fc:	f10d 031e 	add.w	r3, sp, #30
   bd800:	9302      	str	r3, [sp, #8]
   bd802:	4e5d      	ldr	r6, [pc, #372]	; (bd978 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bd804:	f10d 031d 	add.w	r3, sp, #29
   bd808:	9301      	str	r3, [sp, #4]
   bd80a:	ab07      	add	r3, sp, #28
   bd80c:	9300      	str	r3, [sp, #0]
{     
   bd80e:	4689      	mov	r9, r1
   bd810:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bd812:	f10d 031b 	add.w	r3, sp, #27
   bd816:	f10d 021a 	add.w	r2, sp, #26
   bd81a:	4631      	mov	r1, r6
{     
   bd81c:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   bd820:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bd822:	f7fe ff35 	bl	bc690 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bd826:	4604      	mov	r4, r0
   bd828:	b920      	cbnz	r0, bd834 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   bd82a:	2400      	movs	r4, #0
}
   bd82c:	4620      	mov	r0, r4
   bd82e:	b009      	add	sp, #36	; 0x24
   bd830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   bd834:	f89d 301a 	ldrb.w	r3, [sp, #26]
   bd838:	b373      	cbz	r3, bd898 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   bd83a:	7832      	ldrb	r2, [r6, #0]
   bd83c:	bb62      	cbnz	r2, bd898 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   bd83e:	f1b8 0f00 	cmp.w	r8, #0
   bd842:	d003      	beq.n	bd84c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   bd844:	f89d 201b 	ldrb.w	r2, [sp, #27]
   bd848:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   bd84c:	f1bb 0f00 	cmp.w	fp, #0
   bd850:	d003      	beq.n	bd85a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   bd852:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bd856:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   bd85a:	f1ba 0f00 	cmp.w	sl, #0
   bd85e:	d003      	beq.n	bd868 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   bd860:	f89d 201d 	ldrb.w	r2, [sp, #29]
   bd864:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   bd868:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd86a:	b11a      	cbz	r2, bd874 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   bd86c:	9914      	ldr	r1, [sp, #80]	; 0x50
   bd86e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   bd872:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   bd874:	9a15      	ldr	r2, [sp, #84]	; 0x54
   bd876:	b11a      	cbz	r2, bd880 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   bd878:	9915      	ldr	r1, [sp, #84]	; 0x54
   bd87a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bd87e:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   bd880:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   bd882:	493e      	ldr	r1, [pc, #248]	; (bd97c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   bd884:	3b01      	subs	r3, #1
   bd886:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bd888:	429a      	cmp	r2, r3
		*len = msgLen;
   bd88a:	bf88      	it	hi
   bd88c:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   bd88e:	783a      	ldrb	r2, [r7, #0]
   bd890:	4648      	mov	r0, r9
   bd892:	f007 fd95 	bl	c53c0 <memcpy>
	    return true;
   bd896:	e7c9      	b.n	bd82c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   bd898:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bd89c:	2aff      	cmp	r2, #255	; 0xff
   bd89e:	d1c4      	bne.n	bd82a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   bd8a0:	2b01      	cmp	r3, #1
   bd8a2:	d9c2      	bls.n	bd82a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   bd8a4:	7832      	ldrb	r2, [r6, #0]
   bd8a6:	2a01      	cmp	r2, #1
   bd8a8:	d1bf      	bne.n	bd82a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   bd8aa:	7a2a      	ldrb	r2, [r5, #8]
   bd8ac:	f89d 401b 	ldrb.w	r4, [sp, #27]
   bd8b0:	42a2      	cmp	r2, r4
   bd8b2:	d0ba      	beq.n	bd82a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   bd8b4:	1edf      	subs	r7, r3, #3
   bd8b6:	4932      	ldr	r1, [pc, #200]	; (bd980 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   bd8b8:	b2ff      	uxtb	r7, r7
   bd8ba:	2300      	movs	r3, #0
   bd8bc:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   bd8c0:	4547      	cmp	r7, r8
   bd8c2:	d906      	bls.n	bd8d2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   bd8c4:	f811 0b01 	ldrb.w	r0, [r1], #1
   bd8c8:	4282      	cmp	r2, r0
   bd8ca:	f103 0301 	add.w	r3, r3, #1
   bd8ce:	d1f5      	bne.n	bd8bc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   bd8d0:	e7ab      	b.n	bd82a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   bd8d2:	f105 0904 	add.w	r9, r5, #4
   bd8d6:	4648      	mov	r0, r9
   bd8d8:	f7fe ffb8 	bl	bc84c <_ZN10RHDatagram10headerFromEv>
   bd8dc:	2302      	movs	r3, #2
   bd8de:	4602      	mov	r2, r0
   bd8e0:	4621      	mov	r1, r4
   bd8e2:	4628      	mov	r0, r5
   bd8e4:	f7fe fe42 	bl	bc56c <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   bd8e8:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bd8ec:	b193      	cbz	r3, bd914 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   bd8ee:	4c22      	ldr	r4, [pc, #136]	; (bd978 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   bd8f0:	1ba3      	subs	r3, r4, r6
   bd8f2:	b2db      	uxtb	r3, r3
   bd8f4:	429f      	cmp	r7, r3
   bd8f6:	d90c      	bls.n	bd912 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   bd8f8:	78e1      	ldrb	r1, [r4, #3]
   bd8fa:	9105      	str	r1, [sp, #20]
   bd8fc:	4648      	mov	r0, r9
   bd8fe:	f7fe ffa5 	bl	bc84c <_ZN10RHDatagram10headerFromEv>
   bd902:	9905      	ldr	r1, [sp, #20]
   bd904:	4602      	mov	r2, r0
   bd906:	2302      	movs	r3, #2
   bd908:	4628      	mov	r0, r5
   bd90a:	f7fe fe2f 	bl	bc56c <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   bd90e:	3401      	adds	r4, #1
   bd910:	e7ee      	b.n	bd8f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   bd912:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   bd914:	682b      	ldr	r3, [r5, #0]
   bd916:	7872      	ldrb	r2, [r6, #1]
   bd918:	68db      	ldr	r3, [r3, #12]
   bd91a:	491a      	ldr	r1, [pc, #104]	; (bd984 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   bd91c:	4628      	mov	r0, r5
   bd91e:	4798      	blx	r3
   bd920:	4604      	mov	r4, r0
   bd922:	b160      	cbz	r0, bd93e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bd924:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bd926:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bd928:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bd92a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   bd92e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bd932:	4911      	ldr	r1, [pc, #68]	; (bd978 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bd934:	9400      	str	r4, [sp, #0]
   bd936:	4628      	mov	r0, r5
   bd938:	f7fe fea0 	bl	bc67c <_ZN8RHRouter10sendtoWaitEPhhhh>
   bd93c:	e776      	b.n	bd82c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   bd93e:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   bd942:	4543      	cmp	r3, r8
   bd944:	f67f af71 	bls.w	bd82a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   bd948:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bd94c:	2b00      	cmp	r3, #0
   bd94e:	f43f af6c 	beq.w	bd82a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   bd952:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   bd956:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bd958:	4907      	ldr	r1, [pc, #28]	; (bd978 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   bd95a:	443e      	add	r6, r7
		tmpMessageLen++;
   bd95c:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   bd95e:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bd960:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bd964:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   bd966:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bd968:	9300      	str	r3, [sp, #0]
   bd96a:	4628      	mov	r0, r5
   bd96c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   bd96e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bd972:	f7fe fe4d 	bl	bc610 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   bd976:	e759      	b.n	bd82c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   bd978:	2003b588 	.word	0x2003b588
   bd97c:	2003b589 	.word	0x2003b589
   bd980:	2003b58b 	.word	0x2003b58b
   bd984:	2003b58a 	.word	0x2003b58a

000bd988 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   bd988:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd98a:	b085      	sub	sp, #20
   bd98c:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bd98e:	3004      	adds	r0, #4
{
   bd990:	460e      	mov	r6, r1
   bd992:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bd994:	f7fe ff5a 	bl	bc84c <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   bd998:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bd99a:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   bd99c:	4631      	mov	r1, r6
   bd99e:	4628      	mov	r0, r5
   bd9a0:	f7fe fda0 	bl	bc4e4 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bd9a4:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   bd9a6:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bd9a8:	d001      	beq.n	bd9ae <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   bd9aa:	2805      	cmp	r0, #5
   bd9ac:	d11b      	bne.n	bd9e6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   bd9ae:	7831      	ldrb	r1, [r6, #0]
   bd9b0:	4628      	mov	r0, r5
   bd9b2:	f7fe fdc4 	bl	bc53e <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   bd9b6:	7872      	ldrb	r2, [r6, #1]
   bd9b8:	7a2b      	ldrb	r3, [r5, #8]
   bd9ba:	429a      	cmp	r2, r3
   bd9bc:	d013      	beq.n	bd9e6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   bd9be:	4c0b      	ldr	r4, [pc, #44]	; (bd9ec <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   bd9c0:	2303      	movs	r3, #3
   bd9c2:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   bd9c4:	7833      	ldrb	r3, [r6, #0]
   bd9c6:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   bd9c8:	7871      	ldrb	r1, [r6, #1]
   bd9ca:	2302      	movs	r3, #2
   bd9cc:	463a      	mov	r2, r7
   bd9ce:	4628      	mov	r0, r5
   bd9d0:	f7fe fdcc 	bl	bc56c <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   bd9d4:	2300      	movs	r3, #0
   bd9d6:	9300      	str	r3, [sp, #0]
   bd9d8:	4621      	mov	r1, r4
   bd9da:	7873      	ldrb	r3, [r6, #1]
   bd9dc:	2202      	movs	r2, #2
   bd9de:	4628      	mov	r0, r5
   bd9e0:	f7fe fe4c 	bl	bc67c <_ZN8RHRouter10sendtoWaitEPhhhh>
   bd9e4:	4604      	mov	r4, r0
}
   bd9e6:	4620      	mov	r0, r4
   bd9e8:	b005      	add	sp, #20
   bd9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bd9ec:	2003b588 	.word	0x2003b588

000bd9f0 <_ZN14Room_OccupancyD1Ev>:

Room_Occupancy::Room_Occupancy() {
}

Room_Occupancy::~Room_Occupancy() {
}
   bd9f0:	4770      	bx	lr

000bd9f2 <_ZN14Room_OccupancyD0Ev>:
Room_Occupancy::~Room_Occupancy() {
   bd9f2:	b510      	push	{r4, lr}
}
   bd9f4:	2104      	movs	r1, #4
Room_Occupancy::~Room_Occupancy() {
   bd9f6:	4604      	mov	r4, r0
}
   bd9f8:	f7f6 fb51 	bl	b409e <_ZdlPvj>
   bd9fc:	4620      	mov	r0, r4
   bd9fe:	bd10      	pop	{r4, pc}

000bda00 <_ZN14Room_Occupancy8instanceEv>:
Room_Occupancy &Room_Occupancy::instance() {
   bda00:	b510      	push	{r4, lr}
  if (!_instance) {
   bda02:	4c06      	ldr	r4, [pc, #24]	; (bda1c <_ZN14Room_Occupancy8instanceEv+0x1c>)
   bda04:	6823      	ldr	r3, [r4, #0]
   bda06:	b933      	cbnz	r3, bda16 <_ZN14Room_Occupancy8instanceEv+0x16>
    _instance = new Room_Occupancy();
   bda08:	2004      	movs	r0, #4
   bda0a:	f7f6 fb44 	bl	b4096 <_Znwj>
   bda0e:	b108      	cbz	r0, bda14 <_ZN14Room_Occupancy8instanceEv+0x14>
Room_Occupancy::Room_Occupancy() {
   bda10:	4b03      	ldr	r3, [pc, #12]	; (bda20 <_ZN14Room_Occupancy8instanceEv+0x20>)
   bda12:	6003      	str	r3, [r0, #0]
    _instance = new Room_Occupancy();
   bda14:	6020      	str	r0, [r4, #0]
}
   bda16:	6820      	ldr	r0, [r4, #0]
   bda18:	bd10      	pop	{r4, pc}
   bda1a:	bf00      	nop
   bda1c:	2003b684 	.word	0x2003b684
   bda20:	000c82d4 	.word	0x000c82d4

000bda24 <_ZN14Room_Occupancy14resetAllCountsEv>:

void Room_Occupancy::loop() {
  // Put your code to run during the application thread loop here
}

bool Room_Occupancy::resetAllCounts() {
   bda24:	b508      	push	{r3, lr}
  return JsonDataManager::instance().resetOccupancyCounts();                                                       
   bda26:	f000 f871 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
}
   bda2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return JsonDataManager::instance().resetOccupancyCounts();                                                       
   bda2e:	f001 bad7 	b.w	befe0 <_ZN15JsonDataManager20resetOccupancyCountsEv>

000bda32 <_ZN14Room_Occupancy14resetNetCountsEv>:

bool Room_Occupancy::resetNetCounts() {
   bda32:	b508      	push	{r3, lr}
  return JsonDataManager::instance().resetOccupancyNetCounts();                                                       
   bda34:	f000 f86a 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
}
   bda38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return JsonDataManager::instance().resetOccupancyNetCounts();                                                       
   bda3c:	f001 b960 	b.w	bed00 <_ZN15JsonDataManager23resetOccupancyNetCountsEv>

000bda40 <_ZN14Room_Occupancy22setOccupancyNetForNodeEii>:

bool Room_Occupancy::setOccupancyNetForNode(int nodeNumber, int newOccupancyNet) {
   bda40:	b507      	push	{r0, r1, r2, lr}
   bda42:	e9cd 2100 	strd	r2, r1, [sp]
  return JsonDataManager::instance().setOccupancyNetForNode(nodeNumber, newOccupancyNet);                                                       
   bda46:	f000 f861 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bda4a:	e9dd 2100 	ldrd	r2, r1, [sp]
}
   bda4e:	b003      	add	sp, #12
   bda50:	f85d eb04 	ldr.w	lr, [sp], #4
  return JsonDataManager::instance().setOccupancyNetForNode(nodeNumber, newOccupancyNet);                                                       
   bda54:	f001 b94a 	b.w	becec <_ZN15JsonDataManager22setOccupancyNetForNodeEii>

000bda58 <_ZN14Room_Occupancy10getRoomNetEi>:

int Room_Occupancy::getRoomNet(int space) {
   bda58:	b507      	push	{r0, r1, r2, lr}
   bda5a:	9101      	str	r1, [sp, #4]
  return JsonDataManager::instance().getOccupancyNetBySpace(space);                                                       
   bda5c:	f000 f856 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bda60:	9901      	ldr	r1, [sp, #4]
   bda62:	f001 fd59 	bl	bf518 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi>
}
   bda66:	b003      	add	sp, #12
   bda68:	f85d fb04 	ldr.w	pc, [sp], #4

000bda6c <_ZN14Room_Occupancy12getRoomGrossEi>:

int Room_Occupancy::getRoomGross(int space) {
   bda6c:	b507      	push	{r0, r1, r2, lr}
   bda6e:	9101      	str	r1, [sp, #4]
  return JsonDataManager::instance().getOccupancyGrossBySpace(space);                                                                 
   bda70:	f000 f84c 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bda74:	9901      	ldr	r1, [sp, #4]
   bda76:	f000 fbe5 	bl	be244 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi>
   bda7a:	b003      	add	sp, #12
   bda7c:	f85d fb04 	ldr.w	pc, [sp], #4

000bda80 <_ZN15JsonDataManagerD1Ev>:

JsonDataManager::JsonDataManager() {
}

JsonDataManager::~JsonDataManager() {
}
   bda80:	4770      	bx	lr

000bda82 <_ZN15JsonDataManagerD0Ev>:
JsonDataManager::~JsonDataManager() {
   bda82:	b510      	push	{r4, lr}
}
   bda84:	2104      	movs	r1, #4
JsonDataManager::~JsonDataManager() {
   bda86:	4604      	mov	r4, r0
}
   bda88:	f7f6 fb09 	bl	b409e <_ZdlPvj>
   bda8c:	4620      	mov	r0, r4
   bda8e:	bd10      	pop	{r4, pc}

000bda90 <_ZN16JsonParserStaticILj3072ELj550EED1Ev>:
class JsonParserStatic : public JsonParser {
   bda90:	b510      	push	{r4, lr}
   bda92:	4b03      	ldr	r3, [pc, #12]	; (bdaa0 <_ZN16JsonParserStaticILj3072ELj550EED1Ev+0x10>)
   bda94:	6003      	str	r3, [r0, #0]
   bda96:	4604      	mov	r4, r0
   bda98:	f7fb fd4a 	bl	b9530 <_ZN10JsonParserD1Ev>
   bda9c:	4620      	mov	r0, r4
   bda9e:	bd10      	pop	{r4, pc}
   bdaa0:	000c91a8 	.word	0x000c91a8

000bdaa4 <_ZN16JsonParserStaticILj3072ELj550EED0Ev>:
   bdaa4:	b510      	push	{r4, lr}
   bdaa6:	4604      	mov	r4, r0
   bdaa8:	f7ff fff2 	bl	bda90 <_ZN16JsonParserStaticILj3072ELj550EED1Ev>
   bdaac:	4620      	mov	r0, r4
   bdaae:	f642 618c 	movw	r1, #11916	; 0x2e8c
   bdab2:	f7f6 faf4 	bl	b409e <_ZdlPvj>
   bdab6:	4620      	mov	r0, r4
   bdab8:	bd10      	pop	{r4, pc}

000bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   bdaba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdabc:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   bdabe:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   bdac0:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   bdac2:	f7fb ff39 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   bdac6:	b120      	cbz	r0, bdad2 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   bdac8:	9901      	ldr	r1, [sp, #4]
   bdaca:	462a      	mov	r2, r5
   bdacc:	4620      	mov	r0, r4
   bdace:	f7fb fe57 	bl	b9780 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>
	}
   bdad2:	b003      	add	sp, #12
   bdad4:	bd30      	pop	{r4, r5, pc}

000bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   bdad6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdad8:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   bdada:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   bdadc:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   bdade:	f7fb ff2b 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   bdae2:	b120      	cbz	r0, bdaee <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   bdae4:	9901      	ldr	r1, [sp, #4]
   bdae6:	462a      	mov	r2, r5
   bdae8:	4620      	mov	r0, r4
   bdaea:	f7fb fe37 	bl	b975c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   bdaee:	b003      	add	sp, #12
   bdaf0:	bd30      	pop	{r4, r5, pc}

000bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   bdaf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   bdaf4:	6804      	ldr	r4, [r0, #0]
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   bdaf6:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   bdafa:	f88d 3000 	strb.w	r3, [sp]
   bdafe:	f88d 5004 	strb.w	r5, [sp, #4]
   bdb02:	6824      	ldr	r4, [r4, #0]
   bdb04:	233c      	movs	r3, #60	; 0x3c
   bdb06:	47a0      	blx	r4
	}
   bdb08:	b003      	add	sp, #12
   bdb0a:	bd30      	pop	{r4, r5, pc}

000bdb0c <_ZN15JsonDataManager8instanceEv>:
JsonDataManager &JsonDataManager::instance() {
   bdb0c:	b510      	push	{r4, lr}
    if (!_instance) {
   bdb0e:	4c06      	ldr	r4, [pc, #24]	; (bdb28 <_ZN15JsonDataManager8instanceEv+0x1c>)
   bdb10:	6823      	ldr	r3, [r4, #0]
   bdb12:	b933      	cbnz	r3, bdb22 <_ZN15JsonDataManager8instanceEv+0x16>
        _instance = new JsonDataManager();
   bdb14:	2004      	movs	r0, #4
   bdb16:	f7f6 fabe 	bl	b4096 <_Znwj>
   bdb1a:	b108      	cbz	r0, bdb20 <_ZN15JsonDataManager8instanceEv+0x14>
JsonDataManager::JsonDataManager() {
   bdb1c:	4b03      	ldr	r3, [pc, #12]	; (bdb2c <_ZN15JsonDataManager8instanceEv+0x20>)
   bdb1e:	6003      	str	r3, [r0, #0]
        _instance = new JsonDataManager();
   bdb20:	6020      	str	r0, [r4, #0]
}
   bdb22:	6820      	ldr	r0, [r4, #0]
   bdb24:	bd10      	pop	{r4, pc}
   bdb26:	bf00      	nop
   bdb28:	2003b68c 	.word	0x2003b68c
   bdb2c:	000c91b8 	.word	0x000c91b8

000bdb30 <_ZN15JsonDataManager5setupEv>:
// 1.  We need to store 50 nodes - each node is 6 bytes (nodeNumber, uniqueID, sensorType, payload, pendingAlerts) - 300 bytes
// 2.  We have one token for each object - 50 tokens and two tokens for each key value pair (50 * 5 * 2) - 500 tokens for a total of 550 tokens

LocalTimeConvert conv2;						// For local time

bool JsonDataManager::setup() {
   bdb30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	// Here is where we load the JSON object from memory and parse
	jp.addString(nodeDatabase.get_nodeIDJson());				// Read in the JSON string from memory
   bdb32:	f7f9 fe9d 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   bdb36:	4601      	mov	r1, r0
   bdb38:	a802      	add	r0, sp, #8
   bdb3a:	f7f9 fec3 	bl	b78c4 <_ZNK10nodeIDData14get_nodeIDJsonEv>
    const char * c_str() const { return buffer; }
   bdb3e:	9902      	ldr	r1, [sp, #8]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   bdb40:	9101      	str	r1, [sp, #4]
   bdb42:	4608      	mov	r0, r1
   bdb44:	f007 fd2f 	bl	c55a6 <strlen>
   bdb48:	9901      	ldr	r1, [sp, #4]
   bdb4a:	4602      	mov	r2, r0
   bdb4c:	4812      	ldr	r0, [pc, #72]	; (bdb98 <_ZN15JsonDataManager5setupEv+0x68>)
   bdb4e:	f7fb fd2a 	bl	b95a6 <_ZN10JsonBuffer7addDataEPKcj>
   bdb52:	a802      	add	r0, sp, #8
   bdb54:	f002 ff04 	bl	c0960 <_ZN6StringD1Ev>
	Log.info("The node string is: %s",nodeDatabase.get_nodeIDJson().c_str());
   bdb58:	f7f9 fe8a 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   bdb5c:	4601      	mov	r1, r0
   bdb5e:	a802      	add	r0, sp, #8
   bdb60:	f7f9 feb0 	bl	b78c4 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   bdb64:	9a02      	ldr	r2, [sp, #8]
   bdb66:	490d      	ldr	r1, [pc, #52]	; (bdb9c <_ZN15JsonDataManager5setupEv+0x6c>)
   bdb68:	480d      	ldr	r0, [pc, #52]	; (bdba0 <_ZN15JsonDataManager5setupEv+0x70>)
   bdb6a:	f7f6 faaf 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bdb6e:	a802      	add	r0, sp, #8
   bdb70:	f002 fef6 	bl	c0960 <_ZN6StringD1Ev>

	if (jp.parse()) Log.info("Parsed Successfully");
   bdb74:	4808      	ldr	r0, [pc, #32]	; (bdb98 <_ZN15JsonDataManager5setupEv+0x68>)
   bdb76:	f7fc fa91 	bl	ba09c <_ZN10JsonParser5parseEv>
   bdb7a:	b138      	cbz	r0, bdb8c <_ZN15JsonDataManager5setupEv+0x5c>
   bdb7c:	4909      	ldr	r1, [pc, #36]	; (bdba4 <_ZN15JsonDataManager5setupEv+0x74>)
	else {
		nodeDatabase.resetNodeIDs();
		Log.info("Parsing error");
   bdb7e:	4808      	ldr	r0, [pc, #32]	; (bdba0 <_ZN15JsonDataManager5setupEv+0x70>)
   bdb80:	f7f6 faa4 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	}
	return true;
}
   bdb84:	2001      	movs	r0, #1
   bdb86:	b007      	add	sp, #28
   bdb88:	f85d fb04 	ldr.w	pc, [sp], #4
		nodeDatabase.resetNodeIDs();
   bdb8c:	f7f9 fe70 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   bdb90:	f7f9 feba 	bl	b7908 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error");
   bdb94:	4904      	ldr	r1, [pc, #16]	; (bdba8 <_ZN15JsonDataManager5setupEv+0x78>)
   bdb96:	e7f2      	b.n	bdb7e <_ZN15JsonDataManager5setupEv+0x4e>
   bdb98:	2003b780 	.word	0x2003b780
   bdb9c:	000c82dc 	.word	0x000c82dc
   bdba0:	2003e634 	.word	0x2003e634
   bdba4:	000c82f3 	.word	0x000c82f3
   bdba8:	000c8307 	.word	0x000c8307

000bdbac <_ZN15JsonDataManager7getTypeEi>:

*/

// These functions interact with data in the nodeID JSON

byte JsonDataManager::getType(int nodeNumber) {
   bdbac:	b513      	push	{r0, r1, r4, lr}
	int type;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bdbae:	4816      	ldr	r0, [pc, #88]	; (bdc08 <_ZN15JsonDataManager7getTypeEi+0x5c>)
byte JsonDataManager::getType(int nodeNumber) {
   bdbb0:	460c      	mov	r4, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bdbb2:	f7fb fd3a 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bdbb6:	4a15      	ldr	r2, [pc, #84]	; (bdc0c <_ZN15JsonDataManager7getTypeEi+0x60>)
   bdbb8:	4601      	mov	r1, r0
   bdbba:	ab01      	add	r3, sp, #4
   bdbbc:	4812      	ldr	r0, [pc, #72]	; (bdc08 <_ZN15JsonDataManager7getTypeEi+0x5c>)
   bdbbe:	f7fb febb 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   bdbc2:	9901      	ldr	r1, [sp, #4]
   bdbc4:	4810      	ldr	r0, [pc, #64]	; (bdc08 <_ZN15JsonDataManager7getTypeEi+0x5c>)
   bdbc6:	1e62      	subs	r2, r4, #1
   bdbc8:	f7fb fd51 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   bdbcc:	4601      	mov	r1, r0
   bdbce:	b970      	cbnz	r0, bdbee <_ZN15JsonDataManager7getTypeEi+0x42>
		Log.info("From getType function Node number not found so returning %d",current.get_sensorType());
   bdbd0:	f7f9 fdb4 	bl	b773c <_ZN17currentStatusData8instanceEv>
   bdbd4:	f7f9 ff45 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   bdbd8:	490d      	ldr	r1, [pc, #52]	; (bdc10 <_ZN15JsonDataManager7getTypeEi+0x64>)
   bdbda:	4602      	mov	r2, r0
   bdbdc:	480d      	ldr	r0, [pc, #52]	; (bdc14 <_ZN15JsonDataManager7getTypeEi+0x68>)
   bdbde:	f7f6 fa75 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		return current.get_sensorType();									// Ran out of entries, go with what was reported by the node
   bdbe2:	f7f9 fdab 	bl	b773c <_ZN17currentStatusData8instanceEv>
   bdbe6:	f7f9 ff3c 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
	} 

	jp.getValueByKey(nodeObjectContainer, "type", type);
	Log.info("Returning sensor type %d in getType",type);
	return type;
}
   bdbea:	b002      	add	sp, #8
   bdbec:	bd10      	pop	{r4, pc}
	jp.getValueByKey(nodeObjectContainer, "type", type);
   bdbee:	4a0a      	ldr	r2, [pc, #40]	; (bdc18 <_ZN15JsonDataManager7getTypeEi+0x6c>)
   bdbf0:	4805      	ldr	r0, [pc, #20]	; (bdc08 <_ZN15JsonDataManager7getTypeEi+0x5c>)
   bdbf2:	466b      	mov	r3, sp
   bdbf4:	f7ff ff6f 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Returning sensor type %d in getType",type);
   bdbf8:	4806      	ldr	r0, [pc, #24]	; (bdc14 <_ZN15JsonDataManager7getTypeEi+0x68>)
   bdbfa:	9a00      	ldr	r2, [sp, #0]
   bdbfc:	4907      	ldr	r1, [pc, #28]	; (bdc1c <_ZN15JsonDataManager7getTypeEi+0x70>)
   bdbfe:	f7f6 fa65 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	return type;
   bdc02:	f89d 0000 	ldrb.w	r0, [sp]
   bdc06:	e7f0      	b.n	bdbea <_ZN15JsonDataManager7getTypeEi+0x3e>
   bdc08:	2003b780 	.word	0x2003b780
   bdc0c:	000c8315 	.word	0x000c8315
   bdc10:	000c831b 	.word	0x000c831b
   bdc14:	2003e634 	.word	0x2003e634
   bdc18:	000c6fae 	.word	0x000c6fae
   bdc1c:	000c8357 	.word	0x000c8357

000bdc20 <_ZN15JsonDataManager12getAlertCodeEi>:
	saveNodeDatabase(jp);						

	return result;
}

byte JsonDataManager::getAlertCode(int nodeNumber) {
   bdc20:	b513      	push	{r0, r1, r4, lr}
	if (nodeNumber == 0 || nodeNumber == 255) return 255;					// Not a configured node
   bdc22:	460c      	mov	r4, r1
   bdc24:	b1a9      	cbz	r1, bdc52 <_ZN15JsonDataManager12getAlertCodeEi+0x32>
   bdc26:	29ff      	cmp	r1, #255	; 0xff
   bdc28:	d028      	beq.n	bdc7c <_ZN15JsonDataManager12getAlertCodeEi+0x5c>
	// If there is not one, it will check to see if the park is closed and return 6 if it is

	int pendingAlert;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bdc2a:	4815      	ldr	r0, [pc, #84]	; (bdc80 <_ZN15JsonDataManager12getAlertCodeEi+0x60>)
   bdc2c:	f7fb fcfd 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bdc30:	4a14      	ldr	r2, [pc, #80]	; (bdc84 <_ZN15JsonDataManager12getAlertCodeEi+0x64>)
   bdc32:	4601      	mov	r1, r0
   bdc34:	ab01      	add	r3, sp, #4
   bdc36:	4812      	ldr	r0, [pc, #72]	; (bdc80 <_ZN15JsonDataManager12getAlertCodeEi+0x60>)
   bdc38:	f7fb fe7e 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   bdc3c:	9901      	ldr	r1, [sp, #4]
   bdc3e:	4810      	ldr	r0, [pc, #64]	; (bdc80 <_ZN15JsonDataManager12getAlertCodeEi+0x60>)
   bdc40:	1e62      	subs	r2, r4, #1
   bdc42:	f7fb fd14 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   bdc46:	4601      	mov	r1, r0
   bdc48:	b928      	cbnz	r0, bdc56 <_ZN15JsonDataManager12getAlertCodeEi+0x36>
		Log.info("From getAlertCode function, Node number not found");
   bdc4a:	490f      	ldr	r1, [pc, #60]	; (bdc88 <_ZN15JsonDataManager12getAlertCodeEi+0x68>)
   bdc4c:	480f      	ldr	r0, [pc, #60]	; (bdc8c <_ZN15JsonDataManager12getAlertCodeEi+0x6c>)
   bdc4e:	f7f6 fa3d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return 255;					// Not a configured node
   bdc52:	20ff      	movs	r0, #255	; 0xff
   bdc54:	e010      	b.n	bdc78 <_ZN15JsonDataManager12getAlertCodeEi+0x58>
		return 255;															// Ran out of entries 
	} 

	jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   bdc56:	4a0e      	ldr	r2, [pc, #56]	; (bdc90 <_ZN15JsonDataManager12getAlertCodeEi+0x70>)
   bdc58:	4809      	ldr	r0, [pc, #36]	; (bdc80 <_ZN15JsonDataManager12getAlertCodeEi+0x60>)
   bdc5a:	466b      	mov	r3, sp
   bdc5c:	f7ff ff3b 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (pendingAlert == 0) pendingAlert = (current.get_openHours() == 1) ?  0 : 6;	// Set an alert code if the node is not in open hours - this will reset the current data
   bdc60:	9c00      	ldr	r4, [sp, #0]
   bdc62:	b93c      	cbnz	r4, bdc74 <_ZN15JsonDataManager12getAlertCodeEi+0x54>
   bdc64:	f7f9 fd6a 	bl	b773c <_ZN17currentStatusData8instanceEv>
   bdc68:	f7f9 ff3c 	bl	b7ae4 <_ZNK17currentStatusData13get_openHoursEv>
   bdc6c:	2801      	cmp	r0, #1
   bdc6e:	bf18      	it	ne
   bdc70:	2406      	movne	r4, #6
   bdc72:	9400      	str	r4, [sp, #0]

	return pendingAlert;
   bdc74:	f89d 0000 	ldrb.w	r0, [sp]
}
   bdc78:	b002      	add	sp, #8
   bdc7a:	bd10      	pop	{r4, pc}
	if (nodeNumber == 0 || nodeNumber == 255) return 255;					// Not a configured node
   bdc7c:	4608      	mov	r0, r1
   bdc7e:	e7fb      	b.n	bdc78 <_ZN15JsonDataManager12getAlertCodeEi+0x58>
   bdc80:	2003b780 	.word	0x2003b780
   bdc84:	000c8315 	.word	0x000c8315
   bdc88:	000c837b 	.word	0x000c837b
   bdc8c:	2003e634 	.word	0x2003e634
   bdc90:	000c83ad 	.word	0x000c83ad

000bdc94 <_ZN15JsonDataManager15getAlertContextEi>:
	saveNodeDatabase(jp);						

	return true;
}

uint16_t JsonDataManager::getAlertContext(int nodeNumber) {
   bdc94:	b513      	push	{r0, r1, r4, lr}
	if (nodeNumber == 0 || nodeNumber == 255) return 255;					// Not a configured node
   bdc96:	460c      	mov	r4, r1
   bdc98:	b1a9      	cbz	r1, bdcc6 <_ZN15JsonDataManager15getAlertContextEi+0x32>
   bdc9a:	29ff      	cmp	r1, #255	; 0xff
   bdc9c:	d01e      	beq.n	bdcdc <_ZN15JsonDataManager15getAlertContextEi+0x48>

	// This function returns the pending alert context for the node - if there is one
	int pendingAlertContext;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bdc9e:	4810      	ldr	r0, [pc, #64]	; (bdce0 <_ZN15JsonDataManager15getAlertContextEi+0x4c>)
   bdca0:	f7fb fcc3 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bdca4:	4a0f      	ldr	r2, [pc, #60]	; (bdce4 <_ZN15JsonDataManager15getAlertContextEi+0x50>)
   bdca6:	4601      	mov	r1, r0
   bdca8:	ab01      	add	r3, sp, #4
   bdcaa:	480d      	ldr	r0, [pc, #52]	; (bdce0 <_ZN15JsonDataManager15getAlertContextEi+0x4c>)
   bdcac:	f7fb fe44 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   bdcb0:	9901      	ldr	r1, [sp, #4]
   bdcb2:	480b      	ldr	r0, [pc, #44]	; (bdce0 <_ZN15JsonDataManager15getAlertContextEi+0x4c>)
   bdcb4:	1e62      	subs	r2, r4, #1
   bdcb6:	f7fb fcda 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   bdcba:	4601      	mov	r1, r0
   bdcbc:	b928      	cbnz	r0, bdcca <_ZN15JsonDataManager15getAlertContextEi+0x36>
		Log.info("From getAlertContext function, Node number not found");
   bdcbe:	490a      	ldr	r1, [pc, #40]	; (bdce8 <_ZN15JsonDataManager15getAlertContextEi+0x54>)
   bdcc0:	480a      	ldr	r0, [pc, #40]	; (bdcec <_ZN15JsonDataManager15getAlertContextEi+0x58>)
   bdcc2:	f7f6 fa03 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return 255;					// Not a configured node
   bdcc6:	20ff      	movs	r0, #255	; 0xff
   bdcc8:	e006      	b.n	bdcd8 <_ZN15JsonDataManager15getAlertContextEi+0x44>
		return 255;															// Ran out of entries 
	} 

	jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   bdcca:	4805      	ldr	r0, [pc, #20]	; (bdce0 <_ZN15JsonDataManager15getAlertContextEi+0x4c>)
   bdccc:	4a08      	ldr	r2, [pc, #32]	; (bdcf0 <_ZN15JsonDataManager15getAlertContextEi+0x5c>)
   bdcce:	466b      	mov	r3, sp
   bdcd0:	f7ff ff01 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

	return pendingAlertContext;
   bdcd4:	f8bd 0000 	ldrh.w	r0, [sp]
}
   bdcd8:	b002      	add	sp, #8
   bdcda:	bd10      	pop	{r4, pc}
	if (nodeNumber == 0 || nodeNumber == 255) return 255;					// Not a configured node
   bdcdc:	4608      	mov	r0, r1
   bdcde:	e7fb      	b.n	bdcd8 <_ZN15JsonDataManager15getAlertContextEi+0x44>
   bdce0:	2003b780 	.word	0x2003b780
   bdce4:	000c8315 	.word	0x000c8315
   bdce8:	000c83b2 	.word	0x000c83b2
   bdcec:	2003e634 	.word	0x2003e634
   bdcf0:	000c83e7 	.word	0x000c83e7

000bdcf4 <_ZN15JsonDataManager21checkIfNodeConfiguredEim>:
	}

	return index;
}

bool JsonDataManager::checkIfNodeConfigured(int nodeNumber, uint32_t uniqueID)  {	// node is 'configured' if a uniqueID for it exists in the payload is set
   bdcf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   bdcf6:	460c      	mov	r4, r1
bool JsonDataManager::checkIfNodeConfigured(int nodeNumber, uint32_t uniqueID)  {	// node is 'configured' if a uniqueID for it exists in the payload is set
   bdcf8:	9201      	str	r2, [sp, #4]
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   bdcfa:	b1a1      	cbz	r1, bdd26 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x32>
   bdcfc:	29ff      	cmp	r1, #255	; 0xff
   bdcfe:	d012      	beq.n	bdd26 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x32>

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bdd00:	4813      	ldr	r0, [pc, #76]	; (bdd50 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x5c>)
   bdd02:	f7fb fc92 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bdd06:	4a13      	ldr	r2, [pc, #76]	; (bdd54 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x60>)
   bdd08:	4601      	mov	r1, r0
   bdd0a:	ab03      	add	r3, sp, #12
   bdd0c:	4810      	ldr	r0, [pc, #64]	; (bdd50 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x5c>)
   bdd0e:	f7fb fe13 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   bdd12:	9903      	ldr	r1, [sp, #12]
   bdd14:	480e      	ldr	r0, [pc, #56]	; (bdd50 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x5c>)
   bdd16:	1e62      	subs	r2, r4, #1
   bdd18:	f7fb fca9 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   bdd1c:	b930      	cbnz	r0, bdd2c <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x38>
		Log.info("Ran out of entries in node database - nodeConfigured object parsing");
   bdd1e:	490e      	ldr	r1, [pc, #56]	; (bdd58 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x64>)
	
	jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);					// Get the uniqueID for the node number in question

	if (uniqueID == current.get_uniqueID()) return true;
	else {
		Log.info("Node number is found but uniqueID is not a match - nodeConfigured");  // See the raw JSON string
   bdd20:	480e      	ldr	r0, [pc, #56]	; (bdd5c <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x68>)
   bdd22:	f7f6 f9d3 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   bdd26:	2000      	movs	r0, #0
		return false;
	}
}
   bdd28:	b004      	add	sp, #16
   bdd2a:	bd10      	pop	{r4, pc}
	jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);					// Get the uniqueID for the node number in question
   bdd2c:	ab01      	add	r3, sp, #4
   bdd2e:	4601      	mov	r1, r0
   bdd30:	4a0b      	ldr	r2, [pc, #44]	; (bdd60 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x6c>)
   bdd32:	4807      	ldr	r0, [pc, #28]	; (bdd50 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x5c>)
   bdd34:	f7ff fec1 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (uniqueID == current.get_uniqueID()) return true;
   bdd38:	f7f9 fd00 	bl	b773c <_ZN17currentStatusData8instanceEv>
   bdd3c:	f7f9 fd25 	bl	b778a <_ZNK17currentStatusData12get_uniqueIDEv>
   bdd40:	9b01      	ldr	r3, [sp, #4]
   bdd42:	4298      	cmp	r0, r3
   bdd44:	d001      	beq.n	bdd4a <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x56>
		Log.info("Node number is found but uniqueID is not a match - nodeConfigured");  // See the raw JSON string
   bdd46:	4907      	ldr	r1, [pc, #28]	; (bdd64 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x70>)
   bdd48:	e7ea      	b.n	bdd20 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x2c>
	if (uniqueID == current.get_uniqueID()) return true;
   bdd4a:	2001      	movs	r0, #1
   bdd4c:	e7ec      	b.n	bdd28 <_ZN15JsonDataManager21checkIfNodeConfiguredEim+0x34>
   bdd4e:	bf00      	nop
   bdd50:	2003b780 	.word	0x2003b780
   bdd54:	000c8315 	.word	0x000c8315
   bdd58:	000c83ec 	.word	0x000c83ec
   bdd5c:	2003e634 	.word	0x2003e634
   bdd60:	000c8430 	.word	0x000c8430
   bdd64:	000c8434 	.word	0x000c8434

000bdd68 <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm>:

bool JsonDataManager::uniqueIDExistsInDatabase(uint32_t uniqueID)  {			// node is 'configured' if a uniqueID for it exists in the payload is set
   bdd68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t nodeDeviceID;
	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bdd6c:	4817      	ldr	r0, [pc, #92]	; (bddcc <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x64>)
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bdd6e:	4f17      	ldr	r7, [pc, #92]	; (bddcc <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x64>)
		if(nodeObjectContainer == NULL) {
			Log.info("uniqueIDExistsInDatabase ran out of entries at i = %d",i);
			break;															// Ran out of entries - no match found
		} 
		jp.getValueByKey(nodeObjectContainer, "uID", nodeDeviceID);			// Get the deviceID and compare
   bdd70:	f8df 806c 	ldr.w	r8, [pc, #108]	; bdde0 <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x78>
bool JsonDataManager::uniqueIDExistsInDatabase(uint32_t uniqueID)  {			// node is 'configured' if a uniqueID for it exists in the payload is set
   bdd74:	460e      	mov	r6, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bdd76:	f7fb fc58 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bdd7a:	4a15      	ldr	r2, [pc, #84]	; (bddd0 <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x68>)
   bdd7c:	4601      	mov	r1, r0
   bdd7e:	ab01      	add	r3, sp, #4
   bdd80:	4812      	ldr	r0, [pc, #72]	; (bddcc <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x64>)
   bdd82:	f7fb fdd9 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
   bdd86:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bdd88:	9901      	ldr	r1, [sp, #4]
   bdd8a:	4810      	ldr	r0, [pc, #64]	; (bddcc <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x64>)
   bdd8c:	462a      	mov	r2, r5
   bdd8e:	f7fb fc6e 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   bdd92:	b930      	cbnz	r0, bdda2 <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x3a>
			Log.info("uniqueIDExistsInDatabase ran out of entries at i = %d",i);
   bdd94:	490f      	ldr	r1, [pc, #60]	; (bddd4 <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x6c>)
   bdd96:	4810      	ldr	r0, [pc, #64]	; (bddd8 <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x70>)
   bdd98:	462a      	mov	r2, r5
   bdd9a:	f7f6 f997 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		if (nodeDeviceID == uniqueID) {										// A match!		
			Log.info("uniqueIDExistsInDatabase returned true");
			return true;													// All is good - return node number for the deviceID passed to the function
		}
	}
	return false;
   bdd9e:	2000      	movs	r0, #0
   bdda0:	e00d      	b.n	bddbe <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x56>
		jp.getValueByKey(nodeObjectContainer, "uID", nodeDeviceID);			// Get the deviceID and compare
   bdda2:	466b      	mov	r3, sp
   bdda4:	4601      	mov	r1, r0
   bdda6:	4642      	mov	r2, r8
   bdda8:	4638      	mov	r0, r7
   bddaa:	f7ff fe86 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (nodeDeviceID == uniqueID) {										// A match!		
   bddae:	9b00      	ldr	r3, [sp, #0]
   bddb0:	42b3      	cmp	r3, r6
   bddb2:	d107      	bne.n	bddc4 <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x5c>
			Log.info("uniqueIDExistsInDatabase returned true");
   bddb4:	4808      	ldr	r0, [pc, #32]	; (bddd8 <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x70>)
   bddb6:	4909      	ldr	r1, [pc, #36]	; (bdddc <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x74>)
   bddb8:	f7f6 f988 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
			return true;													// All is good - return node number for the deviceID passed to the function
   bddbc:	2001      	movs	r0, #1
}
   bddbe:	b002      	add	sp, #8
   bddc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
   bddc4:	3501      	adds	r5, #1
   bddc6:	2d64      	cmp	r5, #100	; 0x64
   bddc8:	d1de      	bne.n	bdd88 <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x20>
   bddca:	e7e8      	b.n	bdd9e <_ZN15JsonDataManager24uniqueIDExistsInDatabaseEm+0x36>
   bddcc:	2003b780 	.word	0x2003b780
   bddd0:	000c8315 	.word	0x000c8315
   bddd4:	000c8476 	.word	0x000c8476
   bddd8:	2003e634 	.word	0x2003e634
   bdddc:	000c84ac 	.word	0x000c84ac
   bdde0:	000c8430 	.word	0x000c8430

000bdde4 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm>:

byte JsonDataManager::getNodeNumberForUniqueID(uint32_t uniqueID) {
   bdde4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int nodeNumber;
	int index = 1;
	uint32_t nodeDeviceID;

	Log.info("searching array for node with unique id = %lu", uniqueID);
   bdde8:	460a      	mov	r2, r1
byte JsonDataManager::getNodeNumberForUniqueID(uint32_t uniqueID) {
   bddea:	b085      	sub	sp, #20
	Log.info("searching array for node with unique id = %lu", uniqueID);
   bddec:	481f      	ldr	r0, [pc, #124]	; (bde6c <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x88>)
	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bddee:	4f20      	ldr	r7, [pc, #128]	; (bde70 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x8c>)
		if(nodeObjectContainer == NULL) {
			Log.info("getNodeNumberForUniqueID ran out of entries at i = %d",i);
			break;															// Ran out of entries - no match found
		} 
		jp.getValueByKey(nodeObjectContainer, "uID", nodeDeviceID);			// Get the deviceID and compare
   bddf0:	f8df 8090 	ldr.w	r8, [pc, #144]	; bde84 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0xa0>
		Log.info("comparing id %lu to uniqueID %lu", nodeDeviceID, uniqueID);
   bddf4:	f8df 9090 	ldr.w	r9, [pc, #144]	; bde88 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0xa4>
byte JsonDataManager::getNodeNumberForUniqueID(uint32_t uniqueID) {
   bddf8:	460e      	mov	r6, r1
	Log.info("searching array for node with unique id = %lu", uniqueID);
   bddfa:	491e      	ldr	r1, [pc, #120]	; (bde74 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x90>)
   bddfc:	f7f6 f966 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bde00:	481b      	ldr	r0, [pc, #108]	; (bde70 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x8c>)
   bde02:	f7fb fc12 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bde06:	4a1c      	ldr	r2, [pc, #112]	; (bde78 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x94>)
   bde08:	4601      	mov	r1, r0
   bde0a:	ab03      	add	r3, sp, #12
   bde0c:	4818      	ldr	r0, [pc, #96]	; (bde70 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x8c>)
   bde0e:	f7fb fd93 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
   bde12:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bde14:	9903      	ldr	r1, [sp, #12]
   bde16:	4816      	ldr	r0, [pc, #88]	; (bde70 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x8c>)
   bde18:	462a      	mov	r2, r5
   bde1a:	f7fb fc28 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   bde1e:	4604      	mov	r4, r0
   bde20:	b930      	cbnz	r0, bde30 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x4c>
			Log.info("getNodeNumberForUniqueID ran out of entries at i = %d",i);
   bde22:	4916      	ldr	r1, [pc, #88]	; (bde7c <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x98>)
   bde24:	4811      	ldr	r0, [pc, #68]	; (bde6c <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x88>)
   bde26:	462a      	mov	r2, r5
   bde28:	f7f6 f950 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
		}
		index++;															// This will be the node number for the next node if no match is found
	}
	return 0;
   bde2c:	2000      	movs	r0, #0
   bde2e:	e016      	b.n	bde5e <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x7a>
		jp.getValueByKey(nodeObjectContainer, "uID", nodeDeviceID);			// Get the deviceID and compare
   bde30:	4601      	mov	r1, r0
   bde32:	ab02      	add	r3, sp, #8
   bde34:	4642      	mov	r2, r8
   bde36:	4638      	mov	r0, r7
   bde38:	f7ff fe3f 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		Log.info("comparing id %lu to uniqueID %lu", nodeDeviceID, uniqueID);
   bde3c:	4633      	mov	r3, r6
   bde3e:	9a02      	ldr	r2, [sp, #8]
   bde40:	480a      	ldr	r0, [pc, #40]	; (bde6c <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x88>)
   bde42:	4649      	mov	r1, r9
   bde44:	f7f6 f942 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
		if (nodeDeviceID == uniqueID) {
   bde48:	9b02      	ldr	r3, [sp, #8]
   bde4a:	42b3      	cmp	r3, r6
   bde4c:	d10a      	bne.n	bde64 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x80>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
   bde4e:	4808      	ldr	r0, [pc, #32]	; (bde70 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x8c>)
   bde50:	4a0b      	ldr	r2, [pc, #44]	; (bde80 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x9c>)
   bde52:	ab01      	add	r3, sp, #4
   bde54:	4621      	mov	r1, r4
   bde56:	f7ff fe3e 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
   bde5a:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
   bde5e:	b005      	add	sp, #20
   bde60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
   bde64:	3501      	adds	r5, #1
   bde66:	2d64      	cmp	r5, #100	; 0x64
   bde68:	d1d4      	bne.n	bde14 <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x30>
   bde6a:	e7df      	b.n	bde2c <_ZN15JsonDataManager24getNodeNumberForUniqueIDEm+0x48>
   bde6c:	2003e634 	.word	0x2003e634
   bde70:	2003b780 	.word	0x2003b780
   bde74:	000c84d3 	.word	0x000c84d3
   bde78:	000c8315 	.word	0x000c8315
   bde7c:	000c8501 	.word	0x000c8501
   bde80:	000c6b72 	.word	0x000c6b72
   bde84:	000c8430 	.word	0x000c8430
   bde88:	000c8537 	.word	0x000c8537

000bde8c <_ZN15JsonDataManager16saveNodeDatabaseER10JsonParser>:
	}

	return true;
}

bool JsonDataManager::saveNodeDatabase(JsonParser &jp) {
   bde8c:	b570      	push	{r4, r5, r6, lr}
	JsonParserGeneratorRK::jsmntok_t *getTokens() { return tokens; };
   bde8e:	694d      	ldr	r5, [r1, #20]
    // The first token is the outer object - here we get the total size of the object
    JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokens();
    
    // Allocate memory for tempBuf dynamically
    char *tempBuf = (char*)malloc(tok->end - tok->start + 1);
   bde90:	e9d5 3001 	ldrd	r3, r0, [r5, #4]
   bde94:	1ac0      	subs	r0, r0, r3
   bde96:	3001      	adds	r0, #1
bool JsonDataManager::saveNodeDatabase(JsonParser &jp) {
   bde98:	460e      	mov	r6, r1
    char *tempBuf = (char*)malloc(tok->end - tok->start + 1);
   bde9a:	f002 fa65 	bl	c0368 <malloc>

    // Check if memory allocation was successful
    if (tempBuf != nullptr) {
   bde9e:	4604      	mov	r4, r0
   bdea0:	b1c8      	cbz	r0, bded6 <_ZN15JsonDataManager16saveNodeDatabaseER10JsonParser+0x4a>
        // Copy the content to tempBuf
        memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   bdea2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bdea6:	6871      	ldr	r1, [r6, #4]
   bdea8:	1ad2      	subs	r2, r2, r3
   bdeaa:	4419      	add	r1, r3
   bdeac:	f007 fa88 	bl	c53c0 <memcpy>
        
        // Null-terminate the string
        tempBuf[tok->end - tok->start] = '\0';
   bdeb0:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   bdeb4:	1a9b      	subs	r3, r3, r2
   bdeb6:	2500      	movs	r5, #0
   bdeb8:	54e5      	strb	r5, [r4, r3]

        // Return the dynamically allocated string and save it
		nodeDatabase.set_nodeIDJson(tempBuf);									// This should backup the nodeID database - now updated to persistent storage
   bdeba:	f7f9 fcd9 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   bdebe:	4621      	mov	r1, r4
   bdec0:	f7f9 fd12 	bl	b78e8 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
		nodeDatabase.flush(false);
   bdec4:	f7f9 fcd4 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   bdec8:	6803      	ldr	r3, [r0, #0]
   bdeca:	4629      	mov	r1, r5
   bdecc:	68db      	ldr	r3, [r3, #12]
   bdece:	4798      	blx	r3

		free(tempBuf);															// Free the memory (good practice)
   bded0:	4620      	mov	r0, r4
   bded2:	f002 fa51 	bl	c0378 <free>
        return true;
    } else {
        return "Memory allocation failure!!";
		return false;
    }
}
   bded6:	2001      	movs	r0, #1
   bded8:	bd70      	pop	{r4, r5, r6, pc}

000bdeda <_ZN15JsonDataManager12compressDataEPhS0_>:
    return true;
}

uint8_t JsonDataManager::compressData(uint8_t data[], uint8_t bitSizes[]) {
    uint8_t compressedData = 0;
    uint8_t bitOffset = 0;
   bdeda:	2300      	movs	r3, #0
uint8_t JsonDataManager::compressData(uint8_t data[], uint8_t bitSizes[]) {
   bdedc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdede:	3a01      	subs	r2, #1
   bdee0:	1e4e      	subs	r6, r1, #1
    uint8_t compressedData = 0;
   bdee2:	4618      	mov	r0, r3
   bdee4:	3103      	adds	r1, #3
    for (uint8_t i = 0; i < 4; ++i) {
        data[i] = (data[i] < (1 << bitSizes[i])) ? data[i] : ((1 << bitSizes[i]) - 1);
   bdee6:	2701      	movs	r7, #1
   bdee8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   bdeec:	f816 4f01 	ldrb.w	r4, [r6, #1]!
   bdef0:	fa07 f505 	lsl.w	r5, r7, r5
   bdef4:	42ac      	cmp	r4, r5
   bdef6:	bfa4      	itt	ge
   bdef8:	f105 35ff 	addge.w	r5, r5, #4294967295
   bdefc:	b2ec      	uxtbge	r4, r5
   bdefe:	7034      	strb	r4, [r6, #0]
        compressedData |= (data[i] * (1 << bitOffset));
   bdf00:	409c      	lsls	r4, r3
   bdf02:	4320      	orrs	r0, r4
        bitOffset += bitSizes[i];
   bdf04:	7814      	ldrb	r4, [r2, #0]
    for (uint8_t i = 0; i < 4; ++i) {
   bdf06:	428e      	cmp	r6, r1
        bitOffset += bitSizes[i];
   bdf08:	4423      	add	r3, r4
        compressedData |= (data[i] * (1 << bitOffset));
   bdf0a:	b2c0      	uxtb	r0, r0
        bitOffset += bitSizes[i];
   bdf0c:	b2db      	uxtb	r3, r3
    for (uint8_t i = 0; i < 4; ++i) {
   bdf0e:	d1eb      	bne.n	bdee8 <_ZN15JsonDataManager12compressDataEPhS0_+0xe>
    }
    return compressedData;
}
   bdf10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bdf14 <_ZN15JsonDataManager24getCompressedJoinPayloadEh>:
uint8_t JsonDataManager::getCompressedJoinPayload(uint8_t sensorType) {
   bdf14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    switch (sensorType) {
   bdf16:	2913      	cmp	r1, #19
    uint8_t data[4] = {0};
   bdf18:	f04f 0300 	mov.w	r3, #0
    uint8_t bitSizes[4] = {0};
   bdf1c:	e9cd 3302 	strd	r3, r3, [sp, #8]
uint8_t JsonDataManager::getCompressedJoinPayload(uint8_t sensorType) {
   bdf20:	4604      	mov	r4, r0
   bdf22:	460a      	mov	r2, r1
    switch (sensorType) {
   bdf24:	d819      	bhi.n	bdf5a <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0x46>
   bdf26:	2909      	cmp	r1, #9
   bdf28:	d843      	bhi.n	bdfb2 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0x9e>
   bdf2a:	1e4b      	subs	r3, r1, #1
   bdf2c:	2b08      	cmp	r3, #8
   bdf2e:	d91f      	bls.n	bdf70 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0x5c>
            Log.info("Unknown sensor type in getCompressedJoinPayload %d", sensorType);
   bdf30:	4924      	ldr	r1, [pc, #144]	; (bdfc4 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0xb0>)
   bdf32:	4825      	ldr	r0, [pc, #148]	; (bdfc8 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0xb4>)
   bdf34:	f7f6 f8ca 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bdf38:	f002 f9d6 	bl	c02e8 <spark_cloud_flag_connected>
   bdf3c:	2400      	movs	r4, #0
            if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "Unknown sensor type in getCompressedJoinPayload", PRIVATE);
   bdf3e:	b150      	cbz	r0, bdf56 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0x42>
   bdf40:	f7fc fcb6 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bdf44:	4b21      	ldr	r3, [pc, #132]	; (bdfcc <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0xb8>)
   bdf46:	f88d 4000 	strb.w	r4, [sp]
   bdf4a:	781b      	ldrb	r3, [r3, #0]
   bdf4c:	4a20      	ldr	r2, [pc, #128]	; (bdfd0 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0xbc>)
   bdf4e:	4921      	ldr	r1, [pc, #132]	; (bdfd4 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0xc0>)
   bdf50:	f7ff fdcf 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
            return 0;
   bdf54:	4620      	mov	r0, r4
}
   bdf56:	b004      	add	sp, #16
   bdf58:	bd10      	pop	{r4, pc}
    switch (sensorType) {
   bdf5a:	f1a1 0314 	sub.w	r3, r1, #20
   bdf5e:	2b09      	cmp	r3, #9
   bdf60:	d8e6      	bhi.n	bdf30 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0x1c>
            bitSizes[0] = 6; // space (6 bits)
   bdf62:	2306      	movs	r3, #6
   bdf64:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   bdf68:	2301      	movs	r3, #1
   bdf6a:	f88d 300d 	strb.w	r3, [sp, #13]
        } break;
   bdf6e:	e002      	b.n	bdf76 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0x62>
            bitSizes[0] = 1; // 2-Way (1 bit)
   bdf70:	2301      	movs	r3, #1
   bdf72:	f88d 300c 	strb.w	r3, [sp, #12]
	data[0] = current.get_payload1();
   bdf76:	f7f9 fbe1 	bl	b773c <_ZN17currentStatusData8instanceEv>
   bdf7a:	f7f9 fd77 	bl	b7a6c <_ZNK17currentStatusData12get_payload1Ev>
   bdf7e:	f88d 0008 	strb.w	r0, [sp, #8]
	data[1] = current.get_payload2();
   bdf82:	f7f9 fbdb 	bl	b773c <_ZN17currentStatusData8instanceEv>
   bdf86:	f7f9 fd76 	bl	b7a76 <_ZNK17currentStatusData12get_payload2Ev>
   bdf8a:	f88d 0009 	strb.w	r0, [sp, #9]
	data[2] = current.get_payload3();
   bdf8e:	f7f9 fbd5 	bl	b773c <_ZN17currentStatusData8instanceEv>
   bdf92:	f7f9 fd75 	bl	b7a80 <_ZNK17currentStatusData12get_payload3Ev>
   bdf96:	f88d 000a 	strb.w	r0, [sp, #10]
	data[3] = current.get_payload4();
   bdf9a:	f7f9 fbcf 	bl	b773c <_ZN17currentStatusData8instanceEv>
   bdf9e:	f7f9 fd74 	bl	b7a8a <_ZNK17currentStatusData12get_payload4Ev>
    return compressData(data, bitSizes);
   bdfa2:	aa03      	add	r2, sp, #12
	data[3] = current.get_payload4();
   bdfa4:	f88d 000b 	strb.w	r0, [sp, #11]
    return compressData(data, bitSizes);
   bdfa8:	a902      	add	r1, sp, #8
   bdfaa:	4620      	mov	r0, r4
   bdfac:	f7ff ff95 	bl	bdeda <_ZN15JsonDataManager12compressDataEPhS0_>
   bdfb0:	e7d1      	b.n	bdf56 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0x42>
            bitSizes[0] = 6; // space (6 bits)
   bdfb2:	2306      	movs	r3, #6
   bdfb4:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   bdfb8:	2301      	movs	r3, #1
   bdfba:	f88d 300d 	strb.w	r3, [sp, #13]
            bitSizes[2] = 1; // multi (1 bit)
   bdfbe:	f88d 300e 	strb.w	r3, [sp, #14]
        } break;
   bdfc2:	e7d8      	b.n	bdf76 <_ZN15JsonDataManager24getCompressedJoinPayloadEh+0x62>
   bdfc4:	000c8558 	.word	0x000c8558
   bdfc8:	2003e634 	.word	0x2003e634
   bdfcc:	2003b688 	.word	0x2003b688
   bdfd0:	000c858b 	.word	0x000c858b
   bdfd4:	000c5f9c 	.word	0x000c5f9c

000bdfd8 <_ZN15JsonDataManager14decompressDataEhPhS0_>:

void JsonDataManager::decompressData(uint8_t compressedData, uint8_t data[], uint8_t bitSizes[]) {
   bdfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdfda:	3a01      	subs	r2, #1
   bdfdc:	1e5d      	subs	r5, r3, #1
   bdfde:	1cd8      	adds	r0, r3, #3
    uint8_t bitOffset = 0;
   bdfe0:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 4; ++i) {
        data[i] = (compressedData >> bitOffset) & ((1 << bitSizes[i]) - 1);
   bdfe2:	2701      	movs	r7, #1
   bdfe4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   bdfe8:	fa07 f303 	lsl.w	r3, r7, r3
   bdfec:	fa41 f604 	asr.w	r6, r1, r4
   bdff0:	3b01      	subs	r3, #1
   bdff2:	4033      	ands	r3, r6
   bdff4:	f802 3f01 	strb.w	r3, [r2, #1]!
        bitOffset += bitSizes[i];
   bdff8:	782b      	ldrb	r3, [r5, #0]
    for (uint8_t i = 0; i < 4; ++i) {
   bdffa:	42a8      	cmp	r0, r5
        bitOffset += bitSizes[i];
   bdffc:	441c      	add	r4, r3
   bdffe:	b2e4      	uxtb	r4, r4
    for (uint8_t i = 0; i < 4; ++i) {
   be000:	d1f0      	bne.n	bdfe4 <_ZN15JsonDataManager14decompressDataEhPhS0_+0xc>
    }
   be002:	bdf0      	pop	{r4, r5, r6, r7, pc}

000be004 <_ZN15JsonDataManager18hydrateJoinPayloadEhh>:
bool JsonDataManager::hydrateJoinPayload(uint8_t sensorType, uint8_t compressedJoinPayload) {
   be004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   be006:	460b      	mov	r3, r1
    switch (sensorType) {
   be008:	2b13      	cmp	r3, #19
bool JsonDataManager::hydrateJoinPayload(uint8_t sensorType, uint8_t compressedJoinPayload) {
   be00a:	4611      	mov	r1, r2
    uint8_t data[4] = {0};
   be00c:	f04f 0200 	mov.w	r2, #0
    uint8_t bitSizes[4] = {0};
   be010:	e9cd 2202 	strd	r2, r2, [sp, #8]
    switch (sensorType) {
   be014:	d81a      	bhi.n	be04c <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0x48>
   be016:	2b09      	cmp	r3, #9
   be018:	d844      	bhi.n	be0a4 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0xa0>
   be01a:	1e5a      	subs	r2, r3, #1
   be01c:	2a08      	cmp	r2, #8
   be01e:	d920      	bls.n	be062 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0x5e>
            Log.info("Unknown sensor type in hydrateJoinPayload %d", sensorType);
   be020:	4925      	ldr	r1, [pc, #148]	; (be0b8 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0xb4>)
   be022:	4826      	ldr	r0, [pc, #152]	; (be0bc <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0xb8>)
   be024:	461a      	mov	r2, r3
   be026:	f7f6 f851 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   be02a:	f002 f95d 	bl	c02e8 <spark_cloud_flag_connected>
            if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "Unknown sensor type in hydrateJoinPayload", PRIVATE);
   be02e:	b158      	cbz	r0, be048 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0x44>
   be030:	f7fc fc3e 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   be034:	2400      	movs	r4, #0
   be036:	4b22      	ldr	r3, [pc, #136]	; (be0c0 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0xbc>)
   be038:	f88d 4000 	strb.w	r4, [sp]
   be03c:	781b      	ldrb	r3, [r3, #0]
   be03e:	4a21      	ldr	r2, [pc, #132]	; (be0c4 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0xc0>)
   be040:	4921      	ldr	r1, [pc, #132]	; (be0c8 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0xc4>)
   be042:	f7ff fd56 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
            return false;
   be046:	4620      	mov	r0, r4
}
   be048:	b004      	add	sp, #16
   be04a:	bd10      	pop	{r4, pc}
    switch (sensorType) {
   be04c:	f1a3 0214 	sub.w	r2, r3, #20
   be050:	2a09      	cmp	r2, #9
   be052:	d8e5      	bhi.n	be020 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0x1c>
            bitSizes[0] = 6; // space (6 bits)
   be054:	2306      	movs	r3, #6
   be056:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   be05a:	2301      	movs	r3, #1
   be05c:	f88d 300d 	strb.w	r3, [sp, #13]
        } break;
   be060:	e002      	b.n	be068 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0x64>
            bitSizes[0] = 1; // 2-Way (1 bit)
   be062:	2301      	movs	r3, #1
   be064:	f88d 300c 	strb.w	r3, [sp, #12]
    decompressData(compressedJoinPayload, data, bitSizes);
   be068:	ab03      	add	r3, sp, #12
   be06a:	aa02      	add	r2, sp, #8
   be06c:	f7ff ffb4 	bl	bdfd8 <_ZN15JsonDataManager14decompressDataEhPhS0_>
    current.set_payload1(data[0]);
   be070:	f7f9 fb64 	bl	b773c <_ZN17currentStatusData8instanceEv>
   be074:	f89d 1008 	ldrb.w	r1, [sp, #8]
   be078:	f7f9 fddc 	bl	b7c34 <_ZN17currentStatusData12set_payload1Eh>
    current.set_payload2(data[1]);
   be07c:	f7f9 fb5e 	bl	b773c <_ZN17currentStatusData8instanceEv>
   be080:	f89d 1009 	ldrb.w	r1, [sp, #9]
   be084:	f7f9 fddc 	bl	b7c40 <_ZN17currentStatusData12set_payload2Eh>
    current.set_payload3(data[2]);
   be088:	f7f9 fb58 	bl	b773c <_ZN17currentStatusData8instanceEv>
   be08c:	f89d 100a 	ldrb.w	r1, [sp, #10]
   be090:	f7f9 fddc 	bl	b7c4c <_ZN17currentStatusData12set_payload3Eh>
    current.set_payload4(data[3]);
   be094:	f7f9 fb52 	bl	b773c <_ZN17currentStatusData8instanceEv>
   be098:	f89d 100b 	ldrb.w	r1, [sp, #11]
   be09c:	f7f9 fddc 	bl	b7c58 <_ZN17currentStatusData12set_payload4Eh>
    return true;
   be0a0:	2001      	movs	r0, #1
   be0a2:	e7d1      	b.n	be048 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0x44>
            bitSizes[0] = 6; // space (6 bits)
   be0a4:	2306      	movs	r3, #6
   be0a6:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   be0aa:	2301      	movs	r3, #1
   be0ac:	f88d 300d 	strb.w	r3, [sp, #13]
            bitSizes[2] = 1; // multi (1 bit)
   be0b0:	f88d 300e 	strb.w	r3, [sp, #14]
        } break;
   be0b4:	e7d8      	b.n	be068 <_ZN15JsonDataManager18hydrateJoinPayloadEhh+0x64>
   be0b6:	bf00      	nop
   be0b8:	000c85bb 	.word	0x000c85bb
   be0bc:	2003e634 	.word	0x2003e634
   be0c0:	2003b688 	.word	0x2003b688
   be0c4:	000c85e8 	.word	0x000c85e8
   be0c8:	000c5f9c 	.word	0x000c5f9c

000be0cc <_ZN15JsonDataManager14getJoinPayloadEh>:
bool JsonDataManager::getJoinPayload(uint8_t nodeNumber) {
   be0cc:	b570      	push	{r4, r5, r6, lr}
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   be0ce:	1e4e      	subs	r6, r1, #1
   be0d0:	b2f3      	uxtb	r3, r6
   be0d2:	2bfd      	cmp	r3, #253	; 0xfd
bool JsonDataManager::getJoinPayload(uint8_t nodeNumber) {
   be0d4:	b086      	sub	sp, #24
   be0d6:	460c      	mov	r4, r1
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   be0d8:	d84a      	bhi.n	be170 <_ZN15JsonDataManager14getJoinPayloadEh+0xa4>
	uint8_t sensorType = JsonDataManager::instance().getType(nodeNumber);
   be0da:	f7ff fd17 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   be0de:	4621      	mov	r1, r4
   be0e0:	f7ff fd64 	bl	bdbac <_ZN15JsonDataManager7getTypeEi>
   be0e4:	4605      	mov	r5, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   be0e6:	4823      	ldr	r0, [pc, #140]	; (be174 <_ZN15JsonDataManager14getJoinPayloadEh+0xa8>)
   be0e8:	f7fb fa9f 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   be0ec:	4a22      	ldr	r2, [pc, #136]	; (be178 <_ZN15JsonDataManager14getJoinPayloadEh+0xac>)
   be0ee:	4601      	mov	r1, r0
   be0f0:	ab05      	add	r3, sp, #20
   be0f2:	4820      	ldr	r0, [pc, #128]	; (be174 <_ZN15JsonDataManager14getJoinPayloadEh+0xa8>)
   be0f4:	f7fb fc20 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   be0f8:	9905      	ldr	r1, [sp, #20]
   be0fa:	481e      	ldr	r0, [pc, #120]	; (be174 <_ZN15JsonDataManager14getJoinPayloadEh+0xa8>)
   be0fc:	4632      	mov	r2, r6
   be0fe:	f7fb fab6 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   be102:	4604      	mov	r4, r0
   be104:	b930      	cbnz	r0, be114 <_ZN15JsonDataManager14getJoinPayloadEh+0x48>
		Log.info("From getJoinPayload function Node number not found so returning false");
   be106:	491d      	ldr	r1, [pc, #116]	; (be17c <_ZN15JsonDataManager14getJoinPayloadEh+0xb0>)
   be108:	481d      	ldr	r0, [pc, #116]	; (be180 <_ZN15JsonDataManager14getJoinPayloadEh+0xb4>)
   be10a:	f7f5 ffdf 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
}
   be10e:	4620      	mov	r0, r4
   be110:	b006      	add	sp, #24
   be112:	bd70      	pop	{r4, r5, r6, pc}
	jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayloadInt);
   be114:	4601      	mov	r1, r0
   be116:	ab04      	add	r3, sp, #16
   be118:	4a1a      	ldr	r2, [pc, #104]	; (be184 <_ZN15JsonDataManager14getJoinPayloadEh+0xb8>)
   be11a:	4816      	ldr	r0, [pc, #88]	; (be174 <_ZN15JsonDataManager14getJoinPayloadEh+0xa8>)
   be11c:	f7ff fcdb 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	compressedJoinPayload = static_cast<uint8_t>(compressedJoinPayloadInt);
   be120:	f89d 2010 	ldrb.w	r2, [sp, #16]
   be124:	9202      	str	r2, [sp, #8]
	result = JsonDataManager::instance().hydrateJoinPayload(sensorType, compressedJoinPayload);
   be126:	f7ff fcf1 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   be12a:	9a02      	ldr	r2, [sp, #8]
   be12c:	4629      	mov	r1, r5
   be12e:	f7ff ff69 	bl	be004 <_ZN15JsonDataManager18hydrateJoinPayloadEhh>
	if(result) Log.info("Loaded payload values of %d, %d, %d, %d", current.get_payload1(), current.get_payload2(), current.get_payload3(), current.get_payload4());
   be132:	4604      	mov	r4, r0
   be134:	2800      	cmp	r0, #0
   be136:	d0ea      	beq.n	be10e <_ZN15JsonDataManager14getJoinPayloadEh+0x42>
   be138:	f7f9 fb00 	bl	b773c <_ZN17currentStatusData8instanceEv>
   be13c:	f7f9 fc96 	bl	b7a6c <_ZNK17currentStatusData12get_payload1Ev>
   be140:	9003      	str	r0, [sp, #12]
   be142:	f7f9 fafb 	bl	b773c <_ZN17currentStatusData8instanceEv>
   be146:	f7f9 fc96 	bl	b7a76 <_ZNK17currentStatusData12get_payload2Ev>
   be14a:	9002      	str	r0, [sp, #8]
   be14c:	f7f9 faf6 	bl	b773c <_ZN17currentStatusData8instanceEv>
   be150:	f7f9 fc96 	bl	b7a80 <_ZNK17currentStatusData12get_payload3Ev>
   be154:	4605      	mov	r5, r0
   be156:	f7f9 faf1 	bl	b773c <_ZN17currentStatusData8instanceEv>
   be15a:	f7f9 fc96 	bl	b7a8a <_ZNK17currentStatusData12get_payload4Ev>
   be15e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   be162:	e9cd 5000 	strd	r5, r0, [sp]
   be166:	4908      	ldr	r1, [pc, #32]	; (be188 <_ZN15JsonDataManager14getJoinPayloadEh+0xbc>)
   be168:	4805      	ldr	r0, [pc, #20]	; (be180 <_ZN15JsonDataManager14getJoinPayloadEh+0xb4>)
   be16a:	f7f5 ffaf 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   be16e:	e7ce      	b.n	be10e <_ZN15JsonDataManager14getJoinPayloadEh+0x42>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   be170:	2400      	movs	r4, #0
   be172:	e7cc      	b.n	be10e <_ZN15JsonDataManager14getJoinPayloadEh+0x42>
   be174:	2003b780 	.word	0x2003b780
   be178:	000c8315 	.word	0x000c8315
   be17c:	000c8612 	.word	0x000c8612
   be180:	2003e634 	.word	0x2003e634
   be184:	000c5fdc 	.word	0x000c5fdc
   be188:	000c8658 	.word	0x000c8658

000be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>:
bool JsonDataManager::parseJoinPayloadValues(uint8_t sensorType, uint8_t compressedJoinPayload, uint8_t& payload1, uint8_t& payload2, uint8_t& payload3, uint8_t& payload4) {
   be18c:	b530      	push	{r4, r5, lr}
   be18e:	460c      	mov	r4, r1
   be190:	b085      	sub	sp, #20
   be192:	461d      	mov	r5, r3
    switch (sensorType) {
   be194:	2c13      	cmp	r4, #19
    uint8_t data[4] = {0};
   be196:	f04f 0300 	mov.w	r3, #0
    uint8_t bitSizes[4] = {0};
   be19a:	e9cd 3302 	strd	r3, r3, [sp, #8]
bool JsonDataManager::parseJoinPayloadValues(uint8_t sensorType, uint8_t compressedJoinPayload, uint8_t& payload1, uint8_t& payload2, uint8_t& payload3, uint8_t& payload4) {
   be19e:	4611      	mov	r1, r2
    switch (sensorType) {
   be1a0:	d81a      	bhi.n	be1d8 <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0x4c>
   be1a2:	2c09      	cmp	r4, #9
   be1a4:	d83b      	bhi.n	be21e <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0x92>
   be1a6:	1e63      	subs	r3, r4, #1
   be1a8:	2b08      	cmp	r3, #8
   be1aa:	d920      	bls.n	be1ee <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0x62>
            Log.info("Unknown sensor type in parseJoinPayloadValues %d", sensorType);
   be1ac:	4920      	ldr	r1, [pc, #128]	; (be230 <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0xa4>)
   be1ae:	4821      	ldr	r0, [pc, #132]	; (be234 <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0xa8>)
   be1b0:	4622      	mov	r2, r4
   be1b2:	f7f5 ff8b 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   be1b6:	f002 f897 	bl	c02e8 <spark_cloud_flag_connected>
            if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "Unknown sensor type in parseJoinPayloadValues", PRIVATE);
   be1ba:	b158      	cbz	r0, be1d4 <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0x48>
   be1bc:	f7fc fb78 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   be1c0:	2400      	movs	r4, #0
   be1c2:	4b1d      	ldr	r3, [pc, #116]	; (be238 <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0xac>)
   be1c4:	f88d 4000 	strb.w	r4, [sp]
   be1c8:	781b      	ldrb	r3, [r3, #0]
   be1ca:	4a1c      	ldr	r2, [pc, #112]	; (be23c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0xb0>)
   be1cc:	491c      	ldr	r1, [pc, #112]	; (be240 <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0xb4>)
   be1ce:	f7ff fc90 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
            return false;
   be1d2:	4620      	mov	r0, r4
}
   be1d4:	b005      	add	sp, #20
   be1d6:	bd30      	pop	{r4, r5, pc}
    switch (sensorType) {
   be1d8:	f1a4 0314 	sub.w	r3, r4, #20
   be1dc:	2b09      	cmp	r3, #9
   be1de:	d8e5      	bhi.n	be1ac <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0x20>
            bitSizes[0] = 6; // space (6 bits)
   be1e0:	2306      	movs	r3, #6
   be1e2:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   be1e6:	2301      	movs	r3, #1
   be1e8:	f88d 300d 	strb.w	r3, [sp, #13]
        } break;
   be1ec:	e002      	b.n	be1f4 <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0x68>
            bitSizes[0] = 1; // 2-Way (1 bit)
   be1ee:	2301      	movs	r3, #1
   be1f0:	f88d 300c 	strb.w	r3, [sp, #12]
    decompressData(compressedJoinPayload, data, bitSizes);
   be1f4:	ab03      	add	r3, sp, #12
   be1f6:	aa02      	add	r2, sp, #8
   be1f8:	f7ff feee 	bl	bdfd8 <_ZN15JsonDataManager14decompressDataEhPhS0_>
    payload1 = data[0];
   be1fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   be200:	702b      	strb	r3, [r5, #0]
    payload2 = data[1];
   be202:	9b08      	ldr	r3, [sp, #32]
   be204:	f89d 2009 	ldrb.w	r2, [sp, #9]
   be208:	701a      	strb	r2, [r3, #0]
    payload3 = data[2];
   be20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be20c:	f89d 200a 	ldrb.w	r2, [sp, #10]
   be210:	701a      	strb	r2, [r3, #0]
    payload4 = data[3];
   be212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be214:	f89d 200b 	ldrb.w	r2, [sp, #11]
   be218:	701a      	strb	r2, [r3, #0]
    return true;
   be21a:	2001      	movs	r0, #1
   be21c:	e7da      	b.n	be1d4 <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0x48>
            bitSizes[0] = 6; // space (6 bits)
   be21e:	2306      	movs	r3, #6
   be220:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   be224:	2301      	movs	r3, #1
   be226:	f88d 300d 	strb.w	r3, [sp, #13]
            bitSizes[2] = 1; // multi (1 bit)
   be22a:	f88d 300e 	strb.w	r3, [sp, #14]
        } break;
   be22e:	e7e1      	b.n	be1f4 <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_+0x68>
   be230:	000c8680 	.word	0x000c8680
   be234:	2003e634 	.word	0x2003e634
   be238:	2003b688 	.word	0x2003b688
   be23c:	000c86b1 	.word	0x000c86b1
   be240:	000c5f9c 	.word	0x000c5f9c

000be244 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi>:
uint16_t JsonDataManager::getOccupancyGrossBySpace(int space) {
   be244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Log.info("Searching array for nodes with space = %d - getOccupancyGrossBySpace", space);
   be248:	460a      	mov	r2, r1
uint16_t JsonDataManager::getOccupancyGrossBySpace(int space) {
   be24a:	b08a      	sub	sp, #40	; 0x28
	Log.info("Searching array for nodes with space = %d - getOccupancyGrossBySpace", space);
   be24c:	4828      	ldr	r0, [pc, #160]	; (be2f0 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0xac>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   be24e:	4f29      	ldr	r7, [pc, #164]	; (be2f4 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0xb0>)
		jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);  // Get the compressedJoinPayload
   be250:	f8df 90b0 	ldr.w	r9, [pc, #176]	; be304 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0xc0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);  // Get the compressedJoinPayload
   be254:	f8df a0b0 	ldr.w	sl, [pc, #176]	; be308 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0xc4>
uint16_t JsonDataManager::getOccupancyGrossBySpace(int space) {
   be258:	460e      	mov	r6, r1
	Log.info("Searching array for nodes with space = %d - getOccupancyGrossBySpace", space);
   be25a:	4927      	ldr	r1, [pc, #156]	; (be2f8 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0xb4>)
   be25c:	f7f5 ff36 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   be260:	4824      	ldr	r0, [pc, #144]	; (be2f4 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0xb0>)
   be262:	f7fb f9e2 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   be266:	4a25      	ldr	r2, [pc, #148]	; (be2fc <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0xb8>)
   be268:	4601      	mov	r1, r0
   be26a:	ab09      	add	r3, sp, #36	; 0x24
   be26c:	4821      	ldr	r0, [pc, #132]	; (be2f4 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0xb0>)
   be26e:	f7fb fb63 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i = 0; i < 100; i++) {											// Iterate through the array looking for a match
   be272:	2500      	movs	r5, #0
	int occupancyGrossTotal = 0;
   be274:	46a8      	mov	r8, r5
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   be276:	9909      	ldr	r1, [sp, #36]	; 0x24
   be278:	462a      	mov	r2, r5
   be27a:	4638      	mov	r0, r7
   be27c:	f7fb f9f7 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   be280:	4604      	mov	r4, r0
   be282:	b380      	cbz	r0, be2e6 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0xa2>
		jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);  // Get the compressedJoinPayload
   be284:	4601      	mov	r1, r0
   be286:	ab08      	add	r3, sp, #32
   be288:	464a      	mov	r2, r9
   be28a:	4638      	mov	r0, r7
   be28c:	f7ff fc23 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);  // Get the compressedJoinPayload
   be290:	ab07      	add	r3, sp, #28
   be292:	4652      	mov	r2, sl
   be294:	4621      	mov	r1, r4
   be296:	4638      	mov	r0, r7
   be298:	f7ff fc1d 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (sensorType >= 10 && sensorType <= 19) {	// Ignore nodes that are not occupancy nodes in this function
   be29c:	9b07      	ldr	r3, [sp, #28]
   be29e:	3b0a      	subs	r3, #10
   be2a0:	2b09      	cmp	r3, #9
   be2a2:	d81d      	bhi.n	be2e0 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0x9c>
			JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4); // extract the values
   be2a4:	f7ff fc32 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   be2a8:	f10d 0317 	add.w	r3, sp, #23
   be2ac:	9302      	str	r3, [sp, #8]
   be2ae:	f10d 0316 	add.w	r3, sp, #22
   be2b2:	9301      	str	r3, [sp, #4]
   be2b4:	f10d 0315 	add.w	r3, sp, #21
   be2b8:	9300      	str	r3, [sp, #0]
   be2ba:	f89d 2020 	ldrb.w	r2, [sp, #32]
   be2be:	f89d 101c 	ldrb.w	r1, [sp, #28]
   be2c2:	ab05      	add	r3, sp, #20
   be2c4:	f7ff ff62 	bl	be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>
			if (payload1 == space) {
   be2c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   be2cc:	42b3      	cmp	r3, r6
   be2ce:	d107      	bne.n	be2e0 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0x9c>
				jp.getValueByKey(nodeObjectContainer, "jd2", occupancyGross);	// Node is in the passed-in space!
   be2d0:	ab06      	add	r3, sp, #24
   be2d2:	4a0b      	ldr	r2, [pc, #44]	; (be300 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0xbc>)
   be2d4:	4621      	mov	r1, r4
   be2d6:	4638      	mov	r0, r7
   be2d8:	f7ff fbfd 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
				occupancyGrossTotal += occupancyGross;							// add the occupancyGross to the total for the space
   be2dc:	9b06      	ldr	r3, [sp, #24]
   be2de:	4498      	add	r8, r3
	for (int i = 0; i < 100; i++) {											// Iterate through the array looking for a match
   be2e0:	3501      	adds	r5, #1
   be2e2:	2d64      	cmp	r5, #100	; 0x64
   be2e4:	d1c7      	bne.n	be276 <_ZN15JsonDataManager24getOccupancyGrossBySpaceEi+0x32>
}
   be2e6:	fa1f f088 	uxth.w	r0, r8
   be2ea:	b00a      	add	sp, #40	; 0x28
   be2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be2f0:	2003e634 	.word	0x2003e634
   be2f4:	2003b780 	.word	0x2003b780
   be2f8:	000c86df 	.word	0x000c86df
   be2fc:	000c8315 	.word	0x000c8315
   be300:	000c8724 	.word	0x000c8724
   be304:	000c5fdc 	.word	0x000c5fdc
   be308:	000c6fae 	.word	0x000c6fae

000be30c <_ZN15JsonDataManager13printNodeDataEb>:
void JsonDataManager::printNodeData(bool publish) {
   be30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be310:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   be314:	4889      	ldr	r0, [pc, #548]	; (be53c <_ZN15JsonDataManager13printNodeDataEb+0x230>)
void JsonDataManager::printNodeData(bool publish) {
   be316:	9111      	str	r1, [sp, #68]	; 0x44
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   be318:	f7fb f987 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   be31c:	4a88      	ldr	r2, [pc, #544]	; (be540 <_ZN15JsonDataManager13printNodeDataEb+0x234>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   be31e:	4c87      	ldr	r4, [pc, #540]	; (be53c <_ZN15JsonDataManager13printNodeDataEb+0x230>)
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   be320:	4601      	mov	r1, r0
   be322:	ab1f      	add	r3, sp, #124	; 0x7c
   be324:	4885      	ldr	r0, [pc, #532]	; (be53c <_ZN15JsonDataManager13printNodeDataEb+0x230>)
   be326:	f7fb fb07 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
   be32a:	f04f 0b00 	mov.w	fp, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   be32e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   be330:	465a      	mov	r2, fp
   be332:	4620      	mov	r0, r4
   be334:	f7fb f99b 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   be338:	4605      	mov	r5, r0
   be33a:	2800      	cmp	r0, #0
   be33c:	f000 80c4 	beq.w	be4c8 <_ZN15JsonDataManager13printNodeDataEb+0x1bc>
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   be340:	4601      	mov	r1, r0
   be342:	4a80      	ldr	r2, [pc, #512]	; (be544 <_ZN15JsonDataManager13printNodeDataEb+0x238>)
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   be344:	4e80      	ldr	r6, [pc, #512]	; (be548 <_ZN15JsonDataManager13printNodeDataEb+0x23c>)
   be346:	ab17      	add	r3, sp, #92	; 0x5c
   be348:	4620      	mov	r0, r4
   be34a:	f7ff fbb6 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   be34e:	4629      	mov	r1, r5
   be350:	4a7e      	ldr	r2, [pc, #504]	; (be54c <_ZN15JsonDataManager13printNodeDataEb+0x240>)
   be352:	ab16      	add	r3, sp, #88	; 0x58
   be354:	4620      	mov	r0, r4
   be356:	f7ff fbbe 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   be35a:	4629      	mov	r1, r5
   be35c:	4a7c      	ldr	r2, [pc, #496]	; (be550 <_ZN15JsonDataManager13printNodeDataEb+0x244>)
   be35e:	ab18      	add	r3, sp, #96	; 0x60
   be360:	4620      	mov	r0, r4
   be362:	f7ff fbb8 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);
   be366:	4629      	mov	r1, r5
   be368:	4a7a      	ldr	r2, [pc, #488]	; (be554 <_ZN15JsonDataManager13printNodeDataEb+0x248>)
   be36a:	ab19      	add	r3, sp, #100	; 0x64
   be36c:	4620      	mov	r0, r4
   be36e:	f7ff fbb2 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlertCode);
   be372:	4629      	mov	r1, r5
   be374:	4a78      	ldr	r2, [pc, #480]	; (be558 <_ZN15JsonDataManager13printNodeDataEb+0x24c>)
   be376:	ab1a      	add	r3, sp, #104	; 0x68
   be378:	4620      	mov	r0, r4
   be37a:	f7ff fbac 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   be37e:	4629      	mov	r1, r5
   be380:	4a76      	ldr	r2, [pc, #472]	; (be55c <_ZN15JsonDataManager13printNodeDataEb+0x250>)
   be382:	ab1b      	add	r3, sp, #108	; 0x6c
   be384:	4620      	mov	r0, r4
   be386:	f7ff fba6 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "jd1", jsonData1);
   be38a:	4629      	mov	r1, r5
   be38c:	4a74      	ldr	r2, [pc, #464]	; (be560 <_ZN15JsonDataManager13printNodeDataEb+0x254>)
   be38e:	ab1c      	add	r3, sp, #112	; 0x70
   be390:	4620      	mov	r0, r4
   be392:	f7ff fba0 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "jd2", jsonData2);
   be396:	4629      	mov	r1, r5
   be398:	4a72      	ldr	r2, [pc, #456]	; (be564 <_ZN15JsonDataManager13printNodeDataEb+0x258>)
   be39a:	ab1d      	add	r3, sp, #116	; 0x74
   be39c:	4620      	mov	r0, r4
   be39e:	f7ff fb9a 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "lrep", lastReport);
   be3a2:	4629      	mov	r1, r5
   be3a4:	4a70      	ldr	r2, [pc, #448]	; (be568 <_ZN15JsonDataManager13printNodeDataEb+0x25c>)
   be3a6:	ab1e      	add	r3, sp, #120	; 0x78
   be3a8:	4620      	mov	r0, r4
   be3aa:	f7ff fb94 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		conv2.withTime(static_cast<time_t>(lastReport)).convert();
   be3ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   be3b0:	4630      	mov	r0, r6
   be3b2:	17da      	asrs	r2, r3, #31
		JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   be3b4:	f10d 0757 	add.w	r7, sp, #87	; 0x57
   be3b8:	f10d 0856 	add.w	r8, sp, #86	; 0x56
   be3bc:	f10d 0955 	add.w	r9, sp, #85	; 0x55
		conv2.withTime(static_cast<time_t>(lastReport)).convert();
   be3c0:	e9c6 3218 	strd	r3, r2, [r6, #96]	; 0x60
   be3c4:	f7fd fe42 	bl	bc04c <_ZN16LocalTimeConvert7convertEv>
		JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   be3c8:	f7ff fba0 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   be3cc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   be3d0:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
   be3d4:	9702      	str	r7, [sp, #8]
   be3d6:	f8cd 8004 	str.w	r8, [sp, #4]
   be3da:	f8cd 9000 	str.w	r9, [sp]
   be3de:	ab15      	add	r3, sp, #84	; 0x54
   be3e0:	f7ff fed4 	bl	be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>
		switch (sensorType) {
   be3e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
   be3e6:	2d13      	cmp	r5, #19
   be3e8:	dc19      	bgt.n	be41e <_ZN15JsonDataManager13printNodeDataEb+0x112>
   be3ea:	2d09      	cmp	r5, #9
   be3ec:	dc1b      	bgt.n	be426 <_ZN15JsonDataManager13printNodeDataEb+0x11a>
   be3ee:	1e6b      	subs	r3, r5, #1
   be3f0:	2b08      	cmp	r3, #8
   be3f2:	d97a      	bls.n	be4ea <_ZN15JsonDataManager13printNodeDataEb+0x1de>
				Log.info("Unknown sensor type in printNodeData %d", sensorType);
   be3f4:	495d      	ldr	r1, [pc, #372]	; (be56c <_ZN15JsonDataManager13printNodeDataEb+0x260>)
   be3f6:	485e      	ldr	r0, [pc, #376]	; (be570 <_ZN15JsonDataManager13printNodeDataEb+0x264>)
   be3f8:	462a      	mov	r2, r5
   be3fa:	f7f5 fe67 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   be3fe:	f001 ff73 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "Unknown sensor type in printNodeData", PRIVATE);
   be402:	2800      	cmp	r0, #0
   be404:	d042      	beq.n	be48c <_ZN15JsonDataManager13printNodeDataEb+0x180>
   be406:	f7fc fa53 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   be40a:	2300      	movs	r3, #0
   be40c:	f88d 3000 	strb.w	r3, [sp]
   be410:	4b58      	ldr	r3, [pc, #352]	; (be574 <_ZN15JsonDataManager13printNodeDataEb+0x268>)
   be412:	4a59      	ldr	r2, [pc, #356]	; (be578 <_ZN15JsonDataManager13printNodeDataEb+0x26c>)
   be414:	781b      	ldrb	r3, [r3, #0]
   be416:	4959      	ldr	r1, [pc, #356]	; (be57c <_ZN15JsonDataManager13printNodeDataEb+0x270>)
   be418:	f7ff fb6b 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   be41c:	e036      	b.n	be48c <_ZN15JsonDataManager13printNodeDataEb+0x180>
		switch (sensorType) {
   be41e:	f1a5 0314 	sub.w	r3, r5, #20
   be422:	2b09      	cmp	r3, #9
   be424:	e7e5      	b.n	be3f2 <_ZN15JsonDataManager13printNodeDataEb+0xe6>
				snprintf(data, sizeof(data), "Node %d, uniqueID %lu, type %d, net %d, gross %d, payload (%d/%d/%d/%d) with pending alert %d and alert context %d, lastReport %s", nodeNumber, uniqueID, sensorType, jsonData1, jsonData2, payload1, payload2, payload3, payload4, pendingAlertCode, pendingAlertContext, conv2.timeStr().c_str());
   be426:	9b16      	ldr	r3, [sp, #88]	; 0x58
   be428:	9313      	str	r3, [sp, #76]	; 0x4c
   be42a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be42c:	930d      	str	r3, [sp, #52]	; 0x34
   be42e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   be430:	930e      	str	r3, [sp, #56]	; 0x38
   be432:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   be434:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   be436:	930f      	str	r3, [sp, #60]	; 0x3c
   be438:	4631      	mov	r1, r6
   be43a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   be43c:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
   be440:	f899 9000 	ldrb.w	r9, [r9]
   be444:	f898 8000 	ldrb.w	r8, [r8]
   be448:	783f      	ldrb	r7, [r7, #0]
   be44a:	9212      	str	r2, [sp, #72]	; 0x48
   be44c:	a820      	add	r0, sp, #128	; 0x80
   be44e:	9310      	str	r3, [sp, #64]	; 0x40
   be450:	f7fd fcb2 	bl	bbdb8 <_ZN16LocalTimeConvert7timeStrEv>
   be454:	9b10      	ldr	r3, [sp, #64]	; 0x40
   be456:	9309      	str	r3, [sp, #36]	; 0x24
   be458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   be45a:	9303      	str	r3, [sp, #12]
   be45c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   be45e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   be460:	9920      	ldr	r1, [sp, #128]	; 0x80
   be462:	910a      	str	r1, [sp, #40]	; 0x28
   be464:	e9cd 5301 	strd	r5, r3, [sp, #4]
   be468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   be46a:	9300      	str	r3, [sp, #0]
   be46c:	e9cd 7207 	strd	r7, r2, [sp, #28]
   be470:	e9cd 9805 	strd	r9, r8, [sp, #20]
   be474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be476:	4a42      	ldr	r2, [pc, #264]	; (be580 <_ZN15JsonDataManager13printNodeDataEb+0x274>)
   be478:	f8cd a010 	str.w	sl, [sp, #16]
   be47c:	f240 216e 	movw	r1, #622	; 0x26e
   be480:	a824      	add	r0, sp, #144	; 0x90
   be482:	f001 ff99 	bl	c03b8 <snprintf>
   be486:	a820      	add	r0, sp, #128	; 0x80
   be488:	f002 fa6a 	bl	c0960 <_ZN6StringD1Ev>
		Log.info(data);
   be48c:	4838      	ldr	r0, [pc, #224]	; (be570 <_ZN15JsonDataManager13printNodeDataEb+0x264>)
   be48e:	a924      	add	r1, sp, #144	; 0x90
   be490:	f7f5 fe1c 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   be494:	f001 ff28 	bl	c02e8 <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   be498:	b180      	cbz	r0, be4bc <_ZN15JsonDataManager13printNodeDataEb+0x1b0>
   be49a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   be49c:	b173      	cbz	r3, be4bc <_ZN15JsonDataManager13printNodeDataEb+0x1b0>
			PublishQueuePosix::instance().publish("nodeData", data, PRIVATE);
   be49e:	f7fc fa07 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   be4a2:	2300      	movs	r3, #0
   be4a4:	f88d 3000 	strb.w	r3, [sp]
   be4a8:	4b32      	ldr	r3, [pc, #200]	; (be574 <_ZN15JsonDataManager13printNodeDataEb+0x268>)
   be4aa:	4936      	ldr	r1, [pc, #216]	; (be584 <_ZN15JsonDataManager13printNodeDataEb+0x278>)
   be4ac:	781b      	ldrb	r3, [r3, #0]
   be4ae:	aa24      	add	r2, sp, #144	; 0x90
   be4b0:	f7ff fb1f 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
			delay(1000);
   be4b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   be4b8:	f003 fe48 	bl	c214c <delay>
	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
   be4bc:	f10b 0b01 	add.w	fp, fp, #1
   be4c0:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
   be4c4:	f47f af33 	bne.w	be32e <_ZN15JsonDataManager13printNodeDataEb+0x22>
	Log.info(nodeDatabase.get_nodeIDJson());  // See the raw JSON string
   be4c8:	f7f9 f9d2 	bl	b7870 <_ZN10nodeIDData8instanceEv>
   be4cc:	4601      	mov	r1, r0
   be4ce:	a820      	add	r0, sp, #128	; 0x80
   be4d0:	f7f9 f9f8 	bl	b78c4 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   be4d4:	9920      	ldr	r1, [sp, #128]	; 0x80
   be4d6:	4826      	ldr	r0, [pc, #152]	; (be570 <_ZN15JsonDataManager13printNodeDataEb+0x264>)
   be4d8:	f7f5 fdf8 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   be4dc:	a820      	add	r0, sp, #128	; 0x80
   be4de:	f002 fa3f 	bl	c0960 <_ZN6StringD1Ev>
}
   be4e2:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   be4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				snprintf(data, sizeof(data), "Node %d, uniqueID %lu, type %d, payload (%d/%d/%d/%d) with pending alert %d and alert context %d, lastReport %s", nodeNumber, uniqueID, sensorType, payload1, payload2, payload3, payload4, pendingAlertCode, pendingAlertContext, conv2.timeStr().c_str());
   be4ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
   be4ec:	9310      	str	r3, [sp, #64]	; 0x40
   be4ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be4f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   be4f2:	930d      	str	r3, [sp, #52]	; 0x34
   be4f4:	4631      	mov	r1, r6
   be4f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   be4f8:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
   be4fc:	f899 9000 	ldrb.w	r9, [r9]
   be500:	f898 8000 	ldrb.w	r8, [r8]
   be504:	783f      	ldrb	r7, [r7, #0]
   be506:	930e      	str	r3, [sp, #56]	; 0x38
   be508:	a820      	add	r0, sp, #128	; 0x80
   be50a:	920f      	str	r2, [sp, #60]	; 0x3c
   be50c:	f7fd fc54 	bl	bbdb8 <_ZN16LocalTimeConvert7timeStrEv>
   be510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   be512:	9920      	ldr	r1, [sp, #128]	; 0x80
   be514:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   be516:	9108      	str	r1, [sp, #32]
   be518:	e9cd 7305 	strd	r7, r3, [sp, #20]
   be51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   be51e:	9207      	str	r2, [sp, #28]
   be520:	9300      	str	r3, [sp, #0]
   be522:	e9cd 9803 	strd	r9, r8, [sp, #12]
   be526:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   be52a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   be52c:	4a16      	ldr	r2, [pc, #88]	; (be588 <_ZN15JsonDataManager13printNodeDataEb+0x27c>)
   be52e:	f240 216e 	movw	r1, #622	; 0x26e
   be532:	a824      	add	r0, sp, #144	; 0x90
   be534:	f001 ff40 	bl	c03b8 <snprintf>
   be538:	e7a5      	b.n	be486 <_ZN15JsonDataManager13printNodeDataEb+0x17a>
   be53a:	bf00      	nop
   be53c:	2003b780 	.word	0x2003b780
   be540:	000c8315 	.word	0x000c8315
   be544:	000c8430 	.word	0x000c8430
   be548:	2003b690 	.word	0x2003b690
   be54c:	000c6b72 	.word	0x000c6b72
   be550:	000c6fae 	.word	0x000c6fae
   be554:	000c5fdc 	.word	0x000c5fdc
   be558:	000c83ad 	.word	0x000c83ad
   be55c:	000c83e7 	.word	0x000c83e7
   be560:	000c8728 	.word	0x000c8728
   be564:	000c8724 	.word	0x000c8724
   be568:	000c872c 	.word	0x000c872c
   be56c:	000c8823 	.word	0x000c8823
   be570:	2003e634 	.word	0x2003e634
   be574:	2003b688 	.word	0x2003b688
   be578:	000c884b 	.word	0x000c884b
   be57c:	000c5f9c 	.word	0x000c5f9c
   be580:	000c87a1 	.word	0x000c87a1
   be584:	000c6b80 	.word	0x000c6b80
   be588:	000c8731 	.word	0x000c8731

000be58c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   be58c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be58e:	4604      	mov	r4, r0
   be590:	4615      	mov	r5, r2
   be592:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   be594:	f7fb faf4 	bl	b9b80 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   be598:	9901      	ldr	r1, [sp, #4]
   be59a:	2201      	movs	r2, #1
   be59c:	4620      	mov	r0, r4
   be59e:	f7fb fa5d 	bl	b9a5c <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   be5a2:	4620      	mov	r0, r4
   be5a4:	213a      	movs	r1, #58	; 0x3a
   be5a6:	f7fb fa0d 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   be5aa:	4904      	ldr	r1, [pc, #16]	; (be5bc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   be5ac:	462a      	mov	r2, r5
   be5ae:	4620      	mov	r0, r4
		insertValue(value);
	}
   be5b0:	b003      	add	sp, #12
   be5b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   be5b6:	f7fb ba44 	b.w	b9a42 <_ZN10JsonWriter13insertsprintfEPKcz>
   be5ba:	bf00      	nop
   be5bc:	000c867d 	.word	0x000c867d

000be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>:
	 *
	 * Note: This method call jp.parse() so any jsmntok_t may be changed by this method. If you've
	 * fetched one, such as by using getValueTokenByKey() be sure to fetch it again to be safe.
	 */
	template<class T>
	void insertOrUpdateKeyValue(const JsonParserGeneratorRK::jsmntok_t *container, const char *key, T value) {
   be5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be5c2:	4604      	mov	r4, r0
   be5c4:	460f      	mov	r7, r1
   be5c6:	4615      	mov	r5, r2
   be5c8:	461e      	mov	r6, r3
		// Remove existing item (ignore failure, as the key might not exist)
		removeKeyValue(container, key);
   be5ca:	f7fb fdb4 	bl	ba136 <_ZN12JsonModifier14removeKeyValueEPKN21JsonParserGeneratorRK9jsmntok_tEPKc>

		// Create a new key/value pair
		startAppend(container);
   be5ce:	4639      	mov	r1, r7
   be5d0:	4620      	mov	r0, r4
   be5d2:	f7fb fb0b 	bl	b9bec <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
		insertKeyValue(key, value);
   be5d6:	4620      	mov	r0, r4
   be5d8:	4632      	mov	r2, r6
   be5da:	4629      	mov	r1, r5
   be5dc:	f7ff ffd6 	bl	be58c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		finish();
   be5e0:	4620      	mov	r0, r4
	}
   be5e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		finish();
   be5e6:	f7fb bdeb 	b.w	ba1c0 <_ZN12JsonModifier6finishEv>

000be5ea <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
   be5ea:	b510      	push	{r4, lr}
   be5ec:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
   be5ee:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   be5f0:	b118      	cbz	r0, be5fa <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   be5f2:	68a1      	ldr	r1, [r4, #8]
   be5f4:	1a09      	subs	r1, r1, r0
   be5f6:	f7f5 fd52 	bl	b409e <_ZdlPvj>
      }
   be5fa:	4620      	mov	r0, r4
   be5fc:	bd10      	pop	{r4, pc}
	...

000be600 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   be600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   be604:	e9d0 a800 	ldrd	sl, r8, [r0]
   be608:	4b3c      	ldr	r3, [pc, #240]	; (be6fc <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xfc>)
   be60a:	eba8 050a 	sub.w	r5, r8, sl
   be60e:	10ad      	asrs	r5, r5, #2
   be610:	435d      	muls	r5, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   be612:	4b3b      	ldr	r3, [pc, #236]	; (be700 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x100>)
   be614:	429d      	cmp	r5, r3
   be616:	4681      	mov	r9, r0
   be618:	460f      	mov	r7, r1
   be61a:	4614      	mov	r4, r2
   be61c:	d102      	bne.n	be624 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   be61e:	4839      	ldr	r0, [pc, #228]	; (be704 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x104>)
   be620:	f005 f8e1 	bl	c37e6 <_ZSt20__throw_length_errorPKc>
   be624:	2d01      	cmp	r5, #1
   be626:	462a      	mov	r2, r5
   be628:	bf38      	it	cc
   be62a:	2201      	movcc	r2, #1
   be62c:	18ad      	adds	r5, r5, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   be62e:	eba1 0b0a 	sub.w	fp, r1, sl

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   be632:	d22e      	bcs.n	be692 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x92>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   be634:	b37d      	cbz	r5, be696 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
   be636:	429d      	cmp	r5, r3
   be638:	bf28      	it	cs
   be63a:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   be63c:	200c      	movs	r0, #12
   be63e:	4368      	muls	r0, r5
   be640:	f7f5 fd29 	bl	b4096 <_Znwj>
   be644:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   be646:	eb16 020b 	adds.w	r2, r6, fp
   be64a:	d00a      	beq.n	be662 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x62>
	  _M_end_of_storage(__x._M_end_of_storage)
   be64c:	6823      	ldr	r3, [r4, #0]
   be64e:	f846 300b 	str.w	r3, [r6, fp]
   be652:	6863      	ldr	r3, [r4, #4]
   be654:	6053      	str	r3, [r2, #4]
   be656:	68a3      	ldr	r3, [r4, #8]
   be658:	6093      	str	r3, [r2, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   be65a:	2300      	movs	r3, #0
   be65c:	e9c4 3301 	strd	r3, r3, [r4, #4]
   be660:	6023      	str	r3, [r4, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   be662:	4631      	mov	r1, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   be664:	4654      	mov	r4, sl
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   be666:	42a7      	cmp	r7, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   be668:	f04f 0300 	mov.w	r3, #0
   be66c:	f101 0b0c 	add.w	fp, r1, #12
   be670:	d013      	beq.n	be69a <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
   be672:	b141      	cbz	r1, be686 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x86>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   be674:	6822      	ldr	r2, [r4, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
   be676:	600a      	str	r2, [r1, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   be678:	6862      	ldr	r2, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
   be67a:	604a      	str	r2, [r1, #4]
   be67c:	68a2      	ldr	r2, [r4, #8]
   be67e:	608a      	str	r2, [r1, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   be680:	e9c4 3301 	strd	r3, r3, [r4, #4]
   be684:	6023      	str	r3, [r4, #0]
      }
   be686:	4620      	mov	r0, r4
   be688:	f7ff ffaf 	bl	be5ea <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   be68c:	340c      	adds	r4, #12
   be68e:	4659      	mov	r1, fp
   be690:	e7e9      	b.n	be666 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x66>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   be692:	461d      	mov	r5, r3
   be694:	e7d2      	b.n	be63c <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   be696:	462e      	mov	r6, r5
   be698:	e7d5      	b.n	be646 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   be69a:	465f      	mov	r7, fp
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   be69c:	f04f 0b00 	mov.w	fp, #0
   be6a0:	4544      	cmp	r4, r8
   be6a2:	463b      	mov	r3, r7
   be6a4:	f107 070c 	add.w	r7, r7, #12
   be6a8:	d011      	beq.n	be6ce <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xce>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   be6aa:	6823      	ldr	r3, [r4, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
   be6ac:	f847 3c0c 	str.w	r3, [r7, #-12]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   be6b0:	6863      	ldr	r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
   be6b2:	f847 3c08 	str.w	r3, [r7, #-8]
   be6b6:	68a3      	ldr	r3, [r4, #8]
   be6b8:	f847 3c04 	str.w	r3, [r7, #-4]
      }
   be6bc:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   be6be:	e9c4 bb01 	strd	fp, fp, [r4, #4]
   be6c2:	f8c4 b000 	str.w	fp, [r4]
      }
   be6c6:	f7ff ff90 	bl	be5ea <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   be6ca:	340c      	adds	r4, #12
   be6cc:	e7e8      	b.n	be6a0 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
	if (__p)
   be6ce:	f1ba 0f00 	cmp.w	sl, #0
   be6d2:	d008      	beq.n	be6e6 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe6>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   be6d4:	f8d9 1008 	ldr.w	r1, [r9, #8]
   be6d8:	9301      	str	r3, [sp, #4]
	::operator delete(__p
   be6da:	eba1 010a 	sub.w	r1, r1, sl
   be6de:	4650      	mov	r0, sl
   be6e0:	f7f5 fcdd 	bl	b409e <_ZdlPvj>
   be6e4:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   be6e6:	200c      	movs	r0, #12
   be6e8:	fb00 6505 	mla	r5, r0, r5, r6
      this->_M_impl._M_finish = __new_finish;
   be6ec:	e9c9 6300 	strd	r6, r3, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   be6f0:	f8c9 5008 	str.w	r5, [r9, #8]
    }
   be6f4:	b003      	add	sp, #12
   be6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be6fa:	bf00      	nop
   be6fc:	aaaaaaab 	.word	0xaaaaaaab
   be700:	0aaaaaaa 	.word	0x0aaaaaaa
   be704:	000c8870 	.word	0x000c8870

000be708 <_GLOBAL__sub_I__ZN15JsonDataManager9_instanceE>:
        val_(val) {
   be708:	4b0f      	ldr	r3, [pc, #60]	; (be748 <_GLOBAL__sub_I__ZN15JsonDataManager9_instanceE+0x40>)
   be70a:	2201      	movs	r2, #1
   be70c:	b513      	push	{r0, r1, r4, lr}
   be70e:	701a      	strb	r2, [r3, #0]
   be710:	4b0e      	ldr	r3, [pc, #56]	; (be74c <_GLOBAL__sub_I__ZN15JsonDataManager9_instanceE+0x44>)
   be712:	2208      	movs	r2, #8
   be714:	701a      	strb	r2, [r3, #0]
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   be716:	4b0e      	ldr	r3, [pc, #56]	; (be750 <_GLOBAL__sub_I__ZN15JsonDataManager9_instanceE+0x48>)
   be718:	f240 2226 	movw	r2, #550	; 0x226
   be71c:	f6a3 442c 	subw	r4, r3, #3116	; 0xc2c
   be720:	9200      	str	r2, [sp, #0]
   be722:	f5a3 6140 	sub.w	r1, r3, #3072	; 0xc00
   be726:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   be72a:	4620      	mov	r0, r4
   be72c:	f7fa ff62 	bl	b95f4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   be730:	4b08      	ldr	r3, [pc, #32]	; (be754 <_GLOBAL__sub_I__ZN15JsonDataManager9_instanceE+0x4c>)
class LocalTimeConvert {
   be732:	4809      	ldr	r0, [pc, #36]	; (be758 <_GLOBAL__sub_I__ZN15JsonDataManager9_instanceE+0x50>)
   be734:	6023      	str	r3, [r4, #0]
   be736:	2306      	movs	r3, #6
   be738:	f840 3b04 	str.w	r3, [r0], #4
   be73c:	b002      	add	sp, #8
   be73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be742:	f7fd ba2b 	b.w	bbb9c <_ZN22LocalTimePosixTimezoneC1Ev>
   be746:	bf00      	nop
   be748:	2003b688 	.word	0x2003b688
   be74c:	2003b689 	.word	0x2003b689
   be750:	2003c3ac 	.word	0x2003c3ac
   be754:	000c91a8 	.word	0x000c91a8
   be758:	2003b690 	.word	0x2003b690

000be75c <_ZN15JsonDataManager7setTypeEii>:
bool JsonDataManager::setType(int nodeNumber, int newType) {
   be75c:	b530      	push	{r4, r5, lr}
   be75e:	4615      	mov	r5, r2
   be760:	b095      	sub	sp, #84	; 0x54
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   be762:	460c      	mov	r4, r1
   be764:	b1a9      	cbz	r1, be792 <_ZN15JsonDataManager7setTypeEii+0x36>
   be766:	29ff      	cmp	r1, #255	; 0xff
   be768:	d013      	beq.n	be792 <_ZN15JsonDataManager7setTypeEii+0x36>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   be76a:	482e      	ldr	r0, [pc, #184]	; (be824 <_ZN15JsonDataManager7setTypeEii+0xc8>)
   be76c:	f7fa ff5d 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   be770:	4a2d      	ldr	r2, [pc, #180]	; (be828 <_ZN15JsonDataManager7setTypeEii+0xcc>)
   be772:	4601      	mov	r1, r0
   be774:	ab03      	add	r3, sp, #12
   be776:	482b      	ldr	r0, [pc, #172]	; (be824 <_ZN15JsonDataManager7setTypeEii+0xc8>)
   be778:	f7fb f8de 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   be77c:	1e62      	subs	r2, r4, #1
   be77e:	9903      	ldr	r1, [sp, #12]
   be780:	4828      	ldr	r0, [pc, #160]	; (be824 <_ZN15JsonDataManager7setTypeEii+0xc8>)
   be782:	f7fa ff74 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   be786:	4604      	mov	r4, r0
   be788:	b928      	cbnz	r0, be796 <_ZN15JsonDataManager7setTypeEii+0x3a>
		Log.info("Ran out of entries in node database - setType object parsing");
   be78a:	4928      	ldr	r1, [pc, #160]	; (be82c <_ZN15JsonDataManager7setTypeEii+0xd0>)
   be78c:	4828      	ldr	r0, [pc, #160]	; (be830 <_ZN15JsonDataManager7setTypeEii+0xd4>)
   be78e:	f7f5 fc9d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   be792:	2000      	movs	r0, #0
   be794:	e043      	b.n	be81e <_ZN15JsonDataManager7setTypeEii+0xc2>
	JsonModifier mod(jp);
   be796:	4923      	ldr	r1, [pc, #140]	; (be824 <_ZN15JsonDataManager7setTypeEii+0xc8>)
   be798:	a804      	add	r0, sp, #16
   be79a:	f7fb fa15 	bl	b9bc8 <_ZN12JsonModifierC1ER10JsonParser>
	jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   be79e:	4a25      	ldr	r2, [pc, #148]	; (be834 <_ZN15JsonDataManager7setTypeEii+0xd8>)
   be7a0:	4820      	ldr	r0, [pc, #128]	; (be824 <_ZN15JsonDataManager7setTypeEii+0xc8>)
   be7a2:	ab02      	add	r3, sp, #8
   be7a4:	4621      	mov	r1, r4
   be7a6:	f7ff f988 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   be7aa:	4a23      	ldr	r2, [pc, #140]	; (be838 <_ZN15JsonDataManager7setTypeEii+0xdc>)
   be7ac:	481d      	ldr	r0, [pc, #116]	; (be824 <_ZN15JsonDataManager7setTypeEii+0xc8>)
   be7ae:	ab01      	add	r3, sp, #4
   be7b0:	4621      	mov	r1, r4
   be7b2:	f7ff f990 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type from %d to %d", type, newType);
   be7b6:	9a01      	ldr	r2, [sp, #4]
   be7b8:	4920      	ldr	r1, [pc, #128]	; (be83c <_ZN15JsonDataManager7setTypeEii+0xe0>)
   be7ba:	481d      	ldr	r0, [pc, #116]	; (be830 <_ZN15JsonDataManager7setTypeEii+0xd4>)
   be7bc:	462b      	mov	r3, r5
   be7be:	f7f5 fc85 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "type",(int)newType);
   be7c2:	4a1d      	ldr	r2, [pc, #116]	; (be838 <_ZN15JsonDataManager7setTypeEii+0xdc>)
   be7c4:	462b      	mov	r3, r5
   be7c6:	4621      	mov	r1, r4
   be7c8:	a804      	add	r0, sp, #16
   be7ca:	f7ff fef9 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "p",(int)0);			// New type so we need to zero the values
   be7ce:	4a1c      	ldr	r2, [pc, #112]	; (be840 <_ZN15JsonDataManager7setTypeEii+0xe4>)
   be7d0:	2300      	movs	r3, #0
   be7d2:	4621      	mov	r1, r4
   be7d4:	a804      	add	r0, sp, #16
   be7d6:	f7ff fef3 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "pend",(int)0);
   be7da:	4a1a      	ldr	r2, [pc, #104]	; (be844 <_ZN15JsonDataManager7setTypeEii+0xe8>)
   be7dc:	2300      	movs	r3, #0
   be7de:	4621      	mov	r1, r4
   be7e0:	a804      	add	r0, sp, #16
   be7e2:	f7ff feed 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "cont",(int)0);
   be7e6:	4a18      	ldr	r2, [pc, #96]	; (be848 <_ZN15JsonDataManager7setTypeEii+0xec>)
   be7e8:	2300      	movs	r3, #0
   be7ea:	4621      	mov	r1, r4
   be7ec:	a804      	add	r0, sp, #16
   be7ee:	f7ff fee7 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "lrep",(int)0);
   be7f2:	4a16      	ldr	r2, [pc, #88]	; (be84c <_ZN15JsonDataManager7setTypeEii+0xf0>)
   be7f4:	2300      	movs	r3, #0
   be7f6:	4621      	mov	r1, r4
   be7f8:	a804      	add	r0, sp, #16
   be7fa:	f7ff fee1 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "jd1",(int)0);
   be7fe:	4a14      	ldr	r2, [pc, #80]	; (be850 <_ZN15JsonDataManager7setTypeEii+0xf4>)
   be800:	2300      	movs	r3, #0
   be802:	4621      	mov	r1, r4
   be804:	a804      	add	r0, sp, #16
   be806:	f7ff fedb 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "jd2",(int)0);
   be80a:	4a12      	ldr	r2, [pc, #72]	; (be854 <_ZN15JsonDataManager7setTypeEii+0xf8>)
   be80c:	2300      	movs	r3, #0
   be80e:	4621      	mov	r1, r4
   be810:	a804      	add	r0, sp, #16
   be812:	f7ff fed5 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	JsonModifier mod(jp);
   be816:	a804      	add	r0, sp, #16
   be818:	f7fa fe76 	bl	b9508 <_ZN12JsonModifierD1Ev>
	return true;
   be81c:	2001      	movs	r0, #1
}
   be81e:	b015      	add	sp, #84	; 0x54
   be820:	bd30      	pop	{r4, r5, pc}
   be822:	bf00      	nop
   be824:	2003b780 	.word	0x2003b780
   be828:	000c8315 	.word	0x000c8315
   be82c:	000c888a 	.word	0x000c888a
   be830:	2003e634 	.word	0x2003e634
   be834:	000c8430 	.word	0x000c8430
   be838:	000c6fae 	.word	0x000c6fae
   be83c:	000c88c7 	.word	0x000c88c7
   be840:	000c5fdc 	.word	0x000c5fdc
   be844:	000c83ad 	.word	0x000c83ad
   be848:	000c83e7 	.word	0x000c83e7
   be84c:	000c872c 	.word	0x000c872c
   be850:	000c8728 	.word	0x000c8728
   be854:	000c8724 	.word	0x000c8724

000be858 <_ZN15JsonDataManager14setJoinPayloadEh>:
bool JsonDataManager::setJoinPayload(uint8_t nodeNumber) {
   be858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   be85c:	1e4d      	subs	r5, r1, #1
   be85e:	b2eb      	uxtb	r3, r5
   be860:	2bfd      	cmp	r3, #253	; 0xfd
bool JsonDataManager::setJoinPayload(uint8_t nodeNumber) {
   be862:	b09a      	sub	sp, #104	; 0x68
   be864:	4681      	mov	r9, r0
   be866:	460c      	mov	r4, r1
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   be868:	d819      	bhi.n	be89e <_ZN15JsonDataManager14setJoinPayloadEh+0x46>
	uint8_t sensorType = JsonDataManager::instance().getType(nodeNumber);
   be86a:	f7ff f94f 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   be86e:	4621      	mov	r1, r4
   be870:	f7ff f99c 	bl	bdbac <_ZN15JsonDataManager7getTypeEi>
   be874:	4682      	mov	sl, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   be876:	4839      	ldr	r0, [pc, #228]	; (be95c <_ZN15JsonDataManager14setJoinPayloadEh+0x104>)
   be878:	f7fa fed7 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   be87c:	4a38      	ldr	r2, [pc, #224]	; (be960 <_ZN15JsonDataManager14setJoinPayloadEh+0x108>)
   be87e:	4601      	mov	r1, r0
   be880:	ab09      	add	r3, sp, #36	; 0x24
   be882:	4836      	ldr	r0, [pc, #216]	; (be95c <_ZN15JsonDataManager14setJoinPayloadEh+0x104>)
   be884:	f7fb f858 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   be888:	9909      	ldr	r1, [sp, #36]	; 0x24
   be88a:	4834      	ldr	r0, [pc, #208]	; (be95c <_ZN15JsonDataManager14setJoinPayloadEh+0x104>)
   be88c:	462a      	mov	r2, r5
   be88e:	f7fa feee 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   be892:	4604      	mov	r4, r0
   be894:	b928      	cbnz	r0, be8a2 <_ZN15JsonDataManager14setJoinPayloadEh+0x4a>
		Log.info("Ran out of entries in node database - setJoinPayload object parsing");
   be896:	4933      	ldr	r1, [pc, #204]	; (be964 <_ZN15JsonDataManager14setJoinPayloadEh+0x10c>)
   be898:	4833      	ldr	r0, [pc, #204]	; (be968 <_ZN15JsonDataManager14setJoinPayloadEh+0x110>)
   be89a:	f7f5 fc17 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   be89e:	2500      	movs	r5, #0
   be8a0:	e057      	b.n	be952 <_ZN15JsonDataManager14setJoinPayloadEh+0xfa>
	jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayloadInt);
   be8a2:	4601      	mov	r1, r0
   be8a4:	ab08      	add	r3, sp, #32
   be8a6:	4a31      	ldr	r2, [pc, #196]	; (be96c <_ZN15JsonDataManager14setJoinPayloadEh+0x114>)
   be8a8:	482c      	ldr	r0, [pc, #176]	; (be95c <_ZN15JsonDataManager14setJoinPayloadEh+0x104>)
   be8aa:	f7ff f914 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	result = JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   be8ae:	f10d 071f 	add.w	r7, sp, #31
	compressedJoinPayload = static_cast<uint8_t>(compressedJoinPayloadInt);			// set compressedJoinPayload as the compressed JSON payload variables
   be8b2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   be8b6:	9205      	str	r2, [sp, #20]
	result = JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   be8b8:	f10d 061e 	add.w	r6, sp, #30
   be8bc:	f10d 051d 	add.w	r5, sp, #29
   be8c0:	f7ff f924 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   be8c4:	9a05      	ldr	r2, [sp, #20]
   be8c6:	9702      	str	r7, [sp, #8]
   be8c8:	9601      	str	r6, [sp, #4]
   be8ca:	9500      	str	r5, [sp, #0]
   be8cc:	ab07      	add	r3, sp, #28
   be8ce:	4651      	mov	r1, sl
   be8d0:	f7ff fc5c 	bl	be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>
	if (!result) 
   be8d4:	b968      	cbnz	r0, be8f2 <_ZN15JsonDataManager14setJoinPayloadEh+0x9a>
	Log.info("Changing payload values from %d, %d, %d, %d", payload1, payload2, payload3, payload4);
   be8d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   be8da:	9301      	str	r3, [sp, #4]
   be8dc:	f89d 301e 	ldrb.w	r3, [sp, #30]
   be8e0:	9300      	str	r3, [sp, #0]
   be8e2:	f89d 201c 	ldrb.w	r2, [sp, #28]
   be8e6:	f89d 301d 	ldrb.w	r3, [sp, #29]
   be8ea:	4921      	ldr	r1, [pc, #132]	; (be970 <_ZN15JsonDataManager14setJoinPayloadEh+0x118>)
   be8ec:	481e      	ldr	r0, [pc, #120]	; (be968 <_ZN15JsonDataManager14setJoinPayloadEh+0x110>)
   be8ee:	f7f5 fbed 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	compressedJoinPayload = JsonDataManager::instance().getCompressedJoinPayload(sensorType);	// set compressedJoinPayload as the compressed currentData payload variables
   be8f2:	f7ff f90b 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   be8f6:	4651      	mov	r1, sl
   be8f8:	f7ff fb0c 	bl	bdf14 <_ZN15JsonDataManager24getCompressedJoinPayloadEh>
   be8fc:	4680      	mov	r8, r0
	result = JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   be8fe:	f7ff f905 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   be902:	9500      	str	r5, [sp, #0]
   be904:	ab07      	add	r3, sp, #28
   be906:	4642      	mov	r2, r8
   be908:	4651      	mov	r1, sl
   be90a:	e9cd 6701 	strd	r6, r7, [sp, #4]
   be90e:	f7ff fc3d 	bl	be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>
	Log.info("Changed payload values to %d, %d, %d, %d", payload1, payload2, payload3, payload4);
   be912:	f89d 301f 	ldrb.w	r3, [sp, #31]
   be916:	9301      	str	r3, [sp, #4]
   be918:	f89d 301e 	ldrb.w	r3, [sp, #30]
   be91c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   be920:	4914      	ldr	r1, [pc, #80]	; (be974 <_ZN15JsonDataManager14setJoinPayloadEh+0x11c>)
   be922:	9300      	str	r3, [sp, #0]
	result = JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   be924:	4605      	mov	r5, r0
	Log.info("Changed payload values to %d, %d, %d, %d", payload1, payload2, payload3, payload4);
   be926:	f89d 301d 	ldrb.w	r3, [sp, #29]
   be92a:	480f      	ldr	r0, [pc, #60]	; (be968 <_ZN15JsonDataManager14setJoinPayloadEh+0x110>)
   be92c:	f7f5 fbce 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   be930:	490a      	ldr	r1, [pc, #40]	; (be95c <_ZN15JsonDataManager14setJoinPayloadEh+0x104>)
   be932:	a80a      	add	r0, sp, #40	; 0x28
   be934:	f7fb f948 	bl	b9bc8 <_ZN12JsonModifierC1ER10JsonParser>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "p", (int)compressedJoinPayload);
   be938:	4a0c      	ldr	r2, [pc, #48]	; (be96c <_ZN15JsonDataManager14setJoinPayloadEh+0x114>)
   be93a:	4643      	mov	r3, r8
   be93c:	4621      	mov	r1, r4
   be93e:	a80a      	add	r0, sp, #40	; 0x28
   be940:	f7ff fe3e 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	saveNodeDatabase(jp);						
   be944:	4905      	ldr	r1, [pc, #20]	; (be95c <_ZN15JsonDataManager14setJoinPayloadEh+0x104>)
   be946:	4648      	mov	r0, r9
   be948:	f7ff faa0 	bl	bde8c <_ZN15JsonDataManager16saveNodeDatabaseER10JsonParser>
	JsonModifier mod(jp);
   be94c:	a80a      	add	r0, sp, #40	; 0x28
   be94e:	f7fa fddb 	bl	b9508 <_ZN12JsonModifierD1Ev>
}
   be952:	4628      	mov	r0, r5
   be954:	b01a      	add	sp, #104	; 0x68
   be956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be95a:	bf00      	nop
   be95c:	2003b780 	.word	0x2003b780
   be960:	000c8315 	.word	0x000c8315
   be964:	000c88ea 	.word	0x000c88ea
   be968:	2003e634 	.word	0x2003e634
   be96c:	000c5fdc 	.word	0x000c5fdc
   be970:	000c892e 	.word	0x000c892e
   be974:	000c895a 	.word	0x000c895a

000be978 <_ZN15JsonDataManager12setAlertCodeEii>:
bool JsonDataManager::setAlertCode(int nodeNumber, int newAlert) {
   be978:	b570      	push	{r4, r5, r6, lr}
   be97a:	4606      	mov	r6, r0
   be97c:	b092      	sub	sp, #72	; 0x48
   be97e:	4615      	mov	r5, r2
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   be980:	460c      	mov	r4, r1
   be982:	b1a9      	cbz	r1, be9b0 <_ZN15JsonDataManager12setAlertCodeEii+0x38>
   be984:	29ff      	cmp	r1, #255	; 0xff
   be986:	d013      	beq.n	be9b0 <_ZN15JsonDataManager12setAlertCodeEii+0x38>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   be988:	481a      	ldr	r0, [pc, #104]	; (be9f4 <_ZN15JsonDataManager12setAlertCodeEii+0x7c>)
   be98a:	f7fa fe4e 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   be98e:	4a1a      	ldr	r2, [pc, #104]	; (be9f8 <_ZN15JsonDataManager12setAlertCodeEii+0x80>)
   be990:	4601      	mov	r1, r0
   be992:	ab01      	add	r3, sp, #4
   be994:	4817      	ldr	r0, [pc, #92]	; (be9f4 <_ZN15JsonDataManager12setAlertCodeEii+0x7c>)
   be996:	f7fa ffcf 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);	// find the entry for the node of interest
   be99a:	1e62      	subs	r2, r4, #1
   be99c:	9901      	ldr	r1, [sp, #4]
   be99e:	4815      	ldr	r0, [pc, #84]	; (be9f4 <_ZN15JsonDataManager12setAlertCodeEii+0x7c>)
   be9a0:	f7fa fe65 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   be9a4:	4604      	mov	r4, r0
   be9a6:	b928      	cbnz	r0, be9b4 <_ZN15JsonDataManager12setAlertCodeEii+0x3c>
		Log.info("Ran out of entries in node database - setAlertCode object parsing");
   be9a8:	4914      	ldr	r1, [pc, #80]	; (be9fc <_ZN15JsonDataManager12setAlertCodeEii+0x84>)
   be9aa:	4815      	ldr	r0, [pc, #84]	; (bea00 <_ZN15JsonDataManager12setAlertCodeEii+0x88>)
   be9ac:	f7f5 fb8e 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   be9b0:	2000      	movs	r0, #0
   be9b2:	e01d      	b.n	be9f0 <_ZN15JsonDataManager12setAlertCodeEii+0x78>
	jp.getValueByKey(nodeObjectContainer, "pend", currentAlert);			// Now we have the oject for the specific node
   be9b4:	4601      	mov	r1, r0
   be9b6:	4a13      	ldr	r2, [pc, #76]	; (bea04 <_ZN15JsonDataManager12setAlertCodeEii+0x8c>)
   be9b8:	480e      	ldr	r0, [pc, #56]	; (be9f4 <_ZN15JsonDataManager12setAlertCodeEii+0x7c>)
   be9ba:	466b      	mov	r3, sp
   be9bc:	f7ff f88b 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing pending alert from %d to %d", currentAlert, newAlert);
   be9c0:	9a00      	ldr	r2, [sp, #0]
   be9c2:	4911      	ldr	r1, [pc, #68]	; (bea08 <_ZN15JsonDataManager12setAlertCodeEii+0x90>)
   be9c4:	480e      	ldr	r0, [pc, #56]	; (bea00 <_ZN15JsonDataManager12setAlertCodeEii+0x88>)
   be9c6:	462b      	mov	r3, r5
   be9c8:	f7f5 fb80 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   be9cc:	4909      	ldr	r1, [pc, #36]	; (be9f4 <_ZN15JsonDataManager12setAlertCodeEii+0x7c>)
   be9ce:	a802      	add	r0, sp, #8
   be9d0:	f7fb f8fa 	bl	b9bc8 <_ZN12JsonModifierC1ER10JsonParser>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "pend", (int)newAlert);
   be9d4:	4a0b      	ldr	r2, [pc, #44]	; (bea04 <_ZN15JsonDataManager12setAlertCodeEii+0x8c>)
   be9d6:	462b      	mov	r3, r5
   be9d8:	4621      	mov	r1, r4
   be9da:	a802      	add	r0, sp, #8
   be9dc:	f7ff fdf0 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	saveNodeDatabase(jp);						
   be9e0:	4904      	ldr	r1, [pc, #16]	; (be9f4 <_ZN15JsonDataManager12setAlertCodeEii+0x7c>)
   be9e2:	4630      	mov	r0, r6
   be9e4:	f7ff fa52 	bl	bde8c <_ZN15JsonDataManager16saveNodeDatabaseER10JsonParser>
	JsonModifier mod(jp);
   be9e8:	a802      	add	r0, sp, #8
   be9ea:	f7fa fd8d 	bl	b9508 <_ZN12JsonModifierD1Ev>
	return true;
   be9ee:	2001      	movs	r0, #1
}
   be9f0:	b012      	add	sp, #72	; 0x48
   be9f2:	bd70      	pop	{r4, r5, r6, pc}
   be9f4:	2003b780 	.word	0x2003b780
   be9f8:	000c8315 	.word	0x000c8315
   be9fc:	000c8983 	.word	0x000c8983
   bea00:	2003e634 	.word	0x2003e634
   bea04:	000c83ad 	.word	0x000c83ad
   bea08:	000c89c5 	.word	0x000c89c5

000bea0c <_ZN15JsonDataManager15setAlertContextEii>:
bool JsonDataManager::setAlertContext(int nodeNumber, int newAlertContext) {
   bea0c:	b570      	push	{r4, r5, r6, lr}
   bea0e:	4606      	mov	r6, r0
   bea10:	b092      	sub	sp, #72	; 0x48
   bea12:	4615      	mov	r5, r2
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   bea14:	460c      	mov	r4, r1
   bea16:	b1a9      	cbz	r1, bea44 <_ZN15JsonDataManager15setAlertContextEii+0x38>
   bea18:	29ff      	cmp	r1, #255	; 0xff
   bea1a:	d013      	beq.n	bea44 <_ZN15JsonDataManager15setAlertContextEii+0x38>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bea1c:	481a      	ldr	r0, [pc, #104]	; (bea88 <_ZN15JsonDataManager15setAlertContextEii+0x7c>)
   bea1e:	f7fa fe04 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bea22:	4a1a      	ldr	r2, [pc, #104]	; (bea8c <_ZN15JsonDataManager15setAlertContextEii+0x80>)
   bea24:	4601      	mov	r1, r0
   bea26:	ab01      	add	r3, sp, #4
   bea28:	4817      	ldr	r0, [pc, #92]	; (bea88 <_ZN15JsonDataManager15setAlertContextEii+0x7c>)
   bea2a:	f7fa ff85 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);	// find the entry for the node of interest
   bea2e:	1e62      	subs	r2, r4, #1
   bea30:	9901      	ldr	r1, [sp, #4]
   bea32:	4815      	ldr	r0, [pc, #84]	; (bea88 <_ZN15JsonDataManager15setAlertContextEii+0x7c>)
   bea34:	f7fa fe1b 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   bea38:	4604      	mov	r4, r0
   bea3a:	b928      	cbnz	r0, bea48 <_ZN15JsonDataManager15setAlertContextEii+0x3c>
		Log.info("Ran out of entries in node database - setAlertContext object parsing");
   bea3c:	4914      	ldr	r1, [pc, #80]	; (bea90 <_ZN15JsonDataManager15setAlertContextEii+0x84>)
   bea3e:	4815      	ldr	r0, [pc, #84]	; (bea94 <_ZN15JsonDataManager15setAlertContextEii+0x88>)
   bea40:	f7f5 fb44 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   bea44:	2000      	movs	r0, #0
   bea46:	e01d      	b.n	bea84 <_ZN15JsonDataManager15setAlertContextEii+0x78>
	jp.getValueByKey(nodeObjectContainer, "cont", currentAlertContext);			// Now we have the oject for the specific node
   bea48:	4601      	mov	r1, r0
   bea4a:	4a13      	ldr	r2, [pc, #76]	; (bea98 <_ZN15JsonDataManager15setAlertContextEii+0x8c>)
   bea4c:	480e      	ldr	r0, [pc, #56]	; (bea88 <_ZN15JsonDataManager15setAlertContextEii+0x7c>)
   bea4e:	466b      	mov	r3, sp
   bea50:	f7ff f841 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing pending alert context from %d to %d", currentAlertContext, newAlertContext);
   bea54:	9a00      	ldr	r2, [sp, #0]
   bea56:	4911      	ldr	r1, [pc, #68]	; (bea9c <_ZN15JsonDataManager15setAlertContextEii+0x90>)
   bea58:	480e      	ldr	r0, [pc, #56]	; (bea94 <_ZN15JsonDataManager15setAlertContextEii+0x88>)
   bea5a:	462b      	mov	r3, r5
   bea5c:	f7f5 fb36 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   bea60:	4909      	ldr	r1, [pc, #36]	; (bea88 <_ZN15JsonDataManager15setAlertContextEii+0x7c>)
   bea62:	a802      	add	r0, sp, #8
   bea64:	f7fb f8b0 	bl	b9bc8 <_ZN12JsonModifierC1ER10JsonParser>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "cont", (int)newAlertContext);
   bea68:	4a0b      	ldr	r2, [pc, #44]	; (bea98 <_ZN15JsonDataManager15setAlertContextEii+0x8c>)
   bea6a:	462b      	mov	r3, r5
   bea6c:	4621      	mov	r1, r4
   bea6e:	a802      	add	r0, sp, #8
   bea70:	f7ff fda6 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	saveNodeDatabase(jp);						// This updates the JSON object but doe not commit to to persistent storage
   bea74:	4904      	ldr	r1, [pc, #16]	; (bea88 <_ZN15JsonDataManager15setAlertContextEii+0x7c>)
   bea76:	4630      	mov	r0, r6
   bea78:	f7ff fa08 	bl	bde8c <_ZN15JsonDataManager16saveNodeDatabaseER10JsonParser>
	JsonModifier mod(jp);
   bea7c:	a802      	add	r0, sp, #8
   bea7e:	f7fa fd43 	bl	b9508 <_ZN12JsonModifierD1Ev>
	return true;
   bea82:	2001      	movs	r0, #1
}
   bea84:	b012      	add	sp, #72	; 0x48
   bea86:	bd70      	pop	{r4, r5, r6, pc}
   bea88:	2003b780 	.word	0x2003b780
   bea8c:	000c8315 	.word	0x000c8315
   bea90:	000c89ea 	.word	0x000c89ea
   bea94:	2003e634 	.word	0x2003e634
   bea98:	000c83e7 	.word	0x000c83e7
   bea9c:	000c8a2f 	.word	0x000c8a2f

000beaa0 <_ZN15JsonDataManager12setJsonData1Eiii>:
bool JsonDataManager::setJsonData1(int nodeNumber, int sensorType, int newJsonData1) {
   beaa0:	b570      	push	{r4, r5, r6, lr}
   beaa2:	4606      	mov	r6, r0
   beaa4:	b092      	sub	sp, #72	; 0x48
   beaa6:	461d      	mov	r5, r3
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   beaa8:	460c      	mov	r4, r1
   beaaa:	b1b9      	cbz	r1, beadc <_ZN15JsonDataManager12setJsonData1Eiii+0x3c>
   beaac:	29ff      	cmp	r1, #255	; 0xff
   beaae:	d015      	beq.n	beadc <_ZN15JsonDataManager12setJsonData1Eiii+0x3c>
	if (sensorType > 29) return false; 					// Return false if node is not a valid sensor type
   beab0:	2a1d      	cmp	r2, #29
   beab2:	dc13      	bgt.n	beadc <_ZN15JsonDataManager12setJsonData1Eiii+0x3c>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   beab4:	481a      	ldr	r0, [pc, #104]	; (beb20 <_ZN15JsonDataManager12setJsonData1Eiii+0x80>)
   beab6:	f7fa fdb8 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   beaba:	4a1a      	ldr	r2, [pc, #104]	; (beb24 <_ZN15JsonDataManager12setJsonData1Eiii+0x84>)
   beabc:	4601      	mov	r1, r0
   beabe:	ab01      	add	r3, sp, #4
   beac0:	4817      	ldr	r0, [pc, #92]	; (beb20 <_ZN15JsonDataManager12setJsonData1Eiii+0x80>)
   beac2:	f7fa ff39 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   beac6:	1e62      	subs	r2, r4, #1
   beac8:	9901      	ldr	r1, [sp, #4]
   beaca:	4815      	ldr	r0, [pc, #84]	; (beb20 <_ZN15JsonDataManager12setJsonData1Eiii+0x80>)
   beacc:	f7fa fdcf 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   bead0:	4604      	mov	r4, r0
   bead2:	b928      	cbnz	r0, beae0 <_ZN15JsonDataManager12setJsonData1Eiii+0x40>
		Log.info("Ran out of entries in node database - setJsonData1 object parsing");
   bead4:	4914      	ldr	r1, [pc, #80]	; (beb28 <_ZN15JsonDataManager12setJsonData1Eiii+0x88>)
   bead6:	4815      	ldr	r0, [pc, #84]	; (beb2c <_ZN15JsonDataManager12setJsonData1Eiii+0x8c>)
   bead8:	f7f5 faf8 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   beadc:	2000      	movs	r0, #0
   beade:	e01d      	b.n	beb1c <_ZN15JsonDataManager12setJsonData1Eiii+0x7c>
	jp.getValueByKey(nodeObjectContainer, "jd1", jsonData1);
   beae0:	4601      	mov	r1, r0
   beae2:	4a13      	ldr	r2, [pc, #76]	; (beb30 <_ZN15JsonDataManager12setJsonData1Eiii+0x90>)
   beae4:	480e      	ldr	r0, [pc, #56]	; (beb20 <_ZN15JsonDataManager12setJsonData1Eiii+0x80>)
   beae6:	466b      	mov	r3, sp
   beae8:	f7fe fff5 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Updating jsonData1 value from %d to %d", jsonData1, newJsonData1);
   beaec:	9a00      	ldr	r2, [sp, #0]
   beaee:	4911      	ldr	r1, [pc, #68]	; (beb34 <_ZN15JsonDataManager12setJsonData1Eiii+0x94>)
   beaf0:	480e      	ldr	r0, [pc, #56]	; (beb2c <_ZN15JsonDataManager12setJsonData1Eiii+0x8c>)
   beaf2:	462b      	mov	r3, r5
   beaf4:	f7f5 faea 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   beaf8:	4909      	ldr	r1, [pc, #36]	; (beb20 <_ZN15JsonDataManager12setJsonData1Eiii+0x80>)
   beafa:	a802      	add	r0, sp, #8
   beafc:	f7fb f864 	bl	b9bc8 <_ZN12JsonModifierC1ER10JsonParser>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "jd1", (int)newJsonData1);
   beb00:	4a0b      	ldr	r2, [pc, #44]	; (beb30 <_ZN15JsonDataManager12setJsonData1Eiii+0x90>)
   beb02:	462b      	mov	r3, r5
   beb04:	4621      	mov	r1, r4
   beb06:	a802      	add	r0, sp, #8
   beb08:	f7ff fd5a 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	saveNodeDatabase(jp);						// This updates the JSON object but doe not commit to to persistent storage
   beb0c:	4904      	ldr	r1, [pc, #16]	; (beb20 <_ZN15JsonDataManager12setJsonData1Eiii+0x80>)
   beb0e:	4630      	mov	r0, r6
   beb10:	f7ff f9bc 	bl	bde8c <_ZN15JsonDataManager16saveNodeDatabaseER10JsonParser>
	JsonModifier mod(jp);
   beb14:	a802      	add	r0, sp, #8
   beb16:	f7fa fcf7 	bl	b9508 <_ZN12JsonModifierD1Ev>
	return true;
   beb1a:	2001      	movs	r0, #1
}
   beb1c:	b012      	add	sp, #72	; 0x48
   beb1e:	bd70      	pop	{r4, r5, r6, pc}
   beb20:	2003b780 	.word	0x2003b780
   beb24:	000c8315 	.word	0x000c8315
   beb28:	000c8a5c 	.word	0x000c8a5c
   beb2c:	2003e634 	.word	0x2003e634
   beb30:	000c8728 	.word	0x000c8728
   beb34:	000c8a9e 	.word	0x000c8a9e

000beb38 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0>:
bool JsonDataManager::setOccupancyNetForNode(int nodeNumber, int newOccupancyNet){
   beb38:	b5f0      	push	{r4, r5, r6, r7, lr}
   beb3a:	4605      	mov	r5, r0
   beb3c:	b0cd      	sub	sp, #308	; 0x134
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   beb3e:	485c      	ldr	r0, [pc, #368]	; (becb0 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x178>)
bool JsonDataManager::setOccupancyNetForNode(int nodeNumber, int newOccupancyNet){
   beb40:	460e      	mov	r6, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   beb42:	f7fa fd72 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   beb46:	4a5b      	ldr	r2, [pc, #364]	; (becb4 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x17c>)
   beb48:	4601      	mov	r1, r0
   beb4a:	ab0b      	add	r3, sp, #44	; 0x2c
   beb4c:	4858      	ldr	r0, [pc, #352]	; (becb0 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x178>)
   beb4e:	f7fa fef3 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   beb52:	990b      	ldr	r1, [sp, #44]	; 0x2c
   beb54:	4856      	ldr	r0, [pc, #344]	; (becb0 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x178>)
   beb56:	1e6a      	subs	r2, r5, #1
   beb58:	f7fa fd89 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   beb5c:	4604      	mov	r4, r0
   beb5e:	b930      	cbnz	r0, beb6e <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x36>
		Log.info("Ran out of entries in node database - setOccupancyNetForNode object parsing");
   beb60:	4955      	ldr	r1, [pc, #340]	; (becb8 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x180>)
   beb62:	4856      	ldr	r0, [pc, #344]	; (becbc <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x184>)
   beb64:	f7f5 fab2 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
}
   beb68:	4620      	mov	r0, r4
   beb6a:	b04d      	add	sp, #308	; 0x134
   beb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	jp.getValueByKey(nodeObjectContainer, "type", sensorType);  		// Get the sensorType
   beb6e:	4601      	mov	r1, r0
   beb70:	4a53      	ldr	r2, [pc, #332]	; (becc0 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x188>)
   beb72:	484f      	ldr	r0, [pc, #316]	; (becb0 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x178>)
   beb74:	ab08      	add	r3, sp, #32
   beb76:	f7fe ffae 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);  			// Get the uniqueID
   beb7a:	4a52      	ldr	r2, [pc, #328]	; (becc4 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x18c>)
   beb7c:	484c      	ldr	r0, [pc, #304]	; (becb0 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x178>)
   beb7e:	ab09      	add	r3, sp, #36	; 0x24
   beb80:	4621      	mov	r1, r4
   beb82:	f7fe ff9a 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);  // Get the compressedJoinPayload
   beb86:	4a50      	ldr	r2, [pc, #320]	; (becc8 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x190>)
   beb88:	4849      	ldr	r0, [pc, #292]	; (becb0 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x178>)
   beb8a:	ab0a      	add	r3, sp, #40	; 0x28
   beb8c:	4621      	mov	r1, r4
   beb8e:	f7fe ffa2 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4); // extract the values
   beb92:	f7fe ffbb 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   beb96:	f10d 031f 	add.w	r3, sp, #31
   beb9a:	9302      	str	r3, [sp, #8]
   beb9c:	f10d 031e 	add.w	r3, sp, #30
   beba0:	9301      	str	r3, [sp, #4]
   beba2:	f10d 031d 	add.w	r3, sp, #29
   beba6:	9300      	str	r3, [sp, #0]
   beba8:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   bebac:	f89d 1020 	ldrb.w	r1, [sp, #32]
   bebb0:	ab07      	add	r3, sp, #28
   bebb2:	f7ff faeb 	bl	be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>
	if (sensorType >= 10 && sensorType <= 19) {	// Ignore nodes that are not occupancy nodes in this function
   bebb6:	9b08      	ldr	r3, [sp, #32]
   bebb8:	3b0a      	subs	r3, #10
   bebba:	2b09      	cmp	r3, #9
   bebbc:	d901      	bls.n	bebc2 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x8a>
	return true;
   bebbe:	2401      	movs	r4, #1
   bebc0:	e7d2      	b.n	beb68 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x30>
		result = JsonDataManager::instance().setAlertCode(nodeNumber, 12);         			  /*** Queue up an alert code with alert context ***/
   bebc2:	f7fe ffa3 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bebc6:	220c      	movs	r2, #12
   bebc8:	4629      	mov	r1, r5
   bebca:	f7ff fed5 	bl	be978 <_ZN15JsonDataManager12setAlertCodeEii>
		result = JsonDataManager::instance().setAlertContext(nodeNumber, newOccupancyNet);  	  /*** These will be set to current in the Data Acknowledgement message ***/
   bebce:	f7fe ff9d 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bebd2:	4632      	mov	r2, r6
   bebd4:	4629      	mov	r1, r5
   bebd6:	f7ff ff19 	bl	bea0c <_ZN15JsonDataManager15setAlertContextEii>
   bebda:	4604      	mov	r4, r0
   bebdc:	4607      	mov	r7, r0
		if(result) {
   bebde:	2800      	cmp	r0, #0
   bebe0:	d04d      	beq.n	bec7e <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x146>
			snprintf(message, sizeof(message), "Node %lu net count set to %d", uniqueID, newOccupancyNet);
   bebe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bebe4:	4a39      	ldr	r2, [pc, #228]	; (beccc <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x194>)
   bebe6:	9600      	str	r6, [sp, #0]
   bebe8:	f44f 7180 	mov.w	r1, #256	; 0x100
   bebec:	a80c      	add	r0, sp, #48	; 0x30
   bebee:	f001 fbe3 	bl	c03b8 <snprintf>
			Log.info(message);
   bebf2:	4832      	ldr	r0, [pc, #200]	; (becbc <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x184>)
   bebf4:	4f36      	ldr	r7, [pc, #216]	; (becd0 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x198>)
   bebf6:	a90c      	add	r1, sp, #48	; 0x30
   bebf8:	f7f5 fa68 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bebfc:	f001 fb74 	bl	c02e8 <spark_cloud_flag_connected>
			if (Particle.connected()) PublishQueuePosix::instance().publish("Setting Occupancy", message, PRIVATE);
   bec00:	b148      	cbz	r0, bec16 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0xde>
   bec02:	f7fb fe55 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   bec06:	2300      	movs	r3, #0
   bec08:	f88d 3000 	strb.w	r3, [sp]
   bec0c:	783b      	ldrb	r3, [r7, #0]
   bec0e:	4931      	ldr	r1, [pc, #196]	; (becd4 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x19c>)
   bec10:	aa0c      	add	r2, sp, #48	; 0x30
   bec12:	f7fe ff6e 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
			JsonDataManager::instance().setJsonData1(nodeNumber, sensorType, newOccupancyNet);   /*** Set the nodeDatabase representation to 0 as well ***/
   bec16:	f7fe ff79 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bec1a:	9a08      	ldr	r2, [sp, #32]
   bec1c:	4629      	mov	r1, r5
   bec1e:	4633      	mov	r3, r6
   bec20:	f7ff ff3e 	bl	beaa0 <_ZN15JsonDataManager12setJsonData1Eiii>
			snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   bec24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bec26:	9305      	str	r3, [sp, #20]
			uniqueID, -10, payload1 + 1, Room_Occupancy::instance().getRoomNet(payload1), Room_Occupancy::instance().getRoomGross(payload1));
   bec28:	f89d 501c 	ldrb.w	r5, [sp, #28]
   bec2c:	f7fe fee8 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
			snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   bec30:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bec34:	f7fe ff10 	bl	bda58 <_ZN14Room_Occupancy10getRoomNetEi>
   bec38:	4606      	mov	r6, r0
			uniqueID, -10, payload1 + 1, Room_Occupancy::instance().getRoomNet(payload1), Room_Occupancy::instance().getRoomGross(payload1));
   bec3a:	f7fe fee1 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
			snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   bec3e:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bec42:	f7fe ff13 	bl	bda6c <_ZN14Room_Occupancy12getRoomGrossEi>
   bec46:	3501      	adds	r5, #1
   bec48:	f06f 0209 	mvn.w	r2, #9
   bec4c:	9b05      	ldr	r3, [sp, #20]
   bec4e:	9200      	str	r2, [sp, #0]
   bec50:	f44f 7180 	mov.w	r1, #256	; 0x100
   bec54:	4a20      	ldr	r2, [pc, #128]	; (becd8 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x1a0>)
   bec56:	9501      	str	r5, [sp, #4]
   bec58:	e9cd 6002 	strd	r6, r0, [sp, #8]
   bec5c:	a80c      	add	r0, sp, #48	; 0x30
   bec5e:	f001 fbab 	bl	c03b8 <snprintf>
			PublishQueuePosix::instance().publish("Ubidots-LoRA-Occupancy-v2", message, PRIVATE | WITH_ACK);
   bec62:	f7fb fe25 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
    return Flags<TagT, ValueT>(val_ | flags.val_);
   bec66:	4b1d      	ldr	r3, [pc, #116]	; (becdc <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x1a4>)
        val_(0) {
   bec68:	2100      	movs	r1, #0
    return Flags<TagT, ValueT>(val_ | flags.val_);
   bec6a:	781a      	ldrb	r2, [r3, #0]
   bec6c:	783b      	ldrb	r3, [r7, #0]
   bec6e:	f88d 1000 	strb.w	r1, [sp]
   bec72:	491b      	ldr	r1, [pc, #108]	; (bece0 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x1a8>)
   bec74:	4313      	orrs	r3, r2
   bec76:	aa0c      	add	r2, sp, #48	; 0x30
			if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);
   bec78:	f7fe ff3b 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   bec7c:	e774      	b.n	beb68 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x30>
			snprintf(message, sizeof(message), "Node not reset due to failure in setAlertCode or setAlertContext. uID: %lu", uniqueID);
   bec7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bec80:	4a18      	ldr	r2, [pc, #96]	; (bece4 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x1ac>)
   bec82:	f44f 7180 	mov.w	r1, #256	; 0x100
   bec86:	a80c      	add	r0, sp, #48	; 0x30
   bec88:	f001 fb96 	bl	c03b8 <snprintf>
			Log.info(message);
   bec8c:	480b      	ldr	r0, [pc, #44]	; (becbc <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x184>)
   bec8e:	a90c      	add	r1, sp, #48	; 0x30
   bec90:	f7f5 fa1c 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bec94:	f001 fb28 	bl	c02e8 <spark_cloud_flag_connected>
			if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);
   bec98:	4604      	mov	r4, r0
   bec9a:	2800      	cmp	r0, #0
   bec9c:	d08f      	beq.n	bebbe <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x86>
   bec9e:	f7fb fe07 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   beca2:	4b0b      	ldr	r3, [pc, #44]	; (becd0 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x198>)
   beca4:	f88d 7000 	strb.w	r7, [sp]
   beca8:	781b      	ldrb	r3, [r3, #0]
   becaa:	490f      	ldr	r1, [pc, #60]	; (bece8 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x1b0>)
   becac:	aa0c      	add	r2, sp, #48	; 0x30
   becae:	e7e3      	b.n	bec78 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0+0x140>
   becb0:	2003b780 	.word	0x2003b780
   becb4:	000c8315 	.word	0x000c8315
   becb8:	000c8ac5 	.word	0x000c8ac5
   becbc:	2003e634 	.word	0x2003e634
   becc0:	000c6fae 	.word	0x000c6fae
   becc4:	000c8430 	.word	0x000c8430
   becc8:	000c5fdc 	.word	0x000c5fdc
   beccc:	000c8b11 	.word	0x000c8b11
   becd0:	2003b688 	.word	0x2003b688
   becd4:	000c8b2e 	.word	0x000c8b2e
   becd8:	000c5df2 	.word	0x000c5df2
   becdc:	2003b689 	.word	0x2003b689
   bece0:	000c5e3f 	.word	0x000c5e3f
   bece4:	000c8b40 	.word	0x000c8b40
   bece8:	000c5f9c 	.word	0x000c5f9c

000becec <_ZN15JsonDataManager22setOccupancyNetForNodeEii>:
bool JsonDataManager::setOccupancyNetForNode(int nodeNumber, int newOccupancyNet){
   becec:	4608      	mov	r0, r1
   becee:	4611      	mov	r1, r2
	if (nodeNumber == 0 || nodeNumber == 255) return false;					// return false if node not configured
   becf0:	b118      	cbz	r0, becfa <_ZN15JsonDataManager22setOccupancyNetForNodeEii+0xe>
   becf2:	28ff      	cmp	r0, #255	; 0xff
   becf4:	d001      	beq.n	becfa <_ZN15JsonDataManager22setOccupancyNetForNodeEii+0xe>
   becf6:	f7ff bf1f 	b.w	beb38 <_ZN15JsonDataManager22setOccupancyNetForNodeEii.part.0>
}
   becfa:	2000      	movs	r0, #0
   becfc:	4770      	bx	lr
	...

000bed00 <_ZN15JsonDataManager23resetOccupancyNetCountsEv>:
bool JsonDataManager::resetOccupancyNetCounts(){
   bed00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Log.info("Resetting occupancy net counts");
   bed02:	4914      	ldr	r1, [pc, #80]	; (bed54 <_ZN15JsonDataManager23resetOccupancyNetCountsEv+0x54>)
   bed04:	4814      	ldr	r0, [pc, #80]	; (bed58 <_ZN15JsonDataManager23resetOccupancyNetCountsEv+0x58>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bed06:	4d15      	ldr	r5, [pc, #84]	; (bed5c <_ZN15JsonDataManager23resetOccupancyNetCountsEv+0x5c>)
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);  		// Get the nodeNumber
   bed08:	4e15      	ldr	r6, [pc, #84]	; (bed60 <_ZN15JsonDataManager23resetOccupancyNetCountsEv+0x60>)
	Log.info("Resetting occupancy net counts");
   bed0a:	f7f5 f9df 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bed0e:	4813      	ldr	r0, [pc, #76]	; (bed5c <_ZN15JsonDataManager23resetOccupancyNetCountsEv+0x5c>)
   bed10:	f7fa fc8b 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bed14:	4a13      	ldr	r2, [pc, #76]	; (bed64 <_ZN15JsonDataManager23resetOccupancyNetCountsEv+0x64>)
   bed16:	4601      	mov	r1, r0
   bed18:	ab01      	add	r3, sp, #4
   bed1a:	4810      	ldr	r0, [pc, #64]	; (bed5c <_ZN15JsonDataManager23resetOccupancyNetCountsEv+0x5c>)
   bed1c:	f7fa fe0c 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i = 0; i < 100; i++) {											// Iterate through the array looking for a match
   bed20:	2400      	movs	r4, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bed22:	9901      	ldr	r1, [sp, #4]
   bed24:	4622      	mov	r2, r4
   bed26:	4628      	mov	r0, r5
   bed28:	f7fa fca1 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   bed2c:	4601      	mov	r1, r0
   bed2e:	b168      	cbz	r0, bed4c <_ZN15JsonDataManager23resetOccupancyNetCountsEv+0x4c>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);  		// Get the nodeNumber
   bed30:	466b      	mov	r3, sp
   bed32:	4632      	mov	r2, r6
   bed34:	4628      	mov	r0, r5
   bed36:	f7fe fece 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	for (int i = 0; i < 100; i++) {											// Iterate through the array looking for a match
   bed3a:	3401      	adds	r4, #1
		JsonDataManager::instance().setOccupancyNetForNode(nodeNumber, 0);
   bed3c:	f7fe fee6 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bed40:	9900      	ldr	r1, [sp, #0]
   bed42:	2200      	movs	r2, #0
   bed44:	f7ff ffd2 	bl	becec <_ZN15JsonDataManager22setOccupancyNetForNodeEii>
	for (int i = 0; i < 100; i++) {											// Iterate through the array looking for a match
   bed48:	2c64      	cmp	r4, #100	; 0x64
   bed4a:	d1ea      	bne.n	bed22 <_ZN15JsonDataManager23resetOccupancyNetCountsEv+0x22>
}
   bed4c:	2001      	movs	r0, #1
   bed4e:	b002      	add	sp, #8
   bed50:	bd70      	pop	{r4, r5, r6, pc}
   bed52:	bf00      	nop
   bed54:	000c8b8b 	.word	0x000c8b8b
   bed58:	2003e634 	.word	0x2003e634
   bed5c:	2003b780 	.word	0x2003b780
   bed60:	000c6b72 	.word	0x000c6b72
   bed64:	000c8315 	.word	0x000c8315

000bed68 <_ZN15JsonDataManager12setJsonData2Eiii>:
bool JsonDataManager::setJsonData2(int nodeNumber, int sensorType, int newJsonData2) {
   bed68:	b570      	push	{r4, r5, r6, lr}
   bed6a:	4606      	mov	r6, r0
   bed6c:	b092      	sub	sp, #72	; 0x48
   bed6e:	461d      	mov	r5, r3
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   bed70:	460c      	mov	r4, r1
   bed72:	b1b9      	cbz	r1, beda4 <_ZN15JsonDataManager12setJsonData2Eiii+0x3c>
   bed74:	29ff      	cmp	r1, #255	; 0xff
   bed76:	d015      	beq.n	beda4 <_ZN15JsonDataManager12setJsonData2Eiii+0x3c>
	if (sensorType > 29) return false; 					// Return false if node is not a valid sensor type
   bed78:	2a1d      	cmp	r2, #29
   bed7a:	dc13      	bgt.n	beda4 <_ZN15JsonDataManager12setJsonData2Eiii+0x3c>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bed7c:	481a      	ldr	r0, [pc, #104]	; (bede8 <_ZN15JsonDataManager12setJsonData2Eiii+0x80>)
   bed7e:	f7fa fc54 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bed82:	4a1a      	ldr	r2, [pc, #104]	; (bedec <_ZN15JsonDataManager12setJsonData2Eiii+0x84>)
   bed84:	4601      	mov	r1, r0
   bed86:	ab01      	add	r3, sp, #4
   bed88:	4817      	ldr	r0, [pc, #92]	; (bede8 <_ZN15JsonDataManager12setJsonData2Eiii+0x80>)
   bed8a:	f7fa fdd5 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   bed8e:	1e62      	subs	r2, r4, #1
   bed90:	9901      	ldr	r1, [sp, #4]
   bed92:	4815      	ldr	r0, [pc, #84]	; (bede8 <_ZN15JsonDataManager12setJsonData2Eiii+0x80>)
   bed94:	f7fa fc6b 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   bed98:	4604      	mov	r4, r0
   bed9a:	b928      	cbnz	r0, beda8 <_ZN15JsonDataManager12setJsonData2Eiii+0x40>
		Log.info("Ran out of entries in node database - setJsonData2 object parsing");
   bed9c:	4914      	ldr	r1, [pc, #80]	; (bedf0 <_ZN15JsonDataManager12setJsonData2Eiii+0x88>)
   bed9e:	4815      	ldr	r0, [pc, #84]	; (bedf4 <_ZN15JsonDataManager12setJsonData2Eiii+0x8c>)
   beda0:	f7f5 f994 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   beda4:	2000      	movs	r0, #0
   beda6:	e01d      	b.n	bede4 <_ZN15JsonDataManager12setJsonData2Eiii+0x7c>
	jp.getValueByKey(nodeObjectContainer, "jd2", jsonData2);
   beda8:	4601      	mov	r1, r0
   bedaa:	4a13      	ldr	r2, [pc, #76]	; (bedf8 <_ZN15JsonDataManager12setJsonData2Eiii+0x90>)
   bedac:	480e      	ldr	r0, [pc, #56]	; (bede8 <_ZN15JsonDataManager12setJsonData2Eiii+0x80>)
   bedae:	466b      	mov	r3, sp
   bedb0:	f7fe fe91 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Updating jsonData2 value from %d to %d", jsonData2, newJsonData2);
   bedb4:	9a00      	ldr	r2, [sp, #0]
   bedb6:	4911      	ldr	r1, [pc, #68]	; (bedfc <_ZN15JsonDataManager12setJsonData2Eiii+0x94>)
   bedb8:	480e      	ldr	r0, [pc, #56]	; (bedf4 <_ZN15JsonDataManager12setJsonData2Eiii+0x8c>)
   bedba:	462b      	mov	r3, r5
   bedbc:	f7f5 f986 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   bedc0:	4909      	ldr	r1, [pc, #36]	; (bede8 <_ZN15JsonDataManager12setJsonData2Eiii+0x80>)
   bedc2:	a802      	add	r0, sp, #8
   bedc4:	f7fa ff00 	bl	b9bc8 <_ZN12JsonModifierC1ER10JsonParser>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "jd2", (int)newJsonData2);
   bedc8:	4a0b      	ldr	r2, [pc, #44]	; (bedf8 <_ZN15JsonDataManager12setJsonData2Eiii+0x90>)
   bedca:	462b      	mov	r3, r5
   bedcc:	4621      	mov	r1, r4
   bedce:	a802      	add	r0, sp, #8
   bedd0:	f7ff fbf6 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	saveNodeDatabase(jp);						// This updates the JSON object but does not commit to to persistent storage
   bedd4:	4904      	ldr	r1, [pc, #16]	; (bede8 <_ZN15JsonDataManager12setJsonData2Eiii+0x80>)
   bedd6:	4630      	mov	r0, r6
   bedd8:	f7ff f858 	bl	bde8c <_ZN15JsonDataManager16saveNodeDatabaseER10JsonParser>
	JsonModifier mod(jp);
   beddc:	a802      	add	r0, sp, #8
   bedde:	f7fa fb93 	bl	b9508 <_ZN12JsonModifierD1Ev>
	return true;
   bede2:	2001      	movs	r0, #1
}
   bede4:	b012      	add	sp, #72	; 0x48
   bede6:	bd70      	pop	{r4, r5, r6, pc}
   bede8:	2003b780 	.word	0x2003b780
   bedec:	000c8315 	.word	0x000c8315
   bedf0:	000c8baa 	.word	0x000c8baa
   bedf4:	2003e634 	.word	0x2003e634
   bedf8:	000c8724 	.word	0x000c8724
   bedfc:	000c8bec 	.word	0x000c8bec

000bee00 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0>:
bool JsonDataManager::resetCurrentDataForNode(int nodeNumber){
   bee00:	b570      	push	{r4, r5, r6, lr}
	Log.info("Resetting current data for node %d - resetCurrentDataForNode", nodeNumber);
   bee02:	4602      	mov	r2, r0
bool JsonDataManager::resetCurrentDataForNode(int nodeNumber){
   bee04:	b0cc      	sub	sp, #304	; 0x130
	Log.info("Resetting current data for node %d - resetCurrentDataForNode", nodeNumber);
   bee06:	4963      	ldr	r1, [pc, #396]	; (bef94 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x194>)
bool JsonDataManager::resetCurrentDataForNode(int nodeNumber){
   bee08:	4605      	mov	r5, r0
	Log.info("Resetting current data for node %d - resetCurrentDataForNode", nodeNumber);
   bee0a:	4863      	ldr	r0, [pc, #396]	; (bef98 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x198>)
   bee0c:	f7f5 f95e 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bee10:	4862      	ldr	r0, [pc, #392]	; (bef9c <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x19c>)
   bee12:	f7fa fc0a 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bee16:	4a62      	ldr	r2, [pc, #392]	; (befa0 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1a0>)
   bee18:	4601      	mov	r1, r0
   bee1a:	ab0b      	add	r3, sp, #44	; 0x2c
   bee1c:	485f      	ldr	r0, [pc, #380]	; (bef9c <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x19c>)
   bee1e:	f7fa fd8b 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   bee22:	990b      	ldr	r1, [sp, #44]	; 0x2c
   bee24:	485d      	ldr	r0, [pc, #372]	; (bef9c <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x19c>)
   bee26:	1e6a      	subs	r2, r5, #1
   bee28:	f7fa fc21 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   bee2c:	4604      	mov	r4, r0
   bee2e:	b930      	cbnz	r0, bee3e <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x3e>
		Log.info("Ran out of entries in node database - resetCurrentDataForNode object parsing");
   bee30:	495c      	ldr	r1, [pc, #368]	; (befa4 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1a4>)
   bee32:	4859      	ldr	r0, [pc, #356]	; (bef98 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x198>)
   bee34:	f7f5 f94a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
}
   bee38:	4620      	mov	r0, r4
   bee3a:	b04c      	add	sp, #304	; 0x130
   bee3c:	bd70      	pop	{r4, r5, r6, pc}
	jp.getValueByKey(nodeObjectContainer, "type", sensorType);  		// Get the sensorType
   bee3e:	4601      	mov	r1, r0
   bee40:	4a59      	ldr	r2, [pc, #356]	; (befa8 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1a8>)
   bee42:	4856      	ldr	r0, [pc, #344]	; (bef9c <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x19c>)
   bee44:	ab08      	add	r3, sp, #32
   bee46:	f7fe fe46 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);  			// Get the uniqueID
   bee4a:	4a58      	ldr	r2, [pc, #352]	; (befac <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1ac>)
   bee4c:	4853      	ldr	r0, [pc, #332]	; (bef9c <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x19c>)
   bee4e:	ab09      	add	r3, sp, #36	; 0x24
   bee50:	4621      	mov	r1, r4
   bee52:	f7fe fe32 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);  // Get the compressedJoinPayload
   bee56:	4a56      	ldr	r2, [pc, #344]	; (befb0 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1b0>)
   bee58:	4850      	ldr	r0, [pc, #320]	; (bef9c <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x19c>)
   bee5a:	ab0a      	add	r3, sp, #40	; 0x28
   bee5c:	4621      	mov	r1, r4
   bee5e:	f7fe fe3a 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4); // extract the values
   bee62:	f7fe fe53 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bee66:	f10d 031f 	add.w	r3, sp, #31
   bee6a:	9302      	str	r3, [sp, #8]
   bee6c:	f10d 031e 	add.w	r3, sp, #30
   bee70:	9301      	str	r3, [sp, #4]
   bee72:	f10d 031d 	add.w	r3, sp, #29
   bee76:	9300      	str	r3, [sp, #0]
   bee78:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   bee7c:	f89d 1020 	ldrb.w	r1, [sp, #32]
   bee80:	ab07      	add	r3, sp, #28
   bee82:	f7ff f983 	bl	be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>
	switch (sensorType) {
   bee86:	9b08      	ldr	r3, [sp, #32]
   bee88:	2b13      	cmp	r3, #19
   bee8a:	dc06      	bgt.n	bee9a <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x9a>
   bee8c:	2b09      	cmp	r3, #9
   bee8e:	dc08      	bgt.n	beea2 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0xa2>
   bee90:	1e5a      	subs	r2, r3, #1
   bee92:	2a08      	cmp	r2, #8
   bee94:	d86b      	bhi.n	bef6e <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x16e>
   bee96:	2401      	movs	r4, #1
   bee98:	e7ce      	b.n	bee38 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x38>
   bee9a:	f1a3 0214 	sub.w	r2, r3, #20
   bee9e:	2a09      	cmp	r2, #9
   beea0:	e7f8      	b.n	bee94 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x94>
			result = JsonDataManager::instance().setAlertCode(nodeNumber, 6);         /*** Queue up an alert code to reset current data ***/
   beea2:	f7fe fe33 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   beea6:	2206      	movs	r2, #6
   beea8:	4629      	mov	r1, r5
   beeaa:	f7ff fd65 	bl	be978 <_ZN15JsonDataManager12setAlertCodeEii>
			if(result){
   beeae:	4604      	mov	r4, r0
   beeb0:	2800      	cmp	r0, #0
   beeb2:	d041      	beq.n	bef38 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x138>
				JsonDataManager::instance().setJsonData1(nodeNumber, sensorType, 0);   // Set the JsonData1 to 0 for the node (occupancyNet)
   beeb4:	f7fe fe2a 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   beeb8:	4629      	mov	r1, r5
   beeba:	9a08      	ldr	r2, [sp, #32]
   beebc:	2300      	movs	r3, #0
   beebe:	f7ff fdef 	bl	beaa0 <_ZN15JsonDataManager12setJsonData1Eiii>
				JsonDataManager::instance().setJsonData2(nodeNumber, sensorType, 0);   // Set the JsonData1 to 0 for the node (occupancyGross)
   beec2:	f7fe fe23 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   beec6:	9a08      	ldr	r2, [sp, #32]
   beec8:	4629      	mov	r1, r5
   beeca:	2300      	movs	r3, #0
   beecc:	f7ff ff4c 	bl	bed68 <_ZN15JsonDataManager12setJsonData2Eiii>
				snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   beed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   beed2:	9305      	str	r3, [sp, #20]
				uniqueID, -10, payload1 + 1, Room_Occupancy::instance().getRoomNet(payload1), Room_Occupancy::instance().getRoomGross(payload1));
   beed4:	f89d 501c 	ldrb.w	r5, [sp, #28]
   beed8:	f7fe fd92 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
				snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   beedc:	f89d 101c 	ldrb.w	r1, [sp, #28]
   beee0:	f7fe fdba 	bl	bda58 <_ZN14Room_Occupancy10getRoomNetEi>
   beee4:	4606      	mov	r6, r0
				uniqueID, -10, payload1 + 1, Room_Occupancy::instance().getRoomNet(payload1), Room_Occupancy::instance().getRoomGross(payload1));
   beee6:	f7fe fd8b 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
				snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   beeea:	f89d 101c 	ldrb.w	r1, [sp, #28]
   beeee:	f7fe fdbd 	bl	bda6c <_ZN14Room_Occupancy12getRoomGrossEi>
   beef2:	3501      	adds	r5, #1
   beef4:	f06f 0209 	mvn.w	r2, #9
   beef8:	e9cd 6002 	strd	r6, r0, [sp, #8]
   beefc:	9b05      	ldr	r3, [sp, #20]
   beefe:	9501      	str	r5, [sp, #4]
   bef00:	9200      	str	r2, [sp, #0]
   bef02:	f44f 7180 	mov.w	r1, #256	; 0x100
   bef06:	4a2b      	ldr	r2, [pc, #172]	; (befb4 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1b4>)
   bef08:	a80c      	add	r0, sp, #48	; 0x30
   bef0a:	f001 fa55 	bl	c03b8 <snprintf>
   bef0e:	f001 f9eb 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Ubidots-LoRA-Occupancy-v2", message, PRIVATE | WITH_ACK);
   bef12:	4605      	mov	r5, r0
   bef14:	2800      	cmp	r0, #0
   bef16:	d08f      	beq.n	bee38 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x38>
   bef18:	f7fb fcca 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bef1c:	4b26      	ldr	r3, [pc, #152]	; (befb8 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1b8>)
   bef1e:	781a      	ldrb	r2, [r3, #0]
   bef20:	4b26      	ldr	r3, [pc, #152]	; (befbc <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1bc>)
   bef22:	781b      	ldrb	r3, [r3, #0]
        val_(0) {
   bef24:	2100      	movs	r1, #0
   bef26:	f88d 1000 	strb.w	r1, [sp]
   bef2a:	4313      	orrs	r3, r2
   bef2c:	4924      	ldr	r1, [pc, #144]	; (befc0 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1c0>)
   bef2e:	aa0c      	add	r2, sp, #48	; 0x30
   bef30:	f7fe fddf 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	return true;
   bef34:	462c      	mov	r4, r5
   bef36:	e77f      	b.n	bee38 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x38>
				snprintf(message, sizeof(message), "Node not reset due to failure in setAlertCode. uID: %lu", uniqueID);
   bef38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bef3a:	4a22      	ldr	r2, [pc, #136]	; (befc4 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1c4>)
   bef3c:	f44f 7180 	mov.w	r1, #256	; 0x100
   bef40:	a80c      	add	r0, sp, #48	; 0x30
   bef42:	f001 fa39 	bl	c03b8 <snprintf>
				Log.info(message);
   bef46:	4814      	ldr	r0, [pc, #80]	; (bef98 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x198>)
   bef48:	a90c      	add	r1, sp, #48	; 0x30
   bef4a:	f7f5 f8bf 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bef4e:	f001 f9cb 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);
   bef52:	b908      	cbnz	r0, bef58 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x158>
				return false;
   bef54:	2400      	movs	r4, #0
   bef56:	e76f      	b.n	bee38 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x38>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);
   bef58:	f7fb fcaa 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
			if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);		        		
   bef5c:	4b17      	ldr	r3, [pc, #92]	; (befbc <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1bc>)
   bef5e:	f88d 4000 	strb.w	r4, [sp]
   bef62:	781b      	ldrb	r3, [r3, #0]
   bef64:	4918      	ldr	r1, [pc, #96]	; (befc8 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1c8>)
   bef66:	aa0c      	add	r2, sp, #48	; 0x30
   bef68:	f7fe fdc3 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   bef6c:	e764      	b.n	bee38 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x38>
			snprintf(message, sizeof(message), "Unknown sensor type in resetCurrentDataForNode %d", sensorType);
   bef6e:	4a17      	ldr	r2, [pc, #92]	; (befcc <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x1cc>)
   bef70:	f44f 7180 	mov.w	r1, #256	; 0x100
   bef74:	a80c      	add	r0, sp, #48	; 0x30
   bef76:	f001 fa1f 	bl	c03b8 <snprintf>
			Log.info(message);
   bef7a:	4807      	ldr	r0, [pc, #28]	; (bef98 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x198>)
   bef7c:	a90c      	add	r1, sp, #48	; 0x30
   bef7e:	f7f5 f8a5 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bef82:	f001 f9b1 	bl	c02e8 <spark_cloud_flag_connected>
			if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);		        		
   bef86:	2800      	cmp	r0, #0
   bef88:	d0e4      	beq.n	bef54 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x154>
   bef8a:	f7fb fc91 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bef8e:	2400      	movs	r4, #0
   bef90:	e7e4      	b.n	bef5c <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0+0x15c>
   bef92:	bf00      	nop
   bef94:	000c8c13 	.word	0x000c8c13
   bef98:	2003e634 	.word	0x2003e634
   bef9c:	2003b780 	.word	0x2003b780
   befa0:	000c8315 	.word	0x000c8315
   befa4:	000c8c50 	.word	0x000c8c50
   befa8:	000c6fae 	.word	0x000c6fae
   befac:	000c8430 	.word	0x000c8430
   befb0:	000c5fdc 	.word	0x000c5fdc
   befb4:	000c5df2 	.word	0x000c5df2
   befb8:	2003b689 	.word	0x2003b689
   befbc:	2003b688 	.word	0x2003b688
   befc0:	000c5e3f 	.word	0x000c5e3f
   befc4:	000c8c9d 	.word	0x000c8c9d
   befc8:	000c5f9c 	.word	0x000c5f9c
   befcc:	000c8cd5 	.word	0x000c8cd5

000befd0 <_ZN15JsonDataManager23resetCurrentDataForNodeEi>:
	if (nodeNumber == 0 || nodeNumber == 255) return false;					// return false if node not configured
   befd0:	4608      	mov	r0, r1
   befd2:	b119      	cbz	r1, befdc <_ZN15JsonDataManager23resetCurrentDataForNodeEi+0xc>
   befd4:	29ff      	cmp	r1, #255	; 0xff
   befd6:	d001      	beq.n	befdc <_ZN15JsonDataManager23resetCurrentDataForNodeEi+0xc>
   befd8:	f7ff bf12 	b.w	bee00 <_ZN15JsonDataManager23resetCurrentDataForNodeEi.part.0>
}
   befdc:	2000      	movs	r0, #0
   befde:	4770      	bx	lr

000befe0 <_ZN15JsonDataManager20resetOccupancyCountsEv>:
bool JsonDataManager::resetOccupancyCounts(){
   befe0:	b5f0      	push	{r4, r5, r6, r7, lr}
	Log.info("Resetting all occupancy counts - resetOccupancyCounts");
   befe2:	491a      	ldr	r1, [pc, #104]	; (bf04c <_ZN15JsonDataManager20resetOccupancyCountsEv+0x6c>)
   befe4:	481a      	ldr	r0, [pc, #104]	; (bf050 <_ZN15JsonDataManager20resetOccupancyCountsEv+0x70>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   befe6:	4d1b      	ldr	r5, [pc, #108]	; (bf054 <_ZN15JsonDataManager20resetOccupancyCountsEv+0x74>)
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);  		// Get the nodeNumber
   befe8:	4e1b      	ldr	r6, [pc, #108]	; (bf058 <_ZN15JsonDataManager20resetOccupancyCountsEv+0x78>)
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);  		// Get the sensorType
   befea:	4f1c      	ldr	r7, [pc, #112]	; (bf05c <_ZN15JsonDataManager20resetOccupancyCountsEv+0x7c>)
bool JsonDataManager::resetOccupancyCounts(){
   befec:	b087      	sub	sp, #28
	Log.info("Resetting all occupancy counts - resetOccupancyCounts");
   befee:	f7f5 f86d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   beff2:	4818      	ldr	r0, [pc, #96]	; (bf054 <_ZN15JsonDataManager20resetOccupancyCountsEv+0x74>)
   beff4:	f7fa fb19 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   beff8:	4a19      	ldr	r2, [pc, #100]	; (bf060 <_ZN15JsonDataManager20resetOccupancyCountsEv+0x80>)
   beffa:	4601      	mov	r1, r0
   beffc:	ab05      	add	r3, sp, #20
   beffe:	4815      	ldr	r0, [pc, #84]	; (bf054 <_ZN15JsonDataManager20resetOccupancyCountsEv+0x74>)
   bf000:	f7fa fc9a 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i = 0; i < 100; i++) {											// Iterate through the array looking for a match
   bf004:	2400      	movs	r4, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bf006:	9905      	ldr	r1, [sp, #20]
   bf008:	4622      	mov	r2, r4
   bf00a:	4628      	mov	r0, r5
   bf00c:	f7fa fb2f 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   bf010:	4601      	mov	r1, r0
   bf012:	b1b8      	cbz	r0, bf044 <_ZN15JsonDataManager20resetOccupancyCountsEv+0x64>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);  		// Get the nodeNumber
   bf014:	ab03      	add	r3, sp, #12
   bf016:	4632      	mov	r2, r6
   bf018:	9001      	str	r0, [sp, #4]
   bf01a:	4628      	mov	r0, r5
   bf01c:	f7fe fd5b 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);  		// Get the sensorType
   bf020:	ab04      	add	r3, sp, #16
   bf022:	9901      	ldr	r1, [sp, #4]
   bf024:	463a      	mov	r2, r7
   bf026:	4628      	mov	r0, r5
   bf028:	f7fe fd55 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (sensorType >= 10 && sensorType <= 19) {	// Ignore nodes that are not occupancy nodes in this function
   bf02c:	9b04      	ldr	r3, [sp, #16]
   bf02e:	3b0a      	subs	r3, #10
   bf030:	2b09      	cmp	r3, #9
   bf032:	d804      	bhi.n	bf03e <_ZN15JsonDataManager20resetOccupancyCountsEv+0x5e>
			JsonDataManager::instance().resetCurrentDataForNode(nodeNumber);
   bf034:	f7fe fd6a 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf038:	9903      	ldr	r1, [sp, #12]
   bf03a:	f7ff ffc9 	bl	befd0 <_ZN15JsonDataManager23resetCurrentDataForNodeEi>
	for (int i = 0; i < 100; i++) {											// Iterate through the array looking for a match
   bf03e:	3401      	adds	r4, #1
   bf040:	2c64      	cmp	r4, #100	; 0x64
   bf042:	d1e0      	bne.n	bf006 <_ZN15JsonDataManager20resetOccupancyCountsEv+0x26>
}
   bf044:	2001      	movs	r0, #1
   bf046:	b007      	add	sp, #28
   bf048:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf04a:	bf00      	nop
   bf04c:	000c8d07 	.word	0x000c8d07
   bf050:	2003e634 	.word	0x2003e634
   bf054:	2003b780 	.word	0x2003b780
   bf058:	000c6b72 	.word	0x000c6b72
   bf05c:	000c6fae 	.word	0x000c6fae
   bf060:	000c8315 	.word	0x000c8315

000bf064 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0>:
bool JsonDataManager::resetAllDataForNode(int nodeNumber){
   bf064:	b570      	push	{r4, r5, r6, lr}
	Log.info("Resetting current and system data for node %d - resetAllDataForNode", nodeNumber);
   bf066:	4602      	mov	r2, r0
bool JsonDataManager::resetAllDataForNode(int nodeNumber){
   bf068:	b0cc      	sub	sp, #304	; 0x130
	Log.info("Resetting current and system data for node %d - resetAllDataForNode", nodeNumber);
   bf06a:	4962      	ldr	r1, [pc, #392]	; (bf1f4 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x190>)
bool JsonDataManager::resetAllDataForNode(int nodeNumber){
   bf06c:	4605      	mov	r5, r0
	Log.info("Resetting current and system data for node %d - resetAllDataForNode", nodeNumber);
   bf06e:	4862      	ldr	r0, [pc, #392]	; (bf1f8 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x194>)
   bf070:	f7f5 f82c 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bf074:	4861      	ldr	r0, [pc, #388]	; (bf1fc <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x198>)
   bf076:	f7fa fad8 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bf07a:	4a61      	ldr	r2, [pc, #388]	; (bf200 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x19c>)
   bf07c:	4601      	mov	r1, r0
   bf07e:	ab0b      	add	r3, sp, #44	; 0x2c
   bf080:	485e      	ldr	r0, [pc, #376]	; (bf1fc <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x198>)
   bf082:	f7fa fc59 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   bf086:	990b      	ldr	r1, [sp, #44]	; 0x2c
   bf088:	485c      	ldr	r0, [pc, #368]	; (bf1fc <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x198>)
   bf08a:	1e6a      	subs	r2, r5, #1
   bf08c:	f7fa faef 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   bf090:	4604      	mov	r4, r0
   bf092:	b930      	cbnz	r0, bf0a2 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x3e>
		Log.info("Ran out of entries in node database - resetAllDataForNode object parsing");
   bf094:	495b      	ldr	r1, [pc, #364]	; (bf204 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1a0>)
   bf096:	4858      	ldr	r0, [pc, #352]	; (bf1f8 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x194>)
   bf098:	f7f5 f818 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
}
   bf09c:	4620      	mov	r0, r4
   bf09e:	b04c      	add	sp, #304	; 0x130
   bf0a0:	bd70      	pop	{r4, r5, r6, pc}
	jp.getValueByKey(nodeObjectContainer, "type", sensorType);  		// Get the sensorType
   bf0a2:	4601      	mov	r1, r0
   bf0a4:	4a58      	ldr	r2, [pc, #352]	; (bf208 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1a4>)
   bf0a6:	4855      	ldr	r0, [pc, #340]	; (bf1fc <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x198>)
   bf0a8:	ab08      	add	r3, sp, #32
   bf0aa:	f7fe fd14 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);  			// Get the uniqueID
   bf0ae:	4a57      	ldr	r2, [pc, #348]	; (bf20c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1a8>)
   bf0b0:	4852      	ldr	r0, [pc, #328]	; (bf1fc <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x198>)
   bf0b2:	ab09      	add	r3, sp, #36	; 0x24
   bf0b4:	4621      	mov	r1, r4
   bf0b6:	f7fe fd00 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);  // Get the compressedJoinPayload
   bf0ba:	4a55      	ldr	r2, [pc, #340]	; (bf210 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1ac>)
   bf0bc:	484f      	ldr	r0, [pc, #316]	; (bf1fc <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x198>)
   bf0be:	ab0a      	add	r3, sp, #40	; 0x28
   bf0c0:	4621      	mov	r1, r4
   bf0c2:	f7fe fd08 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4); // extract the values
   bf0c6:	f7fe fd21 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf0ca:	f10d 031f 	add.w	r3, sp, #31
   bf0ce:	9302      	str	r3, [sp, #8]
   bf0d0:	f10d 031e 	add.w	r3, sp, #30
   bf0d4:	9301      	str	r3, [sp, #4]
   bf0d6:	f10d 031d 	add.w	r3, sp, #29
   bf0da:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   bf0de:	9300      	str	r3, [sp, #0]
   bf0e0:	f89d 1020 	ldrb.w	r1, [sp, #32]
   bf0e4:	ab07      	add	r3, sp, #28
   bf0e6:	f7ff f851 	bl	be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>
	switch (sensorType) {
   bf0ea:	9a08      	ldr	r2, [sp, #32]
   bf0ec:	2a13      	cmp	r2, #19
   bf0ee:	dc06      	bgt.n	bf0fe <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x9a>
   bf0f0:	2a09      	cmp	r2, #9
   bf0f2:	dc08      	bgt.n	bf106 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0xa2>
   bf0f4:	1e53      	subs	r3, r2, #1
   bf0f6:	2b08      	cmp	r3, #8
   bf0f8:	d86b      	bhi.n	bf1d2 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x16e>
   bf0fa:	2401      	movs	r4, #1
   bf0fc:	e7ce      	b.n	bf09c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x38>
   bf0fe:	f1a2 0314 	sub.w	r3, r2, #20
   bf102:	2b09      	cmp	r3, #9
   bf104:	e7f8      	b.n	bf0f8 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x94>
			result = JsonDataManager::instance().setAlertCode(nodeNumber, 5);         /*** Queue up an alert code to reset both system and current data on node ***/
   bf106:	f7fe fd01 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf10a:	2205      	movs	r2, #5
   bf10c:	4629      	mov	r1, r5
   bf10e:	f7ff fc33 	bl	be978 <_ZN15JsonDataManager12setAlertCodeEii>
			if(result){
   bf112:	4604      	mov	r4, r0
   bf114:	2800      	cmp	r0, #0
   bf116:	d041      	beq.n	bf19c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x138>
				JsonDataManager::instance().setJsonData1(nodeNumber, sensorType, 0);   // Set the JsonData1 to 0 for the node (occupancyNet)
   bf118:	f7fe fcf8 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf11c:	4629      	mov	r1, r5
   bf11e:	9a08      	ldr	r2, [sp, #32]
   bf120:	2300      	movs	r3, #0
   bf122:	f7ff fcbd 	bl	beaa0 <_ZN15JsonDataManager12setJsonData1Eiii>
				JsonDataManager::instance().setJsonData2(nodeNumber, sensorType, 0);   // Set the JsonData1 to 0 for the node (occupancyGross)
   bf126:	f7fe fcf1 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf12a:	9a08      	ldr	r2, [sp, #32]
   bf12c:	4629      	mov	r1, r5
   bf12e:	2300      	movs	r3, #0
   bf130:	f7ff fe1a 	bl	bed68 <_ZN15JsonDataManager12setJsonData2Eiii>
				snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   bf134:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf136:	9305      	str	r3, [sp, #20]
				uniqueID, -10, payload1 + 1, Room_Occupancy::instance().getRoomNet(payload1), Room_Occupancy::instance().getRoomGross(payload1));
   bf138:	f89d 501c 	ldrb.w	r5, [sp, #28]
   bf13c:	f7fe fc60 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
				snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   bf140:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bf144:	f7fe fc88 	bl	bda58 <_ZN14Room_Occupancy10getRoomNetEi>
   bf148:	4606      	mov	r6, r0
				uniqueID, -10, payload1 + 1, Room_Occupancy::instance().getRoomNet(payload1), Room_Occupancy::instance().getRoomGross(payload1));
   bf14a:	f7fe fc59 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
				snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   bf14e:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bf152:	f7fe fc8b 	bl	bda6c <_ZN14Room_Occupancy12getRoomGrossEi>
   bf156:	3501      	adds	r5, #1
   bf158:	f06f 0209 	mvn.w	r2, #9
   bf15c:	e9cd 6002 	strd	r6, r0, [sp, #8]
   bf160:	9b05      	ldr	r3, [sp, #20]
   bf162:	9501      	str	r5, [sp, #4]
   bf164:	9200      	str	r2, [sp, #0]
   bf166:	f44f 7180 	mov.w	r1, #256	; 0x100
   bf16a:	4a2a      	ldr	r2, [pc, #168]	; (bf214 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1b0>)
   bf16c:	a80c      	add	r0, sp, #48	; 0x30
   bf16e:	f001 f923 	bl	c03b8 <snprintf>
   bf172:	f001 f8b9 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Ubidots-LoRA-Occupancy-v2", message, PRIVATE | WITH_ACK);
   bf176:	4605      	mov	r5, r0
   bf178:	2800      	cmp	r0, #0
   bf17a:	d08f      	beq.n	bf09c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x38>
   bf17c:	f7fb fb98 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
    return Flags<TagT, ValueT>(val_ | flags.val_);
   bf180:	4b25      	ldr	r3, [pc, #148]	; (bf218 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1b4>)
   bf182:	781a      	ldrb	r2, [r3, #0]
   bf184:	4b25      	ldr	r3, [pc, #148]	; (bf21c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1b8>)
   bf186:	781b      	ldrb	r3, [r3, #0]
        val_(0) {
   bf188:	2100      	movs	r1, #0
   bf18a:	f88d 1000 	strb.w	r1, [sp]
   bf18e:	4313      	orrs	r3, r2
   bf190:	4923      	ldr	r1, [pc, #140]	; (bf220 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1bc>)
   bf192:	aa0c      	add	r2, sp, #48	; 0x30
   bf194:	f7fe fcad 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	return true;
   bf198:	462c      	mov	r4, r5
   bf19a:	e77f      	b.n	bf09c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x38>
				snprintf(message, sizeof(message), "Node not reset due to failure in setAlertCode. uID: %lu", uniqueID);
   bf19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf19e:	4a21      	ldr	r2, [pc, #132]	; (bf224 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1c0>)
   bf1a0:	f44f 7180 	mov.w	r1, #256	; 0x100
   bf1a4:	a80c      	add	r0, sp, #48	; 0x30
   bf1a6:	f001 f907 	bl	c03b8 <snprintf>
				Log.info(message);
   bf1aa:	4813      	ldr	r0, [pc, #76]	; (bf1f8 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x194>)
   bf1ac:	a90c      	add	r1, sp, #48	; 0x30
   bf1ae:	f7f4 ff8d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bf1b2:	f001 f899 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);
   bf1b6:	b908      	cbnz	r0, bf1bc <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x158>
				return false;
   bf1b8:	2400      	movs	r4, #0
   bf1ba:	e76f      	b.n	bf09c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x38>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);
   bf1bc:	f7fb fb78 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bf1c0:	4b16      	ldr	r3, [pc, #88]	; (bf21c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1b8>)
   bf1c2:	f88d 4000 	strb.w	r4, [sp]
   bf1c6:	781b      	ldrb	r3, [r3, #0]
   bf1c8:	aa0c      	add	r2, sp, #48	; 0x30
			if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "Unknown sensor type in resetAllDataForNode", PRIVATE);
   bf1ca:	4917      	ldr	r1, [pc, #92]	; (bf228 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1c4>)
   bf1cc:	f7fe fc91 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   bf1d0:	e764      	b.n	bf09c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x38>
			Log.info("Unknown sensor type in resetAllDataForNode %d", sensorType);
   bf1d2:	4916      	ldr	r1, [pc, #88]	; (bf22c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1c8>)
   bf1d4:	4808      	ldr	r0, [pc, #32]	; (bf1f8 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x194>)
   bf1d6:	f7f4 ff79 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bf1da:	f001 f885 	bl	c02e8 <spark_cloud_flag_connected>
			if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "Unknown sensor type in resetAllDataForNode", PRIVATE);
   bf1de:	2800      	cmp	r0, #0
   bf1e0:	d0ea      	beq.n	bf1b8 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x154>
   bf1e2:	f7fb fb65 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bf1e6:	2400      	movs	r4, #0
   bf1e8:	4b0c      	ldr	r3, [pc, #48]	; (bf21c <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1b8>)
   bf1ea:	f88d 4000 	strb.w	r4, [sp]
   bf1ee:	781b      	ldrb	r3, [r3, #0]
   bf1f0:	4a0f      	ldr	r2, [pc, #60]	; (bf230 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x1cc>)
   bf1f2:	e7ea      	b.n	bf1ca <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0+0x166>
   bf1f4:	000c8d3d 	.word	0x000c8d3d
   bf1f8:	2003e634 	.word	0x2003e634
   bf1fc:	2003b780 	.word	0x2003b780
   bf200:	000c8315 	.word	0x000c8315
   bf204:	000c8d81 	.word	0x000c8d81
   bf208:	000c6fae 	.word	0x000c6fae
   bf20c:	000c8430 	.word	0x000c8430
   bf210:	000c5fdc 	.word	0x000c5fdc
   bf214:	000c5df2 	.word	0x000c5df2
   bf218:	2003b689 	.word	0x2003b689
   bf21c:	2003b688 	.word	0x2003b688
   bf220:	000c5e3f 	.word	0x000c5e3f
   bf224:	000c8c9d 	.word	0x000c8c9d
   bf228:	000c5f9c 	.word	0x000c5f9c
   bf22c:	000c8dca 	.word	0x000c8dca
   bf230:	000c8df8 	.word	0x000c8df8

000bf234 <_ZN15JsonDataManager19resetAllDataForNodeEi>:
	if (nodeNumber == 0 || nodeNumber == 255) return false;					// return false if node not configured
   bf234:	4608      	mov	r0, r1
   bf236:	b119      	cbz	r1, bf240 <_ZN15JsonDataManager19resetAllDataForNodeEi+0xc>
   bf238:	29ff      	cmp	r1, #255	; 0xff
   bf23a:	d001      	beq.n	bf240 <_ZN15JsonDataManager19resetAllDataForNodeEi+0xc>
   bf23c:	f7ff bf12 	b.w	bf064 <_ZN15JsonDataManager19resetAllDataForNodeEi.part.0>
}
   bf240:	2000      	movs	r0, #0
   bf242:	4770      	bx	lr

000bf244 <_ZN15JsonDataManager13setLastReportEii>:
bool JsonDataManager::setLastReport(int nodeNumber, int newLastReport) {
   bf244:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf246:	4607      	mov	r7, r0
   bf248:	b093      	sub	sp, #76	; 0x4c
   bf24a:	4616      	mov	r6, r2
	if (nodeNumber == 0 || nodeNumber == 255) return false;					// return false if node not configured
   bf24c:	460c      	mov	r4, r1
   bf24e:	b1a9      	cbz	r1, bf27c <_ZN15JsonDataManager13setLastReportEii+0x38>
   bf250:	29ff      	cmp	r1, #255	; 0xff
   bf252:	d013      	beq.n	bf27c <_ZN15JsonDataManager13setLastReportEii+0x38>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bf254:	4817      	ldr	r0, [pc, #92]	; (bf2b4 <_ZN15JsonDataManager13setLastReportEii+0x70>)
   bf256:	f7fa f9e8 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bf25a:	4a17      	ldr	r2, [pc, #92]	; (bf2b8 <_ZN15JsonDataManager13setLastReportEii+0x74>)
   bf25c:	4601      	mov	r1, r0
   bf25e:	ab01      	add	r3, sp, #4
   bf260:	4814      	ldr	r0, [pc, #80]	; (bf2b4 <_ZN15JsonDataManager13setLastReportEii+0x70>)
   bf262:	f7fa fb69 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   bf266:	9901      	ldr	r1, [sp, #4]
   bf268:	4812      	ldr	r0, [pc, #72]	; (bf2b4 <_ZN15JsonDataManager13setLastReportEii+0x70>)
   bf26a:	1e62      	subs	r2, r4, #1
   bf26c:	f7fa f9ff 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 
   bf270:	4605      	mov	r5, r0
   bf272:	b928      	cbnz	r0, bf280 <_ZN15JsonDataManager13setLastReportEii+0x3c>
		Log.info("Ran out of entries in node database - setLastReport object parsing");
   bf274:	4911      	ldr	r1, [pc, #68]	; (bf2bc <_ZN15JsonDataManager13setLastReportEii+0x78>)
   bf276:	4812      	ldr	r0, [pc, #72]	; (bf2c0 <_ZN15JsonDataManager13setLastReportEii+0x7c>)
   bf278:	f7f4 ff28 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return false;					// return false if node not configured
   bf27c:	2000      	movs	r0, #0
   bf27e:	e017      	b.n	bf2b0 <_ZN15JsonDataManager13setLastReportEii+0x6c>
	Log.info("LastReport value for node %d set to %d", nodeNumber, newLastReport);
   bf280:	4633      	mov	r3, r6
   bf282:	4622      	mov	r2, r4
   bf284:	490f      	ldr	r1, [pc, #60]	; (bf2c4 <_ZN15JsonDataManager13setLastReportEii+0x80>)
   bf286:	480e      	ldr	r0, [pc, #56]	; (bf2c0 <_ZN15JsonDataManager13setLastReportEii+0x7c>)
   bf288:	f7f4 ff20 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   bf28c:	4909      	ldr	r1, [pc, #36]	; (bf2b4 <_ZN15JsonDataManager13setLastReportEii+0x70>)
   bf28e:	a802      	add	r0, sp, #8
   bf290:	f7fa fc9a 	bl	b9bc8 <_ZN12JsonModifierC1ER10JsonParser>
	mod.insertOrUpdateKeyValue(nodeObjectContainer, "lrep", (int)newLastReport);
   bf294:	4a0c      	ldr	r2, [pc, #48]	; (bf2c8 <_ZN15JsonDataManager13setLastReportEii+0x84>)
   bf296:	4633      	mov	r3, r6
   bf298:	4629      	mov	r1, r5
   bf29a:	a802      	add	r0, sp, #8
   bf29c:	f7ff f990 	bl	be5c0 <_ZN12JsonModifier22insertOrUpdateKeyValueIiEEvPKN21JsonParserGeneratorRK9jsmntok_tEPKcT_>
	saveNodeDatabase(jp);						// This updates the JSON object but does not commit to to persistent storage
   bf2a0:	4904      	ldr	r1, [pc, #16]	; (bf2b4 <_ZN15JsonDataManager13setLastReportEii+0x70>)
   bf2a2:	4638      	mov	r0, r7
   bf2a4:	f7fe fdf2 	bl	bde8c <_ZN15JsonDataManager16saveNodeDatabaseER10JsonParser>
	JsonModifier mod(jp);
   bf2a8:	a802      	add	r0, sp, #8
   bf2aa:	f7fa f92d 	bl	b9508 <_ZN12JsonModifierD1Ev>
	return true;
   bf2ae:	2001      	movs	r0, #1
}
   bf2b0:	b013      	add	sp, #76	; 0x4c
   bf2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf2b4:	2003b780 	.word	0x2003b780
   bf2b8:	000c8315 	.word	0x000c8315
   bf2bc:	000c8e23 	.word	0x000c8e23
   bf2c0:	2003e634 	.word	0x2003e634
   bf2c4:	000c8e66 	.word	0x000c8e66
   bf2c8:	000c872c 	.word	0x000c872c

000bf2cc <_ZN15JsonDataManager10resetSpaceEi>:
bool JsonDataManager::resetSpace(int space){
   bf2cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bf2d0:	4880      	ldr	r0, [pc, #512]	; (bf4d4 <_ZN15JsonDataManager10resetSpaceEi+0x208>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bf2d2:	4d80      	ldr	r5, [pc, #512]	; (bf4d4 <_ZN15JsonDataManager10resetSpaceEi+0x208>)
		jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);  // Get the compressedJoinPayload
   bf2d4:	f8df 8238 	ldr.w	r8, [pc, #568]	; bf510 <_ZN15JsonDataManager10resetSpaceEi+0x244>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);  		// Get the nodeNumber
   bf2d8:	f8df 9238 	ldr.w	r9, [pc, #568]	; bf514 <_ZN15JsonDataManager10resetSpaceEi+0x248>
bool JsonDataManager::resetSpace(int space){
   bf2dc:	b0cf      	sub	sp, #316	; 0x13c
   bf2de:	460f      	mov	r7, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bf2e0:	f7fa f9a3 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bf2e4:	4a7c      	ldr	r2, [pc, #496]	; (bf4d8 <_ZN15JsonDataManager10resetSpaceEi+0x20c>)
   bf2e6:	4601      	mov	r1, r0
   bf2e8:	ab0d      	add	r3, sp, #52	; 0x34
   bf2ea:	487a      	ldr	r0, [pc, #488]	; (bf4d4 <_ZN15JsonDataManager10resetSpaceEi+0x208>)
   bf2ec:	f7fa fb24 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i = 0; i < 100; i++) {											// Iterate through the array looking for a match
   bf2f0:	2600      	movs	r6, #0
	byte updateNeeded = 0;
   bf2f2:	4634      	mov	r4, r6
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bf2f4:	990d      	ldr	r1, [sp, #52]	; 0x34
   bf2f6:	4632      	mov	r2, r6
   bf2f8:	4628      	mov	r0, r5
   bf2fa:	f7fa f9b8 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   bf2fe:	4601      	mov	r1, r0
   bf300:	2800      	cmp	r0, #0
   bf302:	d03f      	beq.n	bf384 <_ZN15JsonDataManager10resetSpaceEi+0xb8>
		jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);  // Get the compressedJoinPayload
   bf304:	ab0c      	add	r3, sp, #48	; 0x30
   bf306:	4642      	mov	r2, r8
   bf308:	9005      	str	r0, [sp, #20]
   bf30a:	4628      	mov	r0, r5
   bf30c:	f7fe fbe3 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);  		// Get the nodeNumber
   bf310:	9905      	ldr	r1, [sp, #20]
   bf312:	ab0a      	add	r3, sp, #40	; 0x28
   bf314:	464a      	mov	r2, r9
   bf316:	4628      	mov	r0, r5
   bf318:	f7fe fbdd 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);  		// Get the nodeNumber
   bf31c:	4a6f      	ldr	r2, [pc, #444]	; (bf4dc <_ZN15JsonDataManager10resetSpaceEi+0x210>)
   bf31e:	9905      	ldr	r1, [sp, #20]
   bf320:	ab0b      	add	r3, sp, #44	; 0x2c
   bf322:	4628      	mov	r0, r5
   bf324:	f7fe fbc9 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);  		// Get the sensorType
   bf328:	4a6d      	ldr	r2, [pc, #436]	; (bf4e0 <_ZN15JsonDataManager10resetSpaceEi+0x214>)
   bf32a:	9905      	ldr	r1, [sp, #20]
   bf32c:	ab08      	add	r3, sp, #32
   bf32e:	4628      	mov	r0, r5
   bf330:	f7fe fbd1 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "jd1", jsonData1);  		// Get the sensorType
   bf334:	4a6b      	ldr	r2, [pc, #428]	; (bf4e4 <_ZN15JsonDataManager10resetSpaceEi+0x218>)
   bf336:	9905      	ldr	r1, [sp, #20]
   bf338:	ab09      	add	r3, sp, #36	; 0x24
   bf33a:	4628      	mov	r0, r5
   bf33c:	f7fe fbcb 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4); // extract the values
   bf340:	f7fe fbe4 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf344:	f10d 031f 	add.w	r3, sp, #31
   bf348:	9302      	str	r3, [sp, #8]
   bf34a:	f10d 031e 	add.w	r3, sp, #30
   bf34e:	9301      	str	r3, [sp, #4]
   bf350:	f10d 031d 	add.w	r3, sp, #29
   bf354:	9300      	str	r3, [sp, #0]
   bf356:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   bf35a:	f89d 1020 	ldrb.w	r1, [sp, #32]
   bf35e:	ab07      	add	r3, sp, #28
   bf360:	f7fe ff14 	bl	be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>
		if (payload1 == space) {
   bf364:	f89d 301c 	ldrb.w	r3, [sp, #28]
   bf368:	42bb      	cmp	r3, r7
   bf36a:	d108      	bne.n	bf37e <_ZN15JsonDataManager10resetSpaceEi+0xb2>
			switch (sensorType) {
   bf36c:	9b08      	ldr	r3, [sp, #32]
   bf36e:	2b13      	cmp	r3, #19
   bf370:	dc37      	bgt.n	bf3e2 <_ZN15JsonDataManager10resetSpaceEi+0x116>
   bf372:	2b09      	cmp	r3, #9
   bf374:	dc39      	bgt.n	bf3ea <_ZN15JsonDataManager10resetSpaceEi+0x11e>
   bf376:	1e5a      	subs	r2, r3, #1
   bf378:	2a08      	cmp	r2, #8
   bf37a:	f200 808c 	bhi.w	bf496 <_ZN15JsonDataManager10resetSpaceEi+0x1ca>
	for (int i = 0; i < 100; i++) {											// Iterate through the array looking for a match
   bf37e:	3601      	adds	r6, #1
   bf380:	2e64      	cmp	r6, #100	; 0x64
   bf382:	d1b7      	bne.n	bf2f4 <_ZN15JsonDataManager10resetSpaceEi+0x28>
	if(updateNeeded == 1){
   bf384:	2c00      	cmp	r4, #0
   bf386:	f000 80a2 	beq.w	bf4ce <_ZN15JsonDataManager10resetSpaceEi+0x202>
		snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   bf38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf38c:	9305      	str	r3, [sp, #20]
		uniqueID, -10, payload1 + 1, Room_Occupancy::instance().getRoomNet(payload1), Room_Occupancy::instance().getRoomGross(payload1));
   bf38e:	f89d 501c 	ldrb.w	r5, [sp, #28]
   bf392:	f7fe fb35 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
		snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   bf396:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bf39a:	f7fe fb5d 	bl	bda58 <_ZN14Room_Occupancy10getRoomNetEi>
   bf39e:	4606      	mov	r6, r0
		uniqueID, -10, payload1 + 1, Room_Occupancy::instance().getRoomNet(payload1), Room_Occupancy::instance().getRoomGross(payload1));
   bf3a0:	f7fe fb2e 	bl	bda00 <_ZN14Room_Occupancy8instanceEv>
		snprintf(message, sizeof(message), "{\"nodeUniqueID\":\"%lu\",\"battery\":%d,\"space\":%d,\"spaceNet\":%d,\"spaceGross\":%d}",\
   bf3a4:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bf3a8:	f7fe fb60 	bl	bda6c <_ZN14Room_Occupancy12getRoomGrossEi>
   bf3ac:	3501      	adds	r5, #1
   bf3ae:	f06f 0209 	mvn.w	r2, #9
   bf3b2:	9b05      	ldr	r3, [sp, #20]
   bf3b4:	9200      	str	r2, [sp, #0]
   bf3b6:	f44f 7180 	mov.w	r1, #256	; 0x100
   bf3ba:	4a4b      	ldr	r2, [pc, #300]	; (bf4e8 <_ZN15JsonDataManager10resetSpaceEi+0x21c>)
   bf3bc:	9501      	str	r5, [sp, #4]
   bf3be:	e9cd 6002 	strd	r6, r0, [sp, #8]
   bf3c2:	a80e      	add	r0, sp, #56	; 0x38
   bf3c4:	f000 fff8 	bl	c03b8 <snprintf>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Occupancy-v2", message, PRIVATE | WITH_ACK);
   bf3c8:	f7fb fa72 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
    return Flags<TagT, ValueT>(val_ | flags.val_);
   bf3cc:	4b47      	ldr	r3, [pc, #284]	; (bf4ec <_ZN15JsonDataManager10resetSpaceEi+0x220>)
   bf3ce:	781a      	ldrb	r2, [r3, #0]
   bf3d0:	4b47      	ldr	r3, [pc, #284]	; (bf4f0 <_ZN15JsonDataManager10resetSpaceEi+0x224>)
   bf3d2:	781b      	ldrb	r3, [r3, #0]
        val_(0) {
   bf3d4:	2100      	movs	r1, #0
   bf3d6:	f88d 1000 	strb.w	r1, [sp]
   bf3da:	4313      	orrs	r3, r2
   bf3dc:	4945      	ldr	r1, [pc, #276]	; (bf4f4 <_ZN15JsonDataManager10resetSpaceEi+0x228>)
   bf3de:	aa0e      	add	r2, sp, #56	; 0x38
   bf3e0:	e06f      	b.n	bf4c2 <_ZN15JsonDataManager10resetSpaceEi+0x1f6>
			switch (sensorType) {
   bf3e2:	f1a3 0214 	sub.w	r2, r3, #20
   bf3e6:	2a09      	cmp	r2, #9
   bf3e8:	e7c7      	b.n	bf37a <_ZN15JsonDataManager10resetSpaceEi+0xae>
						snprintf(message, sizeof(message), "Resetting node %d - resetSpace", nodeNumber);
   bf3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bf3ec:	4a42      	ldr	r2, [pc, #264]	; (bf4f8 <_ZN15JsonDataManager10resetSpaceEi+0x22c>)
   bf3ee:	f44f 7180 	mov.w	r1, #256	; 0x100
   bf3f2:	a80e      	add	r0, sp, #56	; 0x38
   bf3f4:	f000 ffe0 	bl	c03b8 <snprintf>
						Log.info(message);
   bf3f8:	4840      	ldr	r0, [pc, #256]	; (bf4fc <_ZN15JsonDataManager10resetSpaceEi+0x230>)
   bf3fa:	a90e      	add	r1, sp, #56	; 0x38
   bf3fc:	f7f4 fe66 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bf400:	f000 ff72 	bl	c02e8 <spark_cloud_flag_connected>
						if (Particle.connected()) PublishQueuePosix::instance().publish("Space Reset", message, PRIVATE);
   bf404:	b150      	cbz	r0, bf41c <_ZN15JsonDataManager10resetSpaceEi+0x150>
   bf406:	f7fb fa53 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bf40a:	2300      	movs	r3, #0
   bf40c:	f88d 3000 	strb.w	r3, [sp]
   bf410:	4b37      	ldr	r3, [pc, #220]	; (bf4f0 <_ZN15JsonDataManager10resetSpaceEi+0x224>)
   bf412:	493b      	ldr	r1, [pc, #236]	; (bf500 <_ZN15JsonDataManager10resetSpaceEi+0x234>)
   bf414:	781b      	ldrb	r3, [r3, #0]
   bf416:	aa0e      	add	r2, sp, #56	; 0x38
   bf418:	f7fe fb6b 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
						result = JsonDataManager::instance().setAlertCode(nodeNumber, 12);         			  /*** Queue up an alert code with alert context ***/
   bf41c:	f7fe fb76 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf420:	990a      	ldr	r1, [sp, #40]	; 0x28
   bf422:	220c      	movs	r2, #12
   bf424:	f7ff faa8 	bl	be978 <_ZN15JsonDataManager12setAlertCodeEii>
						result = JsonDataManager::instance().setAlertContext(nodeNumber, 0);  	  			  /*** These will be set to current in the Data Acknowledgement message ***/
   bf428:	f7fe fb70 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf42c:	990a      	ldr	r1, [sp, #40]	; 0x28
   bf42e:	2200      	movs	r2, #0
   bf430:	f7ff faec 	bl	bea0c <_ZN15JsonDataManager15setAlertContextEii>
						result = JsonDataManager::instance().setJsonData1(nodeNumber, sensorType, 0);		
   bf434:	f7fe fb6a 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf438:	9a08      	ldr	r2, [sp, #32]
   bf43a:	990a      	ldr	r1, [sp, #40]	; 0x28
   bf43c:	2300      	movs	r3, #0
   bf43e:	f7ff fb2f 	bl	beaa0 <_ZN15JsonDataManager12setJsonData1Eiii>
						result = JsonDataManager::instance().setLastReport(nodeNumber, Time.now()); 		// We just pretended that the node sent a data report with 0, so mark that as a report	
   bf442:	f7fe fb63 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf446:	990a      	ldr	r1, [sp, #40]	; 0x28
   bf448:	9105      	str	r1, [sp, #20]
   bf44a:	4604      	mov	r4, r0
   bf44c:	f002 fe3f 	bl	c20ce <_ZN9TimeClass3nowEv>
   bf450:	9905      	ldr	r1, [sp, #20]
   bf452:	4602      	mov	r2, r0
   bf454:	4620      	mov	r0, r4
   bf456:	f7ff fef5 	bl	bf244 <_ZN15JsonDataManager13setLastReportEii>
						if (!result) {
   bf45a:	4604      	mov	r4, r0
   bf45c:	b108      	cbz	r0, bf462 <_ZN15JsonDataManager10resetSpaceEi+0x196>
						updateNeeded = 1;
   bf45e:	2401      	movs	r4, #1
   bf460:	e78d      	b.n	bf37e <_ZN15JsonDataManager10resetSpaceEi+0xb2>
							snprintf(message, sizeof(message), "Could not reset node %d - resetSpace", nodeNumber);
   bf462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bf464:	4a27      	ldr	r2, [pc, #156]	; (bf504 <_ZN15JsonDataManager10resetSpaceEi+0x238>)
   bf466:	f44f 7180 	mov.w	r1, #256	; 0x100
   bf46a:	a80e      	add	r0, sp, #56	; 0x38
   bf46c:	f000 ffa4 	bl	c03b8 <snprintf>
							Log.info(message);
   bf470:	4822      	ldr	r0, [pc, #136]	; (bf4fc <_ZN15JsonDataManager10resetSpaceEi+0x230>)
   bf472:	a90e      	add	r1, sp, #56	; 0x38
   bf474:	f7f4 fe2a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bf478:	f000 ff36 	bl	c02e8 <spark_cloud_flag_connected>
							if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);		
   bf47c:	2800      	cmp	r0, #0
   bf47e:	d0ee      	beq.n	bf45e <_ZN15JsonDataManager10resetSpaceEi+0x192>
   bf480:	f7fb fa16 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bf484:	4b1a      	ldr	r3, [pc, #104]	; (bf4f0 <_ZN15JsonDataManager10resetSpaceEi+0x224>)
   bf486:	f88d 4000 	strb.w	r4, [sp]
   bf48a:	781b      	ldrb	r3, [r3, #0]
   bf48c:	491e      	ldr	r1, [pc, #120]	; (bf508 <_ZN15JsonDataManager10resetSpaceEi+0x23c>)
   bf48e:	aa0e      	add	r2, sp, #56	; 0x38
   bf490:	f7fe fb2f 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   bf494:	e7e3      	b.n	bf45e <_ZN15JsonDataManager10resetSpaceEi+0x192>
					snprintf(message, sizeof(message), "Unknown sensor type %d in resetSpace", sensorType);
   bf496:	4a1d      	ldr	r2, [pc, #116]	; (bf50c <_ZN15JsonDataManager10resetSpaceEi+0x240>)
   bf498:	f44f 7180 	mov.w	r1, #256	; 0x100
   bf49c:	a80e      	add	r0, sp, #56	; 0x38
   bf49e:	f000 ff8b 	bl	c03b8 <snprintf>
					Log.info(message);
   bf4a2:	4816      	ldr	r0, [pc, #88]	; (bf4fc <_ZN15JsonDataManager10resetSpaceEi+0x230>)
   bf4a4:	a90e      	add	r1, sp, #56	; 0x38
   bf4a6:	f7f4 fe11 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bf4aa:	f000 ff1d 	bl	c02e8 <spark_cloud_flag_connected>
					if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);	
   bf4ae:	b158      	cbz	r0, bf4c8 <_ZN15JsonDataManager10resetSpaceEi+0x1fc>
   bf4b0:	f7fb f9fe 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bf4b4:	2400      	movs	r4, #0
   bf4b6:	4b0e      	ldr	r3, [pc, #56]	; (bf4f0 <_ZN15JsonDataManager10resetSpaceEi+0x224>)
   bf4b8:	f88d 4000 	strb.w	r4, [sp]
   bf4bc:	781b      	ldrb	r3, [r3, #0]
   bf4be:	4912      	ldr	r1, [pc, #72]	; (bf508 <_ZN15JsonDataManager10resetSpaceEi+0x23c>)
   bf4c0:	aa0e      	add	r2, sp, #56	; 0x38
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Occupancy-v2", message, PRIVATE | WITH_ACK);
   bf4c2:	f7fe fb16 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	return true;
   bf4c6:	4620      	mov	r0, r4
}
   bf4c8:	b04f      	add	sp, #316	; 0x13c
   bf4ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return true;
   bf4ce:	2001      	movs	r0, #1
   bf4d0:	e7fa      	b.n	bf4c8 <_ZN15JsonDataManager10resetSpaceEi+0x1fc>
   bf4d2:	bf00      	nop
   bf4d4:	2003b780 	.word	0x2003b780
   bf4d8:	000c8315 	.word	0x000c8315
   bf4dc:	000c8430 	.word	0x000c8430
   bf4e0:	000c6fae 	.word	0x000c6fae
   bf4e4:	000c8728 	.word	0x000c8728
   bf4e8:	000c5df2 	.word	0x000c5df2
   bf4ec:	2003b689 	.word	0x2003b689
   bf4f0:	2003b688 	.word	0x2003b688
   bf4f4:	000c5e3f 	.word	0x000c5e3f
   bf4f8:	000c8e8d 	.word	0x000c8e8d
   bf4fc:	2003e634 	.word	0x2003e634
   bf500:	000c8eac 	.word	0x000c8eac
   bf504:	000c8eb8 	.word	0x000c8eb8
   bf508:	000c5f9c 	.word	0x000c5f9c
   bf50c:	000c8edd 	.word	0x000c8edd
   bf510:	000c5fdc 	.word	0x000c5fdc
   bf514:	000c6b72 	.word	0x000c6b72

000bf518 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi>:
uint16_t JsonDataManager::getOccupancyNetBySpace(int space) {
   bf518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Log.info("Searching JSON database for nodes with space == %d - getOccupancyNetBySpace", space);
   bf51c:	460a      	mov	r2, r1
uint16_t JsonDataManager::getOccupancyNetBySpace(int space) {
   bf51e:	b0cb      	sub	sp, #300	; 0x12c
	Log.info("Searching JSON database for nodes with space == %d - getOccupancyNetBySpace", space);
   bf520:	485c      	ldr	r0, [pc, #368]	; (bf694 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x17c>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bf522:	f8df 8178 	ldr.w	r8, [pc, #376]	; bf69c <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x184>
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);  			// Get the uniqueID
   bf526:	f8df b19c 	ldr.w	fp, [pc, #412]	; bf6c4 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x1ac>
uint16_t JsonDataManager::getOccupancyNetBySpace(int space) {
   bf52a:	460c      	mov	r4, r1
	Log.info("Searching JSON database for nodes with space == %d - getOccupancyNetBySpace", space);
   bf52c:	495a      	ldr	r1, [pc, #360]	; (bf698 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x180>)
   bf52e:	f7f4 fdcd 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bf532:	485a      	ldr	r0, [pc, #360]	; (bf69c <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x184>)
   bf534:	f7fa f879 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bf538:	4a59      	ldr	r2, [pc, #356]	; (bf6a0 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x188>)
   bf53a:	4601      	mov	r1, r0
   bf53c:	ab09      	add	r3, sp, #36	; 0x24
   bf53e:	4857      	ldr	r0, [pc, #348]	; (bf69c <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x184>)
   bf540:	f7fa f9fa 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
   bf544:	2700      	movs	r7, #0
	byte multiEntranceFlag = 0;
   bf546:	46b9      	mov	r9, r7
	int occupancyNetTotal = 0;
   bf548:	463d      	mov	r5, r7
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bf54a:	9909      	ldr	r1, [sp, #36]	; 0x24
   bf54c:	463a      	mov	r2, r7
   bf54e:	4640      	mov	r0, r8
   bf550:	f7fa f88d 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   bf554:	4606      	mov	r6, r0
   bf556:	2800      	cmp	r0, #0
   bf558:	d04c      	beq.n	bf5f4 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0xdc>
		jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);  // Get the compressedJoinPayload
   bf55a:	4601      	mov	r1, r0
   bf55c:	4a51      	ldr	r2, [pc, #324]	; (bf6a4 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x18c>)
   bf55e:	ab08      	add	r3, sp, #32
   bf560:	4640      	mov	r0, r8
   bf562:	f7fe fab8 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);  			// Get the uniqueID
   bf566:	ab06      	add	r3, sp, #24
   bf568:	465a      	mov	r2, fp
   bf56a:	4631      	mov	r1, r6
   bf56c:	4640      	mov	r0, r8
   bf56e:	f7fe faa4 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);  		// Get the sensorType
   bf572:	4a4d      	ldr	r2, [pc, #308]	; (bf6a8 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x190>)
   bf574:	ab07      	add	r3, sp, #28
   bf576:	4631      	mov	r1, r6
   bf578:	4640      	mov	r0, r8
   bf57a:	f7fe faac 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4); // extract the values
   bf57e:	f7fe fac5 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf582:	f10d 0313 	add.w	r3, sp, #19
   bf586:	9302      	str	r3, [sp, #8]
   bf588:	f10d 0a12 	add.w	sl, sp, #18
   bf58c:	f10d 0311 	add.w	r3, sp, #17
   bf590:	9300      	str	r3, [sp, #0]
   bf592:	f89d 2020 	ldrb.w	r2, [sp, #32]
   bf596:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bf59a:	f8cd a004 	str.w	sl, [sp, #4]
   bf59e:	ab04      	add	r3, sp, #16
   bf5a0:	f7fe fdf4 	bl	be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>
		if (payload1 == space) {
   bf5a4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   bf5a8:	42a3      	cmp	r3, r4
   bf5aa:	d120      	bne.n	bf5ee <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0xd6>
			if(sensorType < 10 || sensorType > 19){		// ignore nodes that are not occupancy sensors and throw an alert	
   bf5ac:	9b07      	ldr	r3, [sp, #28]
   bf5ae:	f1a3 020a 	sub.w	r2, r3, #10
   bf5b2:	2a09      	cmp	r2, #9
   bf5b4:	d942      	bls.n	bf63c <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x124>
				snprintf(message, sizeof(message), "Node in space %d has wrong sensorType = %d. uID: %lu", space + 1, sensorType, uniqueID);
   bf5b6:	9a06      	ldr	r2, [sp, #24]
   bf5b8:	f44f 7180 	mov.w	r1, #256	; 0x100
   bf5bc:	e9cd 3200 	strd	r3, r2, [sp]
   bf5c0:	a80a      	add	r0, sp, #40	; 0x28
   bf5c2:	4a3a      	ldr	r2, [pc, #232]	; (bf6ac <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x194>)
   bf5c4:	1c63      	adds	r3, r4, #1
   bf5c6:	f000 fef7 	bl	c03b8 <snprintf>
				Log.info(message);
   bf5ca:	4832      	ldr	r0, [pc, #200]	; (bf694 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x17c>)
   bf5cc:	a90a      	add	r1, sp, #40	; 0x28
   bf5ce:	f7f4 fd7d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bf5d2:	f000 fe89 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);
   bf5d6:	b150      	cbz	r0, bf5ee <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0xd6>
   bf5d8:	f7fb f96a 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bf5dc:	2300      	movs	r3, #0
   bf5de:	f88d 3000 	strb.w	r3, [sp]
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);
   bf5e2:	4b33      	ldr	r3, [pc, #204]	; (bf6b0 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x198>)
   bf5e4:	4933      	ldr	r1, [pc, #204]	; (bf6b4 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x19c>)
   bf5e6:	781b      	ldrb	r3, [r3, #0]
   bf5e8:	aa0a      	add	r2, sp, #40	; 0x28
   bf5ea:	f7fe fa82 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
   bf5ee:	3701      	adds	r7, #1
   bf5f0:	2f64      	cmp	r7, #100	; 0x64
   bf5f2:	d1aa      	bne.n	bf54a <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x32>
	if(occupancyNetTotal < 0) {	// if the total net occupancy is less than 0, set all nodes in the space to 0
   bf5f4:	2d00      	cmp	r5, #0
   bf5f6:	da4a      	bge.n	bf68e <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x176>
		snprintf(message, sizeof(message), "Space %d has a negative value. Resetting all node counts to 0.", space + 1);
   bf5f8:	4a2f      	ldr	r2, [pc, #188]	; (bf6b8 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x1a0>)
   bf5fa:	1c63      	adds	r3, r4, #1
   bf5fc:	f44f 7180 	mov.w	r1, #256	; 0x100
   bf600:	a80a      	add	r0, sp, #40	; 0x28
   bf602:	f000 fed9 	bl	c03b8 <snprintf>
		Log.info(message);
   bf606:	4823      	ldr	r0, [pc, #140]	; (bf694 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x17c>)
   bf608:	a90a      	add	r1, sp, #40	; 0x28
   bf60a:	f7f4 fd5f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bf60e:	f000 fe6b 	bl	c02e8 <spark_cloud_flag_connected>
		if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);
   bf612:	b150      	cbz	r0, bf62a <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x112>
   bf614:	f7fb f94c 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bf618:	2300      	movs	r3, #0
   bf61a:	f88d 3000 	strb.w	r3, [sp]
   bf61e:	4b24      	ldr	r3, [pc, #144]	; (bf6b0 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x198>)
   bf620:	4924      	ldr	r1, [pc, #144]	; (bf6b4 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x19c>)
   bf622:	781b      	ldrb	r3, [r3, #0]
   bf624:	aa0a      	add	r2, sp, #40	; 0x28
   bf626:	f7fe fa64 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
		JsonDataManager::instance().resetSpace(space);
   bf62a:	f7fe fa6f 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf62e:	4621      	mov	r1, r4
   bf630:	f7ff fe4c 	bl	bf2cc <_ZN15JsonDataManager10resetSpaceEi>
		return 0; // and return 0 for this report.
   bf634:	2000      	movs	r0, #0
}
   bf636:	b04b      	add	sp, #300	; 0x12c
   bf638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			jp.getValueByKey(nodeObjectContainer, "jd1", occupancyNet);	// Node is in the passed-in space!
   bf63c:	ab05      	add	r3, sp, #20
   bf63e:	4631      	mov	r1, r6
   bf640:	4a1e      	ldr	r2, [pc, #120]	; (bf6bc <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x1a4>)
   bf642:	4640      	mov	r0, r8
   bf644:	f7fe fa47 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			if(payload3 == 1){ // Flag this space as multiEntrance if a node is multi entrance
   bf648:	f89a 6000 	ldrb.w	r6, [sl]
			occupancyNetTotal += occupancyNet;										// add the occupancyNet to the total for the space
   bf64c:	9b05      	ldr	r3, [sp, #20]
			if(payload3 == 1){ // Flag this space as multiEntrance if a node is multi entrance
   bf64e:	2e01      	cmp	r6, #1
			occupancyNetTotal += occupancyNet;										// add the occupancyNet to the total for the space
   bf650:	441d      	add	r5, r3
			if(payload3 == 1){ // Flag this space as multiEntrance if a node is multi entrance
   bf652:	d01a      	beq.n	bf68a <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x172>
			if(multiEntranceFlag && payload3 == 0){ // Throw an alert if one of the nodes in this space is not multiEntrance (they should all be) 
   bf654:	f1b9 0f00 	cmp.w	r9, #0
   bf658:	d0c9      	beq.n	bf5ee <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0xd6>
   bf65a:	2e00      	cmp	r6, #0
   bf65c:	d1c7      	bne.n	bf5ee <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0xd6>
				snprintf(message, sizeof(message), "Node in space %d is not set to multiEntrance. uID: %lu", space + 1, uniqueID);
   bf65e:	9b06      	ldr	r3, [sp, #24]
   bf660:	4a17      	ldr	r2, [pc, #92]	; (bf6c0 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x1a8>)
   bf662:	9300      	str	r3, [sp, #0]
   bf664:	f44f 7180 	mov.w	r1, #256	; 0x100
   bf668:	1c63      	adds	r3, r4, #1
   bf66a:	a80a      	add	r0, sp, #40	; 0x28
   bf66c:	f000 fea4 	bl	c03b8 <snprintf>
				Log.info(message);
   bf670:	4808      	ldr	r0, [pc, #32]	; (bf694 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x17c>)
   bf672:	a90a      	add	r1, sp, #40	; 0x28
   bf674:	f7f4 fd2a 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bf678:	f000 fe36 	bl	c02e8 <spark_cloud_flag_connected>
				if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", message, PRIVATE);
   bf67c:	2800      	cmp	r0, #0
   bf67e:	d0b6      	beq.n	bf5ee <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0xd6>
   bf680:	f7fb f916 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bf684:	f88d 6000 	strb.w	r6, [sp]
   bf688:	e7ab      	b.n	bf5e2 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0xca>
   bf68a:	46b1      	mov	r9, r6
   bf68c:	e7af      	b.n	bf5ee <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0xd6>
	return occupancyNetTotal;
   bf68e:	b2a8      	uxth	r0, r5
   bf690:	e7d1      	b.n	bf636 <_ZN15JsonDataManager22getOccupancyNetBySpaceEi+0x11e>
   bf692:	bf00      	nop
   bf694:	2003e634 	.word	0x2003e634
   bf698:	000c8f02 	.word	0x000c8f02
   bf69c:	2003b780 	.word	0x2003b780
   bf6a0:	000c8315 	.word	0x000c8315
   bf6a4:	000c5fdc 	.word	0x000c5fdc
   bf6a8:	000c6fae 	.word	0x000c6fae
   bf6ac:	000c8f4e 	.word	0x000c8f4e
   bf6b0:	2003b688 	.word	0x2003b688
   bf6b4:	000c5f9c 	.word	0x000c5f9c
   bf6b8:	000c8fba 	.word	0x000c8fba
   bf6bc:	000c8728 	.word	0x000c8728
   bf6c0:	000c8f83 	.word	0x000c8f83
   bf6c4:	000c8430 	.word	0x000c8430

000bf6c8 <_ZN15JsonDataManager19resetInactiveSpacesEi>:
bool JsonDataManager::resetInactiveSpaces(int secondsInactive){
   bf6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf6cc:	ed2d 8b02 	vpush	{d8}
   bf6d0:	b0b5      	sub	sp, #212	; 0xd4
   bf6d2:	ee08 0a10 	vmov	s16, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bf6d6:	f44f 7040 	mov.w	r0, #768	; 0x300
   bf6da:	9107      	str	r1, [sp, #28]
   bf6dc:	f7f4 fcdb 	bl	b4096 <_Znwj>
	: _M_start(), _M_finish(), _M_end_of_storage()
   bf6e0:	2200      	movs	r2, #0
   bf6e2:	4605      	mov	r5, r0
	      for (; __n > 0; --__n, (void) ++__cur)
   bf6e4:	f500 7140 	add.w	r1, r0, #768	; 0x300
   bf6e8:	4603      	mov	r3, r0
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   bf6ea:	b113      	cbz	r3, bf6f2 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x2a>
   bf6ec:	e9c3 2200 	strd	r2, r2, [r3]
   bf6f0:	609a      	str	r2, [r3, #8]
   bf6f2:	330c      	adds	r3, #12
   bf6f4:	428b      	cmp	r3, r1
   bf6f6:	d1f8      	bne.n	bf6ea <_ZN15JsonDataManager19resetInactiveSpacesEi+0x22>
   bf6f8:	f105 060c 	add.w	r6, r5, #12
   bf6fc:	9504      	str	r5, [sp, #16]
   bf6fe:	f505 7a43 	add.w	sl, r5, #780	; 0x30c
   bf702:	4637      	mov	r7, r6
    for (auto& space : spaceNodes) {
   bf704:	45ba      	cmp	sl, r7
   bf706:	d00e      	beq.n	bf726 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x5e>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   bf708:	e957 8903 	ldrd	r8, r9, [r7, #-12]
   bf70c:	45c8      	cmp	r8, r9
   bf70e:	d008      	beq.n	bf722 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x5a>
   bf710:	4644      	mov	r4, r8
      }
   bf712:	4620      	mov	r0, r4
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   bf714:	340c      	adds	r4, #12
   bf716:	f7fe ff68 	bl	be5ea <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   bf71a:	45a1      	cmp	r9, r4
   bf71c:	d1f9      	bne.n	bf712 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x4a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   bf71e:	f847 8c08 	str.w	r8, [r7, #-8]
      operator++() _GLIBCXX_NOEXCEPT
   bf722:	370c      	adds	r7, #12
	return *this;
   bf724:	e7ee      	b.n	bf704 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x3c>
	Log.info("Searching for inactive spaces to reset - resetInactiveSpaces");
   bf726:	4989      	ldr	r1, [pc, #548]	; (bf94c <_ZN15JsonDataManager19resetInactiveSpacesEi+0x284>)
   bf728:	4889      	ldr	r0, [pc, #548]	; (bf950 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x288>)
		const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bf72a:	f8df 8228 	ldr.w	r8, [pc, #552]	; bf954 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x28c>
        jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);  // Get the compressedJoinPayload
   bf72e:	f8df a24c 	ldr.w	sl, [pc, #588]	; bf97c <_ZN15JsonDataManager19resetInactiveSpacesEi+0x2b4>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);  		// Get the nodeNumber
   bf732:	f8df b24c 	ldr.w	fp, [pc, #588]	; bf980 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x2b8>
	Log.info("Searching for inactive spaces to reset - resetInactiveSpaces");
   bf736:	f7f4 fcc9 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
    jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bf73a:	4886      	ldr	r0, [pc, #536]	; (bf954 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x28c>)
   bf73c:	f7f9 ff75 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bf740:	4a85      	ldr	r2, [pc, #532]	; (bf958 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x290>)
   bf742:	4601      	mov	r1, r0
   bf744:	ab0c      	add	r3, sp, #48	; 0x30
   bf746:	4883      	ldr	r0, [pc, #524]	; (bf954 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x28c>)
   bf748:	f7fa f8f6 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	int i = 0;
   bf74c:	f04f 0900 	mov.w	r9, #0
		const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bf750:	990c      	ldr	r1, [sp, #48]	; 0x30
   bf752:	464a      	mov	r2, r9
   bf754:	4640      	mov	r0, r8
   bf756:	f7f9 ff8a 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
        if (nodeObjectContainer == NULL) {
   bf75a:	4604      	mov	r4, r0
   bf75c:	2800      	cmp	r0, #0
   bf75e:	d16f      	bne.n	bf840 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x178>
            Log.info("resetInactiveSpaces ran out of entries at i = %d", i);
   bf760:	497e      	ldr	r1, [pc, #504]	; (bf95c <_ZN15JsonDataManager19resetInactiveSpacesEi+0x294>)
   bf762:	487b      	ldr	r0, [pc, #492]	; (bf950 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x288>)
            Log.info("Node: %d, Space=%d, LastReport=%d, Now=%d, lengthSinceReport = %d", node[1], space + 1, node[0], (int)time, (int)time - node[0]);
   bf764:	f8df b1e8 	ldr.w	fp, [pc, #488]	; bf950 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x288>
            Log.info("resetInactiveSpaces ran out of entries at i = %d", i);
   bf768:	464a      	mov	r2, r9
   bf76a:	f7f4 fcaf 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	bool result = false;
   bf76e:	46a2      	mov	sl, r4
      : _M_current(__i) { }
   bf770:	9b04      	ldr	r3, [sp, #16]
   bf772:	9a04      	ldr	r2, [sp, #16]
   bf774:	681b      	ldr	r3, [r3, #0]
   bf776:	6852      	ldr	r2, [r2, #4]
   bf778:	9206      	str	r2, [sp, #24]
		if (spaceNodes[space].empty()) {
   bf77a:	429a      	cmp	r2, r3
   bf77c:	d04e      	beq.n	bf81c <_ZN15JsonDataManager19resetInactiveSpacesEi+0x154>
   bf77e:	f103 090c 	add.w	r9, r3, #12
		bool allInactive = true;
   bf782:	2301      	movs	r3, #1
   bf784:	9305      	str	r3, [sp, #20]
   bf786:	18e3      	adds	r3, r4, r3
   bf788:	9309      	str	r3, [sp, #36]	; 0x24
			time_t time = Time.now();
   bf78a:	f002 fca0 	bl	c20ce <_ZN9TimeClass3nowEv>
	return *(this->_M_impl._M_start + __n);
   bf78e:	f859 2c0c 	ldr.w	r2, [r9, #-12]
            Log.info("Node: %d, Space=%d, LastReport=%d, Now=%d, lengthSinceReport = %d", node[1], space + 1, node[0], (int)time, (int)time - node[0]);
   bf792:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf794:	6811      	ldr	r1, [r2, #0]
   bf796:	9100      	str	r1, [sp, #0]
			time_t time = Time.now();
   bf798:	4680      	mov	r8, r0
            Log.info("Node: %d, Space=%d, LastReport=%d, Now=%d, lengthSinceReport = %d", node[1], space + 1, node[0], (int)time, (int)time - node[0]);
   bf79a:	1a40      	subs	r0, r0, r1
   bf79c:	e9cd 8001 	strd	r8, r0, [sp, #4]
   bf7a0:	496f      	ldr	r1, [pc, #444]	; (bf960 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x298>)
   bf7a2:	6852      	ldr	r2, [r2, #4]
   bf7a4:	f8cd 9020 	str.w	r9, [sp, #32]
   bf7a8:	4658      	mov	r0, fp
   bf7aa:	f7f4 fc8f 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
			if(time - node[0] <= secondsInactive){
   bf7ae:	f859 1c0c 	ldr.w	r1, [r9, #-12]
   bf7b2:	9b07      	ldr	r3, [sp, #28]
   bf7b4:	6809      	ldr	r1, [r1, #0]
			time_t time = Time.now();
   bf7b6:	ea4f 72e8 	mov.w	r2, r8, asr #31
			if(time - node[0] <= secondsInactive){
   bf7ba:	ebb8 0801 	subs.w	r8, r8, r1
   bf7be:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   bf7c2:	17d9      	asrs	r1, r3, #31
   bf7c4:	4543      	cmp	r3, r8
   bf7c6:	eb71 0302 	sbcs.w	r3, r1, r2
				allInactive = false;
   bf7ca:	bfa4      	itt	ge
   bf7cc:	2200      	movge	r2, #0
   bf7ce:	9205      	strge	r2, [sp, #20]
        for (const auto& node : spaceNodes[space]) {
   bf7d0:	9908      	ldr	r1, [sp, #32]
   bf7d2:	9a06      	ldr	r2, [sp, #24]
			if(time - node[0] <= secondsInactive){
   bf7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for (const auto& node : spaceNodes[space]) {
   bf7d6:	428a      	cmp	r2, r1
   bf7d8:	f109 090c 	add.w	r9, r9, #12
   bf7dc:	d1d4      	bne.n	bf788 <_ZN15JsonDataManager19resetInactiveSpacesEi+0xc0>
		if(allInactive){
   bf7de:	9a05      	ldr	r2, [sp, #20]
   bf7e0:	b1e2      	cbz	r2, bf81c <_ZN15JsonDataManager19resetInactiveSpacesEi+0x154>
			snprintf(message, sizeof(message), "Space %d has been inactive for >=1 hour. Resetting the space and its nodes.", space + 1);
   bf7e2:	4a60      	ldr	r2, [pc, #384]	; (bf964 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x29c>)
   bf7e4:	2180      	movs	r1, #128	; 0x80
   bf7e6:	a814      	add	r0, sp, #80	; 0x50
   bf7e8:	f000 fde6 	bl	c03b8 <snprintf>
			Log.info(message);
   bf7ec:	a914      	add	r1, sp, #80	; 0x50
   bf7ee:	4658      	mov	r0, fp
   bf7f0:	f7f4 fc6c 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
   bf7f4:	f000 fd78 	bl	c02e8 <spark_cloud_flag_connected>
			if (Particle.connected()) PublishQueuePosix::instance().publish("Inactive Space", message, PRIVATE);
   bf7f8:	b150      	cbz	r0, bf810 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x148>
   bf7fa:	f7fb f859 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bf7fe:	2300      	movs	r3, #0
   bf800:	f88d 3000 	strb.w	r3, [sp]
   bf804:	4b58      	ldr	r3, [pc, #352]	; (bf968 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x2a0>)
   bf806:	4959      	ldr	r1, [pc, #356]	; (bf96c <_ZN15JsonDataManager19resetInactiveSpacesEi+0x2a4>)
   bf808:	781b      	ldrb	r3, [r3, #0]
   bf80a:	aa14      	add	r2, sp, #80	; 0x50
   bf80c:	f7fe f971 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
			result = resetSpace(space);
   bf810:	ee18 0a10 	vmov	r0, s16
   bf814:	4621      	mov	r1, r4
   bf816:	f7ff fd59 	bl	bf2cc <_ZN15JsonDataManager10resetSpaceEi>
   bf81a:	4682      	mov	sl, r0
	for (int space = 0; space < maxSpaces; space++) {
   bf81c:	9b04      	ldr	r3, [sp, #16]
   bf81e:	3401      	adds	r4, #1
   bf820:	330c      	adds	r3, #12
   bf822:	2c40      	cmp	r4, #64	; 0x40
   bf824:	9304      	str	r3, [sp, #16]
   bf826:	d1a3      	bne.n	bf770 <_ZN15JsonDataManager19resetInactiveSpacesEi+0xa8>
   bf828:	42be      	cmp	r6, r7
   bf82a:	f000 8083 	beq.w	bf934 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x26c>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   bf82e:	e956 4803 	ldrd	r4, r8, [r6, #-12]
   bf832:	45a0      	cmp	r8, r4
   bf834:	d074      	beq.n	bf920 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x258>
      }
   bf836:	4620      	mov	r0, r4
   bf838:	f7fe fed7 	bl	be5ea <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   bf83c:	340c      	adds	r4, #12
   bf83e:	e7f8      	b.n	bf832 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x16a>
        jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);  // Get the compressedJoinPayload
   bf840:	4601      	mov	r1, r0
   bf842:	ab11      	add	r3, sp, #68	; 0x44
   bf844:	4652      	mov	r2, sl
   bf846:	4640      	mov	r0, r8
   bf848:	f7fe f945 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);  		// Get the nodeNumber
   bf84c:	ab0f      	add	r3, sp, #60	; 0x3c
   bf84e:	465a      	mov	r2, fp
   bf850:	4621      	mov	r1, r4
   bf852:	4640      	mov	r0, r8
   bf854:	f7fe f93f 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);  		// Get the nodeNumber
   bf858:	4a45      	ldr	r2, [pc, #276]	; (bf970 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x2a8>)
   bf85a:	ab10      	add	r3, sp, #64	; 0x40
   bf85c:	4621      	mov	r1, r4
   bf85e:	4640      	mov	r0, r8
   bf860:	f7fe f939 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);  		// Get the sensorType
   bf864:	4a43      	ldr	r2, [pc, #268]	; (bf974 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x2ac>)
   bf866:	ab0e      	add	r3, sp, #56	; 0x38
   bf868:	4621      	mov	r1, r4
   bf86a:	4640      	mov	r0, r8
   bf86c:	f7fe f933 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "lrep", lastReport);  		// Get the lastReport
   bf870:	ab0d      	add	r3, sp, #52	; 0x34
   bf872:	4a41      	ldr	r2, [pc, #260]	; (bf978 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x2b0>)
   bf874:	4621      	mov	r1, r4
   bf876:	4640      	mov	r0, r8
   bf878:	f7fe f92d 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (sensorType > 0 && sensorType <= 9) {	// Ignore nodes that have a Counter sensorType in this function (they do not have a space)
   bf87c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   bf87e:	3b01      	subs	r3, #1
   bf880:	2b08      	cmp	r3, #8
			i++;
   bf882:	f109 0901 	add.w	r9, r9, #1
		if (sensorType > 0 && sensorType <= 9) {	// Ignore nodes that have a Counter sensorType in this function (they do not have a space)
   bf886:	f67f af63 	bls.w	bf750 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x88>
		JsonDataManager::instance().parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4); // extract the payload values (space is payload1)
   bf88a:	f7fe f93f 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bf88e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   bf892:	9302      	str	r3, [sp, #8]
   bf894:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   bf898:	9301      	str	r3, [sp, #4]
   bf89a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   bf89e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   bf8a2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   bf8a6:	9300      	str	r3, [sp, #0]
   bf8a8:	ab0b      	add	r3, sp, #44	; 0x2c
   bf8aa:	f7fe fc6f 	bl	be18c <_ZN15JsonDataManager22parseJoinPayloadValuesEhhRhS0_S0_S0_>
		spaceNodes[payload1].push_back({lastReport, uniqueID}); // add the node to its respective space
   bf8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf8b0:	9312      	str	r3, [sp, #72]	; 0x48
	: _M_start(), _M_finish(), _M_end_of_storage()
   bf8b2:	2200      	movs	r2, #0
   bf8b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	return *(this->_M_impl._M_start + __n);
   bf8b6:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   bf8ba:	9313      	str	r3, [sp, #76]	; 0x4c
   bf8bc:	2008      	movs	r0, #8
	: _M_start(), _M_finish(), _M_end_of_storage()
   bf8be:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
   bf8c2:	9216      	str	r2, [sp, #88]	; 0x58
   bf8c4:	f7f4 fbe7 	bl	b4096 <_Znwj>
   bf8c8:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   bf8cc:	4603      	mov	r3, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   bf8ce:	f100 0e08 	add.w	lr, r0, #8
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   bf8d2:	9014      	str	r0, [sp, #80]	; 0x50
   bf8d4:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
	return *(this->_M_impl._M_start + __n);
   bf8d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   bf8dc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   bf8e0:	6018      	str	r0, [r3, #0]
   bf8e2:	6059      	str	r1, [r3, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   bf8e4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
   bf8e8:	4281      	cmp	r1, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   bf8ea:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
	  this->_M_impl._M_finish =
   bf8ee:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
   bf8f2:	d010      	beq.n	bf916 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x24e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bf8f4:	b141      	cbz	r1, bf908 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x240>
	  _M_end_of_storage(__x._M_end_of_storage)
   bf8f6:	600b      	str	r3, [r1, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   bf8f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
	  _M_end_of_storage(__x._M_end_of_storage)
   bf8fa:	604b      	str	r3, [r1, #4]
   bf8fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   bf8fe:	608b      	str	r3, [r1, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   bf900:	2200      	movs	r2, #0
   bf902:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
   bf906:	9214      	str	r2, [sp, #80]	; 0x50
	    ++this->_M_impl._M_finish;
   bf908:	6863      	ldr	r3, [r4, #4]
   bf90a:	330c      	adds	r3, #12
   bf90c:	6063      	str	r3, [r4, #4]
      }
   bf90e:	a814      	add	r0, sp, #80	; 0x50
   bf910:	f7fe fe6b 	bl	be5ea <_ZNSt12_Vector_baseIiSaIiEED1Ev>
		i++;
   bf914:	e71c      	b.n	bf750 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x88>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   bf916:	aa14      	add	r2, sp, #80	; 0x50
   bf918:	4620      	mov	r0, r4
   bf91a:	f7fe fe71 	bl	be600 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   bf91e:	e7f6      	b.n	bf90e <_ZN15JsonDataManager19resetInactiveSpacesEi+0x246>
	_M_deallocate(_M_impl._M_start,
   bf920:	f856 0c0c 	ldr.w	r0, [r6, #-12]
	if (__p)
   bf924:	b120      	cbz	r0, bf930 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x268>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   bf926:	f856 1c04 	ldr.w	r1, [r6, #-4]
	::operator delete(__p
   bf92a:	1a09      	subs	r1, r1, r0
   bf92c:	f7f4 fbb7 	bl	b409e <_ZdlPvj>
   bf930:	360c      	adds	r6, #12
   bf932:	e779      	b.n	bf828 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x160>
	if (__p)
   bf934:	b125      	cbz	r5, bf940 <_ZN15JsonDataManager19resetInactiveSpacesEi+0x278>
   bf936:	f44f 7140 	mov.w	r1, #768	; 0x300
   bf93a:	4628      	mov	r0, r5
   bf93c:	f7f4 fbaf 	bl	b409e <_ZdlPvj>
}
   bf940:	4650      	mov	r0, sl
   bf942:	b035      	add	sp, #212	; 0xd4
   bf944:	ecbd 8b02 	vpop	{d8}
   bf948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf94c:	000c8ff9 	.word	0x000c8ff9
   bf950:	2003e634 	.word	0x2003e634
   bf954:	2003b780 	.word	0x2003b780
   bf958:	000c8315 	.word	0x000c8315
   bf95c:	000c9036 	.word	0x000c9036
   bf960:	000c9067 	.word	0x000c9067
   bf964:	000c90a9 	.word	0x000c90a9
   bf968:	2003b688 	.word	0x2003b688
   bf96c:	000c90f5 	.word	0x000c90f5
   bf970:	000c8430 	.word	0x000c8430
   bf974:	000c6fae 	.word	0x000c6fae
   bf978:	000c872c 	.word	0x000c872c
   bf97c:	000c5fdc 	.word	0x000c5fdc
   bf980:	000c6b72 	.word	0x000c6b72

000bf984 <_ZN15JsonDataManager14findNodeNumberEim>:
uint8_t JsonDataManager::findNodeNumber(int nodeNumber, uint32_t uniqueID) {
   bf984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf988:	b097      	sub	sp, #92	; 0x5c
   bf98a:	4616      	mov	r6, r2
   bf98c:	4607      	mov	r7, r0
	int sensorType = (int)current.get_sensorType();
   bf98e:	f7f7 fed5 	bl	b773c <_ZN17currentStatusData8instanceEv>
   bf992:	f7f8 f866 	bl	b7a62 <_ZNK17currentStatusData14get_sensorTypeEv>
   bf996:	4680      	mov	r8, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bf998:	4855      	ldr	r0, [pc, #340]	; (bfaf0 <_ZN15JsonDataManager14findNodeNumberEim+0x16c>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bf99a:	f8df 9154 	ldr.w	r9, [pc, #340]	; bfaf0 <_ZN15JsonDataManager14findNodeNumberEim+0x16c>
		jp.getValueByKey(nodeObjectContainer, "uID", nodeDeviceID);			// Get the deviceID and compare
   bf99e:	f8df b168 	ldr.w	fp, [pc, #360]	; bfb08 <_ZN15JsonDataManager14findNodeNumberEim+0x184>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   bf9a2:	f7f9 fe42 	bl	b962a <_ZNK10JsonParser14getOuterObjectEv>
   bf9a6:	4a53      	ldr	r2, [pc, #332]	; (bfaf4 <_ZN15JsonDataManager14findNodeNumberEim+0x170>)
   bf9a8:	4601      	mov	r1, r0
   bf9aa:	ab05      	add	r3, sp, #20
   bf9ac:	4850      	ldr	r0, [pc, #320]	; (bfaf0 <_ZN15JsonDataManager14findNodeNumberEim+0x16c>)
   bf9ae:	f7f9 ffc3 	bl	b9938 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
   bf9b2:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   bf9b4:	9905      	ldr	r1, [sp, #20]
   bf9b6:	462a      	mov	r2, r5
   bf9b8:	4648      	mov	r0, r9
   bf9ba:	f7f9 fe58 	bl	b966e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
   bf9be:	1c6c      	adds	r4, r5, #1
		if(nodeObjectContainer == NULL) {
   bf9c0:	4601      	mov	r1, r0
   bf9c2:	46a2      	mov	sl, r4
   bf9c4:	2800      	cmp	r0, #0
   bf9c6:	d178      	bne.n	bfaba <_ZN15JsonDataManager14findNodeNumberEim+0x136>
			Log.info("findNodeNumber ran out of entries at i = %d",i);
   bf9c8:	494b      	ldr	r1, [pc, #300]	; (bfaf8 <_ZN15JsonDataManager14findNodeNumberEim+0x174>)
   bf9ca:	484c      	ldr	r0, [pc, #304]	; (bfafc <_ZN15JsonDataManager14findNodeNumberEim+0x178>)
   bf9cc:	462a      	mov	r2, r5
   bf9ce:	f7f4 fb7d 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   bf9d2:	4947      	ldr	r1, [pc, #284]	; (bfaf0 <_ZN15JsonDataManager14findNodeNumberEim+0x16c>)
   bf9d4:	a806      	add	r0, sp, #24
   bf9d6:	f7fa f8f7 	bl	b9bc8 <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned node number %d, nodeID of %lu ", nodeNumber, uniqueID);
   bf9da:	4633      	mov	r3, r6
   bf9dc:	4622      	mov	r2, r4
   bf9de:	4948      	ldr	r1, [pc, #288]	; (bfb00 <_ZN15JsonDataManager14findNodeNumberEim+0x17c>)
   bf9e0:	4846      	ldr	r0, [pc, #280]	; (bfafc <_ZN15JsonDataManager14findNodeNumberEim+0x178>)
   bf9e2:	f7f4 fb73 	bl	b40cc <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   bf9e6:	4842      	ldr	r0, [pc, #264]	; (bfaf0 <_ZN15JsonDataManager14findNodeNumberEim+0x16c>)
   bf9e8:	f7f9 fe14 	bl	b9614 <_ZNK10JsonParser13getOuterArrayEv>
   bf9ec:	4601      	mov	r1, r0
   bf9ee:	a806      	add	r0, sp, #24
   bf9f0:	f7fa f8fc 	bl	b9bec <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   bf9f4:	227d      	movs	r2, #125	; 0x7d
   bf9f6:	217b      	movs	r1, #123	; 0x7b
   bf9f8:	a806      	add	r0, sp, #24
   bf9fa:	f7fa f8cc 	bl	b9b96 <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", nodeNumber);
   bf9fe:	4622      	mov	r2, r4
   bfa00:	4940      	ldr	r1, [pc, #256]	; (bfb04 <_ZN15JsonDataManager14findNodeNumberEim+0x180>)
   bfa02:	a806      	add	r0, sp, #24
   bfa04:	f7fe fdc2 	bl	be58c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   bfa08:	a806      	add	r0, sp, #24
   bfa0a:	f7fa f8b9 	bl	b9b80 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   bfa0e:	2201      	movs	r2, #1
   bfa10:	493d      	ldr	r1, [pc, #244]	; (bfb08 <_ZN15JsonDataManager14findNodeNumberEim+0x184>)
   bfa12:	a806      	add	r0, sp, #24
   bfa14:	f7fa f822 	bl	b9a5c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   bfa18:	213a      	movs	r1, #58	; 0x3a
   bfa1a:	a806      	add	r0, sp, #24
   bfa1c:	f7f9 ffd2 	bl	b99c4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   bfa20:	493a      	ldr	r1, [pc, #232]	; (bfb0c <_ZN15JsonDataManager14findNodeNumberEim+0x188>)
   bfa22:	4632      	mov	r2, r6
   bfa24:	a806      	add	r0, sp, #24
   bfa26:	f7fa f80c 	bl	b9a42 <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", sensorType);			// This is the sensor type reported by the node			
   bfa2a:	4939      	ldr	r1, [pc, #228]	; (bfb10 <_ZN15JsonDataManager14findNodeNumberEim+0x18c>)
   bfa2c:	4642      	mov	r2, r8
   bfa2e:	a806      	add	r0, sp, #24
   bfa30:	f7fe fdac 	bl	be58c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p",(int)0);
   bfa34:	4937      	ldr	r1, [pc, #220]	; (bfb14 <_ZN15JsonDataManager14findNodeNumberEim+0x190>)
   bfa36:	2200      	movs	r2, #0
   bfa38:	a806      	add	r0, sp, #24
   bfa3a:	f7fe fda7 	bl	be58c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("pend",(int)0);
   bfa3e:	4936      	ldr	r1, [pc, #216]	; (bfb18 <_ZN15JsonDataManager14findNodeNumberEim+0x194>)
   bfa40:	2200      	movs	r2, #0
   bfa42:	a806      	add	r0, sp, #24
   bfa44:	f7fe fda2 	bl	be58c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("cont",(int)0);
   bfa48:	4934      	ldr	r1, [pc, #208]	; (bfb1c <_ZN15JsonDataManager14findNodeNumberEim+0x198>)
   bfa4a:	2200      	movs	r2, #0
   bfa4c:	a806      	add	r0, sp, #24
   bfa4e:	f7fe fd9d 	bl	be58c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("lrep",(int)Time.now());
   bfa52:	f002 fb3c 	bl	c20ce <_ZN9TimeClass3nowEv>
   bfa56:	4932      	ldr	r1, [pc, #200]	; (bfb20 <_ZN15JsonDataManager14findNodeNumberEim+0x19c>)
   bfa58:	4602      	mov	r2, r0
   bfa5a:	a806      	add	r0, sp, #24
   bfa5c:	f7fe fd96 	bl	be58c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("jd1",(int)0);	
   bfa60:	4930      	ldr	r1, [pc, #192]	; (bfb24 <_ZN15JsonDataManager14findNodeNumberEim+0x1a0>)
   bfa62:	2200      	movs	r2, #0
   bfa64:	a806      	add	r0, sp, #24
   bfa66:	f7fe fd91 	bl	be58c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("jd2",(int)0);
   bfa6a:	2200      	movs	r2, #0
   bfa6c:	492e      	ldr	r1, [pc, #184]	; (bfb28 <_ZN15JsonDataManager14findNodeNumberEim+0x1a4>)
   bfa6e:	a806      	add	r0, sp, #24
   bfa70:	f7fe fd8c 	bl	be58c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   bfa74:	a806      	add	r0, sp, #24
   bfa76:	f7f9 ffb3 	bl	b99e0 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   bfa7a:	a806      	add	r0, sp, #24
   bfa7c:	f7fa fba0 	bl	ba1c0 <_ZN12JsonModifier6finishEv>
	bool result = saveNodeDatabase(jp);									// This should backup the nodeID database - now updated to persistent storage
   bfa80:	491b      	ldr	r1, [pc, #108]	; (bfaf0 <_ZN15JsonDataManager14findNodeNumberEim+0x16c>)
   bfa82:	4638      	mov	r0, r7
   bfa84:	f7fe fa02 	bl	bde8c <_ZN15JsonDataManager16saveNodeDatabaseER10JsonParser>
	JsonDataManager::instance().setJoinPayload(nodeNumber);
   bfa88:	b2e4      	uxtb	r4, r4
	bool result = saveNodeDatabase(jp);									// This should backup the nodeID database - now updated to persistent storage
   bfa8a:	4605      	mov	r5, r0
	JsonDataManager::instance().setJoinPayload(nodeNumber);
   bfa8c:	f7fe f83e 	bl	bdb0c <_ZN15JsonDataManager8instanceEv>
   bfa90:	4621      	mov	r1, r4
   bfa92:	f7fe fee1 	bl	be858 <_ZN15JsonDataManager14setJoinPayloadEh>
	if (!result) {
   bfa96:	b965      	cbnz	r5, bfab2 <_ZN15JsonDataManager14findNodeNumberEim+0x12e>
   bfa98:	f000 fc26 	bl	c02e8 <spark_cloud_flag_connected>
		if (Particle.connected()) PublishQueuePosix::instance().publish("Alert", "set_nodeIDJson failed to add a node to the database!!", PRIVATE);
   bfa9c:	b148      	cbz	r0, bfab2 <_ZN15JsonDataManager14findNodeNumberEim+0x12e>
   bfa9e:	f7fa ff07 	bl	ba8b0 <_ZN17PublishQueuePosix8instanceEv>
   bfaa2:	4b22      	ldr	r3, [pc, #136]	; (bfb2c <_ZN15JsonDataManager14findNodeNumberEim+0x1a8>)
   bfaa4:	f88d 5000 	strb.w	r5, [sp]
   bfaa8:	781b      	ldrb	r3, [r3, #0]
   bfaaa:	4a21      	ldr	r2, [pc, #132]	; (bfb30 <_ZN15JsonDataManager14findNodeNumberEim+0x1ac>)
   bfaac:	4921      	ldr	r1, [pc, #132]	; (bfb34 <_ZN15JsonDataManager14findNodeNumberEim+0x1b0>)
   bfaae:	f7fe f820 	bl	bdaf2 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	JsonModifier mod(jp);
   bfab2:	a806      	add	r0, sp, #24
   bfab4:	f7f9 fd28 	bl	b9508 <_ZN12JsonModifierD1Ev>
   bfab8:	e010      	b.n	bfadc <_ZN15JsonDataManager14findNodeNumberEim+0x158>
		jp.getValueByKey(nodeObjectContainer, "uID", nodeDeviceID);			// Get the deviceID and compare
   bfaba:	ab04      	add	r3, sp, #16
   bfabc:	9003      	str	r0, [sp, #12]
   bfabe:	465a      	mov	r2, fp
   bfac0:	4648      	mov	r0, r9
   bfac2:	f7fd fffa 	bl	bdaba <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (nodeDeviceID == uniqueID) {
   bfac6:	9b04      	ldr	r3, [sp, #16]
   bfac8:	9903      	ldr	r1, [sp, #12]
   bfaca:	42b3      	cmp	r3, r6
   bfacc:	d10a      	bne.n	bfae4 <_ZN15JsonDataManager14findNodeNumberEim+0x160>
			jp.getValueByKey(nodeObjectContainer, "node", nodeDeviceNumber);		// A match!
   bface:	4a0d      	ldr	r2, [pc, #52]	; (bfb04 <_ZN15JsonDataManager14findNodeNumberEim+0x180>)
   bfad0:	4807      	ldr	r0, [pc, #28]	; (bfaf0 <_ZN15JsonDataManager14findNodeNumberEim+0x16c>)
   bfad2:	ab06      	add	r3, sp, #24
   bfad4:	f7fd ffff 	bl	bdad6 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeDeviceNumber;												// All is good - return node number for the deviceID passed to the function
   bfad8:	f89d 4018 	ldrb.w	r4, [sp, #24]
}
   bfadc:	4620      	mov	r0, r4
   bfade:	b017      	add	sp, #92	; 0x5c
   bfae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;															// This will be the node number for the next node if no match is found
   bfae4:	1cac      	adds	r4, r5, #2
	for (int i = 0; i < 100; i++) {												// Iterate through the array looking for a match
   bfae6:	4655      	mov	r5, sl
   bfae8:	2d64      	cmp	r5, #100	; 0x64
   bfaea:	f47f af63 	bne.w	bf9b4 <_ZN15JsonDataManager14findNodeNumberEim+0x30>
   bfaee:	e770      	b.n	bf9d2 <_ZN15JsonDataManager14findNodeNumberEim+0x4e>
   bfaf0:	2003b780 	.word	0x2003b780
   bfaf4:	000c8315 	.word	0x000c8315
   bfaf8:	000c9104 	.word	0x000c9104
   bfafc:	2003e634 	.word	0x2003e634
   bfb00:	000c9130 	.word	0x000c9130
   bfb04:	000c6b72 	.word	0x000c6b72
   bfb08:	000c8430 	.word	0x000c8430
   bfb0c:	000c8f7f 	.word	0x000c8f7f
   bfb10:	000c6fae 	.word	0x000c6fae
   bfb14:	000c5fdc 	.word	0x000c5fdc
   bfb18:	000c83ad 	.word	0x000c83ad
   bfb1c:	000c83e7 	.word	0x000c83e7
   bfb20:	000c872c 	.word	0x000c872c
   bfb24:	000c8728 	.word	0x000c8728
   bfb28:	000c8724 	.word	0x000c8724
   bfb2c:	2003b688 	.word	0x2003b688
   bfb30:	000c9169 	.word	0x000c9169
   bfb34:	000c5f9c 	.word	0x000c5f9c

000bfb38 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bfb38:	b508      	push	{r3, lr}
   bfb3a:	4b02      	ldr	r3, [pc, #8]	; (bfb44 <netdb_freeaddrinfo+0xc>)
   bfb3c:	681b      	ldr	r3, [r3, #0]
   bfb3e:	689b      	ldr	r3, [r3, #8]
   bfb40:	9301      	str	r3, [sp, #4]
   bfb42:	bd08      	pop	{r3, pc}
   bfb44:	00030268 	.word	0x00030268

000bfb48 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bfb48:	b508      	push	{r3, lr}
   bfb4a:	4b02      	ldr	r3, [pc, #8]	; (bfb54 <netdb_getaddrinfo+0xc>)
   bfb4c:	681b      	ldr	r3, [r3, #0]
   bfb4e:	68db      	ldr	r3, [r3, #12]
   bfb50:	9301      	str	r3, [sp, #4]
   bfb52:	bd08      	pop	{r3, pc}
   bfb54:	00030268 	.word	0x00030268

000bfb58 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bfb58:	b508      	push	{r3, lr}
   bfb5a:	4b02      	ldr	r3, [pc, #8]	; (bfb64 <HAL_Validate_Pin_Function+0xc>)
   bfb5c:	681b      	ldr	r3, [r3, #0]
   bfb5e:	685b      	ldr	r3, [r3, #4]
   bfb60:	9301      	str	r3, [sp, #4]
   bfb62:	bd08      	pop	{r3, pc}
   bfb64:	0003022c 	.word	0x0003022c

000bfb68 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bfb68:	b508      	push	{r3, lr}
   bfb6a:	4b02      	ldr	r3, [pc, #8]	; (bfb74 <HAL_Pin_Mode+0xc>)
   bfb6c:	681b      	ldr	r3, [r3, #0]
   bfb6e:	689b      	ldr	r3, [r3, #8]
   bfb70:	9301      	str	r3, [sp, #4]
   bfb72:	bd08      	pop	{r3, pc}
   bfb74:	0003022c 	.word	0x0003022c

000bfb78 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bfb78:	b508      	push	{r3, lr}
   bfb7a:	4b02      	ldr	r3, [pc, #8]	; (bfb84 <HAL_Get_Pin_Mode+0xc>)
   bfb7c:	681b      	ldr	r3, [r3, #0]
   bfb7e:	68db      	ldr	r3, [r3, #12]
   bfb80:	9301      	str	r3, [sp, #4]
   bfb82:	bd08      	pop	{r3, pc}
   bfb84:	0003022c 	.word	0x0003022c

000bfb88 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bfb88:	b508      	push	{r3, lr}
   bfb8a:	4b02      	ldr	r3, [pc, #8]	; (bfb94 <HAL_GPIO_Write+0xc>)
   bfb8c:	681b      	ldr	r3, [r3, #0]
   bfb8e:	691b      	ldr	r3, [r3, #16]
   bfb90:	9301      	str	r3, [sp, #4]
   bfb92:	bd08      	pop	{r3, pc}
   bfb94:	0003022c 	.word	0x0003022c

000bfb98 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bfb98:	b508      	push	{r3, lr}
   bfb9a:	4b02      	ldr	r3, [pc, #8]	; (bfba4 <HAL_GPIO_Read+0xc>)
   bfb9c:	681b      	ldr	r3, [r3, #0]
   bfb9e:	695b      	ldr	r3, [r3, #20]
   bfba0:	9301      	str	r3, [sp, #4]
   bfba2:	bd08      	pop	{r3, pc}
   bfba4:	0003022c 	.word	0x0003022c

000bfba8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bfba8:	b508      	push	{r3, lr}
   bfbaa:	4b02      	ldr	r3, [pc, #8]	; (bfbb4 <HAL_Interrupts_Attach+0xc>)
   bfbac:	681b      	ldr	r3, [r3, #0]
   bfbae:	699b      	ldr	r3, [r3, #24]
   bfbb0:	9301      	str	r3, [sp, #4]
   bfbb2:	bd08      	pop	{r3, pc}
   bfbb4:	0003022c 	.word	0x0003022c

000bfbb8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bfbb8:	b508      	push	{r3, lr}
   bfbba:	4b02      	ldr	r3, [pc, #8]	; (bfbc4 <HAL_Interrupts_Detach+0xc>)
   bfbbc:	681b      	ldr	r3, [r3, #0]
   bfbbe:	69db      	ldr	r3, [r3, #28]
   bfbc0:	9301      	str	r3, [sp, #4]
   bfbc2:	bd08      	pop	{r3, pc}
   bfbc4:	0003022c 	.word	0x0003022c

000bfbc8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bfbc8:	b508      	push	{r3, lr}
   bfbca:	4b02      	ldr	r3, [pc, #8]	; (bfbd4 <hal_adc_read+0xc>)
   bfbcc:	681b      	ldr	r3, [r3, #0]
   bfbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bfbd0:	9301      	str	r3, [sp, #4]
   bfbd2:	bd08      	pop	{r3, pc}
   bfbd4:	0003022c 	.word	0x0003022c

000bfbd8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bfbd8:	b508      	push	{r3, lr}
   bfbda:	4b02      	ldr	r3, [pc, #8]	; (bfbe4 <HAL_RNG_GetRandomNumber+0xc>)
   bfbdc:	681b      	ldr	r3, [r3, #0]
   bfbde:	685b      	ldr	r3, [r3, #4]
   bfbe0:	9301      	str	r3, [sp, #4]
   bfbe2:	bd08      	pop	{r3, pc}
   bfbe4:	00030218 	.word	0x00030218

000bfbe8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bfbe8:	b508      	push	{r3, lr}
   bfbea:	4b02      	ldr	r3, [pc, #8]	; (bfbf4 <HAL_Delay_Milliseconds+0xc>)
   bfbec:	681b      	ldr	r3, [r3, #0]
   bfbee:	689b      	ldr	r3, [r3, #8]
   bfbf0:	9301      	str	r3, [sp, #4]
   bfbf2:	bd08      	pop	{r3, pc}
   bfbf4:	00030218 	.word	0x00030218

000bfbf8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bfbf8:	b508      	push	{r3, lr}
   bfbfa:	4b02      	ldr	r3, [pc, #8]	; (bfc04 <HAL_Delay_Microseconds+0xc>)
   bfbfc:	681b      	ldr	r3, [r3, #0]
   bfbfe:	68db      	ldr	r3, [r3, #12]
   bfc00:	9301      	str	r3, [sp, #4]
   bfc02:	bd08      	pop	{r3, pc}
   bfc04:	00030218 	.word	0x00030218

000bfc08 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bfc08:	b508      	push	{r3, lr}
   bfc0a:	4b02      	ldr	r3, [pc, #8]	; (bfc14 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bfc0c:	681b      	ldr	r3, [r3, #0]
   bfc0e:	695b      	ldr	r3, [r3, #20]
   bfc10:	9301      	str	r3, [sp, #4]
   bfc12:	bd08      	pop	{r3, pc}
   bfc14:	00030218 	.word	0x00030218

000bfc18 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bfc18:	b508      	push	{r3, lr}
   bfc1a:	4b02      	ldr	r3, [pc, #8]	; (bfc24 <hal_rtc_time_is_valid+0xc>)
   bfc1c:	681b      	ldr	r3, [r3, #0]
   bfc1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bfc20:	9301      	str	r3, [sp, #4]
   bfc22:	bd08      	pop	{r3, pc}
   bfc24:	00030218 	.word	0x00030218

000bfc28 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bfc28:	b508      	push	{r3, lr}
   bfc2a:	4b02      	ldr	r3, [pc, #8]	; (bfc34 <hal_timer_millis+0xc>)
   bfc2c:	681b      	ldr	r3, [r3, #0]
   bfc2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bfc30:	9301      	str	r3, [sp, #4]
   bfc32:	bd08      	pop	{r3, pc}
   bfc34:	00030218 	.word	0x00030218

000bfc38 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bfc38:	b508      	push	{r3, lr}
   bfc3a:	4b02      	ldr	r3, [pc, #8]	; (bfc44 <hal_rtc_get_time+0xc>)
   bfc3c:	681b      	ldr	r3, [r3, #0]
   bfc3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bfc40:	9301      	str	r3, [sp, #4]
   bfc42:	bd08      	pop	{r3, pc}
   bfc44:	00030218 	.word	0x00030218

000bfc48 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bfc48:	b508      	push	{r3, lr}
   bfc4a:	4b02      	ldr	r3, [pc, #8]	; (bfc54 <hal_rtc_set_time+0xc>)
   bfc4c:	681b      	ldr	r3, [r3, #0]
   bfc4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bfc50:	9301      	str	r3, [sp, #4]
   bfc52:	bd08      	pop	{r3, pc}
   bfc54:	00030218 	.word	0x00030218

000bfc58 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bfc58:	b508      	push	{r3, lr}
   bfc5a:	4b02      	ldr	r3, [pc, #8]	; (bfc64 <HAL_Core_Runtime_Info+0xc>)
   bfc5c:	681b      	ldr	r3, [r3, #0]
   bfc5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bfc60:	9301      	str	r3, [sp, #4]
   bfc62:	bd08      	pop	{r3, pc}
   bfc64:	00030234 	.word	0x00030234

000bfc68 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bfc68:	b508      	push	{r3, lr}
   bfc6a:	4b02      	ldr	r3, [pc, #8]	; (bfc74 <HAL_Feature_Set+0xc>)
   bfc6c:	681b      	ldr	r3, [r3, #0]
   bfc6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bfc70:	9301      	str	r3, [sp, #4]
   bfc72:	bd08      	pop	{r3, pc}
   bfc74:	00030234 	.word	0x00030234

000bfc78 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bfc78:	b508      	push	{r3, lr}
   bfc7a:	4b02      	ldr	r3, [pc, #8]	; (bfc84 <_open+0xc>)
   bfc7c:	681b      	ldr	r3, [r3, #0]
   bfc7e:	681b      	ldr	r3, [r3, #0]
   bfc80:	9301      	str	r3, [sp, #4]
   bfc82:	bd08      	pop	{r3, pc}
   bfc84:	00030284 	.word	0x00030284

000bfc88 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bfc88:	b508      	push	{r3, lr}
   bfc8a:	4b02      	ldr	r3, [pc, #8]	; (bfc94 <_write+0xc>)
   bfc8c:	681b      	ldr	r3, [r3, #0]
   bfc8e:	685b      	ldr	r3, [r3, #4]
   bfc90:	9301      	str	r3, [sp, #4]
   bfc92:	bd08      	pop	{r3, pc}
   bfc94:	00030284 	.word	0x00030284

000bfc98 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bfc98:	b508      	push	{r3, lr}
   bfc9a:	4b02      	ldr	r3, [pc, #8]	; (bfca4 <_read+0xc>)
   bfc9c:	681b      	ldr	r3, [r3, #0]
   bfc9e:	689b      	ldr	r3, [r3, #8]
   bfca0:	9301      	str	r3, [sp, #4]
   bfca2:	bd08      	pop	{r3, pc}
   bfca4:	00030284 	.word	0x00030284

000bfca8 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bfca8:	b508      	push	{r3, lr}
   bfcaa:	4b02      	ldr	r3, [pc, #8]	; (bfcb4 <_close+0xc>)
   bfcac:	681b      	ldr	r3, [r3, #0]
   bfcae:	68db      	ldr	r3, [r3, #12]
   bfcb0:	9301      	str	r3, [sp, #4]
   bfcb2:	bd08      	pop	{r3, pc}
   bfcb4:	00030284 	.word	0x00030284

000bfcb8 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bfcb8:	b508      	push	{r3, lr}
   bfcba:	4b02      	ldr	r3, [pc, #8]	; (bfcc4 <_fstat+0xc>)
   bfcbc:	681b      	ldr	r3, [r3, #0]
   bfcbe:	695b      	ldr	r3, [r3, #20]
   bfcc0:	9301      	str	r3, [sp, #4]
   bfcc2:	bd08      	pop	{r3, pc}
   bfcc4:	00030284 	.word	0x00030284

000bfcc8 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bfcc8:	b508      	push	{r3, lr}
   bfcca:	4b02      	ldr	r3, [pc, #8]	; (bfcd4 <_lseek+0xc>)
   bfccc:	681b      	ldr	r3, [r3, #0]
   bfcce:	6a1b      	ldr	r3, [r3, #32]
   bfcd0:	9301      	str	r3, [sp, #4]
   bfcd2:	bd08      	pop	{r3, pc}
   bfcd4:	00030284 	.word	0x00030284

000bfcd8 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bfcd8:	b508      	push	{r3, lr}
   bfcda:	4b02      	ldr	r3, [pc, #8]	; (bfce4 <stat+0xc>)
   bfcdc:	681b      	ldr	r3, [r3, #0]
   bfcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bfce0:	9301      	str	r3, [sp, #4]
   bfce2:	bd08      	pop	{r3, pc}
   bfce4:	00030284 	.word	0x00030284

000bfce8 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bfce8:	b508      	push	{r3, lr}
   bfcea:	4b02      	ldr	r3, [pc, #8]	; (bfcf4 <mkdir+0xc>)
   bfcec:	681b      	ldr	r3, [r3, #0]
   bfcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bfcf0:	9301      	str	r3, [sp, #4]
   bfcf2:	bd08      	pop	{r3, pc}
   bfcf4:	00030284 	.word	0x00030284

000bfcf8 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bfcf8:	b508      	push	{r3, lr}
   bfcfa:	4b02      	ldr	r3, [pc, #8]	; (bfd04 <_unlink+0xc>)
   bfcfc:	681b      	ldr	r3, [r3, #0]
   bfcfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bfd00:	9301      	str	r3, [sp, #4]
   bfd02:	bd08      	pop	{r3, pc}
   bfd04:	00030284 	.word	0x00030284

000bfd08 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bfd08:	b508      	push	{r3, lr}
   bfd0a:	4b02      	ldr	r3, [pc, #8]	; (bfd14 <opendir+0xc>)
   bfd0c:	681b      	ldr	r3, [r3, #0]
   bfd0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bfd10:	9301      	str	r3, [sp, #4]
   bfd12:	bd08      	pop	{r3, pc}
   bfd14:	00030284 	.word	0x00030284

000bfd18 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bfd18:	b508      	push	{r3, lr}
   bfd1a:	4b02      	ldr	r3, [pc, #8]	; (bfd24 <readdir+0xc>)
   bfd1c:	681b      	ldr	r3, [r3, #0]
   bfd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bfd20:	9301      	str	r3, [sp, #4]
   bfd22:	bd08      	pop	{r3, pc}
   bfd24:	00030284 	.word	0x00030284

000bfd28 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bfd28:	b508      	push	{r3, lr}
   bfd2a:	4b02      	ldr	r3, [pc, #8]	; (bfd34 <closedir+0xc>)
   bfd2c:	681b      	ldr	r3, [r3, #0]
   bfd2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bfd30:	9301      	str	r3, [sp, #4]
   bfd32:	bd08      	pop	{r3, pc}
   bfd34:	00030284 	.word	0x00030284

000bfd38 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bfd38:	b508      	push	{r3, lr}
   bfd3a:	4b02      	ldr	r3, [pc, #8]	; (bfd44 <os_thread_create+0xc>)
   bfd3c:	681b      	ldr	r3, [r3, #0]
   bfd3e:	685b      	ldr	r3, [r3, #4]
   bfd40:	9301      	str	r3, [sp, #4]
   bfd42:	bd08      	pop	{r3, pc}
   bfd44:	00030248 	.word	0x00030248

000bfd48 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bfd48:	b508      	push	{r3, lr}
   bfd4a:	4b02      	ldr	r3, [pc, #8]	; (bfd54 <os_thread_is_current+0xc>)
   bfd4c:	681b      	ldr	r3, [r3, #0]
   bfd4e:	689b      	ldr	r3, [r3, #8]
   bfd50:	9301      	str	r3, [sp, #4]
   bfd52:	bd08      	pop	{r3, pc}
   bfd54:	00030248 	.word	0x00030248

000bfd58 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bfd58:	b508      	push	{r3, lr}
   bfd5a:	4b02      	ldr	r3, [pc, #8]	; (bfd64 <os_thread_join+0xc>)
   bfd5c:	681b      	ldr	r3, [r3, #0]
   bfd5e:	691b      	ldr	r3, [r3, #16]
   bfd60:	9301      	str	r3, [sp, #4]
   bfd62:	bd08      	pop	{r3, pc}
   bfd64:	00030248 	.word	0x00030248

000bfd68 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bfd68:	b508      	push	{r3, lr}
   bfd6a:	4b02      	ldr	r3, [pc, #8]	; (bfd74 <os_thread_cleanup+0xc>)
   bfd6c:	681b      	ldr	r3, [r3, #0]
   bfd6e:	695b      	ldr	r3, [r3, #20]
   bfd70:	9301      	str	r3, [sp, #4]
   bfd72:	bd08      	pop	{r3, pc}
   bfd74:	00030248 	.word	0x00030248

000bfd78 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bfd78:	b508      	push	{r3, lr}
   bfd7a:	4b02      	ldr	r3, [pc, #8]	; (bfd84 <os_mutex_create+0xc>)
   bfd7c:	681b      	ldr	r3, [r3, #0]
   bfd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bfd80:	9301      	str	r3, [sp, #4]
   bfd82:	bd08      	pop	{r3, pc}
   bfd84:	00030248 	.word	0x00030248

000bfd88 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bfd88:	b508      	push	{r3, lr}
   bfd8a:	4b02      	ldr	r3, [pc, #8]	; (bfd94 <os_mutex_lock+0xc>)
   bfd8c:	681b      	ldr	r3, [r3, #0]
   bfd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bfd90:	9301      	str	r3, [sp, #4]
   bfd92:	bd08      	pop	{r3, pc}
   bfd94:	00030248 	.word	0x00030248

000bfd98 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bfd98:	b508      	push	{r3, lr}
   bfd9a:	4b02      	ldr	r3, [pc, #8]	; (bfda4 <os_mutex_unlock+0xc>)
   bfd9c:	681b      	ldr	r3, [r3, #0]
   bfd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bfda0:	9301      	str	r3, [sp, #4]
   bfda2:	bd08      	pop	{r3, pc}
   bfda4:	00030248 	.word	0x00030248

000bfda8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bfda8:	b508      	push	{r3, lr}
   bfdaa:	4b02      	ldr	r3, [pc, #8]	; (bfdb4 <os_mutex_recursive_create+0xc>)
   bfdac:	681b      	ldr	r3, [r3, #0]
   bfdae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bfdb0:	9301      	str	r3, [sp, #4]
   bfdb2:	bd08      	pop	{r3, pc}
   bfdb4:	00030248 	.word	0x00030248

000bfdb8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bfdb8:	b508      	push	{r3, lr}
   bfdba:	4b02      	ldr	r3, [pc, #8]	; (bfdc4 <os_mutex_recursive_destroy+0xc>)
   bfdbc:	681b      	ldr	r3, [r3, #0]
   bfdbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bfdc0:	9301      	str	r3, [sp, #4]
   bfdc2:	bd08      	pop	{r3, pc}
   bfdc4:	00030248 	.word	0x00030248

000bfdc8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bfdc8:	b508      	push	{r3, lr}
   bfdca:	4b02      	ldr	r3, [pc, #8]	; (bfdd4 <os_mutex_recursive_lock+0xc>)
   bfdcc:	681b      	ldr	r3, [r3, #0]
   bfdce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bfdd0:	9301      	str	r3, [sp, #4]
   bfdd2:	bd08      	pop	{r3, pc}
   bfdd4:	00030248 	.word	0x00030248

000bfdd8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bfdd8:	b508      	push	{r3, lr}
   bfdda:	4b02      	ldr	r3, [pc, #8]	; (bfde4 <os_mutex_recursive_unlock+0xc>)
   bfddc:	681b      	ldr	r3, [r3, #0]
   bfdde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bfde0:	9301      	str	r3, [sp, #4]
   bfde2:	bd08      	pop	{r3, pc}
   bfde4:	00030248 	.word	0x00030248

000bfde8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bfde8:	b508      	push	{r3, lr}
   bfdea:	4b02      	ldr	r3, [pc, #8]	; (bfdf4 <os_thread_exit+0xc>)
   bfdec:	681b      	ldr	r3, [r3, #0]
   bfdee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bfdf0:	9301      	str	r3, [sp, #4]
   bfdf2:	bd08      	pop	{r3, pc}
   bfdf4:	00030248 	.word	0x00030248

000bfdf8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bfdf8:	b508      	push	{r3, lr}
   bfdfa:	4b02      	ldr	r3, [pc, #8]	; (bfe04 <inet_inet_ntop+0xc>)
   bfdfc:	681b      	ldr	r3, [r3, #0]
   bfdfe:	695b      	ldr	r3, [r3, #20]
   bfe00:	9301      	str	r3, [sp, #4]
   bfe02:	bd08      	pop	{r3, pc}
   bfe04:	00030264 	.word	0x00030264

000bfe08 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bfe08:	b508      	push	{r3, lr}
   bfe0a:	4b02      	ldr	r3, [pc, #8]	; (bfe14 <hal_usart_end+0xc>)
   bfe0c:	681b      	ldr	r3, [r3, #0]
   bfe0e:	689b      	ldr	r3, [r3, #8]
   bfe10:	9301      	str	r3, [sp, #4]
   bfe12:	bd08      	pop	{r3, pc}
   bfe14:	0003023c 	.word	0x0003023c

000bfe18 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bfe18:	b508      	push	{r3, lr}
   bfe1a:	4b02      	ldr	r3, [pc, #8]	; (bfe24 <hal_usart_write+0xc>)
   bfe1c:	681b      	ldr	r3, [r3, #0]
   bfe1e:	68db      	ldr	r3, [r3, #12]
   bfe20:	9301      	str	r3, [sp, #4]
   bfe22:	bd08      	pop	{r3, pc}
   bfe24:	0003023c 	.word	0x0003023c

000bfe28 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bfe28:	b508      	push	{r3, lr}
   bfe2a:	4b02      	ldr	r3, [pc, #8]	; (bfe34 <hal_usart_available+0xc>)
   bfe2c:	681b      	ldr	r3, [r3, #0]
   bfe2e:	691b      	ldr	r3, [r3, #16]
   bfe30:	9301      	str	r3, [sp, #4]
   bfe32:	bd08      	pop	{r3, pc}
   bfe34:	0003023c 	.word	0x0003023c

000bfe38 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bfe38:	b508      	push	{r3, lr}
   bfe3a:	4b02      	ldr	r3, [pc, #8]	; (bfe44 <hal_usart_read+0xc>)
   bfe3c:	681b      	ldr	r3, [r3, #0]
   bfe3e:	695b      	ldr	r3, [r3, #20]
   bfe40:	9301      	str	r3, [sp, #4]
   bfe42:	bd08      	pop	{r3, pc}
   bfe44:	0003023c 	.word	0x0003023c

000bfe48 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bfe48:	b508      	push	{r3, lr}
   bfe4a:	4b02      	ldr	r3, [pc, #8]	; (bfe54 <hal_usart_peek+0xc>)
   bfe4c:	681b      	ldr	r3, [r3, #0]
   bfe4e:	699b      	ldr	r3, [r3, #24]
   bfe50:	9301      	str	r3, [sp, #4]
   bfe52:	bd08      	pop	{r3, pc}
   bfe54:	0003023c 	.word	0x0003023c

000bfe58 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bfe58:	b508      	push	{r3, lr}
   bfe5a:	4b02      	ldr	r3, [pc, #8]	; (bfe64 <hal_usart_flush+0xc>)
   bfe5c:	681b      	ldr	r3, [r3, #0]
   bfe5e:	69db      	ldr	r3, [r3, #28]
   bfe60:	9301      	str	r3, [sp, #4]
   bfe62:	bd08      	pop	{r3, pc}
   bfe64:	0003023c 	.word	0x0003023c

000bfe68 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bfe68:	b508      	push	{r3, lr}
   bfe6a:	4b02      	ldr	r3, [pc, #8]	; (bfe74 <hal_usart_is_enabled+0xc>)
   bfe6c:	681b      	ldr	r3, [r3, #0]
   bfe6e:	6a1b      	ldr	r3, [r3, #32]
   bfe70:	9301      	str	r3, [sp, #4]
   bfe72:	bd08      	pop	{r3, pc}
   bfe74:	0003023c 	.word	0x0003023c

000bfe78 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bfe78:	b508      	push	{r3, lr}
   bfe7a:	4b02      	ldr	r3, [pc, #8]	; (bfe84 <hal_usart_available_data_for_write+0xc>)
   bfe7c:	681b      	ldr	r3, [r3, #0]
   bfe7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bfe80:	9301      	str	r3, [sp, #4]
   bfe82:	bd08      	pop	{r3, pc}
   bfe84:	0003023c 	.word	0x0003023c

000bfe88 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bfe88:	b508      	push	{r3, lr}
   bfe8a:	4b02      	ldr	r3, [pc, #8]	; (bfe94 <hal_usart_begin_config+0xc>)
   bfe8c:	681b      	ldr	r3, [r3, #0]
   bfe8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bfe90:	9301      	str	r3, [sp, #4]
   bfe92:	bd08      	pop	{r3, pc}
   bfe94:	0003023c 	.word	0x0003023c

000bfe98 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bfe98:	b508      	push	{r3, lr}
   bfe9a:	4b02      	ldr	r3, [pc, #8]	; (bfea4 <hal_usart_init_ex+0xc>)
   bfe9c:	681b      	ldr	r3, [r3, #0]
   bfe9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bfea0:	9301      	str	r3, [sp, #4]
   bfea2:	bd08      	pop	{r3, pc}
   bfea4:	0003023c 	.word	0x0003023c

000bfea8 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bfea8:	b508      	push	{r3, lr}
   bfeaa:	4b02      	ldr	r3, [pc, #8]	; (bfeb4 <hal_i2c_begin+0xc>)
   bfeac:	681b      	ldr	r3, [r3, #0]
   bfeae:	68db      	ldr	r3, [r3, #12]
   bfeb0:	9301      	str	r3, [sp, #4]
   bfeb2:	bd08      	pop	{r3, pc}
   bfeb4:	00030228 	.word	0x00030228

000bfeb8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bfeb8:	b508      	push	{r3, lr}
   bfeba:	4b02      	ldr	r3, [pc, #8]	; (bfec4 <hal_i2c_begin_transmission+0xc>)
   bfebc:	681b      	ldr	r3, [r3, #0]
   bfebe:	699b      	ldr	r3, [r3, #24]
   bfec0:	9301      	str	r3, [sp, #4]
   bfec2:	bd08      	pop	{r3, pc}
   bfec4:	00030228 	.word	0x00030228

000bfec8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bfec8:	b508      	push	{r3, lr}
   bfeca:	4b02      	ldr	r3, [pc, #8]	; (bfed4 <hal_i2c_end_transmission+0xc>)
   bfecc:	681b      	ldr	r3, [r3, #0]
   bfece:	69db      	ldr	r3, [r3, #28]
   bfed0:	9301      	str	r3, [sp, #4]
   bfed2:	bd08      	pop	{r3, pc}
   bfed4:	00030228 	.word	0x00030228

000bfed8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bfed8:	b508      	push	{r3, lr}
   bfeda:	4b02      	ldr	r3, [pc, #8]	; (bfee4 <hal_i2c_write+0xc>)
   bfedc:	681b      	ldr	r3, [r3, #0]
   bfede:	6a1b      	ldr	r3, [r3, #32]
   bfee0:	9301      	str	r3, [sp, #4]
   bfee2:	bd08      	pop	{r3, pc}
   bfee4:	00030228 	.word	0x00030228

000bfee8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bfee8:	b508      	push	{r3, lr}
   bfeea:	4b02      	ldr	r3, [pc, #8]	; (bfef4 <hal_i2c_available+0xc>)
   bfeec:	681b      	ldr	r3, [r3, #0]
   bfeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bfef0:	9301      	str	r3, [sp, #4]
   bfef2:	bd08      	pop	{r3, pc}
   bfef4:	00030228 	.word	0x00030228

000bfef8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bfef8:	b508      	push	{r3, lr}
   bfefa:	4b02      	ldr	r3, [pc, #8]	; (bff04 <hal_i2c_read+0xc>)
   bfefc:	681b      	ldr	r3, [r3, #0]
   bfefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bff00:	9301      	str	r3, [sp, #4]
   bff02:	bd08      	pop	{r3, pc}
   bff04:	00030228 	.word	0x00030228

000bff08 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bff08:	b508      	push	{r3, lr}
   bff0a:	4b02      	ldr	r3, [pc, #8]	; (bff14 <hal_i2c_peek+0xc>)
   bff0c:	681b      	ldr	r3, [r3, #0]
   bff0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bff10:	9301      	str	r3, [sp, #4]
   bff12:	bd08      	pop	{r3, pc}
   bff14:	00030228 	.word	0x00030228

000bff18 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bff18:	b508      	push	{r3, lr}
   bff1a:	4b02      	ldr	r3, [pc, #8]	; (bff24 <hal_i2c_flush+0xc>)
   bff1c:	681b      	ldr	r3, [r3, #0]
   bff1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bff20:	9301      	str	r3, [sp, #4]
   bff22:	bd08      	pop	{r3, pc}
   bff24:	00030228 	.word	0x00030228

000bff28 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bff28:	b508      	push	{r3, lr}
   bff2a:	4b02      	ldr	r3, [pc, #8]	; (bff34 <hal_i2c_is_enabled+0xc>)
   bff2c:	681b      	ldr	r3, [r3, #0]
   bff2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bff30:	9301      	str	r3, [sp, #4]
   bff32:	bd08      	pop	{r3, pc}
   bff34:	00030228 	.word	0x00030228

000bff38 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bff38:	b508      	push	{r3, lr}
   bff3a:	4b02      	ldr	r3, [pc, #8]	; (bff44 <hal_i2c_init+0xc>)
   bff3c:	681b      	ldr	r3, [r3, #0]
   bff3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bff40:	9301      	str	r3, [sp, #4]
   bff42:	bd08      	pop	{r3, pc}
   bff44:	00030228 	.word	0x00030228

000bff48 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bff48:	b508      	push	{r3, lr}
   bff4a:	4b02      	ldr	r3, [pc, #8]	; (bff54 <hal_i2c_lock+0xc>)
   bff4c:	681b      	ldr	r3, [r3, #0]
   bff4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bff50:	9301      	str	r3, [sp, #4]
   bff52:	bd08      	pop	{r3, pc}
   bff54:	00030228 	.word	0x00030228

000bff58 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bff58:	b508      	push	{r3, lr}
   bff5a:	4b02      	ldr	r3, [pc, #8]	; (bff64 <hal_i2c_unlock+0xc>)
   bff5c:	681b      	ldr	r3, [r3, #0]
   bff5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bff60:	9301      	str	r3, [sp, #4]
   bff62:	bd08      	pop	{r3, pc}
   bff64:	00030228 	.word	0x00030228

000bff68 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bff68:	b508      	push	{r3, lr}
   bff6a:	4b02      	ldr	r3, [pc, #8]	; (bff74 <hal_i2c_request_ex+0xc>)
   bff6c:	681b      	ldr	r3, [r3, #0]
   bff6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bff70:	9301      	str	r3, [sp, #4]
   bff72:	bd08      	pop	{r3, pc}
   bff74:	00030228 	.word	0x00030228

000bff78 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bff78:	b508      	push	{r3, lr}
   bff7a:	4b02      	ldr	r3, [pc, #8]	; (bff84 <hal_spi_begin+0xc>)
   bff7c:	681b      	ldr	r3, [r3, #0]
   bff7e:	681b      	ldr	r3, [r3, #0]
   bff80:	9301      	str	r3, [sp, #4]
   bff82:	bd08      	pop	{r3, pc}
   bff84:	00030230 	.word	0x00030230

000bff88 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bff88:	b508      	push	{r3, lr}
   bff8a:	4b02      	ldr	r3, [pc, #8]	; (bff94 <hal_spi_end+0xc>)
   bff8c:	681b      	ldr	r3, [r3, #0]
   bff8e:	685b      	ldr	r3, [r3, #4]
   bff90:	9301      	str	r3, [sp, #4]
   bff92:	bd08      	pop	{r3, pc}
   bff94:	00030230 	.word	0x00030230

000bff98 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bff98:	b508      	push	{r3, lr}
   bff9a:	4b02      	ldr	r3, [pc, #8]	; (bffa4 <hal_spi_transfer+0xc>)
   bff9c:	681b      	ldr	r3, [r3, #0]
   bff9e:	695b      	ldr	r3, [r3, #20]
   bffa0:	9301      	str	r3, [sp, #4]
   bffa2:	bd08      	pop	{r3, pc}
   bffa4:	00030230 	.word	0x00030230

000bffa8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bffa8:	b508      	push	{r3, lr}
   bffaa:	4b02      	ldr	r3, [pc, #8]	; (bffb4 <hal_spi_init+0xc>)
   bffac:	681b      	ldr	r3, [r3, #0]
   bffae:	69db      	ldr	r3, [r3, #28]
   bffb0:	9301      	str	r3, [sp, #4]
   bffb2:	bd08      	pop	{r3, pc}
   bffb4:	00030230 	.word	0x00030230

000bffb8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bffb8:	b508      	push	{r3, lr}
   bffba:	4b02      	ldr	r3, [pc, #8]	; (bffc4 <hal_spi_is_enabled+0xc>)
   bffbc:	681b      	ldr	r3, [r3, #0]
   bffbe:	6a1b      	ldr	r3, [r3, #32]
   bffc0:	9301      	str	r3, [sp, #4]
   bffc2:	bd08      	pop	{r3, pc}
   bffc4:	00030230 	.word	0x00030230

000bffc8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bffc8:	b508      	push	{r3, lr}
   bffca:	4b02      	ldr	r3, [pc, #8]	; (bffd4 <hal_spi_info+0xc>)
   bffcc:	681b      	ldr	r3, [r3, #0]
   bffce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bffd0:	9301      	str	r3, [sp, #4]
   bffd2:	bd08      	pop	{r3, pc}
   bffd4:	00030230 	.word	0x00030230

000bffd8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bffd8:	b508      	push	{r3, lr}
   bffda:	4b02      	ldr	r3, [pc, #8]	; (bffe4 <hal_spi_set_settings+0xc>)
   bffdc:	681b      	ldr	r3, [r3, #0]
   bffde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bffe0:	9301      	str	r3, [sp, #4]
   bffe2:	bd08      	pop	{r3, pc}
   bffe4:	00030230 	.word	0x00030230

000bffe8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bffe8:	b508      	push	{r3, lr}
   bffea:	4b02      	ldr	r3, [pc, #8]	; (bfff4 <hal_spi_acquire+0xc>)
   bffec:	681b      	ldr	r3, [r3, #0]
   bffee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bfff0:	9301      	str	r3, [sp, #4]
   bfff2:	bd08      	pop	{r3, pc}
   bfff4:	00030230 	.word	0x00030230

000bfff8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bfff8:	b508      	push	{r3, lr}
   bfffa:	4b02      	ldr	r3, [pc, #8]	; (c0004 <hal_spi_release+0xc>)
   bfffc:	681b      	ldr	r3, [r3, #0]
   bfffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c0000:	9301      	str	r3, [sp, #4]
   c0002:	bd08      	pop	{r3, pc}
   c0004:	00030230 	.word	0x00030230

000c0008 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   c0008:	b508      	push	{r3, lr}
   c000a:	4b02      	ldr	r3, [pc, #8]	; (c0014 <cellular_signal+0xc>)
   c000c:	681b      	ldr	r3, [r3, #0]
   c000e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c0010:	9301      	str	r3, [sp, #4]
   c0012:	bd08      	pop	{r3, pc}
   c0014:	00030274 	.word	0x00030274

000c0018 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   c0018:	b508      	push	{r3, lr}
   c001a:	4b02      	ldr	r3, [pc, #8]	; (c0024 <HAL_USB_USART_Init+0xc>)
   c001c:	681b      	ldr	r3, [r3, #0]
   c001e:	681b      	ldr	r3, [r3, #0]
   c0020:	9301      	str	r3, [sp, #4]
   c0022:	bd08      	pop	{r3, pc}
   c0024:	0003024c 	.word	0x0003024c

000c0028 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   c0028:	b508      	push	{r3, lr}
   c002a:	4b02      	ldr	r3, [pc, #8]	; (c0034 <HAL_USB_USART_Begin+0xc>)
   c002c:	681b      	ldr	r3, [r3, #0]
   c002e:	685b      	ldr	r3, [r3, #4]
   c0030:	9301      	str	r3, [sp, #4]
   c0032:	bd08      	pop	{r3, pc}
   c0034:	0003024c 	.word	0x0003024c

000c0038 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   c0038:	b508      	push	{r3, lr}
   c003a:	4b02      	ldr	r3, [pc, #8]	; (c0044 <HAL_USB_USART_End+0xc>)
   c003c:	681b      	ldr	r3, [r3, #0]
   c003e:	689b      	ldr	r3, [r3, #8]
   c0040:	9301      	str	r3, [sp, #4]
   c0042:	bd08      	pop	{r3, pc}
   c0044:	0003024c 	.word	0x0003024c

000c0048 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   c0048:	b508      	push	{r3, lr}
   c004a:	4b02      	ldr	r3, [pc, #8]	; (c0054 <HAL_USB_USART_Available_Data+0xc>)
   c004c:	681b      	ldr	r3, [r3, #0]
   c004e:	691b      	ldr	r3, [r3, #16]
   c0050:	9301      	str	r3, [sp, #4]
   c0052:	bd08      	pop	{r3, pc}
   c0054:	0003024c 	.word	0x0003024c

000c0058 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   c0058:	b508      	push	{r3, lr}
   c005a:	4b02      	ldr	r3, [pc, #8]	; (c0064 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   c005c:	681b      	ldr	r3, [r3, #0]
   c005e:	695b      	ldr	r3, [r3, #20]
   c0060:	9301      	str	r3, [sp, #4]
   c0062:	bd08      	pop	{r3, pc}
   c0064:	0003024c 	.word	0x0003024c

000c0068 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   c0068:	b508      	push	{r3, lr}
   c006a:	4b02      	ldr	r3, [pc, #8]	; (c0074 <HAL_USB_USART_Receive_Data+0xc>)
   c006c:	681b      	ldr	r3, [r3, #0]
   c006e:	699b      	ldr	r3, [r3, #24]
   c0070:	9301      	str	r3, [sp, #4]
   c0072:	bd08      	pop	{r3, pc}
   c0074:	0003024c 	.word	0x0003024c

000c0078 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   c0078:	b508      	push	{r3, lr}
   c007a:	4b02      	ldr	r3, [pc, #8]	; (c0084 <HAL_USB_USART_Send_Data+0xc>)
   c007c:	681b      	ldr	r3, [r3, #0]
   c007e:	69db      	ldr	r3, [r3, #28]
   c0080:	9301      	str	r3, [sp, #4]
   c0082:	bd08      	pop	{r3, pc}
   c0084:	0003024c 	.word	0x0003024c

000c0088 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   c0088:	b508      	push	{r3, lr}
   c008a:	4b02      	ldr	r3, [pc, #8]	; (c0094 <HAL_USB_USART_Flush_Data+0xc>)
   c008c:	681b      	ldr	r3, [r3, #0]
   c008e:	6a1b      	ldr	r3, [r3, #32]
   c0090:	9301      	str	r3, [sp, #4]
   c0092:	bd08      	pop	{r3, pc}
   c0094:	0003024c 	.word	0x0003024c

000c0098 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   c0098:	b508      	push	{r3, lr}
   c009a:	4b02      	ldr	r3, [pc, #8]	; (c00a4 <HAL_USB_USART_Is_Connected+0xc>)
   c009c:	681b      	ldr	r3, [r3, #0]
   c009e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c00a0:	9301      	str	r3, [sp, #4]
   c00a2:	bd08      	pop	{r3, pc}
   c00a4:	0003024c 	.word	0x0003024c

000c00a8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   c00a8:	b508      	push	{r3, lr}
   c00aa:	4b02      	ldr	r3, [pc, #8]	; (c00b4 <panic_+0xc>)
   c00ac:	681b      	ldr	r3, [r3, #0]
   c00ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c00b0:	9301      	str	r3, [sp, #4]
   c00b2:	bd08      	pop	{r3, pc}
   c00b4:	00030260 	.word	0x00030260

000c00b8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   c00b8:	b508      	push	{r3, lr}
   c00ba:	4b02      	ldr	r3, [pc, #8]	; (c00c4 <log_message+0xc>)
   c00bc:	681b      	ldr	r3, [r3, #0]
   c00be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   c00c0:	9301      	str	r3, [sp, #4]
   c00c2:	bd08      	pop	{r3, pc}
   c00c4:	00030260 	.word	0x00030260

000c00c8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   c00c8:	b508      	push	{r3, lr}
   c00ca:	4b02      	ldr	r3, [pc, #8]	; (c00d4 <log_message_v+0xc>)
   c00cc:	681b      	ldr	r3, [r3, #0]
   c00ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   c00d0:	9301      	str	r3, [sp, #4]
   c00d2:	bd08      	pop	{r3, pc}
   c00d4:	00030260 	.word	0x00030260

000c00d8 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   c00d8:	b508      	push	{r3, lr}
   c00da:	4b02      	ldr	r3, [pc, #8]	; (c00e4 <log_write+0xc>)
   c00dc:	681b      	ldr	r3, [r3, #0]
   c00de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   c00e0:	9301      	str	r3, [sp, #4]
   c00e2:	bd08      	pop	{r3, pc}
   c00e4:	00030260 	.word	0x00030260

000c00e8 <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   c00e8:	b508      	push	{r3, lr}
   c00ea:	4b02      	ldr	r3, [pc, #8]	; (c00f4 <log_dump+0xc>)
   c00ec:	681b      	ldr	r3, [r3, #0]
   c00ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   c00f0:	9301      	str	r3, [sp, #4]
   c00f2:	bd08      	pop	{r3, pc}
   c00f4:	00030260 	.word	0x00030260

000c00f8 <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   c00f8:	b508      	push	{r3, lr}
   c00fa:	4b02      	ldr	r3, [pc, #8]	; (c0104 <log_level_name+0xc>)
   c00fc:	681b      	ldr	r3, [r3, #0]
   c00fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   c0100:	9301      	str	r3, [sp, #4]
   c0102:	bd08      	pop	{r3, pc}
   c0104:	00030260 	.word	0x00030260

000c0108 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   c0108:	b508      	push	{r3, lr}
   c010a:	4b02      	ldr	r3, [pc, #8]	; (c0114 <log_set_callbacks+0xc>)
   c010c:	681b      	ldr	r3, [r3, #0]
   c010e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   c0110:	9301      	str	r3, [sp, #4]
   c0112:	bd08      	pop	{r3, pc}
   c0114:	00030260 	.word	0x00030260

000c0118 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   c0118:	b508      	push	{r3, lr}
   c011a:	4b02      	ldr	r3, [pc, #8]	; (c0124 <system_mode+0xc>)
   c011c:	681b      	ldr	r3, [r3, #0]
   c011e:	681b      	ldr	r3, [r3, #0]
   c0120:	9301      	str	r3, [sp, #4]
   c0122:	bd08      	pop	{r3, pc}
   c0124:	00030220 	.word	0x00030220

000c0128 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   c0128:	b508      	push	{r3, lr}
   c012a:	4b02      	ldr	r3, [pc, #8]	; (c0134 <set_system_mode+0xc>)
   c012c:	681b      	ldr	r3, [r3, #0]
   c012e:	685b      	ldr	r3, [r3, #4]
   c0130:	9301      	str	r3, [sp, #4]
   c0132:	bd08      	pop	{r3, pc}
   c0134:	00030220 	.word	0x00030220

000c0138 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   c0138:	b508      	push	{r3, lr}
   c013a:	4b02      	ldr	r3, [pc, #8]	; (c0144 <system_delay_ms+0xc>)
   c013c:	681b      	ldr	r3, [r3, #0]
   c013e:	695b      	ldr	r3, [r3, #20]
   c0140:	9301      	str	r3, [sp, #4]
   c0142:	bd08      	pop	{r3, pc}
   c0144:	00030220 	.word	0x00030220

000c0148 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   c0148:	b508      	push	{r3, lr}
   c014a:	4b02      	ldr	r3, [pc, #8]	; (c0154 <system_subscribe_event+0xc>)
   c014c:	681b      	ldr	r3, [r3, #0]
   c014e:	6a1b      	ldr	r3, [r3, #32]
   c0150:	9301      	str	r3, [sp, #4]
   c0152:	bd08      	pop	{r3, pc}
   c0154:	00030220 	.word	0x00030220

000c0158 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   c0158:	b508      	push	{r3, lr}
   c015a:	4b02      	ldr	r3, [pc, #8]	; (c0164 <system_thread_set_state+0xc>)
   c015c:	681b      	ldr	r3, [r3, #0]
   c015e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c0160:	9301      	str	r3, [sp, #4]
   c0162:	bd08      	pop	{r3, pc}
   c0164:	00030220 	.word	0x00030220

000c0168 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   c0168:	b508      	push	{r3, lr}
   c016a:	4b02      	ldr	r3, [pc, #8]	; (c0174 <application_thread_current+0xc>)
   c016c:	681b      	ldr	r3, [r3, #0]
   c016e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   c0170:	9301      	str	r3, [sp, #4]
   c0172:	bd08      	pop	{r3, pc}
   c0174:	00030220 	.word	0x00030220

000c0178 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   c0178:	b508      	push	{r3, lr}
   c017a:	4b02      	ldr	r3, [pc, #8]	; (c0184 <application_thread_invoke+0xc>)
   c017c:	681b      	ldr	r3, [r3, #0]
   c017e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   c0180:	9301      	str	r3, [sp, #4]
   c0182:	bd08      	pop	{r3, pc}
   c0184:	00030220 	.word	0x00030220

000c0188 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   c0188:	b508      	push	{r3, lr}
   c018a:	4b02      	ldr	r3, [pc, #8]	; (c0194 <system_thread_get_state+0xc>)
   c018c:	681b      	ldr	r3, [r3, #0]
   c018e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   c0190:	9301      	str	r3, [sp, #4]
   c0192:	bd08      	pop	{r3, pc}
   c0194:	00030220 	.word	0x00030220

000c0198 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   c0198:	b508      	push	{r3, lr}
   c019a:	4b02      	ldr	r3, [pc, #8]	; (c01a4 <system_notify_time_changed+0xc>)
   c019c:	681b      	ldr	r3, [r3, #0]
   c019e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   c01a0:	9301      	str	r3, [sp, #4]
   c01a2:	bd08      	pop	{r3, pc}
   c01a4:	00030220 	.word	0x00030220

000c01a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   c01a8:	b508      	push	{r3, lr}
   c01aa:	4b03      	ldr	r3, [pc, #12]	; (c01b8 <system_ctrl_set_app_request_handler+0x10>)
   c01ac:	681b      	ldr	r3, [r3, #0]
   c01ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   c01b2:	9301      	str	r3, [sp, #4]
   c01b4:	bd08      	pop	{r3, pc}
   c01b6:	0000      	.short	0x0000
   c01b8:	00030220 	.word	0x00030220

000c01bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   c01bc:	b508      	push	{r3, lr}
   c01be:	4b03      	ldr	r3, [pc, #12]	; (c01cc <system_ctrl_set_result+0x10>)
   c01c0:	681b      	ldr	r3, [r3, #0]
   c01c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   c01c6:	9301      	str	r3, [sp, #4]
   c01c8:	bd08      	pop	{r3, pc}
   c01ca:	0000      	.short	0x0000
   c01cc:	00030220 	.word	0x00030220

000c01d0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   c01d0:	b508      	push	{r3, lr}
   c01d2:	4b03      	ldr	r3, [pc, #12]	; (c01e0 <system_sleep_ext+0x10>)
   c01d4:	681b      	ldr	r3, [r3, #0]
   c01d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   c01da:	9301      	str	r3, [sp, #4]
   c01dc:	bd08      	pop	{r3, pc}
   c01de:	0000      	.short	0x0000
   c01e0:	00030220 	.word	0x00030220

000c01e4 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   c01e4:	b508      	push	{r3, lr}
   c01e6:	4b03      	ldr	r3, [pc, #12]	; (c01f4 <system_reset+0x10>)
   c01e8:	681b      	ldr	r3, [r3, #0]
   c01ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   c01ee:	9301      	str	r3, [sp, #4]
   c01f0:	bd08      	pop	{r3, pc}
   c01f2:	0000      	.short	0x0000
   c01f4:	00030220 	.word	0x00030220

000c01f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   c01f8:	b508      	push	{r3, lr}
   c01fa:	4b02      	ldr	r3, [pc, #8]	; (c0204 <network_connect+0xc>)
   c01fc:	681b      	ldr	r3, [r3, #0]
   c01fe:	685b      	ldr	r3, [r3, #4]
   c0200:	9301      	str	r3, [sp, #4]
   c0202:	bd08      	pop	{r3, pc}
   c0204:	00030240 	.word	0x00030240

000c0208 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   c0208:	b508      	push	{r3, lr}
   c020a:	4b02      	ldr	r3, [pc, #8]	; (c0214 <network_connecting+0xc>)
   c020c:	681b      	ldr	r3, [r3, #0]
   c020e:	689b      	ldr	r3, [r3, #8]
   c0210:	9301      	str	r3, [sp, #4]
   c0212:	bd08      	pop	{r3, pc}
   c0214:	00030240 	.word	0x00030240

000c0218 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   c0218:	b508      	push	{r3, lr}
   c021a:	4b02      	ldr	r3, [pc, #8]	; (c0224 <network_disconnect+0xc>)
   c021c:	681b      	ldr	r3, [r3, #0]
   c021e:	68db      	ldr	r3, [r3, #12]
   c0220:	9301      	str	r3, [sp, #4]
   c0222:	bd08      	pop	{r3, pc}
   c0224:	00030240 	.word	0x00030240

000c0228 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   c0228:	b508      	push	{r3, lr}
   c022a:	4b02      	ldr	r3, [pc, #8]	; (c0234 <network_ready+0xc>)
   c022c:	681b      	ldr	r3, [r3, #0]
   c022e:	691b      	ldr	r3, [r3, #16]
   c0230:	9301      	str	r3, [sp, #4]
   c0232:	bd08      	pop	{r3, pc}
   c0234:	00030240 	.word	0x00030240

000c0238 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   c0238:	b508      	push	{r3, lr}
   c023a:	4b02      	ldr	r3, [pc, #8]	; (c0244 <network_on+0xc>)
   c023c:	681b      	ldr	r3, [r3, #0]
   c023e:	695b      	ldr	r3, [r3, #20]
   c0240:	9301      	str	r3, [sp, #4]
   c0242:	bd08      	pop	{r3, pc}
   c0244:	00030240 	.word	0x00030240

000c0248 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   c0248:	b508      	push	{r3, lr}
   c024a:	4b02      	ldr	r3, [pc, #8]	; (c0254 <network_off+0xc>)
   c024c:	681b      	ldr	r3, [r3, #0]
   c024e:	699b      	ldr	r3, [r3, #24]
   c0250:	9301      	str	r3, [sp, #4]
   c0252:	bd08      	pop	{r3, pc}
   c0254:	00030240 	.word	0x00030240

000c0258 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   c0258:	b508      	push	{r3, lr}
   c025a:	4b02      	ldr	r3, [pc, #8]	; (c0264 <network_listen+0xc>)
   c025c:	681b      	ldr	r3, [r3, #0]
   c025e:	69db      	ldr	r3, [r3, #28]
   c0260:	9301      	str	r3, [sp, #4]
   c0262:	bd08      	pop	{r3, pc}
   c0264:	00030240 	.word	0x00030240

000c0268 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   c0268:	b508      	push	{r3, lr}
   c026a:	4b02      	ldr	r3, [pc, #8]	; (c0274 <network_listening+0xc>)
   c026c:	681b      	ldr	r3, [r3, #0]
   c026e:	6a1b      	ldr	r3, [r3, #32]
   c0270:	9301      	str	r3, [sp, #4]
   c0272:	bd08      	pop	{r3, pc}
   c0274:	00030240 	.word	0x00030240

000c0278 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   c0278:	b508      	push	{r3, lr}
   c027a:	4b02      	ldr	r3, [pc, #8]	; (c0284 <network_set_listen_timeout+0xc>)
   c027c:	681b      	ldr	r3, [r3, #0]
   c027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c0280:	9301      	str	r3, [sp, #4]
   c0282:	bd08      	pop	{r3, pc}
   c0284:	00030240 	.word	0x00030240

000c0288 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   c0288:	b508      	push	{r3, lr}
   c028a:	4b02      	ldr	r3, [pc, #8]	; (c0294 <network_get_listen_timeout+0xc>)
   c028c:	681b      	ldr	r3, [r3, #0]
   c028e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c0290:	9301      	str	r3, [sp, #4]
   c0292:	bd08      	pop	{r3, pc}
   c0294:	00030240 	.word	0x00030240

000c0298 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   c0298:	b508      	push	{r3, lr}
   c029a:	4b02      	ldr	r3, [pc, #8]	; (c02a4 <network_is_on+0xc>)
   c029c:	681b      	ldr	r3, [r3, #0]
   c029e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c02a0:	9301      	str	r3, [sp, #4]
   c02a2:	bd08      	pop	{r3, pc}
   c02a4:	00030240 	.word	0x00030240

000c02a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   c02a8:	b508      	push	{r3, lr}
   c02aa:	4b02      	ldr	r3, [pc, #8]	; (c02b4 <network_is_off+0xc>)
   c02ac:	681b      	ldr	r3, [r3, #0]
   c02ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c02b0:	9301      	str	r3, [sp, #4]
   c02b2:	bd08      	pop	{r3, pc}
   c02b4:	00030240 	.word	0x00030240

000c02b8 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   c02b8:	b508      	push	{r3, lr}
   c02ba:	4b02      	ldr	r3, [pc, #8]	; (c02c4 <spark_function+0xc>)
   c02bc:	681b      	ldr	r3, [r3, #0]
   c02be:	685b      	ldr	r3, [r3, #4]
   c02c0:	9301      	str	r3, [sp, #4]
   c02c2:	bd08      	pop	{r3, pc}
   c02c4:	00030244 	.word	0x00030244

000c02c8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   c02c8:	b508      	push	{r3, lr}
   c02ca:	4b02      	ldr	r3, [pc, #8]	; (c02d4 <spark_process+0xc>)
   c02cc:	681b      	ldr	r3, [r3, #0]
   c02ce:	689b      	ldr	r3, [r3, #8]
   c02d0:	9301      	str	r3, [sp, #4]
   c02d2:	bd08      	pop	{r3, pc}
   c02d4:	00030244 	.word	0x00030244

000c02d8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   c02d8:	b508      	push	{r3, lr}
   c02da:	4b02      	ldr	r3, [pc, #8]	; (c02e4 <spark_cloud_flag_connect+0xc>)
   c02dc:	681b      	ldr	r3, [r3, #0]
   c02de:	68db      	ldr	r3, [r3, #12]
   c02e0:	9301      	str	r3, [sp, #4]
   c02e2:	bd08      	pop	{r3, pc}
   c02e4:	00030244 	.word	0x00030244

000c02e8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   c02e8:	b508      	push	{r3, lr}
   c02ea:	4b02      	ldr	r3, [pc, #8]	; (c02f4 <spark_cloud_flag_connected+0xc>)
   c02ec:	681b      	ldr	r3, [r3, #0]
   c02ee:	695b      	ldr	r3, [r3, #20]
   c02f0:	9301      	str	r3, [sp, #4]
   c02f2:	bd08      	pop	{r3, pc}
   c02f4:	00030244 	.word	0x00030244

000c02f8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   c02f8:	b508      	push	{r3, lr}
   c02fa:	4b02      	ldr	r3, [pc, #8]	; (c0304 <spark_deviceID+0xc>)
   c02fc:	681b      	ldr	r3, [r3, #0]
   c02fe:	69db      	ldr	r3, [r3, #28]
   c0300:	9301      	str	r3, [sp, #4]
   c0302:	bd08      	pop	{r3, pc}
   c0304:	00030244 	.word	0x00030244

000c0308 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   c0308:	b508      	push	{r3, lr}
   c030a:	4b02      	ldr	r3, [pc, #8]	; (c0314 <spark_send_event+0xc>)
   c030c:	681b      	ldr	r3, [r3, #0]
   c030e:	6a1b      	ldr	r3, [r3, #32]
   c0310:	9301      	str	r3, [sp, #4]
   c0312:	bd08      	pop	{r3, pc}
   c0314:	00030244 	.word	0x00030244

000c0318 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   c0318:	b508      	push	{r3, lr}
   c031a:	4b02      	ldr	r3, [pc, #8]	; (c0324 <spark_sync_time+0xc>)
   c031c:	681b      	ldr	r3, [r3, #0]
   c031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c0320:	9301      	str	r3, [sp, #4]
   c0322:	bd08      	pop	{r3, pc}
   c0324:	00030244 	.word	0x00030244

000c0328 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   c0328:	b508      	push	{r3, lr}
   c032a:	4b02      	ldr	r3, [pc, #8]	; (c0334 <spark_sync_time_pending+0xc>)
   c032c:	681b      	ldr	r3, [r3, #0]
   c032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c0330:	9301      	str	r3, [sp, #4]
   c0332:	bd08      	pop	{r3, pc}
   c0334:	00030244 	.word	0x00030244

000c0338 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   c0338:	b508      	push	{r3, lr}
   c033a:	4b02      	ldr	r3, [pc, #8]	; (c0344 <spark_sync_time_last+0xc>)
   c033c:	681b      	ldr	r3, [r3, #0]
   c033e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c0340:	9301      	str	r3, [sp, #4]
   c0342:	bd08      	pop	{r3, pc}
   c0344:	00030244 	.word	0x00030244

000c0348 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   c0348:	b508      	push	{r3, lr}
   c034a:	4b02      	ldr	r3, [pc, #8]	; (c0354 <spark_set_random_seed_from_cloud_handler+0xc>)
   c034c:	681b      	ldr	r3, [r3, #0]
   c034e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   c0350:	9301      	str	r3, [sp, #4]
   c0352:	bd08      	pop	{r3, pc}
   c0354:	00030244 	.word	0x00030244

000c0358 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   c0358:	b508      	push	{r3, lr}
   c035a:	4b02      	ldr	r3, [pc, #8]	; (c0364 <spark_cloud_disconnect+0xc>)
   c035c:	681b      	ldr	r3, [r3, #0]
   c035e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c0360:	9301      	str	r3, [sp, #4]
   c0362:	bd08      	pop	{r3, pc}
   c0364:	00030244 	.word	0x00030244

000c0368 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   c0368:	b508      	push	{r3, lr}
   c036a:	4b02      	ldr	r3, [pc, #8]	; (c0374 <malloc+0xc>)
   c036c:	681b      	ldr	r3, [r3, #0]
   c036e:	681b      	ldr	r3, [r3, #0]
   c0370:	9301      	str	r3, [sp, #4]
   c0372:	bd08      	pop	{r3, pc}
   c0374:	0003021c 	.word	0x0003021c

000c0378 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   c0378:	b508      	push	{r3, lr}
   c037a:	4b02      	ldr	r3, [pc, #8]	; (c0384 <free+0xc>)
   c037c:	681b      	ldr	r3, [r3, #0]
   c037e:	685b      	ldr	r3, [r3, #4]
   c0380:	9301      	str	r3, [sp, #4]
   c0382:	bd08      	pop	{r3, pc}
   c0384:	0003021c 	.word	0x0003021c

000c0388 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   c0388:	b508      	push	{r3, lr}
   c038a:	4b02      	ldr	r3, [pc, #8]	; (c0394 <realloc+0xc>)
   c038c:	681b      	ldr	r3, [r3, #0]
   c038e:	689b      	ldr	r3, [r3, #8]
   c0390:	9301      	str	r3, [sp, #4]
   c0392:	bd08      	pop	{r3, pc}
   c0394:	0003021c 	.word	0x0003021c

000c0398 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   c0398:	b508      	push	{r3, lr}
   c039a:	4b02      	ldr	r3, [pc, #8]	; (c03a4 <siprintf+0xc>)
   c039c:	681b      	ldr	r3, [r3, #0]
   c039e:	691b      	ldr	r3, [r3, #16]
   c03a0:	9301      	str	r3, [sp, #4]
   c03a2:	bd08      	pop	{r3, pc}
   c03a4:	0003021c 	.word	0x0003021c

000c03a8 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   c03a8:	b508      	push	{r3, lr}
   c03aa:	4b02      	ldr	r3, [pc, #8]	; (c03b4 <sscanf+0xc>)
   c03ac:	681b      	ldr	r3, [r3, #0]
   c03ae:	695b      	ldr	r3, [r3, #20]
   c03b0:	9301      	str	r3, [sp, #4]
   c03b2:	bd08      	pop	{r3, pc}
   c03b4:	0003021c 	.word	0x0003021c

000c03b8 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   c03b8:	b508      	push	{r3, lr}
   c03ba:	4b02      	ldr	r3, [pc, #8]	; (c03c4 <snprintf+0xc>)
   c03bc:	681b      	ldr	r3, [r3, #0]
   c03be:	69db      	ldr	r3, [r3, #28]
   c03c0:	9301      	str	r3, [sp, #4]
   c03c2:	bd08      	pop	{r3, pc}
   c03c4:	0003021c 	.word	0x0003021c

000c03c8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   c03c8:	b508      	push	{r3, lr}
   c03ca:	4b02      	ldr	r3, [pc, #8]	; (c03d4 <vsnprintf+0xc>)
   c03cc:	681b      	ldr	r3, [r3, #0]
   c03ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   c03d0:	9301      	str	r3, [sp, #4]
   c03d2:	bd08      	pop	{r3, pc}
   c03d4:	0003021c 	.word	0x0003021c

000c03d8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   c03d8:	b508      	push	{r3, lr}
   c03da:	4b02      	ldr	r3, [pc, #8]	; (c03e4 <abort+0xc>)
   c03dc:	681b      	ldr	r3, [r3, #0]
   c03de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c03e0:	9301      	str	r3, [sp, #4]
   c03e2:	bd08      	pop	{r3, pc}
   c03e4:	0003021c 	.word	0x0003021c

000c03e8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   c03e8:	b508      	push	{r3, lr}
   c03ea:	4b02      	ldr	r3, [pc, #8]	; (c03f4 <_malloc_r+0xc>)
   c03ec:	681b      	ldr	r3, [r3, #0]
   c03ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c03f0:	9301      	str	r3, [sp, #4]
   c03f2:	bd08      	pop	{r3, pc}
   c03f4:	0003021c 	.word	0x0003021c

000c03f8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   c03f8:	b508      	push	{r3, lr}
   c03fa:	4b02      	ldr	r3, [pc, #8]	; (c0404 <__errno+0xc>)
   c03fc:	681b      	ldr	r3, [r3, #0]
   c03fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   c0400:	9301      	str	r3, [sp, #4]
   c0402:	bd08      	pop	{r3, pc}
   c0404:	0003021c 	.word	0x0003021c

000c0408 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   c0408:	b508      	push	{r3, lr}
   c040a:	4b02      	ldr	r3, [pc, #8]	; (c0414 <__assert_func+0xc>)
   c040c:	681b      	ldr	r3, [r3, #0]
   c040e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c0410:	9301      	str	r3, [sp, #4]
   c0412:	bd08      	pop	{r3, pc}
   c0414:	0003021c 	.word	0x0003021c

000c0418 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   c0418:	b508      	push	{r3, lr}
   c041a:	4b02      	ldr	r3, [pc, #8]	; (c0424 <newlib_impure_ptr_callback+0xc>)
   c041c:	681b      	ldr	r3, [r3, #0]
   c041e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c0420:	9301      	str	r3, [sp, #4]
   c0422:	bd08      	pop	{r3, pc}
   c0424:	0003021c 	.word	0x0003021c

000c0428 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   c0428:	b508      	push	{r3, lr}
   c042a:	4b02      	ldr	r3, [pc, #8]	; (c0434 <strftime+0xc>)
   c042c:	681b      	ldr	r3, [r3, #0]
   c042e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   c0430:	9301      	str	r3, [sp, #4]
   c0432:	bd08      	pop	{r3, pc}
   c0434:	0003021c 	.word	0x0003021c

000c0438 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   c0438:	b508      	push	{r3, lr}
   c043a:	4b02      	ldr	r3, [pc, #8]	; (c0444 <localtime_r+0xc>)
   c043c:	681b      	ldr	r3, [r3, #0]
   c043e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   c0440:	9301      	str	r3, [sp, #4]
   c0442:	bd08      	pop	{r3, pc}
   c0444:	0003021c 	.word	0x0003021c

000c0448 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   c0448:	b508      	push	{r3, lr}
   c044a:	4b02      	ldr	r3, [pc, #8]	; (c0454 <gmtime_r+0xc>)
   c044c:	681b      	ldr	r3, [r3, #0]
   c044e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   c0450:	9301      	str	r3, [sp, #4]
   c0452:	bd08      	pop	{r3, pc}
   c0454:	0003021c 	.word	0x0003021c

000c0458 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   c0458:	b508      	push	{r3, lr}
   c045a:	4b02      	ldr	r3, [pc, #8]	; (c0464 <mktime+0xc>)
   c045c:	681b      	ldr	r3, [r3, #0]
   c045e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   c0460:	9301      	str	r3, [sp, #4]
   c0462:	bd08      	pop	{r3, pc}
   c0464:	0003021c 	.word	0x0003021c

000c0468 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   c0468:	b508      	push	{r3, lr}
            return &Wire1;
   c046a:	f003 f991 	bl	c3790 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   c046e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   c0472:	f002 bd97 	b.w	c2fa4 <_ZN7TwoWire4lockEv>

000c0476 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   c0476:	b510      	push	{r4, lr}
   c0478:	4604      	mov	r4, r0
    lock_(_lock)
   c047a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   c047c:	b109      	cbz	r1, c0482 <_ZN4PMICC1Eb+0xc>
        lock();
   c047e:	f7ff fff3 	bl	c0468 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   c0482:	4620      	mov	r0, r4
   c0484:	bd10      	pop	{r4, pc}

000c0486 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   c0486:	b508      	push	{r3, lr}
            return &Wire1;
   c0488:	f003 f982 	bl	c3790 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   c048c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   c0490:	f002 bd91 	b.w	c2fb6 <_ZN7TwoWire6unlockEv>

000c0494 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   c0494:	b510      	push	{r4, lr}
    if (lock_) {
   c0496:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   c0498:	4604      	mov	r4, r0
    if (lock_) {
   c049a:	b10b      	cbz	r3, c04a0 <_ZN4PMICD1Ev+0xc>
        unlock();
   c049c:	f7ff fff3 	bl	c0486 <_ZN4PMIC6unlockEv>
}
   c04a0:	4620      	mov	r0, r4
   c04a2:	bd10      	pop	{r4, pc}

000c04a4 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   c04a4:	b510      	push	{r4, lr}
   c04a6:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   c04a8:	6800      	ldr	r0, [r0, #0]
   c04aa:	f7ff ffec 	bl	c0486 <_ZN4PMIC6unlockEv>
   c04ae:	4620      	mov	r0, r4
   c04b0:	bd10      	pop	{r4, pc}

000c04b2 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   c04b2:	b530      	push	{r4, r5, lr}
   c04b4:	b087      	sub	sp, #28
   c04b6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c04b8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   c04ba:	f7ff ffd5 	bl	c0468 <_ZN4PMIC4lockEv.constprop.0.isra.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   c04be:	226b      	movs	r2, #107	; 0x6b
   c04c0:	2300      	movs	r3, #0
   c04c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   c04c6:	2401      	movs	r4, #1
   c04c8:	230a      	movs	r3, #10
   c04ca:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   c04ce:	f003 f95f 	bl	c3790 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   c04d2:	a902      	add	r1, sp, #8
   c04d4:	f002 fd4a 	bl	c2f6c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   c04d8:	f003 f95a 	bl	c3790 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   c04dc:	6803      	ldr	r3, [r0, #0]
   c04de:	4629      	mov	r1, r5
   c04e0:	689b      	ldr	r3, [r3, #8]
   c04e2:	4798      	blx	r3
            return &Wire1;
   c04e4:	f003 f954 	bl	c3790 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   c04e8:	4621      	mov	r1, r4
   c04ea:	f002 fd57 	bl	c2f9c <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   c04ee:	9403      	str	r4, [sp, #12]
            return &Wire1;
   c04f0:	f003 f94e 	bl	c3790 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   c04f4:	a902      	add	r1, sp, #8
   c04f6:	f002 fd09 	bl	c2f0c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   c04fa:	f003 f949 	bl	c3790 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   c04fe:	6803      	ldr	r3, [r0, #0]
   c0500:	695b      	ldr	r3, [r3, #20]
   c0502:	4798      	blx	r3
   c0504:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   c0506:	a801      	add	r0, sp, #4
   c0508:	f7ff ffcc 	bl	c04a4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   c050c:	b2e0      	uxtb	r0, r4
   c050e:	b007      	add	sp, #28
   c0510:	bd30      	pop	{r4, r5, pc}

000c0512 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   c0512:	b570      	push	{r4, r5, r6, lr}
   c0514:	b086      	sub	sp, #24
   c0516:	460d      	mov	r5, r1
   c0518:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c051a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   c051c:	f7ff ffa4 	bl	c0468 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   c0520:	226b      	movs	r2, #107	; 0x6b
   c0522:	2300      	movs	r3, #0
   c0524:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   c0528:	2601      	movs	r6, #1
   c052a:	230a      	movs	r3, #10
   c052c:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   c0530:	f003 f92e 	bl	c3790 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   c0534:	a902      	add	r1, sp, #8
   c0536:	f002 fd19 	bl	c2f6c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   c053a:	f003 f929 	bl	c3790 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   c053e:	6803      	ldr	r3, [r0, #0]
   c0540:	4629      	mov	r1, r5
   c0542:	689b      	ldr	r3, [r3, #8]
   c0544:	4798      	blx	r3
            return &Wire1;
   c0546:	f003 f923 	bl	c3790 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   c054a:	6803      	ldr	r3, [r0, #0]
   c054c:	4621      	mov	r1, r4
   c054e:	689b      	ldr	r3, [r3, #8]
   c0550:	4798      	blx	r3
            return &Wire1;
   c0552:	f003 f91d 	bl	c3790 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   c0556:	4631      	mov	r1, r6
   c0558:	f002 fd20 	bl	c2f9c <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   c055c:	a801      	add	r0, sp, #4
   c055e:	f7ff ffa1 	bl	c04a4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   c0562:	b006      	add	sp, #24
   c0564:	bd70      	pop	{r4, r5, r6, pc}

000c0566 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   c0566:	b513      	push	{r0, r1, r4, lr}
   c0568:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c056a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   c056c:	f7ff ff7c 	bl	c0468 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   c0570:	2101      	movs	r1, #1
   c0572:	4620      	mov	r0, r4
   c0574:	f7ff ff9d 	bl	c04b2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   c0578:	f000 0330 	and.w	r3, r0, #48	; 0x30
   c057c:	2b10      	cmp	r3, #16
   c057e:	d007      	beq.n	c0590 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   c0580:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   c0584:	f042 0210 	orr.w	r2, r2, #16
   c0588:	2101      	movs	r1, #1
   c058a:	4620      	mov	r0, r4
   c058c:	f7ff ffc1 	bl	c0512 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   c0590:	a801      	add	r0, sp, #4
   c0592:	f7ff ff87 	bl	c04a4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   c0596:	2001      	movs	r0, #1
   c0598:	b002      	add	sp, #8
   c059a:	bd10      	pop	{r4, pc}

000c059c <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   c059c:	b513      	push	{r0, r1, r4, lr}
   c059e:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c05a0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   c05a2:	f7ff ff61 	bl	c0468 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   c05a6:	2101      	movs	r1, #1
   c05a8:	4620      	mov	r0, r4
   c05aa:	f7ff ff82 	bl	c04b2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   c05ae:	f010 0f30 	tst.w	r0, #48	; 0x30
   c05b2:	d005      	beq.n	c05c0 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   c05b4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   c05b8:	2101      	movs	r1, #1
   c05ba:	4620      	mov	r0, r4
   c05bc:	f7ff ffa9 	bl	c0512 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   c05c0:	a801      	add	r0, sp, #4
   c05c2:	f7ff ff6f 	bl	c04a4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   c05c6:	2001      	movs	r0, #1
   c05c8:	b002      	add	sp, #8
   c05ca:	bd10      	pop	{r4, pc}

000c05cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   c05cc:	2200      	movs	r2, #0
   c05ce:	6840      	ldr	r0, [r0, #4]
   c05d0:	4611      	mov	r1, r2
   c05d2:	f7ff be49 	b.w	c0268 <network_listening>

000c05d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c05d6:	2200      	movs	r2, #0
   c05d8:	6840      	ldr	r0, [r0, #4]
   c05da:	4611      	mov	r1, r2
   c05dc:	f7ff be54 	b.w	c0288 <network_get_listen_timeout>

000c05e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c05e0:	6840      	ldr	r0, [r0, #4]
   c05e2:	2200      	movs	r2, #0
   c05e4:	f7ff be48 	b.w	c0278 <network_set_listen_timeout>

000c05e8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c05e8:	6840      	ldr	r0, [r0, #4]
   c05ea:	2200      	movs	r2, #0
   c05ec:	f081 0101 	eor.w	r1, r1, #1
   c05f0:	f7ff be32 	b.w	c0258 <network_listen>

000c05f4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c05f4:	2300      	movs	r3, #0
   c05f6:	6840      	ldr	r0, [r0, #4]
   c05f8:	461a      	mov	r2, r3
   c05fa:	4619      	mov	r1, r3
   c05fc:	f7ff be24 	b.w	c0248 <network_off>

000c0600 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c0600:	2300      	movs	r3, #0
   c0602:	6840      	ldr	r0, [r0, #4]
   c0604:	461a      	mov	r2, r3
   c0606:	4619      	mov	r1, r3
   c0608:	f7ff be16 	b.w	c0238 <network_on>

000c060c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   c060c:	2200      	movs	r2, #0
   c060e:	6840      	ldr	r0, [r0, #4]
   c0610:	4611      	mov	r1, r2
   c0612:	f7ff be09 	b.w	c0228 <network_ready>

000c0616 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c0616:	2200      	movs	r2, #0
   c0618:	6840      	ldr	r0, [r0, #4]
   c061a:	4611      	mov	r1, r2
   c061c:	f7ff bdf4 	b.w	c0208 <network_connecting>

000c0620 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c0620:	6840      	ldr	r0, [r0, #4]
   c0622:	2200      	movs	r2, #0
   c0624:	2102      	movs	r1, #2
   c0626:	f7ff bdf7 	b.w	c0218 <network_disconnect>

000c062a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c062a:	2300      	movs	r3, #0
   c062c:	6840      	ldr	r0, [r0, #4]
   c062e:	461a      	mov	r2, r3
   c0630:	f7ff bde2 	b.w	c01f8 <network_connect>

000c0634 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   c0634:	4b02      	ldr	r3, [pc, #8]	; (c0640 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   c0636:	2203      	movs	r2, #3
   c0638:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   c063a:	4a02      	ldr	r2, [pc, #8]	; (c0644 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   c063c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   c063e:	4770      	bx	lr
   c0640:	2003e60c 	.word	0x2003e60c
   c0644:	000c91c8 	.word	0x000c91c8

000c0648 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c0648:	2100      	movs	r1, #0
   c064a:	f7ff bcd5 	b.w	bfff8 <hal_spi_release>

000c064e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c064e:	2100      	movs	r1, #0
   c0650:	f7ff bcca 	b.w	bffe8 <hal_spi_acquire>

000c0654 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c0654:	b510      	push	{r4, lr}
   c0656:	4604      	mov	r4, r0
   c0658:	4608      	mov	r0, r1
{
    _spi = spi;
   c065a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c065c:	f7ff fca4 	bl	bffa8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c0660:	2300      	movs	r3, #0
   c0662:	6063      	str	r3, [r4, #4]
}
   c0664:	4620      	mov	r0, r4
   c0666:	bd10      	pop	{r4, pc}

000c0668 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c0668:	b513      	push	{r0, r1, r4, lr}
   c066a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c066c:	7800      	ldrb	r0, [r0, #0]
   c066e:	f7ff ffee 	bl	c064e <_ZN8SPIClass4lockEv.isra.0>
   c0672:	b958      	cbnz	r0, c068c <_ZN8SPIClass5beginEv+0x24>
   c0674:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c0676:	9001      	str	r0, [sp, #4]
   c0678:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c067c:	f7ff fc7c 	bl	bff78 <hal_spi_begin>
        unlock();
   c0680:	9801      	ldr	r0, [sp, #4]
    }
}
   c0682:	b002      	add	sp, #8
   c0684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0688:	f7ff bfde 	b.w	c0648 <_ZN8SPIClass6unlockEv.isra.0>
   c068c:	b002      	add	sp, #8
   c068e:	bd10      	pop	{r4, pc}

000c0690 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   c0690:	b513      	push	{r0, r1, r4, lr}
   c0692:	4604      	mov	r4, r0
    if (!lock())
   c0694:	7800      	ldrb	r0, [r0, #0]
   c0696:	f7ff ffda 	bl	c064e <_ZN8SPIClass4lockEv.isra.0>
   c069a:	b948      	cbnz	r0, c06b0 <_ZN8SPIClass3endEv+0x20>
   c069c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   c069e:	9001      	str	r0, [sp, #4]
   c06a0:	f7ff fc72 	bl	bff88 <hal_spi_end>
        unlock();
   c06a4:	9801      	ldr	r0, [sp, #4]
    }
}
   c06a6:	b002      	add	sp, #8
   c06a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c06ac:	f7ff bfcc 	b.w	c0648 <_ZN8SPIClass6unlockEv.isra.0>
   c06b0:	b002      	add	sp, #8
   c06b2:	bd10      	pop	{r4, pc}

000c06b4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c06b4:	7800      	ldrb	r0, [r0, #0]
   c06b6:	f7ff bfc7 	b.w	c0648 <_ZN8SPIClass6unlockEv.isra.0>
	...

000c06bc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c06bc:	0840      	lsrs	r0, r0, #1
{
   c06be:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c06c0:	6018      	str	r0, [r3, #0]
   c06c2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c06c4:	6818      	ldr	r0, [r3, #0]
   c06c6:	4288      	cmp	r0, r1
   c06c8:	b2e5      	uxtb	r5, r4
   c06ca:	d906      	bls.n	c06da <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c06cc:	3401      	adds	r4, #1
   c06ce:	2c08      	cmp	r4, #8
   c06d0:	d002      	beq.n	c06d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c06d2:	0840      	lsrs	r0, r0, #1
   c06d4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c06d6:	e7f5      	b.n	c06c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c06d8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c06da:	4b02      	ldr	r3, [pc, #8]	; (c06e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c06dc:	5d5b      	ldrb	r3, [r3, r5]
   c06de:	7013      	strb	r3, [r2, #0]
}
   c06e0:	bd30      	pop	{r4, r5, pc}
   c06e2:	bf00      	nop
   c06e4:	000c91fc 	.word	0x000c91fc

000c06e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c06e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c06ec:	4606      	mov	r6, r0
   c06ee:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c06f0:	7800      	ldrb	r0, [r0, #0]
{
   c06f2:	460c      	mov	r4, r1
    CHECK(lock());
   c06f4:	f7ff ffab 	bl	c064e <_ZN8SPIClass4lockEv.isra.0>
   c06f8:	2800      	cmp	r0, #0
   c06fa:	db1b      	blt.n	c0734 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c06fc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c06fe:	2214      	movs	r2, #20
   c0700:	2100      	movs	r1, #0
   c0702:	a809      	add	r0, sp, #36	; 0x24
   c0704:	f004 fe84 	bl	c5410 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0708:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c070a:	2200      	movs	r2, #0
   c070c:	a909      	add	r1, sp, #36	; 0x24
   c070e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c0710:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c0714:	f7ff fc58 	bl	bffc8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c0718:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c071c:	b113      	cbz	r3, c0724 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c071e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c0722:	b155      	cbz	r5, c073a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c0724:	2700      	movs	r7, #0
   c0726:	46b9      	mov	r9, r7
   c0728:	46b8      	mov	r8, r7
   c072a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c072c:	7923      	ldrb	r3, [r4, #4]
   c072e:	b15d      	cbz	r5, c0748 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c0730:	b1c3      	cbz	r3, c0764 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c0732:	2000      	movs	r0, #0
}
   c0734:	b00f      	add	sp, #60	; 0x3c
   c0736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c073a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c073e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c0742:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c0746:	e7f1      	b.n	c072c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c0748:	2b00      	cmp	r3, #0
   c074a:	d135      	bne.n	c07b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c074c:	68a3      	ldr	r3, [r4, #8]
   c074e:	4543      	cmp	r3, r8
   c0750:	d108      	bne.n	c0764 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c0752:	f88d 9020 	strb.w	r9, [sp, #32]
   c0756:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c075a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c075e:	89a3      	ldrh	r3, [r4, #12]
   c0760:	429a      	cmp	r2, r3
   c0762:	d0e6      	beq.n	c0732 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c0764:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0766:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c0768:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c076c:	980a      	ldr	r0, [sp, #40]	; 0x28
   c076e:	ab04      	add	r3, sp, #16
   c0770:	f10d 020f 	add.w	r2, sp, #15
   c0774:	f7ff ffa2 	bl	c06bc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c0778:	7921      	ldrb	r1, [r4, #4]
   c077a:	b985      	cbnz	r5, c079e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c077c:	b989      	cbnz	r1, c07a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c077e:	68a3      	ldr	r3, [r4, #8]
   c0780:	4543      	cmp	r3, r8
   c0782:	d30e      	bcc.n	c07a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c0784:	f88d 9020 	strb.w	r9, [sp, #32]
   c0788:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c078c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0790:	89a3      	ldrh	r3, [r4, #12]
   c0792:	429a      	cmp	r2, r3
   c0794:	d105      	bne.n	c07a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c0796:	9b04      	ldr	r3, [sp, #16]
   c0798:	4543      	cmp	r3, r8
   c079a:	d102      	bne.n	c07a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c079c:	e7c9      	b.n	c0732 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c079e:	2900      	cmp	r1, #0
   c07a0:	d1f9      	bne.n	c0796 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c07a2:	2300      	movs	r3, #0
   c07a4:	9301      	str	r3, [sp, #4]
   c07a6:	7b63      	ldrb	r3, [r4, #13]
   c07a8:	9300      	str	r3, [sp, #0]
   c07aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c07ae:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c07b0:	7830      	ldrb	r0, [r6, #0]
   c07b2:	f7ff fc11 	bl	bffd8 <hal_spi_set_settings>
   c07b6:	e7bc      	b.n	c0732 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c07b8:	e9cd 5500 	strd	r5, r5, [sp]
   c07bc:	462b      	mov	r3, r5
   c07be:	462a      	mov	r2, r5
   c07c0:	2101      	movs	r1, #1
   c07c2:	e7f5      	b.n	c07b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c07c4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   c07c4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c07c6:	7800      	ldrb	r0, [r0, #0]
   c07c8:	f7ff fbe6 	bl	bff98 <hal_spi_transfer>
}
   c07cc:	b2c0      	uxtb	r0, r0
   c07ce:	bd08      	pop	{r3, pc}

000c07d0 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   c07d0:	4770      	bx	lr

000c07d2 <_ZN8SPIClass15detachInterruptEv>:
   c07d2:	4770      	bx	lr

000c07d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   c07d4:	b510      	push	{r4, lr}
   c07d6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   c07d8:	6800      	ldr	r0, [r0, #0]
   c07da:	b118      	cbz	r0, c07e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   c07dc:	f7ff fdcc 	bl	c0378 <free>
            wakeupSource_ = nullptr;
   c07e0:	2300      	movs	r3, #0
   c07e2:	6023      	str	r3, [r4, #0]
        }
    }
   c07e4:	bd10      	pop	{r4, pc}

000c07e6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   c07e6:	b538      	push	{r3, r4, r5, lr}
   c07e8:	460c      	mov	r4, r1
   c07ea:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   c07ec:	f7ff fff2 	bl	c07d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   c07f0:	b154      	cbz	r4, c0808 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   c07f2:	8820      	ldrh	r0, [r4, #0]
   c07f4:	f7ff fdb8 	bl	c0368 <malloc>
   c07f8:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   c07fa:	b128      	cbz	r0, c0808 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   c07fc:	8822      	ldrh	r2, [r4, #0]
   c07fe:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   c0800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   c0804:	f004 bddc 	b.w	c53c0 <memcpy>
    }
   c0808:	bd38      	pop	{r3, r4, r5, pc}

000c080a <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   c080a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   c080c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   c0810:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   c0812:	f8d1 3006 	ldr.w	r3, [r1, #6]
   c0816:	f8c0 3006 	str.w	r3, [r0, #6]
   c081a:	894b      	ldrh	r3, [r1, #10]
   c081c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   c081e:	460c      	mov	r4, r1
   c0820:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   c0822:	f7ff ffd7 	bl	c07d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   c0826:	6823      	ldr	r3, [r4, #0]
   c0828:	b113      	cbz	r3, c0830 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   c082a:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   c082c:	2300      	movs	r3, #0
   c082e:	6023      	str	r3, [r4, #0]
    }
   c0830:	bd38      	pop	{r3, r4, r5, pc}

000c0832 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   c0832:	b507      	push	{r0, r1, r2, lr}
   c0834:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   c0836:	2100      	movs	r1, #0
{
   c0838:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   c083a:	9100      	str	r1, [sp, #0]
   c083c:	2001      	movs	r0, #1
   c083e:	218c      	movs	r1, #140	; 0x8c
   c0840:	f7ff fcd0 	bl	c01e4 <system_reset>
}
   c0844:	b003      	add	sp, #12
   c0846:	f85d fb04 	ldr.w	pc, [sp], #4

000c084a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   c084a:	4601      	mov	r1, r0
    reset(0, flags);
   c084c:	2000      	movs	r0, #0
   c084e:	f7ff bff0 	b.w	c0832 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000c0852 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   c0852:	2000      	movs	r0, #0
   c0854:	f7ff bff9 	b.w	c084a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000c0858 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   c0858:	b5f0      	push	{r4, r5, r6, r7, lr}
   c085a:	4d2b      	ldr	r5, [pc, #172]	; (c0908 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   c085c:	7d0b      	ldrb	r3, [r1, #20]
   c085e:	4604      	mov	r4, r0
   c0860:	b08b      	sub	sp, #44	; 0x2c
   c0862:	4608      	mov	r0, r1
   c0864:	1daf      	adds	r7, r5, #6
   c0866:	2b00      	cmp	r3, #0
   c0868:	d036      	beq.n	c08d8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   c086a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   c086c:	791b      	ldrb	r3, [r3, #4]
   c086e:	2b00      	cmp	r3, #0
   c0870:	d032      	beq.n	c08d8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   c0872:	4b26      	ldr	r3, [pc, #152]	; (c090c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   c0874:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   c0876:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   c0878:	a902      	add	r1, sp, #8
   c087a:	3004      	adds	r0, #4
   c087c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   c0880:	f7ff fca6 	bl	c01d0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   c0884:	f8dd 300e 	ldr.w	r3, [sp, #14]
   c0888:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   c088c:	b200      	sxth	r0, r0
   c088e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   c0892:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   c0896:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   c0898:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   c089a:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   c089c:	4628      	mov	r0, r5
   c089e:	f7ff ffa2 	bl	c07e6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   c08a2:	a802      	add	r0, sp, #8
   c08a4:	f7ff ff96 	bl	c07d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   c08a8:	2300      	movs	r3, #0
   c08aa:	6023      	str	r3, [r4, #0]
   c08ac:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   c08ae:	71a3      	strb	r3, [r4, #6]
   c08b0:	8123      	strh	r3, [r4, #8]
   c08b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c08b6:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   c08b8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   c08bc:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   c08be:	f8d5 3006 	ldr.w	r3, [r5, #6]
   c08c2:	f8c4 3006 	str.w	r3, [r4, #6]
   c08c6:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   c08c8:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   c08ca:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   c08cc:	4620      	mov	r0, r4
   c08ce:	f7ff ff8a 	bl	c07e6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   c08d2:	4620      	mov	r0, r4
   c08d4:	b00b      	add	sp, #44	; 0x2c
   c08d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   c08d8:	2600      	movs	r6, #0
   c08da:	2320      	movs	r3, #32
   c08dc:	e9cd 3602 	strd	r3, r6, [sp, #8]
   c08e0:	4b0b      	ldr	r3, [pc, #44]	; (c0910 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   c08e2:	9300      	str	r3, [sp, #0]
   c08e4:	aa02      	add	r2, sp, #8
   c08e6:	4633      	mov	r3, r6
   c08e8:	490a      	ldr	r1, [pc, #40]	; (c0914 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   c08ea:	2032      	movs	r0, #50	; 0x32
   c08ec:	f7ff fbe4 	bl	c00b8 <log_message>
            : wakeupSource_(nullptr),
   c08f0:	4b06      	ldr	r3, [pc, #24]	; (c090c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   c08f2:	4805      	ldr	r0, [pc, #20]	; (c0908 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   c08f4:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   c08f6:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   c08fa:	a902      	add	r1, sp, #8
   c08fc:	e9cd 2303 	strd	r2, r3, [sp, #12]
   c0900:	f7ff ff83 	bl	c080a <_ZN17SystemSleepResultaSEOS_.isra.0>
   c0904:	e7cd      	b.n	c08a2 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   c0906:	bf00      	nop
   c0908:	2003e614 	.word	0x2003e614
   c090c:	ffff0000 	.word	0xffff0000
   c0910:	000c920b 	.word	0x000c920b
   c0914:	000c9204 	.word	0x000c9204

000c0918 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   c0918:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   c091a:	2420      	movs	r4, #32
{
   c091c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   c091e:	4622      	mov	r2, r4
   c0920:	2100      	movs	r1, #0
   c0922:	4668      	mov	r0, sp
   c0924:	f004 fd74 	bl	c5410 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   c0928:	2100      	movs	r1, #0
   c092a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   c092c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   c0930:	f7ff f992 	bl	bfc58 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   c0934:	9801      	ldr	r0, [sp, #4]
   c0936:	b008      	add	sp, #32
   c0938:	bd10      	pop	{r4, pc}
	...

000c093c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c093c:	4b05      	ldr	r3, [pc, #20]	; (c0954 <_GLOBAL__sub_I_System+0x18>)
   c093e:	2202      	movs	r2, #2
   c0940:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   c0942:	4b05      	ldr	r3, [pc, #20]	; (c0958 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c0944:	4a05      	ldr	r2, [pc, #20]	; (c095c <_GLOBAL__sub_I_System+0x20>)
   c0946:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c0948:	2000      	movs	r0, #0
   c094a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c094e:	f7ff bbeb 	b.w	c0128 <set_system_mode>
   c0952:	bf00      	nop
   c0954:	2003e620 	.word	0x2003e620
   c0958:	2003e614 	.word	0x2003e614
   c095c:	ffff0000 	.word	0xffff0000

000c0960 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   c0960:	b510      	push	{r4, lr}
   c0962:	4604      	mov	r4, r0
{
    free(buffer);
   c0964:	6800      	ldr	r0, [r0, #0]
   c0966:	f7ff fd07 	bl	c0378 <free>
}
   c096a:	4620      	mov	r0, r4
   c096c:	bd10      	pop	{r4, pc}

000c096e <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   c096e:	b510      	push	{r4, lr}
   c0970:	4604      	mov	r4, r0
    if (buffer) {
   c0972:	6800      	ldr	r0, [r0, #0]
   c0974:	b108      	cbz	r0, c097a <_ZN6String10invalidateEv+0xc>
        free(buffer);
   c0976:	f7ff fcff 	bl	c0378 <free>
    }
    buffer = nullptr;
   c097a:	2300      	movs	r3, #0
    capacity = len = 0;
   c097c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   c0980:	6023      	str	r3, [r4, #0]
}
   c0982:	bd10      	pop	{r4, pc}

000c0984 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c0984:	b538      	push	{r3, r4, r5, lr}
   c0986:	4604      	mov	r4, r0
   c0988:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c098a:	6800      	ldr	r0, [r0, #0]
   c098c:	3101      	adds	r1, #1
   c098e:	f7ff fcfb 	bl	c0388 <realloc>
    if (newbuffer) {
   c0992:	b110      	cbz	r0, c099a <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   c0994:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   c0998:	2001      	movs	r0, #1
    }
    return 0;
}
   c099a:	bd38      	pop	{r3, r4, r5, pc}

000c099c <_ZN6String7reserveEj>:
{
   c099c:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   c099e:	6803      	ldr	r3, [r0, #0]
{
   c09a0:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   c09a2:	b123      	cbz	r3, c09ae <_ZN6String7reserveEj+0x12>
   c09a4:	6843      	ldr	r3, [r0, #4]
   c09a6:	428b      	cmp	r3, r1
   c09a8:	d301      	bcc.n	c09ae <_ZN6String7reserveEj+0x12>
   c09aa:	2001      	movs	r0, #1
}
   c09ac:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   c09ae:	4620      	mov	r0, r4
   c09b0:	f7ff ffe8 	bl	c0984 <_ZN6String12changeBufferEj>
   c09b4:	2800      	cmp	r0, #0
   c09b6:	d0f9      	beq.n	c09ac <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   c09b8:	68a3      	ldr	r3, [r4, #8]
   c09ba:	2b00      	cmp	r3, #0
   c09bc:	d1f5      	bne.n	c09aa <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   c09be:	6822      	ldr	r2, [r4, #0]
   c09c0:	7013      	strb	r3, [r2, #0]
   c09c2:	e7f2      	b.n	c09aa <_ZN6String7reserveEj+0xe>

000c09c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c09c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c09c6:	460d      	mov	r5, r1
    if (!reserve(length)) {
   c09c8:	4611      	mov	r1, r2
   c09ca:	9201      	str	r2, [sp, #4]
{
   c09cc:	4604      	mov	r4, r0
    if (!reserve(length)) {
   c09ce:	f7ff ffe5 	bl	c099c <_ZN6String7reserveEj>
   c09d2:	9a01      	ldr	r2, [sp, #4]
   c09d4:	b928      	cbnz	r0, c09e2 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   c09d6:	4620      	mov	r0, r4
   c09d8:	f7ff ffc9 	bl	c096e <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   c09dc:	4620      	mov	r0, r4
   c09de:	b003      	add	sp, #12
   c09e0:	bd30      	pop	{r4, r5, pc}
    len = length;
   c09e2:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   c09e4:	4629      	mov	r1, r5
   c09e6:	6820      	ldr	r0, [r4, #0]
   c09e8:	f004 fcea 	bl	c53c0 <memcpy>
    buffer[len] = 0;
   c09ec:	6822      	ldr	r2, [r4, #0]
   c09ee:	68a3      	ldr	r3, [r4, #8]
   c09f0:	2100      	movs	r1, #0
   c09f2:	54d1      	strb	r1, [r2, r3]
    return *this;
   c09f4:	e7f2      	b.n	c09dc <_ZN6String4copyEPKcj+0x18>

000c09f6 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   c09f6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c09f8:	b513      	push	{r0, r1, r4, lr}
    capacity = 0;
   c09fa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c09fe:	4604      	mov	r4, r0
    len = 0;
   c0a00:	6083      	str	r3, [r0, #8]
    flags = 0;
   c0a02:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   c0a04:	b141      	cbz	r1, c0a18 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   c0a06:	4608      	mov	r0, r1
   c0a08:	9101      	str	r1, [sp, #4]
   c0a0a:	f004 fdcc 	bl	c55a6 <strlen>
   c0a0e:	9901      	ldr	r1, [sp, #4]
   c0a10:	4602      	mov	r2, r0
   c0a12:	4620      	mov	r0, r4
   c0a14:	f7ff ffd6 	bl	c09c4 <_ZN6String4copyEPKcj>
}
   c0a18:	4620      	mov	r0, r4
   c0a1a:	b002      	add	sp, #8
   c0a1c:	bd10      	pop	{r4, pc}

000c0a1e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c0a1e:	b538      	push	{r3, r4, r5, lr}
   c0a20:	4605      	mov	r5, r0
    if (buffer) {
   c0a22:	6800      	ldr	r0, [r0, #0]
{
   c0a24:	460c      	mov	r4, r1
    if (buffer) {
   c0a26:	b170      	cbz	r0, c0a46 <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
   c0a28:	686a      	ldr	r2, [r5, #4]
   c0a2a:	688b      	ldr	r3, [r1, #8]
   c0a2c:	429a      	cmp	r2, r3
   c0a2e:	d308      	bcc.n	c0a42 <_ZN6String4moveERS_+0x24>
   c0a30:	6809      	ldr	r1, [r1, #0]
   c0a32:	b131      	cbz	r1, c0a42 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   c0a34:	f004 fd91 	bl	c555a <strcpy>
            len = rhs.len;
   c0a38:	68a3      	ldr	r3, [r4, #8]
   c0a3a:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   c0a3c:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
   c0a3e:	60a3      	str	r3, [r4, #8]
}
   c0a40:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   c0a42:	f7ff fc99 	bl	c0378 <free>
    buffer = rhs.buffer;
   c0a46:	6823      	ldr	r3, [r4, #0]
   c0a48:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
   c0a4a:	6863      	ldr	r3, [r4, #4]
   c0a4c:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   c0a4e:	68a3      	ldr	r3, [r4, #8]
   c0a50:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   c0a52:	2300      	movs	r3, #0
    rhs.capacity = 0;
   c0a54:	e9c4 3300 	strd	r3, r3, [r4]
   c0a58:	e7f1      	b.n	c0a3e <_ZN6String4moveERS_+0x20>

000c0a5a <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c0a5a:	b510      	push	{r4, lr}
    buffer = nullptr;
   c0a5c:	2300      	movs	r3, #0
    capacity = 0;
   c0a5e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c0a62:	4604      	mov	r4, r0
    len = 0;
   c0a64:	6083      	str	r3, [r0, #8]
    flags = 0;
   c0a66:	7303      	strb	r3, [r0, #12]
    move(rval);
   c0a68:	f7ff ffd9 	bl	c0a1e <_ZN6String4moveERS_>
}
   c0a6c:	4620      	mov	r0, r4
   c0a6e:	bd10      	pop	{r4, pc}

000c0a70 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   c0a70:	4288      	cmp	r0, r1
{
   c0a72:	b510      	push	{r4, lr}
   c0a74:	4604      	mov	r4, r0
    if (this == &rhs) {
   c0a76:	d005      	beq.n	c0a84 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   c0a78:	680b      	ldr	r3, [r1, #0]
   c0a7a:	b12b      	cbz	r3, c0a88 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   c0a7c:	688a      	ldr	r2, [r1, #8]
   c0a7e:	4619      	mov	r1, r3
   c0a80:	f7ff ffa0 	bl	c09c4 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   c0a84:	4620      	mov	r0, r4
   c0a86:	bd10      	pop	{r4, pc}
        invalidate();
   c0a88:	f7ff ff71 	bl	c096e <_ZN6String10invalidateEv>
   c0a8c:	e7fa      	b.n	c0a84 <_ZN6StringaSERKS_+0x14>

000c0a8e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c0a8e:	b510      	push	{r4, lr}
    buffer = nullptr;
   c0a90:	2300      	movs	r3, #0
String::String(const String &value)
   c0a92:	4604      	mov	r4, r0
    capacity = 0;
   c0a94:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   c0a98:	6083      	str	r3, [r0, #8]
    flags = 0;
   c0a9a:	7303      	strb	r3, [r0, #12]
    *this = value;
   c0a9c:	f7ff ffe8 	bl	c0a70 <_ZN6StringaSERKS_>
}
   c0aa0:	4620      	mov	r0, r4
   c0aa2:	bd10      	pop	{r4, pc}

000c0aa4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
    if (this != &rval) {
   c0aa4:	4288      	cmp	r0, r1
{
   c0aa6:	b510      	push	{r4, lr}
   c0aa8:	4604      	mov	r4, r0
    if (this != &rval) {
   c0aaa:	d001      	beq.n	c0ab0 <_ZN6StringaSEOS_+0xc>
        move(rval);
   c0aac:	f7ff ffb7 	bl	c0a1e <_ZN6String4moveERS_>
    }
    return *this;
}
   c0ab0:	4620      	mov	r0, r4
   c0ab2:	bd10      	pop	{r4, pc}

000c0ab4 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c0ab4:	b513      	push	{r0, r1, r4, lr}
   c0ab6:	4604      	mov	r4, r0
    if (cstr) {
   c0ab8:	b159      	cbz	r1, c0ad2 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   c0aba:	4608      	mov	r0, r1
   c0abc:	9101      	str	r1, [sp, #4]
   c0abe:	f004 fd72 	bl	c55a6 <strlen>
   c0ac2:	9901      	ldr	r1, [sp, #4]
   c0ac4:	4602      	mov	r2, r0
   c0ac6:	4620      	mov	r0, r4
   c0ac8:	f7ff ff7c 	bl	c09c4 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   c0acc:	4620      	mov	r0, r4
   c0ace:	b002      	add	sp, #8
   c0ad0:	bd10      	pop	{r4, pc}
        invalidate();
   c0ad2:	f7ff ff4c 	bl	c096e <_ZN6String10invalidateEv>
   c0ad6:	e7f9      	b.n	c0acc <_ZN6StringaSEPKc+0x18>

000c0ad8 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c0ad8:	b570      	push	{r4, r5, r6, lr}
   c0ada:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) {
   c0adc:	460e      	mov	r6, r1
   c0ade:	b909      	cbnz	r1, c0ae4 <_ZN6String6concatEPKcj+0xc>
        return 0;
   c0ae0:	2000      	movs	r0, #0
        return 0;
    }
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
   c0ae2:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
   c0ae4:	b16a      	cbz	r2, c0b02 <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
   c0ae6:	6884      	ldr	r4, [r0, #8]
   c0ae8:	4414      	add	r4, r2
    if (!reserve(newlen)) {
   c0aea:	4621      	mov	r1, r4
   c0aec:	f7ff ff56 	bl	c099c <_ZN6String7reserveEj>
   c0af0:	2800      	cmp	r0, #0
   c0af2:	d0f5      	beq.n	c0ae0 <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
   c0af4:	6828      	ldr	r0, [r5, #0]
   c0af6:	68ab      	ldr	r3, [r5, #8]
   c0af8:	4631      	mov	r1, r6
   c0afa:	4418      	add	r0, r3
   c0afc:	f004 fd2d 	bl	c555a <strcpy>
    len = newlen;
   c0b00:	60ac      	str	r4, [r5, #8]
        return 1;
   c0b02:	2001      	movs	r0, #1
   c0b04:	e7ed      	b.n	c0ae2 <_ZN6String6concatEPKcj+0xa>

000c0b06 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   c0b06:	b513      	push	{r0, r1, r4, lr}
   c0b08:	4604      	mov	r4, r0
    if (!cstr) {
        return 0;
    }
    return concat(cstr, strlen(cstr));
}
   c0b0a:	4608      	mov	r0, r1
    if (!cstr) {
   c0b0c:	b151      	cbz	r1, c0b24 <_ZN6String6concatEPKc+0x1e>
    return concat(cstr, strlen(cstr));
   c0b0e:	9101      	str	r1, [sp, #4]
   c0b10:	f004 fd49 	bl	c55a6 <strlen>
   c0b14:	9901      	ldr	r1, [sp, #4]
   c0b16:	4602      	mov	r2, r0
   c0b18:	4620      	mov	r0, r4
}
   c0b1a:	b002      	add	sp, #8
   c0b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return concat(cstr, strlen(cstr));
   c0b20:	f7ff bfda 	b.w	c0ad8 <_ZN6String6concatEPKcj>
}
   c0b24:	b002      	add	sp, #8
   c0b26:	bd10      	pop	{r4, pc}

000c0b28 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c0b28:	b507      	push	{r0, r1, r2, lr}
    char buf[2] = {};
   c0b2a:	2300      	movs	r3, #0
   c0b2c:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
   c0b30:	2201      	movs	r2, #1
    buf[0] = c;
   c0b32:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
   c0b36:	a901      	add	r1, sp, #4
   c0b38:	f7ff ffce 	bl	c0ad8 <_ZN6String6concatEPKcj>
}
   c0b3c:	b003      	add	sp, #12
   c0b3e:	f85d fb04 	ldr.w	pc, [sp], #4

000c0b42 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   c0b42:	b510      	push	{r4, lr}
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!a.concat(rhs.buffer, rhs.len)) {
   c0b44:	688a      	ldr	r2, [r1, #8]
   c0b46:	6809      	ldr	r1, [r1, #0]
{
   c0b48:	4604      	mov	r4, r0
    if (!a.concat(rhs.buffer, rhs.len)) {
   c0b4a:	f7ff ffc5 	bl	c0ad8 <_ZN6String6concatEPKcj>
   c0b4e:	b910      	cbnz	r0, c0b56 <_ZplRK15StringSumHelperRK6String+0x14>
        a.invalidate();
   c0b50:	4620      	mov	r0, r4
   c0b52:	f7ff ff0c 	bl	c096e <_ZN6String10invalidateEv>
    }
    return a;
}
   c0b56:	4620      	mov	r0, r4
   c0b58:	bd10      	pop	{r4, pc}

000c0b5a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   c0b5a:	b513      	push	{r0, r1, r4, lr}
   c0b5c:	4604      	mov	r4, r0
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
   c0b5e:	b929      	cbnz	r1, c0b6c <_ZplRK15StringSumHelperPKc+0x12>
        a.invalidate();
   c0b60:	4620      	mov	r0, r4
   c0b62:	f7ff ff04 	bl	c096e <_ZN6String10invalidateEv>
    }
    return a;
}
   c0b66:	4620      	mov	r0, r4
   c0b68:	b002      	add	sp, #8
   c0b6a:	bd10      	pop	{r4, pc}
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
   c0b6c:	4608      	mov	r0, r1
   c0b6e:	9101      	str	r1, [sp, #4]
   c0b70:	f004 fd19 	bl	c55a6 <strlen>
   c0b74:	9901      	ldr	r1, [sp, #4]
   c0b76:	4602      	mov	r2, r0
   c0b78:	4620      	mov	r0, r4
   c0b7a:	f7ff ffad 	bl	c0ad8 <_ZN6String6concatEPKcj>
   c0b7e:	2800      	cmp	r0, #0
   c0b80:	d0ee      	beq.n	c0b60 <_ZplRK15StringSumHelperPKc+0x6>
   c0b82:	e7f0      	b.n	c0b66 <_ZplRK15StringSumHelperPKc+0xc>

000c0b84 <_ZNK6String6equalsEPKc>:
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   c0b84:	b508      	push	{r3, lr}
    if (len == 0) {
   c0b86:	6882      	ldr	r2, [r0, #8]
   c0b88:	b93a      	cbnz	r2, c0b9a <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
   c0b8a:	b121      	cbz	r1, c0b96 <_ZNK6String6equalsEPKc+0x12>
   c0b8c:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
   c0b8e:	fab0 f080 	clz	r0, r0
   c0b92:	0940      	lsrs	r0, r0, #5
   c0b94:	e000      	b.n	c0b98 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
   c0b96:	2001      	movs	r0, #1
}
   c0b98:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
   c0b9a:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
   c0b9c:	b909      	cbnz	r1, c0ba2 <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
   c0b9e:	7800      	ldrb	r0, [r0, #0]
   c0ba0:	e7f5      	b.n	c0b8e <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
   c0ba2:	f004 fcd0 	bl	c5546 <strcmp>
   c0ba6:	e7f2      	b.n	c0b8e <_ZNK6String6equalsEPKc+0xa>

000c0ba8 <_ZNK6String8endsWithERKS_>:
    }
    return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   c0ba8:	b508      	push	{r3, lr}
    if ( len < s2.len || !buffer || !s2.buffer) {
   c0baa:	6883      	ldr	r3, [r0, #8]
   c0bac:	688a      	ldr	r2, [r1, #8]
   c0bae:	4293      	cmp	r3, r2
   c0bb0:	d30b      	bcc.n	c0bca <_ZNK6String8endsWithERKS_+0x22>
   c0bb2:	6800      	ldr	r0, [r0, #0]
   c0bb4:	b140      	cbz	r0, c0bc8 <_ZNK6String8endsWithERKS_+0x20>
   c0bb6:	6809      	ldr	r1, [r1, #0]
   c0bb8:	b149      	cbz	r1, c0bce <_ZNK6String8endsWithERKS_+0x26>
        return 0;
    }
    return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   c0bba:	1a9b      	subs	r3, r3, r2
   c0bbc:	4418      	add	r0, r3
   c0bbe:	f004 fcc2 	bl	c5546 <strcmp>
   c0bc2:	fab0 f080 	clz	r0, r0
   c0bc6:	0940      	lsrs	r0, r0, #5
}
   c0bc8:	bd08      	pop	{r3, pc}
        return 0;
   c0bca:	2000      	movs	r0, #0
   c0bcc:	e7fc      	b.n	c0bc8 <_ZNK6String8endsWithERKS_+0x20>
   c0bce:	4608      	mov	r0, r1
   c0bd0:	e7fa      	b.n	c0bc8 <_ZNK6String8endsWithERKS_+0x20>
	...

000c0bd4 <_ZNK6String9substringEjj>:
{
    return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   c0bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (left > right) {
   c0bd6:	429a      	cmp	r2, r3
{
   c0bd8:	460f      	mov	r7, r1
   c0bda:	461d      	mov	r5, r3
        unsigned int temp = right;
        right = left;
        left = temp;
    }
    String out;
   c0bdc:	490c      	ldr	r1, [pc, #48]	; (c0c10 <_ZNK6String9substringEjj+0x3c>)
    if (left > right) {
   c0bde:	bf88      	it	hi
   c0be0:	4613      	movhi	r3, r2
{
   c0be2:	4614      	mov	r4, r2
   c0be4:	4606      	mov	r6, r0
    if (left > right) {
   c0be6:	bf84      	itt	hi
   c0be8:	462c      	movhi	r4, r5
   c0bea:	461d      	movhi	r5, r3
    String out;
   c0bec:	f7ff ff03 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
    if (left > len) {
   c0bf0:	68bb      	ldr	r3, [r7, #8]
   c0bf2:	42a3      	cmp	r3, r4
   c0bf4:	d30a      	bcc.n	c0c0c <_ZNK6String9substringEjj+0x38>
        return out;
    }
    if (right > len) {
        right = len;
    }
    out.copy(&buffer[left], right - left);
   c0bf6:	6839      	ldr	r1, [r7, #0]
   c0bf8:	42ab      	cmp	r3, r5
   c0bfa:	bf94      	ite	ls
   c0bfc:	ebc4 0203 	rsbls	r2, r4, r3
   c0c00:	ebc4 0205 	rsbhi	r2, r4, r5
   c0c04:	4421      	add	r1, r4
   c0c06:	4630      	mov	r0, r6
   c0c08:	f7ff fedc 	bl	c09c4 <_ZN6String4copyEPKcj>
    return out;
}
   c0c0c:	4630      	mov	r0, r6
   c0c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c0c10:	000c9298 	.word	0x000c9298

000c0c14 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   c0c14:	b40e      	push	{r1, r2, r3}
   c0c16:	b570      	push	{r4, r5, r6, lr}
   c0c18:	b087      	sub	sp, #28
   c0c1a:	ad0b      	add	r5, sp, #44	; 0x2c
   c0c1c:	4604      	mov	r4, r0
   c0c1e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   c0c22:	9201      	str	r2, [sp, #4]
   c0c24:	462b      	mov	r3, r5
   c0c26:	2105      	movs	r1, #5
   c0c28:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   c0c2a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   c0c2c:	f7ff fbcc 	bl	c03c8 <vsnprintf>
    va_end(marker);

    String result;
   c0c30:	490b      	ldr	r1, [pc, #44]	; (c0c60 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   c0c32:	4606      	mov	r6, r0
    String result;
   c0c34:	4620      	mov	r0, r4
   c0c36:	f7ff fede 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   c0c3a:	4631      	mov	r1, r6
   c0c3c:	4620      	mov	r0, r4
   c0c3e:	f7ff fead 	bl	c099c <_ZN6String7reserveEj>
    if (result.buffer) {
   c0c42:	6820      	ldr	r0, [r4, #0]
   c0c44:	b130      	cbz	r0, c0c54 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   c0c46:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   c0c48:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   c0c4a:	462b      	mov	r3, r5
   c0c4c:	1c71      	adds	r1, r6, #1
   c0c4e:	f7ff fbbb 	bl	c03c8 <vsnprintf>
        va_end(marker);
        result.len = n;
   c0c52:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   c0c54:	4620      	mov	r0, r4
   c0c56:	b007      	add	sp, #28
   c0c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c0c5c:	b003      	add	sp, #12
   c0c5e:	4770      	bx	lr
   c0c60:	000c9298 	.word	0x000c9298

000c0c64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   c0c64:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   c0c66:	6843      	ldr	r3, [r0, #4]
   c0c68:	3b01      	subs	r3, #1
    {
   c0c6a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   c0c6c:	6043      	str	r3, [r0, #4]
   c0c6e:	b963      	cbnz	r3, c0c8a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   c0c70:	6803      	ldr	r3, [r0, #0]
   c0c72:	689b      	ldr	r3, [r3, #8]
   c0c74:	4798      	blx	r3
          if (--_M_weak_count == 0)
   c0c76:	68a3      	ldr	r3, [r4, #8]
   c0c78:	3b01      	subs	r3, #1
   c0c7a:	60a3      	str	r3, [r4, #8]
   c0c7c:	b92b      	cbnz	r3, c0c8a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   c0c7e:	6823      	ldr	r3, [r4, #0]
   c0c80:	4620      	mov	r0, r4
   c0c82:	68db      	ldr	r3, [r3, #12]
    }
   c0c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   c0c88:	4718      	bx	r3
    }
   c0c8a:	bd10      	pop	{r4, pc}

000c0c8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   c0c8c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c0c8e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   c0c92:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c0c94:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   c0c98:	42ae      	cmp	r6, r5
   c0c9a:	d004      	beq.n	c0ca6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   c0c9c:	4628      	mov	r0, r5
   c0c9e:	f7ff fe5f 	bl	c0960 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   c0ca2:	3510      	adds	r5, #16
   c0ca4:	e7f8      	b.n	c0c98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   c0ca6:	6820      	ldr	r0, [r4, #0]
   c0ca8:	f7ff fb66 	bl	c0378 <free>
    AllocatorT::free(data_);
}
   c0cac:	4620      	mov	r0, r4
   c0cae:	bd70      	pop	{r4, r5, r6, pc}

000c0cb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   c0cb0:	4802      	ldr	r0, [pc, #8]	; (c0cbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   c0cb2:	2300      	movs	r3, #0
   c0cb4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   c0cb6:	f7ff b877 	b.w	bfda8 <os_mutex_recursive_create>
   c0cba:	bf00      	nop
   c0cbc:	2003e624 	.word	0x2003e624

000c0cc0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c0cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0cc2:	4606      	mov	r6, r0
   c0cc4:	460d      	mov	r5, r1
  size_t n = 0;
   c0cc6:	188f      	adds	r7, r1, r2
   c0cc8:	2400      	movs	r4, #0
  while (size--) {
   c0cca:	42bd      	cmp	r5, r7
   c0ccc:	d00c      	beq.n	c0ce8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c0cce:	6833      	ldr	r3, [r6, #0]
   c0cd0:	f815 1b01 	ldrb.w	r1, [r5], #1
   c0cd4:	689b      	ldr	r3, [r3, #8]
   c0cd6:	4630      	mov	r0, r6
   c0cd8:	4798      	blx	r3
     if (chunk>=0)
   c0cda:	1e03      	subs	r3, r0, #0
   c0cdc:	db01      	blt.n	c0ce2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c0cde:	441c      	add	r4, r3
  while (size--) {
   c0ce0:	e7f3      	b.n	c0cca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c0ce2:	2c00      	cmp	r4, #0
   c0ce4:	bf08      	it	eq
   c0ce6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c0ce8:	4620      	mov	r0, r4
   c0cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0cec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   c0cec:	b513      	push	{r0, r1, r4, lr}
   c0cee:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   c0cf0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   c0cf2:	b159      	cbz	r1, c0d0c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   c0cf4:	9101      	str	r1, [sp, #4]
   c0cf6:	f004 fc56 	bl	c55a6 <strlen>
   c0cfa:	6823      	ldr	r3, [r4, #0]
   c0cfc:	9901      	ldr	r1, [sp, #4]
   c0cfe:	68db      	ldr	r3, [r3, #12]
   c0d00:	4602      	mov	r2, r0
   c0d02:	4620      	mov	r0, r4
    }
   c0d04:	b002      	add	sp, #8
   c0d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   c0d0a:	4718      	bx	r3
    }
   c0d0c:	b002      	add	sp, #8
   c0d0e:	bd10      	pop	{r4, pc}

000c0d10 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c0d10:	b508      	push	{r3, lr}
  return write(str);
   c0d12:	f7ff ffeb 	bl	c0cec <_ZN5Print5writeEPKc>
}
   c0d16:	bd08      	pop	{r3, pc}

000c0d18 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c0d18:	6803      	ldr	r3, [r0, #0]
   c0d1a:	689b      	ldr	r3, [r3, #8]
   c0d1c:	4718      	bx	r3

000c0d1e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c0d1e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c0d20:	210d      	movs	r1, #13
{
   c0d22:	4605      	mov	r5, r0
  size_t n = print('\r');
   c0d24:	f7ff fff8 	bl	c0d18 <_ZN5Print5printEc>
  n += print('\n');
   c0d28:	210a      	movs	r1, #10
  size_t n = print('\r');
   c0d2a:	4604      	mov	r4, r0
  n += print('\n');
   c0d2c:	4628      	mov	r0, r5
   c0d2e:	f7ff fff3 	bl	c0d18 <_ZN5Print5printEc>
  return n;
}
   c0d32:	4420      	add	r0, r4
   c0d34:	bd38      	pop	{r3, r4, r5, pc}

000c0d36 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c0d36:	b530      	push	{r4, r5, lr}
   c0d38:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c0d3a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c0d3c:	2a01      	cmp	r2, #1
  *str = '\0';
   c0d3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c0d42:	bf98      	it	ls
   c0d44:	220a      	movls	r2, #10
   c0d46:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c0d48:	460d      	mov	r5, r1
   c0d4a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c0d4e:	fb01 5312 	mls	r3, r1, r2, r5
   c0d52:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c0d56:	2b09      	cmp	r3, #9
   c0d58:	bf94      	ite	ls
   c0d5a:	3330      	addls	r3, #48	; 0x30
   c0d5c:	3337      	addhi	r3, #55	; 0x37
   c0d5e:	b2db      	uxtb	r3, r3
  } while(n);
   c0d60:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c0d62:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c0d66:	d9ef      	bls.n	c0d48 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c0d68:	4621      	mov	r1, r4
   c0d6a:	f7ff ffbf 	bl	c0cec <_ZN5Print5writeEPKc>
}
   c0d6e:	b00b      	add	sp, #44	; 0x2c
   c0d70:	bd30      	pop	{r4, r5, pc}
	...

000c0d74 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   c0d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0d78:	ec55 4b10 	vmov	r4, r5, d0
   c0d7c:	4606      	mov	r6, r0
   c0d7e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   c0d80:	ee10 2a10 	vmov	r2, s0
   c0d84:	ee10 0a10 	vmov	r0, s0
   c0d88:	462b      	mov	r3, r5
   c0d8a:	4629      	mov	r1, r5
   c0d8c:	f004 fa10 	bl	c51b0 <__aeabi_dcmpun>
   c0d90:	b140      	cbz	r0, c0da4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   c0d92:	4953      	ldr	r1, [pc, #332]	; (c0ee0 <_ZN5Print10printFloatEdh+0x16c>)
   c0d94:	4630      	mov	r0, r6
   c0d96:	f7ff ffa9 	bl	c0cec <_ZN5Print5writeEPKc>
   c0d9a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   c0d9c:	4650      	mov	r0, sl
   c0d9e:	b003      	add	sp, #12
   c0da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   c0da4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   c0da8:	4b4e      	ldr	r3, [pc, #312]	; (c0ee4 <_ZN5Print10printFloatEdh+0x170>)
   c0daa:	f04f 32ff 	mov.w	r2, #4294967295
   c0dae:	4620      	mov	r0, r4
   c0db0:	4649      	mov	r1, r9
   c0db2:	f004 f9fd 	bl	c51b0 <__aeabi_dcmpun>
   c0db6:	b948      	cbnz	r0, c0dcc <_ZN5Print10printFloatEdh+0x58>
   c0db8:	4b4a      	ldr	r3, [pc, #296]	; (c0ee4 <_ZN5Print10printFloatEdh+0x170>)
   c0dba:	f04f 32ff 	mov.w	r2, #4294967295
   c0dbe:	4620      	mov	r0, r4
   c0dc0:	4649      	mov	r1, r9
   c0dc2:	f004 f9d7 	bl	c5174 <__aeabi_dcmple>
   c0dc6:	b908      	cbnz	r0, c0dcc <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   c0dc8:	4947      	ldr	r1, [pc, #284]	; (c0ee8 <_ZN5Print10printFloatEdh+0x174>)
   c0dca:	e7e3      	b.n	c0d94 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   c0dcc:	4b47      	ldr	r3, [pc, #284]	; (c0eec <_ZN5Print10printFloatEdh+0x178>)
   c0dce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   c0dd2:	4620      	mov	r0, r4
   c0dd4:	4629      	mov	r1, r5
   c0dd6:	f004 f9e1 	bl	c519c <__aeabi_dcmpgt>
   c0dda:	b108      	cbz	r0, c0de0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   c0ddc:	4944      	ldr	r1, [pc, #272]	; (c0ef0 <_ZN5Print10printFloatEdh+0x17c>)
   c0dde:	e7d9      	b.n	c0d94 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   c0de0:	4b44      	ldr	r3, [pc, #272]	; (c0ef4 <_ZN5Print10printFloatEdh+0x180>)
   c0de2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   c0de6:	4620      	mov	r0, r4
   c0de8:	4629      	mov	r1, r5
   c0dea:	f004 f9b9 	bl	c5160 <__aeabi_dcmplt>
   c0dee:	2800      	cmp	r0, #0
   c0df0:	d1f4      	bne.n	c0ddc <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   c0df2:	2200      	movs	r2, #0
   c0df4:	2300      	movs	r3, #0
   c0df6:	4620      	mov	r0, r4
   c0df8:	4629      	mov	r1, r5
   c0dfa:	f004 f9b1 	bl	c5160 <__aeabi_dcmplt>
   c0dfe:	b1d0      	cbz	r0, c0e36 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   c0e00:	212d      	movs	r1, #45	; 0x2d
   c0e02:	4630      	mov	r0, r6
   c0e04:	f7ff ff88 	bl	c0d18 <_ZN5Print5printEc>
     number = -number;
   c0e08:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   c0e0c:	4682      	mov	sl, r0
     number = -number;
   c0e0e:	461d      	mov	r5, r3
  double rounding = 0.5;
   c0e10:	4939      	ldr	r1, [pc, #228]	; (c0ef8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   c0e12:	f8df 90ec 	ldr.w	r9, [pc, #236]	; c0f00 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   c0e16:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   c0e1a:	2000      	movs	r0, #0
    rounding /= 10.0;
   c0e1c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   c0e20:	fa5f f38b 	uxtb.w	r3, fp
   c0e24:	429f      	cmp	r7, r3
   c0e26:	d908      	bls.n	c0e3a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   c0e28:	4642      	mov	r2, r8
   c0e2a:	464b      	mov	r3, r9
   c0e2c:	f004 f850 	bl	c4ed0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   c0e30:	f10b 0b01 	add.w	fp, fp, #1
   c0e34:	e7f4      	b.n	c0e20 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   c0e36:	4682      	mov	sl, r0
   c0e38:	e7ea      	b.n	c0e10 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   c0e3a:	4622      	mov	r2, r4
   c0e3c:	462b      	mov	r3, r5
   c0e3e:	f003 fd67 	bl	c4910 <__adddf3>
   c0e42:	460d      	mov	r5, r1
   c0e44:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   c0e46:	f004 f9f1 	bl	c522c <__aeabi_d2uiz>
   c0e4a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   c0e4c:	f003 fe9c 	bl	c4b88 <__aeabi_ui2d>
   c0e50:	4602      	mov	r2, r0
   c0e52:	460b      	mov	r3, r1
   c0e54:	4620      	mov	r0, r4
   c0e56:	4629      	mov	r1, r5
   c0e58:	f003 fd58 	bl	c490c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   c0e5c:	220a      	movs	r2, #10
   c0e5e:	4604      	mov	r4, r0
   c0e60:	460d      	mov	r5, r1
   c0e62:	4630      	mov	r0, r6
   c0e64:	4641      	mov	r1, r8
   c0e66:	f7ff ff66 	bl	c0d36 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   c0e6a:	4482      	add	sl, r0
  if (digits > 0) {
   c0e6c:	2f00      	cmp	r7, #0
   c0e6e:	d095      	beq.n	c0d9c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   c0e70:	4922      	ldr	r1, [pc, #136]	; (c0efc <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   c0e72:	f8df 908c 	ldr.w	r9, [pc, #140]	; c0f00 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   c0e76:	4630      	mov	r0, r6
   c0e78:	f7ff ff38 	bl	c0cec <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   c0e7c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   c0e80:	4482      	add	sl, r0
  while (digits-- > 0)
   c0e82:	2f00      	cmp	r7, #0
   c0e84:	d08a      	beq.n	c0d9c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   c0e86:	4642      	mov	r2, r8
   c0e88:	464b      	mov	r3, r9
   c0e8a:	4620      	mov	r0, r4
   c0e8c:	4629      	mov	r1, r5
   c0e8e:	f003 fef5 	bl	c4c7c <__aeabi_dmul>
   c0e92:	4604      	mov	r4, r0
   c0e94:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   c0e96:	f004 f9a1 	bl	c51dc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   c0e9a:	f1b0 0b00 	subs.w	fp, r0, #0
   c0e9e:	da1c      	bge.n	c0eda <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   c0ea0:	212d      	movs	r1, #45	; 0x2d
   c0ea2:	4630      	mov	r0, r6
   c0ea4:	f7ff ff38 	bl	c0d18 <_ZN5Print5printEc>
            val = -n;
   c0ea8:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   c0eac:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   c0eae:	220a      	movs	r2, #10
   c0eb0:	4630      	mov	r0, r6
   c0eb2:	9301      	str	r3, [sp, #4]
   c0eb4:	f7ff ff3f 	bl	c0d36 <_ZN5Print11printNumberEmh>
   c0eb8:	9b01      	ldr	r3, [sp, #4]
   c0eba:	4418      	add	r0, r3
    n += print(toPrint);
   c0ebc:	4482      	add	sl, r0
    remainder -= toPrint;
   c0ebe:	4658      	mov	r0, fp
   c0ec0:	f003 fe72 	bl	c4ba8 <__aeabi_i2d>
   c0ec4:	4602      	mov	r2, r0
   c0ec6:	460b      	mov	r3, r1
   c0ec8:	4620      	mov	r0, r4
   c0eca:	4629      	mov	r1, r5
   c0ecc:	f003 fd1e 	bl	c490c <__aeabi_dsub>
   c0ed0:	3f01      	subs	r7, #1
   c0ed2:	4604      	mov	r4, r0
   c0ed4:	460d      	mov	r5, r1
   c0ed6:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   c0ed8:	e7d3      	b.n	c0e82 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   c0eda:	4659      	mov	r1, fp
        size_t t = 0;
   c0edc:	2300      	movs	r3, #0
   c0ede:	e7e6      	b.n	c0eae <_ZN5Print10printFloatEdh+0x13a>
   c0ee0:	000c9232 	.word	0x000c9232
   c0ee4:	7fefffff 	.word	0x7fefffff
   c0ee8:	000c9236 	.word	0x000c9236
   c0eec:	41efffff 	.word	0x41efffff
   c0ef0:	000c923a 	.word	0x000c923a
   c0ef4:	c1efffff 	.word	0xc1efffff
   c0ef8:	3fe00000 	.word	0x3fe00000
   c0efc:	000c60e9 	.word	0x000c60e9
   c0f00:	40240000 	.word	0x40240000

000c0f04 <_ZN5Print5printEfi>:
{
   c0f04:	b538      	push	{r3, r4, r5, lr}
   c0f06:	4604      	mov	r4, r0
   c0f08:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   c0f0c:	b2cd      	uxtb	r5, r1
   c0f0e:	f003 fe5d 	bl	c4bcc <__aeabi_f2d>
   c0f12:	ec41 0b10 	vmov	d0, r0, r1
   c0f16:	4629      	mov	r1, r5
   c0f18:	4620      	mov	r0, r4
}
   c0f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   c0f1e:	f7ff bf29 	b.w	c0d74 <_ZN5Print10printFloatEdh>

000c0f22 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c0f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0f26:	b086      	sub	sp, #24
   c0f28:	af00      	add	r7, sp, #0
   c0f2a:	4605      	mov	r5, r0
   c0f2c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c0f2e:	1d38      	adds	r0, r7, #4
   c0f30:	2114      	movs	r1, #20
{
   c0f32:	4614      	mov	r4, r2
    va_copy(args2, args);
   c0f34:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c0f36:	f7ff fa47 	bl	c03c8 <vsnprintf>

    if (n<bufsize)
   c0f3a:	2813      	cmp	r0, #19
   c0f3c:	d80e      	bhi.n	c0f5c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c0f3e:	1d39      	adds	r1, r7, #4
   c0f40:	4628      	mov	r0, r5
   c0f42:	f7ff fed3 	bl	c0cec <_ZN5Print5writeEPKc>
   c0f46:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c0f48:	b11e      	cbz	r6, c0f52 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c0f4a:	4628      	mov	r0, r5
   c0f4c:	f7ff fee7 	bl	c0d1e <_ZN5Print7printlnEv>
   c0f50:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c0f52:	4620      	mov	r0, r4
   c0f54:	3718      	adds	r7, #24
   c0f56:	46bd      	mov	sp, r7
   c0f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c0f5c:	f100 0308 	add.w	r3, r0, #8
   c0f60:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c0f64:	46e8      	mov	r8, sp
        char bigger[n+1];
   c0f66:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c0f6a:	4622      	mov	r2, r4
   c0f6c:	1c41      	adds	r1, r0, #1
   c0f6e:	683b      	ldr	r3, [r7, #0]
   c0f70:	4668      	mov	r0, sp
   c0f72:	f7ff fa29 	bl	c03c8 <vsnprintf>
  return write(str);
   c0f76:	4669      	mov	r1, sp
   c0f78:	4628      	mov	r0, r5
   c0f7a:	f7ff feb7 	bl	c0cec <_ZN5Print5writeEPKc>
   c0f7e:	4604      	mov	r4, r0
   c0f80:	46c5      	mov	sp, r8
   c0f82:	e7e1      	b.n	c0f48 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c0f84 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   c0f84:	6880      	ldr	r0, [r0, #8]
   c0f86:	6803      	ldr	r3, [r0, #0]
   c0f88:	68db      	ldr	r3, [r3, #12]
   c0f8a:	4718      	bx	r3

000c0f8c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   c0f8c:	4770      	bx	lr

000c0f8e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   c0f8e:	4608      	mov	r0, r1
   c0f90:	b111      	cbz	r1, c0f98 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   c0f92:	680b      	ldr	r3, [r1, #0]
   c0f94:	685b      	ldr	r3, [r3, #4]
   c0f96:	4718      	bx	r3
}
   c0f98:	4770      	bx	lr

000c0f9a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   c0f9a:	4770      	bx	lr

000c0f9c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   c0f9c:	4770      	bx	lr

000c0f9e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   c0f9e:	4770      	bx	lr

000c0fa0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   c0fa0:	4770      	bx	lr

000c0fa2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   c0fa2:	b538      	push	{r3, r4, r5, lr}
   c0fa4:	4604      	mov	r4, r0
   c0fa6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   c0fa8:	6800      	ldr	r0, [r0, #0]
   c0faa:	212e      	movs	r1, #46	; 0x2e
   c0fac:	f004 fac1 	bl	c5532 <strchrnul>
    size = s - category;
   c0fb0:	6823      	ldr	r3, [r4, #0]
   c0fb2:	1ac3      	subs	r3, r0, r3
   c0fb4:	602b      	str	r3, [r5, #0]
    if (size) {
   c0fb6:	b123      	cbz	r3, c0fc2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   c0fb8:	7803      	ldrb	r3, [r0, #0]
   c0fba:	b103      	cbz	r3, c0fbe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   c0fbc:	3001      	adds	r0, #1
   c0fbe:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c0fc0:	6020      	str	r0, [r4, #0]
}
   c0fc2:	4618      	mov	r0, r3
   c0fc4:	bd38      	pop	{r3, r4, r5, pc}

000c0fc6 <_ZN5spark16JSONStreamWriterD0Ev>:
   c0fc6:	b510      	push	{r4, lr}
   c0fc8:	210c      	movs	r1, #12
   c0fca:	4604      	mov	r4, r0
   c0fcc:	f7f3 f867 	bl	b409e <_ZdlPvj>
   c0fd0:	4620      	mov	r0, r4
   c0fd2:	bd10      	pop	{r4, pc}

000c0fd4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   c0fd4:	b510      	push	{r4, lr}
   c0fd6:	2104      	movs	r1, #4
   c0fd8:	4604      	mov	r4, r0
   c0fda:	f7f3 f860 	bl	b409e <_ZdlPvj>
   c0fde:	4620      	mov	r0, r4
   c0fe0:	bd10      	pop	{r4, pc}

000c0fe2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   c0fe2:	b510      	push	{r4, lr}
   c0fe4:	2104      	movs	r1, #4
   c0fe6:	4604      	mov	r4, r0
   c0fe8:	f7f3 f859 	bl	b409e <_ZdlPvj>
   c0fec:	4620      	mov	r0, r4
   c0fee:	bd10      	pop	{r4, pc}

000c0ff0 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   c0ff0:	f7fe beea 	b.w	bfdc8 <os_mutex_recursive_lock>

000c0ff4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   c0ff4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   c0ff6:	f004 faa6 	bl	c5546 <strcmp>
}
   c0ffa:	fab0 f080 	clz	r0, r0
   c0ffe:	0940      	lsrs	r0, r0, #5
   c1000:	bd08      	pop	{r3, pc}

000c1002 <__tcf_1>:
   c1002:	4770      	bx	lr

000c1004 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   c1004:	b510      	push	{r4, lr}
   c1006:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   c1008:	f001 fdf8 	bl	c2bfc <_Z16_fetch_usbserialv>
   c100c:	4284      	cmp	r4, r0
   c100e:	d010      	beq.n	c1032 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   c1010:	f002 fb40 	bl	c3694 <_Z22__fetch_global_Serial1v>
   c1014:	4284      	cmp	r4, r0
   c1016:	d105      	bne.n	c1024 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   c1018:	f002 fb3c 	bl	c3694 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   c101c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   c1020:	f001 bf0d 	b.w	c2e3e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   c1024:	b12c      	cbz	r4, c1032 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   c1026:	6823      	ldr	r3, [r4, #0]
   c1028:	4620      	mov	r0, r4
   c102a:	685b      	ldr	r3, [r3, #4]
}
   c102c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c1030:	4718      	bx	r3
   c1032:	bd10      	pop	{r4, pc}

000c1034 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   c1034:	b513      	push	{r0, r1, r4, lr}
   c1036:	4604      	mov	r4, r0
    return value(val, strlen(val));
   c1038:	4608      	mov	r0, r1
   c103a:	9101      	str	r1, [sp, #4]
   c103c:	f004 fab3 	bl	c55a6 <strlen>
   c1040:	9901      	ldr	r1, [sp, #4]
   c1042:	4602      	mov	r2, r0
   c1044:	4620      	mov	r0, r4
}
   c1046:	b002      	add	sp, #8
   c1048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   c104c:	f002 ba4c 	b.w	c34e8 <_ZN5spark10JSONWriter5valueEPKcj>

000c1050 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   c1050:	b513      	push	{r0, r1, r4, lr}
   c1052:	4604      	mov	r4, r0
    write(str, strlen(str));
   c1054:	4608      	mov	r0, r1
   c1056:	9101      	str	r1, [sp, #4]
   c1058:	f004 faa5 	bl	c55a6 <strlen>
   c105c:	6823      	ldr	r3, [r4, #0]
   c105e:	9901      	ldr	r1, [sp, #4]
   c1060:	68db      	ldr	r3, [r3, #12]
   c1062:	4602      	mov	r2, r0
   c1064:	4620      	mov	r0, r4
}
   c1066:	b002      	add	sp, #8
   c1068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   c106c:	4718      	bx	r3

000c106e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   c106e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c1070:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   c1072:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c1076:	68db      	ldr	r3, [r3, #12]
   c1078:	2201      	movs	r2, #1
   c107a:	f10d 0107 	add.w	r1, sp, #7
   c107e:	4798      	blx	r3
}
   c1080:	b003      	add	sp, #12
   c1082:	f85d fb04 	ldr.w	pc, [sp], #4

000c1086 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   c1086:	b40e      	push	{r1, r2, r3}
   c1088:	b503      	push	{r0, r1, lr}
   c108a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   c108c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   c108e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   c1092:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   c1094:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   c1096:	f7ff ff44 	bl	c0f22 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   c109a:	b002      	add	sp, #8
   c109c:	f85d eb04 	ldr.w	lr, [sp], #4
   c10a0:	b003      	add	sp, #12
   c10a2:	4770      	bx	lr

000c10a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   c10a4:	680a      	ldr	r2, [r1, #0]
   c10a6:	6002      	str	r2, [r0, #0]
   c10a8:	684a      	ldr	r2, [r1, #4]
   c10aa:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   c10ac:	2200      	movs	r2, #0
   c10ae:	e9c0 2202 	strd	r2, r2, [r0, #8]
   c10b2:	b510      	push	{r4, lr}
   c10b4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   c10b6:	688c      	ldr	r4, [r1, #8]
   c10b8:	6084      	str	r4, [r0, #8]
   c10ba:	68cc      	ldr	r4, [r1, #12]
   c10bc:	60c4      	str	r4, [r0, #12]
   c10be:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c10c0:	608a      	str	r2, [r1, #8]
   c10c2:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   c10c4:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c10c6:	610a      	str	r2, [r1, #16]
   c10c8:	bd10      	pop	{r4, pc}
	...

000c10cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c10cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   c10d0:	e9d0 8400 	ldrd	r8, r4, [r0]
   c10d4:	f04f 0a14 	mov.w	sl, #20
   c10d8:	9300      	str	r3, [sp, #0]
   c10da:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   c10de:	4b18      	ldr	r3, [pc, #96]	; (c1140 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c10e0:	10a4      	asrs	r4, r4, #2
   c10e2:	4617      	mov	r7, r2
   c10e4:	435c      	muls	r4, r3
   c10e6:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   c10e8:	2c00      	cmp	r4, #0
   c10ea:	dd21      	ble.n	c1130 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   c10ec:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   c10ee:	fb0a f006 	mul.w	r0, sl, r6
   c10f2:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   c10f6:	463a      	mov	r2, r7
   c10f8:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   c10fc:	5828      	ldr	r0, [r5, r0]
   c10fe:	9101      	str	r1, [sp, #4]
   c1100:	455f      	cmp	r7, fp
   c1102:	bf28      	it	cs
   c1104:	465a      	movcs	r2, fp
   c1106:	f004 fa56 	bl	c55b6 <strncmp>
                if (cmp == 0) {
   c110a:	2800      	cmp	r0, #0
   c110c:	9901      	ldr	r1, [sp, #4]
   c110e:	f04f 0301 	mov.w	r3, #1
   c1112:	d10b      	bne.n	c112c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   c1114:	455f      	cmp	r7, fp
   c1116:	d103      	bne.n	c1120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   c1118:	9a00      	ldr	r2, [sp, #0]
   c111a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c111c:	4634      	mov	r4, r6
   c111e:	e7e3      	b.n	c10e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   c1120:	d9fc      	bls.n	c111c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   c1122:	1ba6      	subs	r6, r4, r6
	      ++__first;
   c1124:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   c1128:	3e01      	subs	r6, #1
   c112a:	e7f7      	b.n	c111c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   c112c:	dbf9      	blt.n	c1122 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   c112e:	e7f5      	b.n	c111c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   c1130:	eba5 0508 	sub.w	r5, r5, r8
}
   c1134:	4802      	ldr	r0, [pc, #8]	; (c1140 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c1136:	10ad      	asrs	r5, r5, #2
   c1138:	4368      	muls	r0, r5
   c113a:	b003      	add	sp, #12
   c113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1140:	cccccccd 	.word	0xcccccccd

000c1144 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c1144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   c1146:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   c1148:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c114a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   c114c:	b303      	cbz	r3, c1190 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   c114e:	b1f9      	cbz	r1, c1190 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   c1150:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   c1152:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   c1156:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   c1158:	a903      	add	r1, sp, #12
   c115a:	a801      	add	r0, sp, #4
   c115c:	f7ff ff21 	bl	c0fa2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c1160:	4601      	mov	r1, r0
   c1162:	b1a8      	cbz	r0, c1190 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   c1164:	f10d 030b 	add.w	r3, sp, #11
   c1168:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   c116a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   c116e:	4620      	mov	r0, r4
   c1170:	f7ff ffac 	bl	c10cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   c1174:	f89d 300b 	ldrb.w	r3, [sp, #11]
   c1178:	b153      	cbz	r3, c1190 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   c117a:	6823      	ldr	r3, [r4, #0]
   c117c:	2414      	movs	r4, #20
   c117e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   c1182:	3408      	adds	r4, #8
            if (node.level >= 0) {
   c1184:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   c1188:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   c118a:	bfa8      	it	ge
   c118c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   c118e:	e7e3      	b.n	c1158 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   c1190:	4628      	mov	r0, r5
   c1192:	b004      	add	sp, #16
   c1194:	bd70      	pop	{r4, r5, r6, pc}
	...

000c1198 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   c1198:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   c119a:	4c09      	ldr	r4, [pc, #36]	; (c11c0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   c119c:	7823      	ldrb	r3, [r4, #0]
   c119e:	f3bf 8f5b 	dmb	ish
   c11a2:	07db      	lsls	r3, r3, #31
   c11a4:	d409      	bmi.n	c11ba <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c11a6:	4620      	mov	r0, r4
   c11a8:	f7f2 ff88 	bl	b40bc <__cxa_guard_acquire>
   c11ac:	b128      	cbz	r0, c11ba <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c11ae:	4620      	mov	r0, r4
   c11b0:	f7f2 ff89 	bl	b40c6 <__cxa_guard_release>
   c11b4:	4803      	ldr	r0, [pc, #12]	; (c11c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   c11b6:	f004 f8cf 	bl	c5358 <atexit>
}
   c11ba:	4803      	ldr	r0, [pc, #12]	; (c11c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   c11bc:	bd10      	pop	{r4, pc}
   c11be:	bf00      	nop
   c11c0:	2003e62c 	.word	0x2003e62c
   c11c4:	000c0f9b 	.word	0x000c0f9b
   c11c8:	2003acdc 	.word	0x2003acdc

000c11cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   c11cc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   c11ce:	4c09      	ldr	r4, [pc, #36]	; (c11f4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   c11d0:	7823      	ldrb	r3, [r4, #0]
   c11d2:	f3bf 8f5b 	dmb	ish
   c11d6:	07db      	lsls	r3, r3, #31
   c11d8:	d409      	bmi.n	c11ee <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c11da:	4620      	mov	r0, r4
   c11dc:	f7f2 ff6e 	bl	b40bc <__cxa_guard_acquire>
   c11e0:	b128      	cbz	r0, c11ee <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c11e2:	4620      	mov	r0, r4
   c11e4:	f7f2 ff6f 	bl	b40c6 <__cxa_guard_release>
   c11e8:	4803      	ldr	r0, [pc, #12]	; (c11f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   c11ea:	f004 f8b5 	bl	c5358 <atexit>
    return &factory;
}
   c11ee:	4803      	ldr	r0, [pc, #12]	; (c11fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   c11f0:	bd10      	pop	{r4, pc}
   c11f2:	bf00      	nop
   c11f4:	2003e630 	.word	0x2003e630
   c11f8:	000c1003 	.word	0x000c1003
   c11fc:	2003ace0 	.word	0x2003ace0

000c1200 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   c1200:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   c1202:	2500      	movs	r5, #0
   c1204:	4604      	mov	r4, r0
   c1206:	e9c0 5500 	strd	r5, r5, [r0]
   c120a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c120e:	6085      	str	r5, [r0, #8]
   c1210:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   c1212:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   c1216:	f7fe fdc7 	bl	bfda8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   c121a:	f7ff ffbd 	bl	c1198 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   c121e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c1220:	f7ff ffd4 	bl	c11cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   c1224:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c1226:	6220      	str	r0, [r4, #32]
}
   c1228:	4620      	mov	r0, r4
   c122a:	bd38      	pop	{r3, r4, r5, pc}

000c122c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   c122c:	b510      	push	{r4, lr}
    static LogManager mgr;
   c122e:	4c0a      	ldr	r4, [pc, #40]	; (c1258 <_ZN5spark10LogManager8instanceEv+0x2c>)
   c1230:	7823      	ldrb	r3, [r4, #0]
   c1232:	f3bf 8f5b 	dmb	ish
   c1236:	07db      	lsls	r3, r3, #31
   c1238:	d40c      	bmi.n	c1254 <_ZN5spark10LogManager8instanceEv+0x28>
   c123a:	4620      	mov	r0, r4
   c123c:	f7f2 ff3e 	bl	b40bc <__cxa_guard_acquire>
   c1240:	b140      	cbz	r0, c1254 <_ZN5spark10LogManager8instanceEv+0x28>
   c1242:	4806      	ldr	r0, [pc, #24]	; (c125c <_ZN5spark10LogManager8instanceEv+0x30>)
   c1244:	f7ff ffdc 	bl	c1200 <_ZN5spark10LogManagerC1Ev>
   c1248:	4620      	mov	r0, r4
   c124a:	f7f2 ff3c 	bl	b40c6 <__cxa_guard_release>
   c124e:	4804      	ldr	r0, [pc, #16]	; (c1260 <_ZN5spark10LogManager8instanceEv+0x34>)
   c1250:	f004 f882 	bl	c5358 <atexit>
    return &mgr;
}
   c1254:	4801      	ldr	r0, [pc, #4]	; (c125c <_ZN5spark10LogManager8instanceEv+0x30>)
   c1256:	bd10      	pop	{r4, pc}
   c1258:	2003e628 	.word	0x2003e628
   c125c:	2003e638 	.word	0x2003e638
   c1260:	000c1719 	.word	0x000c1719

000c1264 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   c1264:	4a02      	ldr	r2, [pc, #8]	; (c1270 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   c1266:	4903      	ldr	r1, [pc, #12]	; (c1274 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   c1268:	4803      	ldr	r0, [pc, #12]	; (c1278 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   c126a:	2300      	movs	r3, #0
   c126c:	f7fe bf4c 	b.w	c0108 <log_set_callbacks>
   c1270:	000c14fd 	.word	0x000c14fd
   c1274:	000c1489 	.word	0x000c1489
   c1278:	000c1409 	.word	0x000c1409

000c127c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   c127c:	2300      	movs	r3, #0
   c127e:	461a      	mov	r2, r3
   c1280:	4619      	mov	r1, r3
   c1282:	4618      	mov	r0, r3
   c1284:	f7fe bf40 	b.w	c0108 <log_set_callbacks>

000c1288 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   c1288:	b570      	push	{r4, r5, r6, lr}
   c128a:	b08a      	sub	sp, #40	; 0x28
   c128c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   c128e:	4601      	mov	r1, r0
   c1290:	a804      	add	r0, sp, #16
   c1292:	f7fa ff56 	bl	bc142 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   c1296:	4e14      	ldr	r6, [pc, #80]	; (c12e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   c1298:	a804      	add	r0, sp, #16
   c129a:	f002 f85d 	bl	c3358 <_ZN5spark18JSONObjectIterator4nextEv>
   c129e:	b1e8      	cbz	r0, c12dc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   c12a0:	a904      	add	r1, sp, #16
   c12a2:	4668      	mov	r0, sp
   c12a4:	f7fa ff5e 	bl	bc164 <_ZNK5spark18JSONObjectIterator4nameEv>
   c12a8:	9802      	ldr	r0, [sp, #8]
   c12aa:	4631      	mov	r1, r6
   c12ac:	f7ff fea2 	bl	c0ff4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   c12b0:	4604      	mov	r4, r0
   c12b2:	b110      	cbz	r0, c12ba <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   c12b4:	1e2c      	subs	r4, r5, #0
   c12b6:	bf18      	it	ne
   c12b8:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   c12ba:	a801      	add	r0, sp, #4
   c12bc:	f7f9 f83f 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c12c0:	2c00      	cmp	r4, #0
   c12c2:	d0e9      	beq.n	c1298 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   c12c4:	a904      	add	r1, sp, #16
   c12c6:	4668      	mov	r0, sp
   c12c8:	f7fa ff5d 	bl	bc186 <_ZNK5spark18JSONObjectIterator5valueEv>
   c12cc:	4668      	mov	r0, sp
   c12ce:	f001 ffe6 	bl	c329e <_ZNK5spark9JSONValue5toIntEv>
   c12d2:	6028      	str	r0, [r5, #0]
   c12d4:	a801      	add	r0, sp, #4
   c12d6:	f7f9 f832 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c12da:	e7dd      	b.n	c1298 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   c12dc:	a805      	add	r0, sp, #20
   c12de:	f7f9 f82e 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c12e2:	b00a      	add	sp, #40	; 0x28
   c12e4:	bd70      	pop	{r4, r5, r6, pc}
   c12e6:	bf00      	nop
   c12e8:	000c923e 	.word	0x000c923e

000c12ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c12ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c12ee:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   c12f0:	4620      	mov	r0, r4
   c12f2:	4913      	ldr	r1, [pc, #76]	; (c1340 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c12f4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   c12f6:	f004 f926 	bl	c5546 <strcmp>
   c12fa:	b950      	cbnz	r0, c1312 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   c12fc:	f001 fc7e 	bl	c2bfc <_Z16_fetch_usbserialv>
   c1300:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c1304:	f001 fc68 	bl	c2bd8 <_ZN9USBSerial5beginEl>
}
   c1308:	b003      	add	sp, #12
   c130a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   c130e:	f001 bc75 	b.w	c2bfc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   c1312:	490c      	ldr	r1, [pc, #48]	; (c1344 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   c1314:	4620      	mov	r0, r4
   c1316:	f004 f916 	bl	c5546 <strcmp>
   c131a:	b978      	cbnz	r0, c133c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   c131c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   c1320:	a901      	add	r1, sp, #4
   c1322:	4628      	mov	r0, r5
        int baud = 9600;
   c1324:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   c1326:	f7ff ffaf 	bl	c1288 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   c132a:	f002 f9b3 	bl	c3694 <_Z22__fetch_global_Serial1v>
   c132e:	9901      	ldr	r1, [sp, #4]
   c1330:	f001 fd82 	bl	c2e38 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   c1334:	f002 f9ae 	bl	c3694 <_Z22__fetch_global_Serial1v>
}
   c1338:	b003      	add	sp, #12
   c133a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   c133c:	2000      	movs	r0, #0
   c133e:	e7fb      	b.n	c1338 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   c1340:	000c9243 	.word	0x000c9243
   c1344:	000c924a 	.word	0x000c924a

000c1348 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   c1348:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c134a:	e9d0 5300 	ldrd	r5, r3, [r0]
   c134e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   c1350:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c1352:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c1356:	42ae      	cmp	r6, r5
   c1358:	d005      	beq.n	c1366 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   c135a:	f105 0008 	add.w	r0, r5, #8
   c135e:	f7ff fff3 	bl	c1348 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c1362:	3514      	adds	r5, #20
   c1364:	e7f7      	b.n	c1356 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   c1366:	6820      	ldr	r0, [r4, #0]
   c1368:	f7ff f806 	bl	c0378 <free>
}
   c136c:	4620      	mov	r0, r4
   c136e:	bd70      	pop	{r4, r5, r6, pc}

000c1370 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   c1370:	b510      	push	{r4, lr}
   c1372:	4604      	mov	r4, r0
   c1374:	300c      	adds	r0, #12
   c1376:	f7ff ffe7 	bl	c1348 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c137a:	4620      	mov	r0, r4
   c137c:	f7ff fc86 	bl	c0c8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c1380:	4620      	mov	r0, r4
   c1382:	bd10      	pop	{r4, pc}

000c1384 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   c1384:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   c1386:	4b04      	ldr	r3, [pc, #16]	; (c1398 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   c1388:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   c138a:	f840 3b04 	str.w	r3, [r0], #4
   c138e:	f7ff ffef 	bl	c1370 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   c1392:	4620      	mov	r0, r4
   c1394:	bd10      	pop	{r4, pc}
   c1396:	bf00      	nop
   c1398:	000c7544 	.word	0x000c7544

000c139c <_ZN5spark16StreamLogHandlerD0Ev>:
   c139c:	b510      	push	{r4, lr}
   c139e:	4604      	mov	r4, r0
   c13a0:	f7ff fff0 	bl	c1384 <_ZN5spark16StreamLogHandlerD1Ev>
   c13a4:	4620      	mov	r0, r4
   c13a6:	2124      	movs	r1, #36	; 0x24
   c13a8:	f7f2 fe79 	bl	b409e <_ZdlPvj>
   c13ac:	4620      	mov	r0, r4
   c13ae:	bd10      	pop	{r4, pc}

000c13b0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   c13b0:	b510      	push	{r4, lr}
   c13b2:	4b03      	ldr	r3, [pc, #12]	; (c13c0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   c13b4:	6003      	str	r3, [r0, #0]
   c13b6:	4604      	mov	r4, r0
   c13b8:	f7ff ffe4 	bl	c1384 <_ZN5spark16StreamLogHandlerD1Ev>
   c13bc:	4620      	mov	r0, r4
   c13be:	bd10      	pop	{r4, pc}
   c13c0:	000c92e0 	.word	0x000c92e0

000c13c4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   c13c4:	b510      	push	{r4, lr}
   c13c6:	4604      	mov	r4, r0
   c13c8:	f7ff fff2 	bl	c13b0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   c13cc:	4620      	mov	r0, r4
   c13ce:	2124      	movs	r1, #36	; 0x24
   c13d0:	f7f2 fe65 	bl	b409e <_ZdlPvj>
   c13d4:	4620      	mov	r0, r4
   c13d6:	bd10      	pop	{r4, pc}

000c13d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   c13d8:	2200      	movs	r2, #0
   c13da:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   c13de:	b510      	push	{r4, lr}
        capacity_(0) {
   c13e0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   c13e2:	680c      	ldr	r4, [r1, #0]
   c13e4:	6004      	str	r4, [r0, #0]
   c13e6:	684c      	ldr	r4, [r1, #4]
   c13e8:	6044      	str	r4, [r0, #4]
   c13ea:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c13ec:	600a      	str	r2, [r1, #0]
   c13ee:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c13f0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c13f2:	608a      	str	r2, [r1, #8]
}
   c13f4:	bd10      	pop	{r4, pc}

000c13f6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   c13f6:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   c13f8:	6803      	ldr	r3, [r0, #0]
   c13fa:	4604      	mov	r4, r0
   c13fc:	6818      	ldr	r0, [r3, #0]
   c13fe:	f7fe fceb 	bl	bfdd8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   c1402:	4620      	mov	r0, r4
   c1404:	bd10      	pop	{r4, pc}
	...

000c1408 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   c1408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c140c:	b087      	sub	sp, #28
   c140e:	4680      	mov	r8, r0
   c1410:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   c1412:	4b1c      	ldr	r3, [pc, #112]	; (c1484 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   c1414:	685b      	ldr	r3, [r3, #4]
   c1416:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c141a:	4689      	mov	r9, r1
   c141c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   c141e:	b96b      	cbnz	r3, c143c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   c1420:	f7ff ff04 	bl	c122c <_ZN5spark10LogManager8instanceEv>
   c1424:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c1426:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   c142a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c142c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   c142e:	f7ff fddf 	bl	c0ff0 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   c1432:	7b23      	ldrb	r3, [r4, #12]
   c1434:	b12b      	cbz	r3, c1442 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   c1436:	a805      	add	r0, sp, #20
   c1438:	f7ff ffdd 	bl	c13f6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   c143c:	b007      	add	sp, #28
   c143e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   c1442:	2301      	movs	r3, #1
   c1444:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   c1446:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   c144a:	fa5f f989 	uxtb.w	r9, r9
   c144e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c1452:	45aa      	cmp	sl, r5
   c1454:	d012      	beq.n	c147c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   c1456:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   c145a:	4631      	mov	r1, r6
   c145c:	1d38      	adds	r0, r7, #4
   c145e:	f7ff fe71 	bl	c1144 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c1462:	4581      	cmp	r9, r0
   c1464:	d3f5      	bcc.n	c1452 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   c1466:	683b      	ldr	r3, [r7, #0]
   c1468:	9a03      	ldr	r2, [sp, #12]
   c146a:	9200      	str	r2, [sp, #0]
   c146c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   c1470:	464a      	mov	r2, r9
   c1472:	4633      	mov	r3, r6
   c1474:	4641      	mov	r1, r8
   c1476:	4638      	mov	r0, r7
   c1478:	47d8      	blx	fp
   c147a:	e7ea      	b.n	c1452 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   c147c:	2300      	movs	r3, #0
   c147e:	7323      	strb	r3, [r4, #12]
   c1480:	e7d9      	b.n	c1436 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   c1482:	bf00      	nop
   c1484:	e000ed00 	.word	0xe000ed00

000c1488 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   c1488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c148c:	469b      	mov	fp, r3
   c148e:	4b1a      	ldr	r3, [pc, #104]	; (c14f8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   c1490:	685b      	ldr	r3, [r3, #4]
   c1492:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c1496:	4680      	mov	r8, r0
   c1498:	4689      	mov	r9, r1
   c149a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   c149c:	b96b      	cbnz	r3, c14ba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   c149e:	f7ff fec5 	bl	c122c <_ZN5spark10LogManager8instanceEv>
   c14a2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c14a4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   c14a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c14aa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c14ac:	f7ff fda0 	bl	c0ff0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   c14b0:	7b23      	ldrb	r3, [r4, #12]
   c14b2:	b12b      	cbz	r3, c14c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   c14b4:	a801      	add	r0, sp, #4
   c14b6:	f7ff ff9e 	bl	c13f6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c14ba:	b003      	add	sp, #12
   c14bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   c14c0:	2301      	movs	r3, #1
   c14c2:	7323      	strb	r3, [r4, #12]
   c14c4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   c14c8:	b2f6      	uxtb	r6, r6
   c14ca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c14ce:	4555      	cmp	r5, sl
   c14d0:	d00e      	beq.n	c14f0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   c14d2:	f855 7b04 	ldr.w	r7, [r5], #4
   c14d6:	4659      	mov	r1, fp
   c14d8:	1d38      	adds	r0, r7, #4
   c14da:	f7ff fe33 	bl	c1144 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c14de:	4286      	cmp	r6, r0
   c14e0:	d3f5      	bcc.n	c14ce <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   c14e2:	683b      	ldr	r3, [r7, #0]
   c14e4:	464a      	mov	r2, r9
   c14e6:	68db      	ldr	r3, [r3, #12]
   c14e8:	4641      	mov	r1, r8
   c14ea:	4638      	mov	r0, r7
   c14ec:	4798      	blx	r3
   c14ee:	e7ee      	b.n	c14ce <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   c14f0:	2300      	movs	r3, #0
   c14f2:	7323      	strb	r3, [r4, #12]
   c14f4:	e7de      	b.n	c14b4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   c14f6:	bf00      	nop
   c14f8:	e000ed00 	.word	0xe000ed00

000c14fc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   c14fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c1500:	4b16      	ldr	r3, [pc, #88]	; (c155c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   c1502:	685b      	ldr	r3, [r3, #4]
   c1504:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c1508:	4605      	mov	r5, r0
   c150a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   c150c:	bb1b      	cbnz	r3, c1556 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   c150e:	f7ff fe8d 	bl	c122c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   c1512:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   c1516:	4604      	mov	r4, r0
   c1518:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c151a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c151c:	f7ff fd68 	bl	c0ff0 <_ZN14RecursiveMutex4lockEv.isra.0>
   c1520:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   c1524:	2446      	movs	r4, #70	; 0x46
   c1526:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c152a:	45b0      	cmp	r8, r6
   c152c:	d109      	bne.n	c1542 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   c152e:	a801      	add	r0, sp, #4
   c1530:	f7ff ff61 	bl	c13f6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   c1534:	42a5      	cmp	r5, r4
   c1536:	bfb4      	ite	lt
   c1538:	2000      	movlt	r0, #0
   c153a:	2001      	movge	r0, #1
}
   c153c:	b002      	add	sp, #8
   c153e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   c1542:	f856 0b04 	ldr.w	r0, [r6], #4
   c1546:	4639      	mov	r1, r7
   c1548:	3004      	adds	r0, #4
   c154a:	f7ff fdfb 	bl	c1144 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   c154e:	4284      	cmp	r4, r0
   c1550:	bfa8      	it	ge
   c1552:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   c1554:	e7e9      	b.n	c152a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   c1556:	2000      	movs	r0, #0
   c1558:	e7f0      	b.n	c153c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   c155a:	bf00      	nop
   c155c:	e000ed00 	.word	0xe000ed00

000c1560 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c1560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c1562:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   c1566:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c1568:	4604      	mov	r4, r0
   c156a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c156c:	db0d      	blt.n	c158a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   c156e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   c1570:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   c1572:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   c1574:	dd04      	ble.n	c1580 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   c1576:	00b9      	lsls	r1, r7, #2
   c1578:	f7fe ff06 	bl	c0388 <realloc>
            if (!d) {
   c157c:	b918      	cbnz	r0, c1586 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   c157e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   c1580:	f7fe fefa 	bl	c0378 <free>
        T* d = nullptr;
   c1584:	2000      	movs	r0, #0
        data_ = d;
   c1586:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   c1588:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   c158a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   c158c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   c158e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   c1592:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   c1594:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   c1598:	1d08      	adds	r0, r1, #4
   c159a:	f003 ff1f 	bl	c53dc <memmove>
    new(p) T(std::move(value));
   c159e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   c15a2:	6863      	ldr	r3, [r4, #4]
   c15a4:	3301      	adds	r3, #1
   c15a6:	6063      	str	r3, [r4, #4]
    return true;
   c15a8:	2001      	movs	r0, #1
   c15aa:	e7e8      	b.n	c157e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000c15ac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   c15ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   c15ae:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   c15b2:	4604      	mov	r4, r0
   c15b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c15b6:	9301      	str	r3, [sp, #4]
   c15b8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   c15ba:	f7ff fd19 	bl	c0ff0 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   c15be:	e9d4 3200 	ldrd	r3, r2, [r4]
   c15c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   c15c6:	4293      	cmp	r3, r2
   c15c8:	4619      	mov	r1, r3
   c15ca:	d00b      	beq.n	c15e4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   c15cc:	6809      	ldr	r1, [r1, #0]
   c15ce:	42a9      	cmp	r1, r5
   c15d0:	f103 0304 	add.w	r3, r3, #4
   c15d4:	d1f7      	bne.n	c15c6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   c15d6:	a801      	add	r0, sp, #4
   c15d8:	f7ff ff0d 	bl	c13f6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c15dc:	2500      	movs	r5, #0
}
   c15de:	4628      	mov	r0, r5
   c15e0:	b003      	add	sp, #12
   c15e2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   c15e4:	4629      	mov	r1, r5
   c15e6:	4620      	mov	r0, r4
   c15e8:	f7ff ffba 	bl	c1560 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   c15ec:	4605      	mov	r5, r0
   c15ee:	2800      	cmp	r0, #0
   c15f0:	d0f1      	beq.n	c15d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   c15f2:	6863      	ldr	r3, [r4, #4]
   c15f4:	2b01      	cmp	r3, #1
   c15f6:	d101      	bne.n	c15fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   c15f8:	f7ff fe34 	bl	c1264 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c15fc:	a801      	add	r0, sp, #4
   c15fe:	f7ff fefa 	bl	c13f6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c1602:	e7ec      	b.n	c15de <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c1604 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c1604:	b570      	push	{r4, r5, r6, lr}
   c1606:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c1608:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c160c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c160e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c1612:	4282      	cmp	r2, r0
   c1614:	d00f      	beq.n	c1636 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c1616:	4601      	mov	r1, r0
            if (*p == value) {
   c1618:	681d      	ldr	r5, [r3, #0]
   c161a:	f851 6b04 	ldr.w	r6, [r1], #4
   c161e:	42ae      	cmp	r6, r5
   c1620:	d107      	bne.n	c1632 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c1622:	1a52      	subs	r2, r2, r1
   c1624:	f003 feda 	bl	c53dc <memmove>
    --size_;
   c1628:	6863      	ldr	r3, [r4, #4]
   c162a:	3b01      	subs	r3, #1
   c162c:	6063      	str	r3, [r4, #4]
    return true;
   c162e:	2001      	movs	r0, #1
}
   c1630:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c1632:	4608      	mov	r0, r1
   c1634:	e7ed      	b.n	c1612 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c1636:	2000      	movs	r0, #0
   c1638:	e7fa      	b.n	c1630 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c163a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c163a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c163c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c1640:	4604      	mov	r4, r0
   c1642:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c1644:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c1646:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c1648:	f7ff fcd2 	bl	c0ff0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c164c:	a901      	add	r1, sp, #4
   c164e:	4620      	mov	r0, r4
   c1650:	f7ff ffd8 	bl	c1604 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c1654:	b118      	cbz	r0, c165e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c1656:	6863      	ldr	r3, [r4, #4]
   c1658:	b90b      	cbnz	r3, c165e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c165a:	f7ff fe0f 	bl	c127c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c165e:	a803      	add	r0, sp, #12
   c1660:	f7ff fec9 	bl	c13f6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c1664:	b004      	add	sp, #16
   c1666:	bd10      	pop	{r4, pc}

000c1668 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c1668:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c166a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c166e:	2318      	movs	r3, #24
   c1670:	4604      	mov	r4, r0
   c1672:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c1676:	42ae      	cmp	r6, r5
   c1678:	d015      	beq.n	c16a6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c167a:	f105 0110 	add.w	r1, r5, #16
   c167e:	4620      	mov	r0, r4
   c1680:	f7ff ffc0 	bl	c1604 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c1684:	6863      	ldr	r3, [r4, #4]
   c1686:	b90b      	cbnz	r3, c168c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c1688:	f7ff fdf8 	bl	c127c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c168c:	69e0      	ldr	r0, [r4, #28]
   c168e:	6929      	ldr	r1, [r5, #16]
   c1690:	6803      	ldr	r3, [r0, #0]
   c1692:	68db      	ldr	r3, [r3, #12]
   c1694:	4798      	blx	r3
        if (h.stream) {
   c1696:	6969      	ldr	r1, [r5, #20]
   c1698:	b119      	cbz	r1, c16a2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c169a:	6a20      	ldr	r0, [r4, #32]
   c169c:	6803      	ldr	r3, [r0, #0]
   c169e:	68db      	ldr	r3, [r3, #12]
   c16a0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c16a2:	3518      	adds	r5, #24
   c16a4:	e7e7      	b.n	c1676 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c16a6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c16aa:	2618      	movs	r6, #24
   c16ac:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c16b0:	42ae      	cmp	r6, r5
   c16b2:	d004      	beq.n	c16be <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c16b4:	4628      	mov	r0, r5
   c16b6:	f7ff f953 	bl	c0960 <_ZN6StringD1Ev>
   c16ba:	3518      	adds	r5, #24
   c16bc:	e7f8      	b.n	c16b0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c16be:	2300      	movs	r3, #0
   c16c0:	6163      	str	r3, [r4, #20]
}
   c16c2:	bd70      	pop	{r4, r5, r6, pc}

000c16c4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c16c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c16c6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c16c8:	f7ff fdd8 	bl	c127c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c16cc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c16d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c16d2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c16d4:	f7ff fc8c 	bl	c0ff0 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c16d8:	4620      	mov	r0, r4
   c16da:	f7ff ffc5 	bl	c1668 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c16de:	a801      	add	r0, sp, #4
   c16e0:	f7ff fe89 	bl	c13f6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c16e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c16e6:	b108      	cbz	r0, c16ec <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c16e8:	f7fe fb66 	bl	bfdb8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c16ec:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c16f0:	2618      	movs	r6, #24
   c16f2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c16f6:	42ae      	cmp	r6, r5
   c16f8:	d004      	beq.n	c1704 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c16fa:	4628      	mov	r0, r5
   c16fc:	f7ff f930 	bl	c0960 <_ZN6StringD1Ev>
   c1700:	3518      	adds	r5, #24
   c1702:	e7f8      	b.n	c16f6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c1704:	6920      	ldr	r0, [r4, #16]
   c1706:	f7fe fe37 	bl	c0378 <free>
   c170a:	6820      	ldr	r0, [r4, #0]
   c170c:	f7fe fe34 	bl	c0378 <free>
}
   c1710:	4620      	mov	r0, r4
   c1712:	b002      	add	sp, #8
   c1714:	bd70      	pop	{r4, r5, r6, pc}
	...

000c1718 <__tcf_2>:
    static LogManager mgr;
   c1718:	4801      	ldr	r0, [pc, #4]	; (c1720 <__tcf_2+0x8>)
   c171a:	f7ff bfd3 	b.w	c16c4 <_ZN5spark10LogManagerD1Ev>
   c171e:	bf00      	nop
   c1720:	2003e638 	.word	0x2003e638

000c1724 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c1724:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c1726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c1728:	4604      	mov	r4, r0
   c172a:	460d      	mov	r5, r1
   c172c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c172e:	d915      	bls.n	c175c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c1730:	4290      	cmp	r0, r2
   c1732:	d214      	bcs.n	c175e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c1734:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c1738:	1a75      	subs	r5, r6, r1
   c173a:	f1a1 0714 	sub.w	r7, r1, #20
   c173e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c1740:	42b7      	cmp	r7, r6
   c1742:	d01a      	beq.n	c177a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c1744:	b11c      	cbz	r4, c174e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c1746:	4631      	mov	r1, r6
   c1748:	4620      	mov	r0, r4
   c174a:	f7ff fcab 	bl	c10a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c174e:	f106 0008 	add.w	r0, r6, #8
   c1752:	f7ff fdf9 	bl	c1348 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c1756:	3e14      	subs	r6, #20
   c1758:	3c14      	subs	r4, #20
   c175a:	e7f1      	b.n	c1740 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c175c:	d00d      	beq.n	c177a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c175e:	42b5      	cmp	r5, r6
   c1760:	d00b      	beq.n	c177a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c1762:	b11c      	cbz	r4, c176c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c1764:	4629      	mov	r1, r5
   c1766:	4620      	mov	r0, r4
   c1768:	f7ff fc9c 	bl	c10a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c176c:	f105 0008 	add.w	r0, r5, #8
   c1770:	f7ff fdea 	bl	c1348 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c1774:	3514      	adds	r5, #20
   c1776:	3414      	adds	r4, #20
   c1778:	e7f1      	b.n	c175e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c177a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c177c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c177c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c177e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c1780:	4604      	mov	r4, r0
   c1782:	460d      	mov	r5, r1
   c1784:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c1786:	d914      	bls.n	c17b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c1788:	4290      	cmp	r0, r2
   c178a:	d213      	bcs.n	c17b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c178c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c1790:	1a75      	subs	r5, r6, r1
   c1792:	f1a1 0710 	sub.w	r7, r1, #16
   c1796:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c1798:	42b7      	cmp	r7, r6
   c179a:	d018      	beq.n	c17ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c179c:	b11c      	cbz	r4, c17a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c179e:	4631      	mov	r1, r6
   c17a0:	4620      	mov	r0, r4
   c17a2:	f7ff f95a 	bl	c0a5a <_ZN6StringC1EOS_>
                end->~T();
   c17a6:	4630      	mov	r0, r6
   c17a8:	f7ff f8da 	bl	c0960 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c17ac:	3e10      	subs	r6, #16
   c17ae:	3c10      	subs	r4, #16
   c17b0:	e7f2      	b.n	c1798 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c17b2:	d00c      	beq.n	c17ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c17b4:	42b5      	cmp	r5, r6
   c17b6:	d00a      	beq.n	c17ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c17b8:	b11c      	cbz	r4, c17c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c17ba:	4629      	mov	r1, r5
   c17bc:	4620      	mov	r0, r4
   c17be:	f7ff f94c 	bl	c0a5a <_ZN6StringC1EOS_>
                p->~T();
   c17c2:	4628      	mov	r0, r5
   c17c4:	f7ff f8cc 	bl	c0960 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c17c8:	3510      	adds	r5, #16
   c17ca:	3410      	adds	r4, #16
   c17cc:	e7f2      	b.n	c17b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c17ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c17d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c17d0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c17d2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c17d4:	4605      	mov	r5, r0
        if (n > 0) {
   c17d6:	dd11      	ble.n	c17fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c17d8:	0130      	lsls	r0, r6, #4
   c17da:	f7fe fdc5 	bl	c0368 <malloc>
            if (!d) {
   c17de:	4604      	mov	r4, r0
   c17e0:	b158      	cbz	r0, c17fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c17e2:	e9d5 1200 	ldrd	r1, r2, [r5]
   c17e6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c17ea:	f7ff ffc7 	bl	c177c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c17ee:	6828      	ldr	r0, [r5, #0]
   c17f0:	f7fe fdc2 	bl	c0378 <free>
        data_ = d;
   c17f4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c17f6:	60ae      	str	r6, [r5, #8]
        return true;
   c17f8:	2001      	movs	r0, #1
    }
   c17fa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c17fc:	2400      	movs	r4, #0
   c17fe:	e7f6      	b.n	c17ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c1800 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c1800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1804:	4690      	mov	r8, r2
   c1806:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c1808:	2300      	movs	r3, #0
   c180a:	9103      	str	r1, [sp, #12]
    return size_;
   c180c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c1810:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c1812:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c1814:	4299      	cmp	r1, r3
        capacity_(0) {
   c1816:	e9c0 3300 	strd	r3, r3, [r0]
   c181a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c181e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c1822:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c1826:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c1828:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c182a:	dc23      	bgt.n	c1874 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c182c:	e9d8 5700 	ldrd	r5, r7, [r8]
   c1830:	2314      	movs	r3, #20
   c1832:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c1836:	42af      	cmp	r7, r5
   c1838:	d03b      	beq.n	c18b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c183a:	4629      	mov	r1, r5
   c183c:	a80b      	add	r0, sp, #44	; 0x2c
   c183e:	f7ff f90c 	bl	c0a5a <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c1842:	a90b      	add	r1, sp, #44	; 0x2c
   c1844:	a80f      	add	r0, sp, #60	; 0x3c
   c1846:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c1848:	f7ff f907 	bl	c0a5a <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c184c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c1850:	4299      	cmp	r1, r3
   c1852:	da1b      	bge.n	c188c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c1854:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c1856:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c1858:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c185c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c1860:	4631      	mov	r1, r6
   c1862:	f106 0010 	add.w	r0, r6, #16
   c1866:	f7ff ff89 	bl	c177c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c186a:	b9ee      	cbnz	r6, c18a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c186c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c186e:	3301      	adds	r3, #1
   c1870:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c1872:	e011      	b.n	c1898 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c1874:	a808      	add	r0, sp, #32
   c1876:	f7ff ffab 	bl	c17d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c187a:	2800      	cmp	r0, #0
   c187c:	d1d6      	bne.n	c182c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c187e:	a808      	add	r0, sp, #32
   c1880:	f7ff fa04 	bl	c0c8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c1884:	4620      	mov	r0, r4
   c1886:	b015      	add	sp, #84	; 0x54
   c1888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c188c:	3101      	adds	r1, #1
   c188e:	a808      	add	r0, sp, #32
   c1890:	f7ff ff9e 	bl	c17d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c1894:	2800      	cmp	r0, #0
   c1896:	d1dd      	bne.n	c1854 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c1898:	a80f      	add	r0, sp, #60	; 0x3c
   c189a:	f7ff f861 	bl	c0960 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c189e:	a80b      	add	r0, sp, #44	; 0x2c
   c18a0:	f7ff f85e 	bl	c0960 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c18a4:	3514      	adds	r5, #20
   c18a6:	e7c6      	b.n	c1836 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c18a8:	a90f      	add	r1, sp, #60	; 0x3c
   c18aa:	4630      	mov	r0, r6
   c18ac:	f7ff f8d5 	bl	c0a5a <_ZN6StringC1EOS_>
   c18b0:	e7dc      	b.n	c186c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c18b2:	2600      	movs	r6, #0
   c18b4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c18b8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c18ba:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c18be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c18c2:	429e      	cmp	r6, r3
   c18c4:	da7c      	bge.n	c19c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   c18c6:	0133      	lsls	r3, r6, #4
   c18c8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c18ca:	9306      	str	r3, [sp, #24]
        if (!category) {
   c18cc:	b90b      	cbnz	r3, c18d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c18ce:	3601      	adds	r6, #1
   c18d0:	e7f5      	b.n	c18be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c18d2:	2300      	movs	r3, #0
   c18d4:	9307      	str	r3, [sp, #28]
   c18d6:	fb09 f306 	mul.w	r3, r9, r6
   c18da:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c18dc:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c18de:	a907      	add	r1, sp, #28
   c18e0:	a806      	add	r0, sp, #24
   c18e2:	f7ff fb5e 	bl	c0fa2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c18e6:	4682      	mov	sl, r0
   c18e8:	2800      	cmp	r0, #0
   c18ea:	d0f0      	beq.n	c18ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c18ec:	f04f 0300 	mov.w	r3, #0
   c18f0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c18f4:	4601      	mov	r1, r0
   c18f6:	9a07      	ldr	r2, [sp, #28]
   c18f8:	f10d 0317 	add.w	r3, sp, #23
   c18fc:	4628      	mov	r0, r5
   c18fe:	f7ff fbe5 	bl	c10cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c1902:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c1906:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c1908:	2f00      	cmp	r7, #0
   c190a:	d14a      	bne.n	c19a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c190c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c1910:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c1914:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c1918:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c191c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c1920:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c1924:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c1926:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c192a:	4293      	cmp	r3, r2
   c192c:	db17      	blt.n	c195e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c192e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c1932:	f1ba 0f00 	cmp.w	sl, #0
   c1936:	dd30      	ble.n	c199a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c1938:	fb09 f00a 	mul.w	r0, r9, sl
   c193c:	f7fe fd14 	bl	c0368 <malloc>
            if (!d) {
   c1940:	4683      	mov	fp, r0
   c1942:	b360      	cbz	r0, c199e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c1944:	e9d5 1200 	ldrd	r1, r2, [r5]
   c1948:	fb09 1202 	mla	r2, r9, r2, r1
   c194c:	f7ff feea 	bl	c1724 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c1950:	6828      	ldr	r0, [r5, #0]
   c1952:	f7fe fd11 	bl	c0378 <free>
        data_ = d;
   c1956:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c195a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c195e:	682b      	ldr	r3, [r5, #0]
   c1960:	9a01      	ldr	r2, [sp, #4]
   c1962:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c1966:	686a      	ldr	r2, [r5, #4]
   c1968:	4651      	mov	r1, sl
   c196a:	fb09 3202 	mla	r2, r9, r2, r3
   c196e:	f10a 0014 	add.w	r0, sl, #20
   c1972:	f7ff fed7 	bl	c1724 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c1976:	f1ba 0f00 	cmp.w	sl, #0
   c197a:	d003      	beq.n	c1984 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c197c:	a90f      	add	r1, sp, #60	; 0x3c
   c197e:	4650      	mov	r0, sl
   c1980:	f7ff fb90 	bl	c10a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c1984:	686b      	ldr	r3, [r5, #4]
   c1986:	3301      	adds	r3, #1
   c1988:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c198a:	a811      	add	r0, sp, #68	; 0x44
   c198c:	f7ff fcdc 	bl	c1348 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c1990:	b13f      	cbz	r7, c19a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c1992:	a80b      	add	r0, sp, #44	; 0x2c
   c1994:	f7ff fcd8 	bl	c1348 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c1998:	e771      	b.n	c187e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c199a:	46bb      	mov	fp, r7
   c199c:	e7d8      	b.n	c1950 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c199e:	2701      	movs	r7, #1
   c19a0:	e7f3      	b.n	c198a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c19a2:	9b01      	ldr	r3, [sp, #4]
   c19a4:	682d      	ldr	r5, [r5, #0]
   c19a6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c19aa:	9b06      	ldr	r3, [sp, #24]
   c19ac:	781b      	ldrb	r3, [r3, #0]
   c19ae:	b92b      	cbnz	r3, c19bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c19b0:	f8d8 3000 	ldr.w	r3, [r8]
   c19b4:	9a02      	ldr	r2, [sp, #8]
   c19b6:	4413      	add	r3, r2
   c19b8:	7c1b      	ldrb	r3, [r3, #16]
   c19ba:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c19bc:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c19be:	e78e      	b.n	c18de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c19c0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c19c2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c19c4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c19c6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c19c8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c19ca:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c19cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c19ce:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c19d0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c19d2:	60a2      	str	r2, [r4, #8]
   c19d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c19d6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c19d8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c19da:	60e2      	str	r2, [r4, #12]
   c19dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c19de:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c19e0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c19e2:	6122      	str	r2, [r4, #16]
   c19e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c19e6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c19e8:	9b03      	ldr	r3, [sp, #12]
   c19ea:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c19ec:	6162      	str	r2, [r4, #20]
   c19ee:	7623      	strb	r3, [r4, #24]
   c19f0:	e7cf      	b.n	c1992 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c19f4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c19f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   c19f6:	4604      	mov	r4, r0
   c19f8:	b087      	sub	sp, #28
   c19fa:	460d      	mov	r5, r1
        filter_(level, filters) {
   c19fc:	4626      	mov	r6, r4
        stream_(&stream) {
   c19fe:	4619      	mov	r1, r3
   c1a00:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c1a02:	4617      	mov	r7, r2
        stream_(&stream) {
   c1a04:	f7f5 fce1 	bl	b73ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c1a08:	4b0b      	ldr	r3, [pc, #44]	; (c1a38 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c1a0a:	f846 3b04 	str.w	r3, [r6], #4
   c1a0e:	4669      	mov	r1, sp
   c1a10:	a803      	add	r0, sp, #12
   c1a12:	f7f5 fcda 	bl	b73ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c1a16:	aa03      	add	r2, sp, #12
   c1a18:	4639      	mov	r1, r7
   c1a1a:	4630      	mov	r0, r6
   c1a1c:	f7ff fef0 	bl	c1800 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c1a20:	a803      	add	r0, sp, #12
   c1a22:	f7f5 fc91 	bl	b7348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c1a26:	4668      	mov	r0, sp
   c1a28:	f7f5 fc8e 	bl	b7348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c1a2c:	4b03      	ldr	r3, [pc, #12]	; (c1a3c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c1a2e:	6023      	str	r3, [r4, #0]
}
   c1a30:	4620      	mov	r0, r4
        stream_(&stream) {
   c1a32:	6225      	str	r5, [r4, #32]
}
   c1a34:	b007      	add	sp, #28
   c1a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c1a38:	000c7544 	.word	0x000c7544
   c1a3c:	000c92c8 	.word	0x000c92c8

000c1a40 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c1a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   c1a42:	460f      	mov	r7, r1
   c1a44:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c1a46:	491d      	ldr	r1, [pc, #116]	; (c1abc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c1a48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c1a4a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c1a4c:	4616      	mov	r6, r2
   c1a4e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c1a50:	f003 fd79 	bl	c5546 <strcmp>
   c1a54:	b9c0      	cbnz	r0, c1a88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c1a56:	b1a4      	cbz	r4, c1a82 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c1a58:	4629      	mov	r1, r5
   c1a5a:	a801      	add	r0, sp, #4
   c1a5c:	f7ff fcbc 	bl	c13d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c1a60:	4917      	ldr	r1, [pc, #92]	; (c1ac0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c1a62:	2024      	movs	r0, #36	; 0x24
   c1a64:	f001 feb8 	bl	c37d8 <_ZnwjRKSt9nothrow_t>
   c1a68:	4605      	mov	r5, r0
   c1a6a:	b130      	cbz	r0, c1a7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c1a6c:	ab01      	add	r3, sp, #4
   c1a6e:	4632      	mov	r2, r6
   c1a70:	4621      	mov	r1, r4
   c1a72:	f7ff ffbf 	bl	c19f4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c1a76:	4b13      	ldr	r3, [pc, #76]	; (c1ac4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c1a78:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c1a7a:	a801      	add	r0, sp, #4
   c1a7c:	f7f5 fc64 	bl	b7348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c1a80:	462c      	mov	r4, r5
}
   c1a82:	4620      	mov	r0, r4
   c1a84:	b005      	add	sp, #20
   c1a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c1a88:	490f      	ldr	r1, [pc, #60]	; (c1ac8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c1a8a:	4638      	mov	r0, r7
   c1a8c:	f003 fd5b 	bl	c5546 <strcmp>
   c1a90:	b990      	cbnz	r0, c1ab8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c1a92:	2c00      	cmp	r4, #0
   c1a94:	d0f5      	beq.n	c1a82 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c1a96:	4629      	mov	r1, r5
   c1a98:	a801      	add	r0, sp, #4
   c1a9a:	f7ff fc9d 	bl	c13d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c1a9e:	4908      	ldr	r1, [pc, #32]	; (c1ac0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c1aa0:	2024      	movs	r0, #36	; 0x24
   c1aa2:	f001 fe99 	bl	c37d8 <_ZnwjRKSt9nothrow_t>
   c1aa6:	4605      	mov	r5, r0
   c1aa8:	2800      	cmp	r0, #0
   c1aaa:	d0e6      	beq.n	c1a7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c1aac:	ab01      	add	r3, sp, #4
   c1aae:	4632      	mov	r2, r6
   c1ab0:	4621      	mov	r1, r4
   c1ab2:	f7ff ff9f 	bl	c19f4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c1ab6:	e7e0      	b.n	c1a7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c1ab8:	2400      	movs	r4, #0
   c1aba:	e7e2      	b.n	c1a82 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c1abc:	000c9252 	.word	0x000c9252
   c1ac0:	000c94ae 	.word	0x000c94ae
   c1ac4:	000c92e0 	.word	0x000c92e0
   c1ac8:	000c9256 	.word	0x000c9256

000c1acc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c1acc:	4b01      	ldr	r3, [pc, #4]	; (c1ad4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c1ace:	4a02      	ldr	r2, [pc, #8]	; (c1ad8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c1ad0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c1ad2:	4770      	bx	lr
   c1ad4:	2003e634 	.word	0x2003e634
   c1ad8:	000c9267 	.word	0x000c9267

000c1adc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c1adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1ae0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c1ae2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c1ae6:	4604      	mov	r4, r0
   c1ae8:	460e      	mov	r6, r1
   c1aea:	4617      	mov	r7, r2
   c1aec:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c1aee:	f001 f885 	bl	c2bfc <_Z16_fetch_usbserialv>
   c1af2:	4581      	cmp	r9, r0
   c1af4:	d04c      	beq.n	c1b90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c1af6:	792b      	ldrb	r3, [r5, #4]
   c1af8:	0719      	lsls	r1, r3, #28
   c1afa:	d504      	bpl.n	c1b06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c1afc:	696a      	ldr	r2, [r5, #20]
   c1afe:	4954      	ldr	r1, [pc, #336]	; (c1c50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c1b00:	4620      	mov	r0, r4
   c1b02:	f7ff fac0 	bl	c1086 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c1b06:	f1b8 0f00 	cmp.w	r8, #0
   c1b0a:	d00d      	beq.n	c1b28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c1b0c:	215b      	movs	r1, #91	; 0x5b
   c1b0e:	4620      	mov	r0, r4
   c1b10:	f7ff faad 	bl	c106e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c1b14:	4641      	mov	r1, r8
   c1b16:	4620      	mov	r0, r4
   c1b18:	f7ff fa9a 	bl	c1050 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c1b1c:	6823      	ldr	r3, [r4, #0]
   c1b1e:	494d      	ldr	r1, [pc, #308]	; (c1c54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c1b20:	68db      	ldr	r3, [r3, #12]
   c1b22:	2202      	movs	r2, #2
   c1b24:	4620      	mov	r0, r4
   c1b26:	4798      	blx	r3
    if (attr.has_file) {
   c1b28:	792b      	ldrb	r3, [r5, #4]
   c1b2a:	07da      	lsls	r2, r3, #31
   c1b2c:	d523      	bpl.n	c1b76 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c1b2e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c1b32:	212f      	movs	r1, #47	; 0x2f
   c1b34:	4640      	mov	r0, r8
   c1b36:	f003 fd65 	bl	c5604 <strrchr>
    if (s1) {
   c1b3a:	b108      	cbz	r0, c1b40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c1b3c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c1b40:	4641      	mov	r1, r8
   c1b42:	4620      	mov	r0, r4
   c1b44:	f7ff fa84 	bl	c1050 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c1b48:	792b      	ldrb	r3, [r5, #4]
   c1b4a:	079b      	lsls	r3, r3, #30
   c1b4c:	d508      	bpl.n	c1b60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c1b4e:	213a      	movs	r1, #58	; 0x3a
   c1b50:	4620      	mov	r0, r4
   c1b52:	f7ff fa8c 	bl	c106e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c1b56:	68ea      	ldr	r2, [r5, #12]
   c1b58:	493f      	ldr	r1, [pc, #252]	; (c1c58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c1b5a:	4620      	mov	r0, r4
   c1b5c:	f7ff fa93 	bl	c1086 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c1b60:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c1b62:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c1b64:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c1b68:	68db      	ldr	r3, [r3, #12]
   c1b6a:	bf14      	ite	ne
   c1b6c:	493b      	ldrne	r1, [pc, #236]	; (c1c5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c1b6e:	493c      	ldreq	r1, [pc, #240]	; (c1c60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c1b70:	2202      	movs	r2, #2
            write(": ", 2);
   c1b72:	4620      	mov	r0, r4
   c1b74:	4798      	blx	r3
    if (attr.has_function) {
   c1b76:	792b      	ldrb	r3, [r5, #4]
   c1b78:	0758      	lsls	r0, r3, #29
   c1b7a:	d51d      	bpl.n	c1bb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c1b7c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c1b7e:	460b      	mov	r3, r1
   c1b80:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c1b82:	f813 0b01 	ldrb.w	r0, [r3], #1
   c1b86:	b160      	cbz	r0, c1ba2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c1b88:	2820      	cmp	r0, #32
   c1b8a:	d108      	bne.n	c1b9e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c1b8c:	4619      	mov	r1, r3
   c1b8e:	e7f7      	b.n	c1b80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c1b90:	4834      	ldr	r0, [pc, #208]	; (c1c64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c1b92:	f001 fa65 	bl	c3060 <_ZN5spark12NetworkClass9listeningEv>
   c1b96:	2800      	cmp	r0, #0
   c1b98:	d0ad      	beq.n	c1af6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c1b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c1b9e:	2828      	cmp	r0, #40	; 0x28
   c1ba0:	d1ee      	bne.n	c1b80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c1ba2:	6823      	ldr	r3, [r4, #0]
   c1ba4:	1a52      	subs	r2, r2, r1
   c1ba6:	68db      	ldr	r3, [r3, #12]
   c1ba8:	4620      	mov	r0, r4
   c1baa:	4798      	blx	r3
        write("(): ", 4);
   c1bac:	6823      	ldr	r3, [r4, #0]
   c1bae:	492e      	ldr	r1, [pc, #184]	; (c1c68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c1bb0:	68db      	ldr	r3, [r3, #12]
   c1bb2:	2204      	movs	r2, #4
   c1bb4:	4620      	mov	r0, r4
   c1bb6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c1bb8:	2100      	movs	r1, #0
   c1bba:	4638      	mov	r0, r7
   c1bbc:	f7fe fa9c 	bl	c00f8 <log_level_name>
   c1bc0:	4601      	mov	r1, r0
    write(s);
   c1bc2:	4620      	mov	r0, r4
   c1bc4:	f7ff fa44 	bl	c1050 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c1bc8:	6823      	ldr	r3, [r4, #0]
   c1bca:	4925      	ldr	r1, [pc, #148]	; (c1c60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c1bcc:	68db      	ldr	r3, [r3, #12]
   c1bce:	2202      	movs	r2, #2
   c1bd0:	4620      	mov	r0, r4
   c1bd2:	4798      	blx	r3
    if (msg) {
   c1bd4:	b11e      	cbz	r6, c1bde <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c1bd6:	4631      	mov	r1, r6
   c1bd8:	4620      	mov	r0, r4
   c1bda:	f7ff fa39 	bl	c1050 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c1bde:	792b      	ldrb	r3, [r5, #4]
   c1be0:	f013 0f30 	tst.w	r3, #48	; 0x30
   c1be4:	d02c      	beq.n	c1c40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c1be6:	6823      	ldr	r3, [r4, #0]
   c1be8:	4920      	ldr	r1, [pc, #128]	; (c1c6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c1bea:	68db      	ldr	r3, [r3, #12]
   c1bec:	2202      	movs	r2, #2
   c1bee:	4620      	mov	r0, r4
   c1bf0:	4798      	blx	r3
        if (attr.has_code) {
   c1bf2:	792b      	ldrb	r3, [r5, #4]
   c1bf4:	06d9      	lsls	r1, r3, #27
   c1bf6:	d50a      	bpl.n	c1c0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c1bf8:	6823      	ldr	r3, [r4, #0]
   c1bfa:	491d      	ldr	r1, [pc, #116]	; (c1c70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c1bfc:	68db      	ldr	r3, [r3, #12]
   c1bfe:	2207      	movs	r2, #7
   c1c00:	4620      	mov	r0, r4
   c1c02:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c1c04:	69aa      	ldr	r2, [r5, #24]
   c1c06:	491b      	ldr	r1, [pc, #108]	; (c1c74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c1c08:	4620      	mov	r0, r4
   c1c0a:	f7ff fa3c 	bl	c1086 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c1c0e:	792b      	ldrb	r3, [r5, #4]
   c1c10:	069a      	lsls	r2, r3, #26
   c1c12:	d511      	bpl.n	c1c38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c1c14:	06db      	lsls	r3, r3, #27
   c1c16:	d505      	bpl.n	c1c24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c1c18:	6823      	ldr	r3, [r4, #0]
   c1c1a:	4910      	ldr	r1, [pc, #64]	; (c1c5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c1c1c:	68db      	ldr	r3, [r3, #12]
   c1c1e:	2202      	movs	r2, #2
   c1c20:	4620      	mov	r0, r4
   c1c22:	4798      	blx	r3
            write("details = ", 10);
   c1c24:	6823      	ldr	r3, [r4, #0]
   c1c26:	4914      	ldr	r1, [pc, #80]	; (c1c78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c1c28:	68db      	ldr	r3, [r3, #12]
   c1c2a:	4620      	mov	r0, r4
   c1c2c:	220a      	movs	r2, #10
   c1c2e:	4798      	blx	r3
            write(attr.details);
   c1c30:	69e9      	ldr	r1, [r5, #28]
   c1c32:	4620      	mov	r0, r4
   c1c34:	f7ff fa0c 	bl	c1050 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c1c38:	215d      	movs	r1, #93	; 0x5d
   c1c3a:	4620      	mov	r0, r4
   c1c3c:	f7ff fa17 	bl	c106e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c1c40:	6823      	ldr	r3, [r4, #0]
   c1c42:	490e      	ldr	r1, [pc, #56]	; (c1c7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c1c44:	68db      	ldr	r3, [r3, #12]
   c1c46:	4620      	mov	r0, r4
   c1c48:	2202      	movs	r2, #2
}
   c1c4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c1c4e:	4718      	bx	r3
   c1c50:	000c926b 	.word	0x000c926b
   c1c54:	000c9272 	.word	0x000c9272
   c1c58:	000c867d 	.word	0x000c867d
   c1c5c:	000c9275 	.word	0x000c9275
   c1c60:	000c927a 	.word	0x000c927a
   c1c64:	2003e708 	.word	0x2003e708
   c1c68:	000c9278 	.word	0x000c9278
   c1c6c:	000c927d 	.word	0x000c927d
   c1c70:	000c9280 	.word	0x000c9280
   c1c74:	000c9288 	.word	0x000c9288
   c1c78:	000c928b 	.word	0x000c928b
   c1c7c:	000c9296 	.word	0x000c9296

000c1c80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c1c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c1c84:	b085      	sub	sp, #20
    return stream_;
   c1c86:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c1c8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c1c8c:	4605      	mov	r5, r0
   c1c8e:	460f      	mov	r7, r1
   c1c90:	4690      	mov	r8, r2
   c1c92:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c1c94:	f000 ffb2 	bl	c2bfc <_Z16_fetch_usbserialv>
   c1c98:	4581      	cmp	r9, r0
   c1c9a:	d105      	bne.n	c1ca8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c1c9c:	4849      	ldr	r0, [pc, #292]	; (c1dc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c1c9e:	f001 f9df 	bl	c3060 <_ZN5spark12NetworkClass9listeningEv>
   c1ca2:	2800      	cmp	r0, #0
   c1ca4:	f040 808a 	bne.w	c1dbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c1ca8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c1caa:	4a47      	ldr	r2, [pc, #284]	; (c1dc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c1cac:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c1cae:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c1cb2:	a801      	add	r0, sp, #4
        strm_(stream) {
   c1cb4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c1cb6:	f88d 9008 	strb.w	r9, [sp, #8]
   c1cba:	f001 fb76 	bl	c33aa <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c1cbe:	4649      	mov	r1, r9
   c1cc0:	4640      	mov	r0, r8
   c1cc2:	f7fe fa19 	bl	c00f8 <log_level_name>
    json.name("l", 1).value(s);
   c1cc6:	4941      	ldr	r1, [pc, #260]	; (c1dcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c1cc8:	4680      	mov	r8, r0
   c1cca:	2201      	movs	r2, #1
   c1ccc:	a801      	add	r0, sp, #4
   c1cce:	f001 fbfb 	bl	c34c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1cd2:	4641      	mov	r1, r8
   c1cd4:	f7ff f9ae 	bl	c1034 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c1cd8:	b13f      	cbz	r7, c1cea <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c1cda:	493d      	ldr	r1, [pc, #244]	; (c1dd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c1cdc:	2201      	movs	r2, #1
   c1cde:	a801      	add	r0, sp, #4
   c1ce0:	f001 fbf2 	bl	c34c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1ce4:	4639      	mov	r1, r7
   c1ce6:	f7ff f9a5 	bl	c1034 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c1cea:	b13e      	cbz	r6, c1cfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c1cec:	4939      	ldr	r1, [pc, #228]	; (c1dd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c1cee:	2201      	movs	r2, #1
   c1cf0:	a801      	add	r0, sp, #4
   c1cf2:	f001 fbe9 	bl	c34c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1cf6:	4631      	mov	r1, r6
   c1cf8:	f7ff f99c 	bl	c1034 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c1cfc:	7923      	ldrb	r3, [r4, #4]
   c1cfe:	07df      	lsls	r7, r3, #31
   c1d00:	d50e      	bpl.n	c1d20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c1d02:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c1d04:	212f      	movs	r1, #47	; 0x2f
   c1d06:	4630      	mov	r0, r6
   c1d08:	f003 fc7c 	bl	c5604 <strrchr>
    if (s1) {
   c1d0c:	b100      	cbz	r0, c1d10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c1d0e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c1d10:	4931      	ldr	r1, [pc, #196]	; (c1dd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c1d12:	2201      	movs	r2, #1
   c1d14:	a801      	add	r0, sp, #4
   c1d16:	f001 fbd7 	bl	c34c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1d1a:	4631      	mov	r1, r6
   c1d1c:	f7ff f98a 	bl	c1034 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c1d20:	7923      	ldrb	r3, [r4, #4]
   c1d22:	079e      	lsls	r6, r3, #30
   c1d24:	d507      	bpl.n	c1d36 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c1d26:	492d      	ldr	r1, [pc, #180]	; (c1ddc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c1d28:	2202      	movs	r2, #2
   c1d2a:	a801      	add	r0, sp, #4
   c1d2c:	f001 fbcc 	bl	c34c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1d30:	68e1      	ldr	r1, [r4, #12]
   c1d32:	f001 fb47 	bl	c33c4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c1d36:	7923      	ldrb	r3, [r4, #4]
   c1d38:	0758      	lsls	r0, r3, #29
   c1d3a:	d514      	bpl.n	c1d66 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c1d3c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c1d3e:	4633      	mov	r3, r6
   c1d40:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c1d42:	f813 2b01 	ldrb.w	r2, [r3], #1
   c1d46:	b12a      	cbz	r2, c1d54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c1d48:	2a20      	cmp	r2, #32
   c1d4a:	d101      	bne.n	c1d50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c1d4c:	461e      	mov	r6, r3
   c1d4e:	e7f7      	b.n	c1d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c1d50:	2a28      	cmp	r2, #40	; 0x28
   c1d52:	d1f5      	bne.n	c1d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c1d54:	4922      	ldr	r1, [pc, #136]	; (c1de0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c1d56:	2202      	movs	r2, #2
   c1d58:	a801      	add	r0, sp, #4
   c1d5a:	f001 fbb5 	bl	c34c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1d5e:	1bba      	subs	r2, r7, r6
   c1d60:	4631      	mov	r1, r6
   c1d62:	f001 fbc1 	bl	c34e8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c1d66:	7923      	ldrb	r3, [r4, #4]
   c1d68:	0719      	lsls	r1, r3, #28
   c1d6a:	d507      	bpl.n	c1d7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c1d6c:	491d      	ldr	r1, [pc, #116]	; (c1de4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c1d6e:	2201      	movs	r2, #1
   c1d70:	a801      	add	r0, sp, #4
   c1d72:	f001 fba9 	bl	c34c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1d76:	6961      	ldr	r1, [r4, #20]
   c1d78:	f001 fb36 	bl	c33e8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c1d7c:	7923      	ldrb	r3, [r4, #4]
   c1d7e:	06da      	lsls	r2, r3, #27
   c1d80:	d508      	bpl.n	c1d94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c1d82:	2204      	movs	r2, #4
   c1d84:	4918      	ldr	r1, [pc, #96]	; (c1de8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c1d86:	eb0d 0002 	add.w	r0, sp, r2
   c1d8a:	f001 fb9d 	bl	c34c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1d8e:	69a1      	ldr	r1, [r4, #24]
   c1d90:	f001 fb18 	bl	c33c4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c1d94:	7923      	ldrb	r3, [r4, #4]
   c1d96:	069b      	lsls	r3, r3, #26
   c1d98:	d507      	bpl.n	c1daa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c1d9a:	4914      	ldr	r1, [pc, #80]	; (c1dec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c1d9c:	2206      	movs	r2, #6
   c1d9e:	a801      	add	r0, sp, #4
   c1da0:	f001 fb92 	bl	c34c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1da4:	69e1      	ldr	r1, [r4, #28]
   c1da6:	f7ff f945 	bl	c1034 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c1daa:	a801      	add	r0, sp, #4
   c1dac:	f001 fae7 	bl	c337e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c1db0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c1db2:	490f      	ldr	r1, [pc, #60]	; (c1df0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c1db4:	6803      	ldr	r3, [r0, #0]
   c1db6:	2202      	movs	r2, #2
   c1db8:	68db      	ldr	r3, [r3, #12]
   c1dba:	4798      	blx	r3
}
   c1dbc:	b005      	add	sp, #20
   c1dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c1dc2:	bf00      	nop
   c1dc4:	2003e708 	.word	0x2003e708
   c1dc8:	000c92b0 	.word	0x000c92b0
   c1dcc:	000c9248 	.word	0x000c9248
   c1dd0:	000c6266 	.word	0x000c6266
   c1dd4:	000c9630 	.word	0x000c9630
   c1dd8:	000c9238 	.word	0x000c9238
   c1ddc:	000c9299 	.word	0x000c9299
   c1de0:	000c6b77 	.word	0x000c6b77
   c1de4:	000c6147 	.word	0x000c6147
   c1de8:	000c929c 	.word	0x000c929c
   c1dec:	000c92a1 	.word	0x000c92a1
   c1df0:	000c9296 	.word	0x000c9296

000c1df4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c1df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c1df8:	4a15      	ldr	r2, [pc, #84]	; (c1e50 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c1dfa:	f8df 8060 	ldr.w	r8, [pc, #96]	; c1e5c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c1dfe:	e9d2 6300 	ldrd	r6, r3, [r2]
   c1e02:	1980      	adds	r0, r0, r6
   c1e04:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c1e08:	4b12      	ldr	r3, [pc, #72]	; (c1e54 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c1e0a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c1e0e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c1e12:	1986      	adds	r6, r0, r6
   c1e14:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c1e18:	42bb      	cmp	r3, r7
   c1e1a:	bf08      	it	eq
   c1e1c:	42b2      	cmpeq	r2, r6
{
   c1e1e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c1e20:	d013      	beq.n	c1e4a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c1e22:	a903      	add	r1, sp, #12
   c1e24:	4668      	mov	r0, sp
   c1e26:	e9cd 6700 	strd	r6, r7, [sp]
   c1e2a:	f7fe fb05 	bl	c0438 <localtime_r>
	calendar_time.tm_year += 1900;
   c1e2e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1e30:	4d09      	ldr	r5, [pc, #36]	; (c1e58 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c1e32:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1e36:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c1e38:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c1e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c1e42:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1e46:	6823      	ldr	r3, [r4, #0]
   c1e48:	602b      	str	r3, [r5, #0]
    }
}
   c1e4a:	b00c      	add	sp, #48	; 0x30
   c1e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1e50:	2003e698 	.word	0x2003e698
   c1e54:	2003e690 	.word	0x2003e690
   c1e58:	2003e668 	.word	0x2003e668
   c1e5c:	2003e6a0 	.word	0x2003e6a0

000c1e60 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   c1e60:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1e62:	2000      	movs	r0, #0
   c1e64:	f7fe fa60 	bl	c0328 <spark_sync_time_pending>
   c1e68:	b128      	cbz	r0, c1e76 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   c1e6a:	f7fe fa3d 	bl	c02e8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1e6e:	f080 0001 	eor.w	r0, r0, #1
   c1e72:	b2c0      	uxtb	r0, r0
    }
   c1e74:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1e76:	2001      	movs	r0, #1
   c1e78:	e7fc      	b.n	c1e74 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c1e7c <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   c1e7c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c1e7e:	f7ff ffb9 	bl	c1df4 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   c1e82:	4b01      	ldr	r3, [pc, #4]	; (c1e88 <_ZN9TimeClass4hourEx+0xc>)
   c1e84:	6898      	ldr	r0, [r3, #8]
   c1e86:	bd08      	pop	{r3, pc}
   c1e88:	2003e668 	.word	0x2003e668

000c1e8c <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   c1e8c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c1e8e:	f7ff ffb1 	bl	c1df4 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   c1e92:	4b01      	ldr	r3, [pc, #4]	; (c1e98 <_ZN9TimeClass3dayEx+0xc>)
   c1e94:	68d8      	ldr	r0, [r3, #12]
   c1e96:	bd08      	pop	{r3, pc}
   c1e98:	2003e668 	.word	0x2003e668

000c1e9c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   c1e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   c1e9e:	4602      	mov	r2, r0
   c1ea0:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   c1ea2:	4668      	mov	r0, sp
    struct timeval tv = {
   c1ea4:	2100      	movs	r1, #0
    };
   c1ea6:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   c1eaa:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   c1eae:	f7fd fecb 	bl	bfc48 <hal_rtc_set_time>
   c1eb2:	4602      	mov	r2, r0
   c1eb4:	b910      	cbnz	r0, c1ebc <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   c1eb6:	4601      	mov	r1, r0
   c1eb8:	f7fe f96e 	bl	c0198 <system_notify_time_changed>
    }
}
   c1ebc:	b005      	add	sp, #20
   c1ebe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1ec4 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   c1ec4:	b530      	push	{r4, r5, lr}
   c1ec6:	b093      	sub	sp, #76	; 0x4c
   c1ec8:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   c1ecc:	4b19      	ldr	r3, [pc, #100]	; (c1f34 <_ZN9TimeClass7timeStrEx+0x70>)
{
   c1ece:	4604      	mov	r4, r0
    t += time_zone_cache;
   c1ed0:	e9d3 1000 	ldrd	r1, r0, [r3]
   c1ed4:	9b01      	ldr	r3, [sp, #4]
   c1ed6:	1852      	adds	r2, r2, r1
   c1ed8:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   c1edc:	4816      	ldr	r0, [pc, #88]	; (c1f38 <_ZN9TimeClass7timeStrEx+0x74>)
   c1ede:	e9d0 1000 	ldrd	r1, r0, [r0]
   c1ee2:	1852      	adds	r2, r2, r1
   c1ee4:	eb43 0300 	adc.w	r3, r3, r0
   c1ee8:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   c1eec:	2224      	movs	r2, #36	; 0x24
   c1eee:	eb0d 0002 	add.w	r0, sp, r2
   c1ef2:	2100      	movs	r1, #0
   c1ef4:	f003 fa8c 	bl	c5410 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   c1ef8:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   c1efa:	a909      	add	r1, sp, #36	; 0x24
   c1efc:	4668      	mov	r0, sp
   c1efe:	f7fe fa9b 	bl	c0438 <localtime_r>
    char ascstr[26] = {};
   c1f02:	2216      	movs	r2, #22
   c1f04:	4629      	mov	r1, r5
   c1f06:	a803      	add	r0, sp, #12
   c1f08:	9502      	str	r5, [sp, #8]
   c1f0a:	f003 fa81 	bl	c5410 <memset>
    asctime_r(&calendar_time, ascstr);
   c1f0e:	a902      	add	r1, sp, #8
   c1f10:	a809      	add	r0, sp, #36	; 0x24
   c1f12:	f003 f9fb 	bl	c530c <asctime_r>
    int len = strlen(ascstr);
   c1f16:	a802      	add	r0, sp, #8
   c1f18:	f003 fb45 	bl	c55a6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   c1f1c:	ab12      	add	r3, sp, #72	; 0x48
   c1f1e:	4418      	add	r0, r3
    return String(ascstr);
   c1f20:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   c1f22:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   c1f26:	4620      	mov	r0, r4
   c1f28:	f7fe fd65 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   c1f2c:	4620      	mov	r0, r4
   c1f2e:	b013      	add	sp, #76	; 0x4c
   c1f30:	bd30      	pop	{r4, r5, pc}
   c1f32:	bf00      	nop
   c1f34:	2003e698 	.word	0x2003e698
   c1f38:	2003e690 	.word	0x2003e690

000c1f3c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   c1f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1f40:	b0a4      	sub	sp, #144	; 0x90
   c1f42:	4607      	mov	r7, r0
   c1f44:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   c1f46:	a814      	add	r0, sp, #80	; 0x50
{
   c1f48:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   c1f4a:	223f      	movs	r2, #63	; 0x3f
{
   c1f4c:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   c1f4e:	f003 fb46 	bl	c55de <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   c1f52:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   c1f54:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   c1f56:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   c1f5a:	f003 fb24 	bl	c55a6 <strlen>
   c1f5e:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   c1f60:	bb4c      	cbnz	r4, c1fb6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   c1f62:	4929      	ldr	r1, [pc, #164]	; (c2008 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   c1f64:	a803      	add	r0, sp, #12
   c1f66:	f003 faf8 	bl	c555a <strcpy>
   c1f6a:	ac14      	add	r4, sp, #80	; 0x50
{
   c1f6c:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   c1f6e:	f105 39ff 	add.w	r9, r5, #4294967295
   c1f72:	45b1      	cmp	r9, r6
   c1f74:	d934      	bls.n	c1fe0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   c1f76:	7823      	ldrb	r3, [r4, #0]
   c1f78:	2b25      	cmp	r3, #37	; 0x25
   c1f7a:	f106 0a01 	add.w	sl, r6, #1
   c1f7e:	d117      	bne.n	c1fb0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   c1f80:	7863      	ldrb	r3, [r4, #1]
   c1f82:	2b7a      	cmp	r3, #122	; 0x7a
   c1f84:	d114      	bne.n	c1fb0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   c1f86:	a803      	add	r0, sp, #12
   c1f88:	f003 fb0d 	bl	c55a6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   c1f8c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   c1f8e:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   c1f90:	1830      	adds	r0, r6, r0
   c1f92:	4418      	add	r0, r3
   c1f94:	eba9 0206 	sub.w	r2, r9, r6
   c1f98:	1ca1      	adds	r1, r4, #2
   c1f9a:	f003 fa11 	bl	c53c0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   c1f9e:	462a      	mov	r2, r5
   c1fa0:	a903      	add	r1, sp, #12
   c1fa2:	4620      	mov	r0, r4
   c1fa4:	f003 fa0c 	bl	c53c0 <memcpy>
            len = strlen(format_str);
   c1fa8:	a814      	add	r0, sp, #80	; 0x50
   c1faa:	f003 fafc 	bl	c55a6 <strlen>
   c1fae:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   c1fb0:	3401      	adds	r4, #1
   c1fb2:	4656      	mov	r6, sl
   c1fb4:	e7db      	b.n	c1f6e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   c1fb6:	233c      	movs	r3, #60	; 0x3c
   c1fb8:	fb94 f2f3 	sdiv	r2, r4, r3
   c1fbc:	2a00      	cmp	r2, #0
   c1fbe:	bfb8      	it	lt
   c1fc0:	4252      	neglt	r2, r2
   c1fc2:	fbb2 f1f3 	udiv	r1, r2, r3
   c1fc6:	fb03 2211 	mls	r2, r3, r1, r2
   c1fca:	9200      	str	r2, [sp, #0]
   c1fcc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   c1fd0:	4a0e      	ldr	r2, [pc, #56]	; (c200c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   c1fd2:	fb94 f3f3 	sdiv	r3, r4, r3
   c1fd6:	2110      	movs	r1, #16
   c1fd8:	a803      	add	r0, sp, #12
   c1fda:	f7fe f9ed 	bl	c03b8 <snprintf>
   c1fde:	e7c4      	b.n	c1f6a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   c1fe0:	2100      	movs	r1, #0
   c1fe2:	222e      	movs	r2, #46	; 0x2e
   c1fe4:	a808      	add	r0, sp, #32
   c1fe6:	9107      	str	r1, [sp, #28]
   c1fe8:	f003 fa12 	bl	c5410 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   c1fec:	4643      	mov	r3, r8
   c1fee:	aa14      	add	r2, sp, #80	; 0x50
   c1ff0:	2132      	movs	r1, #50	; 0x32
   c1ff2:	a807      	add	r0, sp, #28
   c1ff4:	f7fe fa18 	bl	c0428 <strftime>
    return String(buf);
   c1ff8:	a907      	add	r1, sp, #28
   c1ffa:	4638      	mov	r0, r7
   c1ffc:	f7fe fcfb 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   c2000:	4638      	mov	r0, r7
   c2002:	b024      	add	sp, #144	; 0x90
   c2004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c2008:	000c7f1f 	.word	0x000c7f1f
   c200c:	000c7f21 	.word	0x000c7f21

000c2010 <_ZN9TimeClass6formatExPKc>:
{
   c2010:	b5f0      	push	{r4, r5, r6, r7, lr}
   c2012:	b08d      	sub	sp, #52	; 0x34
   c2014:	e9cd 2300 	strd	r2, r3, [sp]
   c2018:	9d12      	ldr	r5, [sp, #72]	; 0x48
   c201a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   c201c:	b915      	cbnz	r5, c2024 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   c201e:	4b19      	ldr	r3, [pc, #100]	; (c2084 <_ZN9TimeClass6formatExPKc+0x74>)
   c2020:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   c2022:	b12d      	cbz	r5, c2030 <_ZN9TimeClass6formatExPKc+0x20>
   c2024:	4b18      	ldr	r3, [pc, #96]	; (c2088 <_ZN9TimeClass6formatExPKc+0x78>)
   c2026:	4628      	mov	r0, r5
   c2028:	6819      	ldr	r1, [r3, #0]
   c202a:	f003 fa8c 	bl	c5546 <strcmp>
   c202e:	b938      	cbnz	r0, c2040 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   c2030:	e9dd 2300 	ldrd	r2, r3, [sp]
   c2034:	4620      	mov	r0, r4
   c2036:	f7ff ff45 	bl	c1ec4 <_ZN9TimeClass7timeStrEx>
}
   c203a:	4620      	mov	r0, r4
   c203c:	b00d      	add	sp, #52	; 0x34
   c203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   c2040:	4e12      	ldr	r6, [pc, #72]	; (c208c <_ZN9TimeClass6formatExPKc+0x7c>)
   c2042:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   c2044:	4f12      	ldr	r7, [pc, #72]	; (c2090 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   c2046:	e9d6 3200 	ldrd	r3, r2, [r6]
   c204a:	185b      	adds	r3, r3, r1
   c204c:	9901      	ldr	r1, [sp, #4]
   c204e:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   c2052:	e9d7 0100 	ldrd	r0, r1, [r7]
   c2056:	181b      	adds	r3, r3, r0
   c2058:	eb42 0201 	adc.w	r2, r2, r1
   c205c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   c2060:	2100      	movs	r1, #0
   c2062:	2224      	movs	r2, #36	; 0x24
   c2064:	a803      	add	r0, sp, #12
   c2066:	f003 f9d3 	bl	c5410 <memset>
    localtime_r(&t, &calendar_time);
   c206a:	a903      	add	r1, sp, #12
   c206c:	4668      	mov	r0, sp
   c206e:	f7fe f9e3 	bl	c0438 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   c2072:	6832      	ldr	r2, [r6, #0]
   c2074:	683b      	ldr	r3, [r7, #0]
   c2076:	a903      	add	r1, sp, #12
   c2078:	4413      	add	r3, r2
   c207a:	4620      	mov	r0, r4
   c207c:	462a      	mov	r2, r5
   c207e:	f7ff ff5d 	bl	c1f3c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   c2082:	e7da      	b.n	c203a <_ZN9TimeClass6formatExPKc+0x2a>
   c2084:	2003e664 	.word	0x2003e664
   c2088:	2003ace4 	.word	0x2003ace4
   c208c:	2003e698 	.word	0x2003e698
   c2090:	2003e690 	.word	0x2003e690

000c2094 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   c2094:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c2096:	2000      	movs	r0, #0
   c2098:	f7fd fdbe 	bl	bfc18 <hal_rtc_time_is_valid>
    if (rtcstate)
   c209c:	4604      	mov	r4, r0
   c209e:	b9a0      	cbnz	r0, c20ca <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c20a0:	f7fe f83a 	bl	c0118 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c20a4:	2801      	cmp	r0, #1
   c20a6:	d110      	bne.n	c20ca <_ZN9TimeClass7isValidEv+0x36>
   c20a8:	4620      	mov	r0, r4
   c20aa:	f7fe f86d 	bl	c0188 <system_thread_get_state>
   c20ae:	b960      	cbnz	r0, c20ca <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c20b0:	f7ff fed6 	bl	c1e60 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c20b4:	b910      	cbnz	r0, c20bc <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c20b6:	f7fe f907 	bl	c02c8 <spark_process>
        while (_while() && !_condition()) {
   c20ba:	e7f9      	b.n	c20b0 <_ZN9TimeClass7isValidEv+0x1c>
   c20bc:	f7ff fed0 	bl	c1e60 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c20c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c20c4:	2000      	movs	r0, #0
   c20c6:	f7fd bda7 	b.w	bfc18 <hal_rtc_time_is_valid>
}
   c20ca:	4620      	mov	r0, r4
   c20cc:	bd10      	pop	{r4, pc}

000c20ce <_ZN9TimeClass3nowEv>:
{
   c20ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c20d0:	f7ff ffe0 	bl	c2094 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c20d4:	2210      	movs	r2, #16
   c20d6:	2100      	movs	r1, #0
   c20d8:	4668      	mov	r0, sp
   c20da:	f003 f999 	bl	c5410 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c20de:	2100      	movs	r1, #0
   c20e0:	4668      	mov	r0, sp
   c20e2:	f7fd fda9 	bl	bfc38 <hal_rtc_get_time>
}
   c20e6:	9800      	ldr	r0, [sp, #0]
   c20e8:	b005      	add	sp, #20
   c20ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c20f0 <_ZN9TimeClass4hourEv>:
{
   c20f0:	b508      	push	{r3, lr}
	return hour(now());
   c20f2:	f7ff ffec 	bl	c20ce <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c20f6:	17c1      	asrs	r1, r0, #31
   c20f8:	f7ff fe7c 	bl	c1df4 <_ZL22Refresh_UnixTime_Cachex>
}
   c20fc:	4b01      	ldr	r3, [pc, #4]	; (c2104 <_ZN9TimeClass4hourEv+0x14>)
   c20fe:	6898      	ldr	r0, [r3, #8]
   c2100:	bd08      	pop	{r3, pc}
   c2102:	bf00      	nop
   c2104:	2003e668 	.word	0x2003e668

000c2108 <_ZN9TimeClass6secondEv>:
{
   c2108:	b508      	push	{r3, lr}
	return second(now());
   c210a:	f7ff ffe0 	bl	c20ce <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c210e:	17c1      	asrs	r1, r0, #31
   c2110:	f7ff fe70 	bl	c1df4 <_ZL22Refresh_UnixTime_Cachex>
}
   c2114:	4b01      	ldr	r3, [pc, #4]	; (c211c <_ZN9TimeClass6secondEv+0x14>)
   c2116:	6818      	ldr	r0, [r3, #0]
   c2118:	bd08      	pop	{r3, pc}
   c211a:	bf00      	nop
   c211c:	2003e668 	.word	0x2003e668

000c2120 <_ZN9TimeClass3dayEv>:
{
   c2120:	b508      	push	{r3, lr}
	return day(now());
   c2122:	f7ff ffd4 	bl	c20ce <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c2126:	17c1      	asrs	r1, r0, #31
   c2128:	f7ff fe64 	bl	c1df4 <_ZL22Refresh_UnixTime_Cachex>
}
   c212c:	4b01      	ldr	r3, [pc, #4]	; (c2134 <_ZN9TimeClass3dayEv+0x14>)
   c212e:	68d8      	ldr	r0, [r3, #12]
   c2130:	bd08      	pop	{r3, pc}
   c2132:	bf00      	nop
   c2134:	2003e668 	.word	0x2003e668

000c2138 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c2138:	4b02      	ldr	r3, [pc, #8]	; (c2144 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c213a:	681a      	ldr	r2, [r3, #0]
   c213c:	4b02      	ldr	r3, [pc, #8]	; (c2148 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c213e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c2140:	4770      	bx	lr
   c2142:	bf00      	nop
   c2144:	2003ace4 	.word	0x2003ace4
   c2148:	2003e664 	.word	0x2003e664

000c214c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   c214c:	2100      	movs	r1, #0
   c214e:	f7fd bff3 	b.w	c0138 <system_delay_ms>
	...

000c2154 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c2154:	4b01      	ldr	r3, [pc, #4]	; (c215c <_GLOBAL__sub_I_RGB+0x8>)
   c2156:	2200      	movs	r2, #0
   c2158:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c215a:	4770      	bx	lr
   c215c:	2003e6a8 	.word	0x2003e6a8

000c2160 <_ZN14CellularSignalD1Ev>:
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   c2160:	4770      	bx	lr

000c2162 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   c2162:	7b00      	ldrb	r0, [r0, #12]
   c2164:	4770      	bx	lr

000c2166 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   c2166:	7b03      	ldrb	r3, [r0, #12]
   c2168:	b14b      	cbz	r3, c217e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   c216a:	6903      	ldr	r3, [r0, #16]
   c216c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   c2170:	d005      	beq.n	c217e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   c2172:	6980      	ldr	r0, [r0, #24]
   c2174:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   c2178:	bf18      	it	ne
   c217a:	2001      	movne	r0, #1
   c217c:	4770      	bx	lr
   c217e:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   c2180:	4770      	bx	lr

000c2182 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   c2182:	6803      	ldr	r3, [r0, #0]
   c2184:	6a1b      	ldr	r3, [r3, #32]
   c2186:	4718      	bx	r3

000c2188 <_ZNK14CellularSignal7printToER5Print>:
{
   c2188:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   c218a:	6803      	ldr	r3, [r0, #0]
{
   c218c:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   c218e:	691b      	ldr	r3, [r3, #16]
{
   c2190:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   c2192:	4798      	blx	r3
   c2194:	2102      	movs	r1, #2
   c2196:	4628      	mov	r0, r5
   c2198:	f7fe feb4 	bl	c0f04 <_ZN5Print5printEfi>
    n += p.print(',');
   c219c:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   c219e:	4604      	mov	r4, r0
    n += p.print(',');
   c21a0:	4628      	mov	r0, r5
   c21a2:	f7fe fdb9 	bl	c0d18 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   c21a6:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   c21a8:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   c21aa:	699b      	ldr	r3, [r3, #24]
   c21ac:	4630      	mov	r0, r6
   c21ae:	4798      	blx	r3
   c21b0:	2102      	movs	r1, #2
   c21b2:	4628      	mov	r0, r5
   c21b4:	f7fe fea6 	bl	c0f04 <_ZN5Print5printEfi>
}
   c21b8:	4420      	add	r0, r4
   c21ba:	bd70      	pop	{r4, r5, r6, pc}

000c21bc <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   c21bc:	f1a0 0004 	sub.w	r0, r0, #4
   c21c0:	f7ff bfe2 	b.w	c2188 <_ZNK14CellularSignal7printToER5Print>

000c21c4 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   c21c4:	b510      	push	{r4, lr}
   c21c6:	2120      	movs	r1, #32
   c21c8:	4604      	mov	r4, r0
   c21ca:	f7f1 ff68 	bl	b409e <_ZdlPvj>
   c21ce:	4620      	mov	r0, r4
   c21d0:	bd10      	pop	{r4, pc}
	...

000c21d4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   c21d4:	7b03      	ldrb	r3, [r0, #12]
   c21d6:	b17b      	cbz	r3, c21f8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   c21d8:	6943      	ldr	r3, [r0, #20]
   c21da:	2b00      	cmp	r3, #0
   c21dc:	db0c      	blt.n	c21f8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   c21de:	ee07 3a90 	vmov	s15, r3
   c21e2:	ed9f 7a07 	vldr	s14, [pc, #28]	; c2200 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   c21e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c21ea:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c21ee:	eddf 7a05 	vldr	s15, [pc, #20]	; c2204 <_ZNK14CellularSignal11getStrengthEv+0x30>
   c21f2:	ee20 0a27 	vmul.f32	s0, s0, s15
   c21f6:	4770      	bx	lr
    return -1.0f;
   c21f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   c21fc:	4770      	bx	lr
   c21fe:	bf00      	nop
   c2200:	477fff00 	.word	0x477fff00
   c2204:	42c80000 	.word	0x42c80000

000c2208 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   c2208:	7b03      	ldrb	r3, [r0, #12]
   c220a:	b163      	cbz	r3, c2226 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   c220c:	6903      	ldr	r3, [r0, #16]
   c220e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   c2212:	d008      	beq.n	c2226 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   c2214:	ee07 3a90 	vmov	s15, r3
   c2218:	ed9f 7a04 	vldr	s14, [pc, #16]	; c222c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   c221c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2220:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c2224:	4770      	bx	lr
    return 0.0f;
   c2226:	ed9f 0a02 	vldr	s0, [pc, #8]	; c2230 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   c222a:	4770      	bx	lr
   c222c:	42c80000 	.word	0x42c80000
   c2230:	00000000 	.word	0x00000000

000c2234 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   c2234:	7b03      	ldrb	r3, [r0, #12]
   c2236:	b17b      	cbz	r3, c2258 <_ZNK14CellularSignal10getQualityEv+0x24>
   c2238:	69c3      	ldr	r3, [r0, #28]
   c223a:	2b00      	cmp	r3, #0
   c223c:	db0c      	blt.n	c2258 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   c223e:	ee07 3a90 	vmov	s15, r3
   c2242:	ed9f 7a07 	vldr	s14, [pc, #28]	; c2260 <_ZNK14CellularSignal10getQualityEv+0x2c>
   c2246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c224a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c224e:	eddf 7a05 	vldr	s15, [pc, #20]	; c2264 <_ZNK14CellularSignal10getQualityEv+0x30>
   c2252:	ee20 0a27 	vmul.f32	s0, s0, s15
   c2256:	4770      	bx	lr
    return -1.0f;
   c2258:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   c225c:	4770      	bx	lr
   c225e:	bf00      	nop
   c2260:	477fff00 	.word	0x477fff00
   c2264:	42c80000 	.word	0x42c80000

000c2268 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   c2268:	7b03      	ldrb	r3, [r0, #12]
   c226a:	b163      	cbz	r3, c2286 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   c226c:	6983      	ldr	r3, [r0, #24]
   c226e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   c2272:	d008      	beq.n	c2286 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   c2274:	ee07 3a90 	vmov	s15, r3
   c2278:	ed9f 7a04 	vldr	s14, [pc, #16]	; c228c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   c227c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2280:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c2284:	4770      	bx	lr
    return 0.0f;
   c2286:	ed9f 0a02 	vldr	s0, [pc, #8]	; c2290 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   c228a:	4770      	bx	lr
   c228c:	42c80000 	.word	0x42c80000
   c2290:	00000000 	.word	0x00000000

000c2294 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   c2294:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   c2296:	460d      	mov	r5, r1
   c2298:	f100 0408 	add.w	r4, r0, #8
   c229c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c229e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c22a0:	e895 0003 	ldmia.w	r5, {r0, r1}
   c22a4:	e884 0003 	stmia.w	r4, {r0, r1}
}
   c22a8:	2001      	movs	r0, #1
   c22aa:	bd30      	pop	{r4, r5, pc}

000c22ac <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   c22ac:	6800      	ldr	r0, [r0, #0]
   c22ae:	f000 be79 	b.w	c2fa4 <_ZN7TwoWire4lockEv>

000c22b2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   c22b2:	b510      	push	{r4, lr}
   c22b4:	4604      	mov	r4, r0
      lock_(_lock) {
   c22b6:	6001      	str	r1, [r0, #0]
   c22b8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   c22ba:	b10a      	cbz	r2, c22c0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   c22bc:	f7ff fff6 	bl	c22ac <_ZN9FuelGauge4lockEv>
}
   c22c0:	4620      	mov	r0, r4
   c22c2:	bd10      	pop	{r4, pc}

000c22c4 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   c22c4:	b513      	push	{r0, r1, r4, lr}
   c22c6:	4604      	mov	r4, r0
   c22c8:	9101      	str	r1, [sp, #4]
            return &Wire1;
   c22ca:	f001 fa61 	bl	c3790 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   c22ce:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   c22d0:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   c22d2:	4620      	mov	r0, r4
   c22d4:	f7ff ffed 	bl	c22b2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   c22d8:	4620      	mov	r0, r4
   c22da:	b002      	add	sp, #8
   c22dc:	bd10      	pop	{r4, pc}

000c22de <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   c22de:	6800      	ldr	r0, [r0, #0]
   c22e0:	f000 be69 	b.w	c2fb6 <_ZN7TwoWire6unlockEv>

000c22e4 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   c22e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   c22e8:	4604      	mov	r4, r0
   c22ea:	461d      	mov	r5, r3
   c22ec:	460f      	mov	r7, r1
   c22ee:	4616      	mov	r6, r2
   c22f0:	f7ff ffdc 	bl	c22ac <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   c22f4:	2236      	movs	r2, #54	; 0x36
   c22f6:	2300      	movs	r3, #0
   c22f8:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   c22fc:	6820      	ldr	r0, [r4, #0]
    timeout_ = ms;
   c22fe:	f04f 0801 	mov.w	r8, #1
   c2302:	230a      	movs	r3, #10
   c2304:	4669      	mov	r1, sp
   c2306:	e9cd 8302 	strd	r8, r3, [sp, #8]
   c230a:	f000 fe2f 	bl	c2f6c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   c230e:	6820      	ldr	r0, [r4, #0]
   c2310:	6803      	ldr	r3, [r0, #0]
   c2312:	4639      	mov	r1, r7
   c2314:	689b      	ldr	r3, [r3, #8]
   c2316:	4798      	blx	r3
    i2c_.write(MSB);
   c2318:	6820      	ldr	r0, [r4, #0]
   c231a:	6803      	ldr	r3, [r0, #0]
   c231c:	4631      	mov	r1, r6
   c231e:	689b      	ldr	r3, [r3, #8]
   c2320:	4798      	blx	r3
    i2c_.write(LSB);
   c2322:	6820      	ldr	r0, [r4, #0]
   c2324:	6803      	ldr	r3, [r0, #0]
   c2326:	4629      	mov	r1, r5
   c2328:	689b      	ldr	r3, [r3, #8]
   c232a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   c232c:	4641      	mov	r1, r8
   c232e:	6820      	ldr	r0, [r4, #0]
   c2330:	f000 fe34 	bl	c2f9c <_ZN7TwoWire15endTransmissionEh>
   c2334:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   c2336:	4620      	mov	r0, r4
   c2338:	bf0c      	ite	eq
   c233a:	2500      	moveq	r5, #0
   c233c:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   c2340:	f7ff ffcd 	bl	c22de <_ZN9FuelGauge6unlockEv>
}
   c2344:	4628      	mov	r0, r5
   c2346:	b004      	add	sp, #16
   c2348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c234c <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   c234c:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   c234e:	2240      	movs	r2, #64	; 0x40
   c2350:	2300      	movs	r3, #0
   c2352:	2106      	movs	r1, #6
   c2354:	f7ff ffc6 	bl	c22e4 <_ZN9FuelGauge13writeRegisterEhhh>
}
   c2358:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   c235c:	bd08      	pop	{r3, pc}
	...

000c2360 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c2360:	4b01      	ldr	r3, [pc, #4]	; (c2368 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c2362:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c2364:	4770      	bx	lr
   c2366:	bf00      	nop
   c2368:	2003acec 	.word	0x2003acec

000c236c <serialEventRun>:
{
   c236c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c236e:	4b0b      	ldr	r3, [pc, #44]	; (c239c <serialEventRun+0x30>)
   c2370:	b143      	cbz	r3, c2384 <serialEventRun+0x18>
   c2372:	f000 fc43 	bl	c2bfc <_Z16_fetch_usbserialv>
   c2376:	6803      	ldr	r3, [r0, #0]
   c2378:	691b      	ldr	r3, [r3, #16]
   c237a:	4798      	blx	r3
   c237c:	2800      	cmp	r0, #0
   c237e:	dd01      	ble.n	c2384 <serialEventRun+0x18>
        serialEvent();
   c2380:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c2384:	4b06      	ldr	r3, [pc, #24]	; (c23a0 <serialEventRun+0x34>)
   c2386:	b143      	cbz	r3, c239a <serialEventRun+0x2e>
   c2388:	f001 f984 	bl	c3694 <_Z22__fetch_global_Serial1v>
   c238c:	6803      	ldr	r3, [r0, #0]
   c238e:	691b      	ldr	r3, [r3, #16]
   c2390:	4798      	blx	r3
   c2392:	2800      	cmp	r0, #0
   c2394:	dd01      	ble.n	c239a <serialEventRun+0x2e>
        serialEvent1();
   c2396:	f3af 8000 	nop.w
}
   c239a:	bd08      	pop	{r3, pc}
	...

000c23a4 <_post_loop>:
{
   c23a4:	b508      	push	{r3, lr}
	serialEventRun();
   c23a6:	f7ff ffe1 	bl	c236c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c23aa:	f7fd fc2d 	bl	bfc08 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c23ae:	4b01      	ldr	r3, [pc, #4]	; (c23b4 <_post_loop+0x10>)
   c23b0:	6018      	str	r0, [r3, #0]
}
   c23b2:	bd08      	pop	{r3, pc}
   c23b4:	2003e728 	.word	0x2003e728

000c23b8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c23b8:	4805      	ldr	r0, [pc, #20]	; (c23d0 <_Z33system_initialize_user_backup_ramv+0x18>)
   c23ba:	4a06      	ldr	r2, [pc, #24]	; (c23d4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c23bc:	4906      	ldr	r1, [pc, #24]	; (c23d8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c23be:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c23c0:	1a12      	subs	r2, r2, r0
   c23c2:	f002 fffd 	bl	c53c0 <memcpy>
    __backup_sram_signature = signature;
   c23c6:	4b05      	ldr	r3, [pc, #20]	; (c23dc <_Z33system_initialize_user_backup_ramv+0x24>)
   c23c8:	4a05      	ldr	r2, [pc, #20]	; (c23e0 <_Z33system_initialize_user_backup_ramv+0x28>)
   c23ca:	601a      	str	r2, [r3, #0]
}
   c23cc:	bd08      	pop	{r3, pc}
   c23ce:	bf00      	nop
   c23d0:	2003f400 	.word	0x2003f400
   c23d4:	2003f404 	.word	0x2003f404
   c23d8:	000c97a4 	.word	0x000c97a4
   c23dc:	2003f400 	.word	0x2003f400
   c23e0:	9a271c1e 	.word	0x9a271c1e

000c23e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c23e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c23e6:	2300      	movs	r3, #0
   c23e8:	9300      	str	r3, [sp, #0]
   c23ea:	461a      	mov	r2, r3
   c23ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c23f0:	f7fd fee4 	bl	c01bc <system_ctrl_set_result>
}
   c23f4:	b003      	add	sp, #12
   c23f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c23fc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c23fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c23fe:	8843      	ldrh	r3, [r0, #2]
   c2400:	2b0a      	cmp	r3, #10
   c2402:	d008      	beq.n	c2416 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c2404:	2b50      	cmp	r3, #80	; 0x50
   c2406:	d10b      	bne.n	c2420 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c2408:	4b09      	ldr	r3, [pc, #36]	; (c2430 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c240a:	681b      	ldr	r3, [r3, #0]
   c240c:	b14b      	cbz	r3, c2422 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c240e:	b003      	add	sp, #12
   c2410:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c2414:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c2416:	f7ff ffe5 	bl	c23e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c241a:	b003      	add	sp, #12
   c241c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c2420:	2300      	movs	r3, #0
   c2422:	9300      	str	r3, [sp, #0]
   c2424:	461a      	mov	r2, r3
   c2426:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c242a:	f7fd fec7 	bl	c01bc <system_ctrl_set_result>
}
   c242e:	e7f4      	b.n	c241a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c2430:	2003e6bc 	.word	0x2003e6bc

000c2434 <module_user_init_hook>:
{
   c2434:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c2436:	4812      	ldr	r0, [pc, #72]	; (c2480 <module_user_init_hook+0x4c>)
   c2438:	2100      	movs	r1, #0
   c243a:	f7fd ffed 	bl	c0418 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c243e:	4b11      	ldr	r3, [pc, #68]	; (c2484 <module_user_init_hook+0x50>)
   c2440:	681a      	ldr	r2, [r3, #0]
   c2442:	4b11      	ldr	r3, [pc, #68]	; (c2488 <module_user_init_hook+0x54>)
   c2444:	429a      	cmp	r2, r3
   c2446:	4b11      	ldr	r3, [pc, #68]	; (c248c <module_user_init_hook+0x58>)
   c2448:	bf0c      	ite	eq
   c244a:	2201      	moveq	r2, #1
   c244c:	2200      	movne	r2, #0
   c244e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c2450:	d001      	beq.n	c2456 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c2452:	f7ff ffb1 	bl	c23b8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c2456:	f7fd fbbf 	bl	bfbd8 <HAL_RNG_GetRandomNumber>
   c245a:	4604      	mov	r4, r0
    srand(seed);
   c245c:	f002 fff0 	bl	c5440 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c2460:	4b0b      	ldr	r3, [pc, #44]	; (c2490 <module_user_init_hook+0x5c>)
   c2462:	b113      	cbz	r3, c246a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c2464:	4620      	mov	r0, r4
   c2466:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c246a:	2100      	movs	r1, #0
   c246c:	4808      	ldr	r0, [pc, #32]	; (c2490 <module_user_init_hook+0x5c>)
   c246e:	f7fd ff6b 	bl	c0348 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c2472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c2476:	4807      	ldr	r0, [pc, #28]	; (c2494 <module_user_init_hook+0x60>)
   c2478:	2100      	movs	r1, #0
   c247a:	f7fd be95 	b.w	c01a8 <system_ctrl_set_app_request_handler>
   c247e:	bf00      	nop
   c2480:	000c2361 	.word	0x000c2361
   c2484:	2003f400 	.word	0x2003f400
   c2488:	9a271c1e 	.word	0x9a271c1e
   c248c:	2003e6b8 	.word	0x2003e6b8
   c2490:	00000000 	.word	0x00000000
   c2494:	000c23fd 	.word	0x000c23fd

000c2498 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c2498:	4770      	bx	lr

000c249a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   c249a:	2000      	movs	r0, #0
   c249c:	4770      	bx	lr

000c249e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c249e:	b510      	push	{r4, lr}
   c24a0:	2110      	movs	r1, #16
   c24a2:	4604      	mov	r4, r0
   c24a4:	f7f1 fdfb 	bl	b409e <_ZdlPvj>
   c24a8:	4620      	mov	r0, r4
   c24aa:	bd10      	pop	{r4, pc}

000c24ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   c24ac:	b508      	push	{r3, lr}
      { delete this; }
   c24ae:	f7ff fff6 	bl	c249e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   c24b2:	bd08      	pop	{r3, pc}

000c24b4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   c24b4:	b530      	push	{r4, r5, lr}
        type_(type) {
   c24b6:	2200      	movs	r2, #0
   c24b8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   c24bc:	6002      	str	r2, [r0, #0]
   c24be:	8084      	strh	r4, [r0, #4]
   c24c0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   c24c2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c24c4:	680c      	ldr	r4, [r1, #0]
   c24c6:	8085      	strh	r5, [r0, #4]
   c24c8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c24ca:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   c24cc:	bd30      	pop	{r4, r5, pc}

000c24ce <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   c24ce:	b510      	push	{r4, lr}
   c24d0:	4604      	mov	r4, r0
    free((void*)msg_);
   c24d2:	6800      	ldr	r0, [r0, #0]
   c24d4:	f7fd ff50 	bl	c0378 <free>
}
   c24d8:	4620      	mov	r0, r4
   c24da:	bd10      	pop	{r4, pc}

000c24dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   c24dc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   c24de:	68c4      	ldr	r4, [r0, #12]
   c24e0:	b1f4      	cbz	r4, c2520 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   c24e2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   c24e4:	2b02      	cmp	r3, #2
   c24e6:	d103      	bne.n	c24f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   c24e8:	f104 000c 	add.w	r0, r4, #12
   c24ec:	f7ff ffef 	bl	c24ce <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   c24f0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   c24f2:	b135      	cbz	r5, c2502 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   c24f4:	4628      	mov	r0, r5
   c24f6:	f7f1 ff27 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   c24fa:	2110      	movs	r1, #16
   c24fc:	4628      	mov	r0, r5
   c24fe:	f7f1 fdce 	bl	b409e <_ZdlPvj>
   c2502:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   c2504:	b135      	cbz	r5, c2514 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   c2506:	4628      	mov	r0, r5
   c2508:	f7f1 ff1e 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
   c250c:	2110      	movs	r1, #16
   c250e:	4628      	mov	r0, r5
   c2510:	f7f1 fdc5 	bl	b409e <_ZdlPvj>
   c2514:	4620      	mov	r0, r4
   c2516:	2114      	movs	r1, #20
   c2518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c251c:	f7f1 bdbf 	b.w	b409e <_ZdlPvj>
   c2520:	bd38      	pop	{r3, r4, r5, pc}

000c2522 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   c2522:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   c2524:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   c2526:	4668      	mov	r0, sp
   c2528:	f7fe fa65 	bl	c09f6 <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   c252c:	68a3      	ldr	r3, [r4, #8]
   c252e:	b90b      	cbnz	r3, c2534 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   c2530:	f001 f95c 	bl	c37ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c2534:	68e3      	ldr	r3, [r4, #12]
   c2536:	4669      	mov	r1, sp
   c2538:	4620      	mov	r0, r4
   c253a:	4798      	blx	r3
   c253c:	4604      	mov	r4, r0
   c253e:	4668      	mov	r0, sp
   c2540:	f7fe fa0e 	bl	c0960 <_ZN6StringD1Ev>
}
   c2544:	4620      	mov	r0, r4
   c2546:	b004      	add	sp, #16
   c2548:	bd10      	pop	{r4, pc}

000c254a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   c254a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   c254c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   c254e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   c2552:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   c2554:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   c2556:	461a      	mov	r2, r3
   c2558:	4669      	mov	r1, sp
   c255a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   c255c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   c2560:	f8ad 4000 	strh.w	r4, [sp]
   c2564:	f7fd fea8 	bl	c02b8 <spark_function>
}
   c2568:	b004      	add	sp, #16
   c256a:	bd10      	pop	{r4, pc}

000c256c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   c256c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   c256e:	230c      	movs	r3, #12
   c2570:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   c2574:	6803      	ldr	r3, [r0, #0]
   c2576:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   c257a:	7a03      	ldrb	r3, [r0, #8]
   c257c:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   c2580:	6843      	ldr	r3, [r0, #4]
   c2582:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   c2584:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   c2586:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   c2588:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   c258c:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   c258e:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   c2592:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   c2596:	f7fd fedf 	bl	c0358 <spark_cloud_disconnect>
}
   c259a:	b005      	add	sp, #20
   c259c:	f85d fb04 	ldr.w	pc, [sp], #4

000c25a0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c25a0:	680b      	ldr	r3, [r1, #0]
   c25a2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   c25a4:	684b      	ldr	r3, [r1, #4]
   c25a6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   c25a8:	b113      	cbz	r3, c25b0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   c25aa:	685a      	ldr	r2, [r3, #4]
   c25ac:	3201      	adds	r2, #1
   c25ae:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c25b0:	4770      	bx	lr

000c25b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   c25b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c25b4:	4604      	mov	r4, r0
   c25b6:	4668      	mov	r0, sp
   c25b8:	460d      	mov	r5, r1
   c25ba:	f7ff fff1 	bl	c25a0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   c25be:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c25c0:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c25c2:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   c25c4:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   c25c6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c25c8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   c25ca:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   c25cc:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   c25ce:	f7f7 feb6 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   c25d2:	b135      	cbz	r5, c25e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   c25d4:	1d28      	adds	r0, r5, #4
   c25d6:	f7f7 feb2 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c25da:	2108      	movs	r1, #8
   c25dc:	4628      	mov	r0, r5
   c25de:	f7f1 fd5e 	bl	b409e <_ZdlPvj>
        return p;
    }
   c25e2:	4620      	mov	r0, r4
   c25e4:	b003      	add	sp, #12
   c25e6:	bd30      	pop	{r4, r5, pc}

000c25e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   c25e8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c25ea:	b510      	push	{r4, lr}
      if (_M_empty())
   c25ec:	b90a      	cbnz	r2, c25f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   c25ee:	f001 f8fd 	bl	c37ec <_ZSt25__throw_bad_function_callv>
    }
   c25f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c25f6:	68c3      	ldr	r3, [r0, #12]
   c25f8:	4718      	bx	r3

000c25fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c25fa:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c25fc:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   c25fe:	f100 0110 	add.w	r1, r0, #16
   c2602:	f7ff fff1 	bl	c25e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   c2606:	bd08      	pop	{r3, pc}

000c2608 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   c2608:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c260a:	b510      	push	{r4, lr}
      if (_M_empty())
   c260c:	b90a      	cbnz	r2, c2612 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   c260e:	f001 f8ed 	bl	c37ec <_ZSt25__throw_bad_function_callv>
    }
   c2612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c2616:	68c3      	ldr	r3, [r0, #12]
   c2618:	4718      	bx	r3

000c261a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c261a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c261c:	6800      	ldr	r0, [r0, #0]
   c261e:	f100 0110 	add.w	r1, r0, #16
   c2622:	f7ff fff1 	bl	c2608 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   c2626:	bd08      	pop	{r3, pc}

000c2628 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   c2628:	b538      	push	{r3, r4, r5, lr}
   c262a:	2300      	movs	r3, #0
   c262c:	4604      	mov	r4, r0
   c262e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c2630:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   c2632:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c2634:	f7f1 fd2f 	bl	b4096 <_Znwj>
   c2638:	b128      	cbz	r0, c2646 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   c263a:	2301      	movs	r3, #1
   c263c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   c2640:	4b02      	ldr	r3, [pc, #8]	; (c264c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   c2642:	6003      	str	r3, [r0, #0]
   c2644:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c2646:	6020      	str	r0, [r4, #0]
	}
   c2648:	4620      	mov	r0, r4
   c264a:	bd38      	pop	{r3, r4, r5, pc}
   c264c:	000c9380 	.word	0x000c9380

000c2650 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   c2650:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c2652:	2300      	movs	r3, #0
   c2654:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c2656:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c2658:	4604      	mov	r4, r0
   c265a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c265c:	b12b      	cbz	r3, c266a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c265e:	2202      	movs	r2, #2
   c2660:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c2662:	68eb      	ldr	r3, [r5, #12]
   c2664:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c2666:	68ab      	ldr	r3, [r5, #8]
   c2668:	60a3      	str	r3, [r4, #8]
    }
   c266a:	4620      	mov	r0, r4
   c266c:	bd38      	pop	{r3, r4, r5, pc}
	...

000c2670 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   c2670:	b5f0      	push	{r4, r5, r6, r7, lr}
   c2672:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   c2674:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   c2676:	4668      	mov	r0, sp
   c2678:	f7ff ff1c 	bl	c24b4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c267c:	f04f 0302 	mov.w	r3, #2
   c2680:	e8d4 2f4f 	ldrexb	r2, [r4]
   c2684:	2a00      	cmp	r2, #0
   c2686:	d103      	bne.n	c2690 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   c2688:	e8c4 3f41 	strexb	r1, r3, [r4]
   c268c:	2900      	cmp	r1, #0
   c268e:	d1f7      	bne.n	c2680 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   c2690:	d125      	bne.n	c26de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   c2692:	f104 050c 	add.w	r5, r4, #12
   c2696:	4669      	mov	r1, sp
   c2698:	4628      	mov	r0, r5
   c269a:	f7ff ff0b 	bl	c24b4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   c269e:	f3bf 8f5b 	dmb	ish
   c26a2:	2301      	movs	r3, #1
   c26a4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c26a6:	2000      	movs	r0, #0
   c26a8:	f104 0308 	add.w	r3, r4, #8
   c26ac:	f3bf 8f5b 	dmb	ish
   c26b0:	e853 6f00 	ldrex	r6, [r3]
   c26b4:	e843 0200 	strex	r2, r0, [r3]
   c26b8:	2a00      	cmp	r2, #0
   c26ba:	d1f9      	bne.n	c26b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   c26bc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c26c0:	b16e      	cbz	r6, c26de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   c26c2:	f7fd fd51 	bl	c0168 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c26c6:	b178      	cbz	r0, c26e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c26c8:	4629      	mov	r1, r5
   c26ca:	4630      	mov	r0, r6
   c26cc:	f7ff ff8c 	bl	c25e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   c26d0:	4630      	mov	r0, r6
   c26d2:	f7f1 fe39 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c26d6:	2110      	movs	r1, #16
   c26d8:	4630      	mov	r0, r6
   c26da:	f7f1 fce0 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   c26de:	4668      	mov	r0, sp
   c26e0:	f7ff fef5 	bl	c24ce <_ZN8particle5ErrorD1Ev>
    }
   c26e4:	b009      	add	sp, #36	; 0x24
   c26e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   c26e8:	4631      	mov	r1, r6
   c26ea:	a802      	add	r0, sp, #8
   c26ec:	f7ff ffb0 	bl	c2650 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c26f0:	68e0      	ldr	r0, [r4, #12]
   c26f2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c26f6:	b108      	cbz	r0, c26fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   c26f8:	f002 ff38 	bl	c556c <strdup>
        type_(type) {
   c26fc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c26fe:	2010      	movs	r0, #16
   c2700:	f8ad 501c 	strh.w	r5, [sp, #28]
   c2704:	f7f1 fcc7 	bl	b4096 <_Znwj>
   c2708:	4605      	mov	r5, r0
   c270a:	b1e8      	cbz	r0, c2748 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   c270c:	2700      	movs	r7, #0
   c270e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c2710:	2018      	movs	r0, #24
   c2712:	f7f1 fcc0 	bl	b4096 <_Znwj>
   c2716:	4604      	mov	r4, r0
   c2718:	b188      	cbz	r0, c273e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   c271a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   c271c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c271e:	a802      	add	r0, sp, #8
   c2720:	f7f7 fe9d 	bl	ba45e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c2724:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   c2726:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c2728:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c272a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c272c:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   c272e:	a906      	add	r1, sp, #24
   c2730:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c2732:	60e3      	str	r3, [r4, #12]
   c2734:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   c2738:	9205      	str	r2, [sp, #20]
   c273a:	f7ff febb 	bl	c24b4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   c273e:	4b08      	ldr	r3, [pc, #32]	; (c2760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   c2740:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c2742:	4b08      	ldr	r3, [pc, #32]	; (c2764 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c2744:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c2746:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   c2748:	a806      	add	r0, sp, #24
   c274a:	f7ff fec0 	bl	c24ce <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c274e:	a802      	add	r0, sp, #8
   c2750:	f7f1 fdfa 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c2754:	2200      	movs	r2, #0
   c2756:	4629      	mov	r1, r5
   c2758:	4803      	ldr	r0, [pc, #12]	; (c2768 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   c275a:	f7fd fd0d 	bl	c0178 <application_thread_invoke>
   c275e:	e7b7      	b.n	c26d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   c2760:	000c25fb 	.word	0x000c25fb
   c2764:	000c287d 	.word	0x000c287d
   c2768:	000c2e45 	.word	0x000c2e45

000c276c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   c276c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2770:	b08b      	sub	sp, #44	; 0x2c
   c2772:	4605      	mov	r5, r0
   c2774:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   c2778:	460f      	mov	r7, r1
   c277a:	4690      	mov	r8, r2
   c277c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c277e:	f7fd fdb3 	bl	c02e8 <spark_cloud_flag_connected>
   c2782:	ae07      	add	r6, sp, #28
    if (!connected()) {
   c2784:	4683      	mov	fp, r0
   c2786:	bb38      	cbnz	r0, c27d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   c2788:	f64f 732e 	movw	r3, #65326	; 0xff2e
   c278c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c278e:	a905      	add	r1, sp, #20
   c2790:	4630      	mov	r0, r6
   c2792:	f8ad 3018 	strh.w	r3, [sp, #24]
   c2796:	f7ff fe8d 	bl	c24b4 <_ZN8particle5ErrorC1EOS0_>
   c279a:	2014      	movs	r0, #20
   c279c:	f7f1 fc7b 	bl	b4096 <_Znwj>
   c27a0:	4604      	mov	r4, r0
   c27a2:	b148      	cbz	r0, c27b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   c27a4:	2302      	movs	r3, #2
   c27a6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c27a8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c27aa:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c27ae:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   c27b0:	4631      	mov	r1, r6
   c27b2:	300c      	adds	r0, #12
   c27b4:	f7ff fe7e 	bl	c24b4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c27b8:	4628      	mov	r0, r5
	: __shared_count(__p)
   c27ba:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c27bc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   c27c0:	f7ff ff32 	bl	c2628 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c27c4:	4630      	mov	r0, r6
   c27c6:	f7ff fe82 	bl	c24ce <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   c27ca:	a805      	add	r0, sp, #20
   c27cc:	f7ff fe7f 	bl	c24ce <_ZN8particle5ErrorD1Ev>
}
   c27d0:	4628      	mov	r0, r5
   c27d2:	b00b      	add	sp, #44	; 0x2c
   c27d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   c27d8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   c27da:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   c27dc:	2014      	movs	r0, #20
   c27de:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   c27e2:	9307      	str	r3, [sp, #28]
   c27e4:	f7f1 fc57 	bl	b4096 <_Znwj>
   c27e8:	4601      	mov	r1, r0
   c27ea:	b118      	cbz	r0, c27f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c27ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c27f0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c27f2:	7044      	strb	r4, [r0, #1]
   c27f4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c27f6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   c27f8:	f7ff ff16 	bl	c2628 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   c27fc:	4b1e      	ldr	r3, [pc, #120]	; (c2878 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   c27fe:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   c2800:	2008      	movs	r0, #8
   c2802:	f7f1 fc48 	bl	b4096 <_Znwj>
   c2806:	4604      	mov	r4, r0
   c2808:	b110      	cbz	r0, c2810 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   c280a:	a903      	add	r1, sp, #12
   c280c:	f7ff fec8 	bl	c25a0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   c2810:	9600      	str	r6, [sp, #0]
   c2812:	fa5f f38a 	uxtb.w	r3, sl
   c2816:	464a      	mov	r2, r9
   c2818:	4641      	mov	r1, r8
   c281a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   c281c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   c281e:	f7fd fd73 	bl	c0308 <spark_send_event>
   c2822:	b9b8      	cbnz	r0, c2854 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   c2824:	9b03      	ldr	r3, [sp, #12]
   c2826:	785b      	ldrb	r3, [r3, #1]
   c2828:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   c282c:	b993      	cbnz	r3, c2854 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   c282e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   c2832:	a905      	add	r1, sp, #20
   c2834:	a803      	add	r0, sp, #12
   c2836:	9205      	str	r2, [sp, #20]
   c2838:	f8ad 3018 	strh.w	r3, [sp, #24]
   c283c:	f7ff ff18 	bl	c2670 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c2840:	a805      	add	r0, sp, #20
   c2842:	f7ff fe44 	bl	c24ce <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   c2846:	a805      	add	r0, sp, #20
   c2848:	9909      	ldr	r1, [sp, #36]	; 0x24
   c284a:	f7ff feb2 	bl	c25b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   c284e:	a806      	add	r0, sp, #24
   c2850:	f7f7 fd75 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c2854:	a903      	add	r1, sp, #12
   c2856:	a805      	add	r0, sp, #20
   c2858:	f7ff fea2 	bl	c25a0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   c285c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c285e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c2860:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   c2862:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   c2864:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c2866:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   c2868:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   c286a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   c286c:	f7f7 fd67 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c2870:	a804      	add	r0, sp, #16
   c2872:	f7f7 fd64 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   c2876:	e7ab      	b.n	c27d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   c2878:	000c28f9 	.word	0x000c28f9

000c287c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   c287c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c287e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c2880:	4605      	mov	r5, r0
	switch (__op)
   c2882:	d103      	bne.n	c288c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c2884:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c2886:	6003      	str	r3, [r0, #0]
      }
   c2888:	2000      	movs	r0, #0
   c288a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   c288c:	2a02      	cmp	r2, #2
   c288e:	d010      	beq.n	c28b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   c2890:	2a03      	cmp	r2, #3
   c2892:	d1f9      	bne.n	c2888 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c2894:	6804      	ldr	r4, [r0, #0]
   c2896:	2c00      	cmp	r4, #0
   c2898:	d0f6      	beq.n	c2888 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   c289a:	f104 0010 	add.w	r0, r4, #16
   c289e:	f7ff fe16 	bl	c24ce <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c28a2:	4620      	mov	r0, r4
   c28a4:	f7f1 fd50 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c28a8:	2118      	movs	r1, #24
   c28aa:	4620      	mov	r0, r4
   c28ac:	f7f1 fbf7 	bl	b409e <_ZdlPvj>
   c28b0:	e7ea      	b.n	c2888 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c28b2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   c28b4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c28b6:	f7f1 fbee 	bl	b4096 <_Znwj>
   c28ba:	4604      	mov	r4, r0
   c28bc:	b150      	cbz	r0, c28d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   c28be:	4631      	mov	r1, r6
   c28c0:	f7ff fec6 	bl	c2650 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c28c4:	6930      	ldr	r0, [r6, #16]
   c28c6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c28ca:	b108      	cbz	r0, c28d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   c28cc:	f002 fe4e 	bl	c556c <strdup>
        type_(type) {
   c28d0:	6120      	str	r0, [r4, #16]
   c28d2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   c28d4:	602c      	str	r4, [r5, #0]
	}
   c28d6:	e7d7      	b.n	c2888 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000c28d8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   c28d8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c28da:	2300      	movs	r3, #0
   c28dc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c28de:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c28e0:	4604      	mov	r4, r0
   c28e2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c28e4:	b12b      	cbz	r3, c28f2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c28e6:	2202      	movs	r2, #2
   c28e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c28ea:	68eb      	ldr	r3, [r5, #12]
   c28ec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c28ee:	68ab      	ldr	r3, [r5, #8]
   c28f0:	60a3      	str	r3, [r4, #8]
    }
   c28f2:	4620      	mov	r0, r4
   c28f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000c28f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   c28f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   c28fa:	b089      	sub	sp, #36	; 0x24
   c28fc:	4604      	mov	r4, r0
   c28fe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   c2900:	a801      	add	r0, sp, #4
   c2902:	4611      	mov	r1, r2
   c2904:	f7ff fe55 	bl	c25b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   c2908:	b1a4      	cbz	r4, c2934 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   c290a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c290c:	b11d      	cbz	r5, c2916 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   c290e:	4628      	mov	r0, r5
   c2910:	f002 fe2c 	bl	c556c <strdup>
   c2914:	4605      	mov	r5, r0
   c2916:	a801      	add	r0, sp, #4
   c2918:	a903      	add	r1, sp, #12
        type_(type) {
   c291a:	9503      	str	r5, [sp, #12]
   c291c:	f8ad 4010 	strh.w	r4, [sp, #16]
   c2920:	f7ff fea6 	bl	c2670 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c2924:	a803      	add	r0, sp, #12
   c2926:	f7ff fdd2 	bl	c24ce <_ZN8particle5ErrorD1Ev>
   c292a:	a802      	add	r0, sp, #8
   c292c:	f7f7 fd07 	bl	ba33e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c2930:	b009      	add	sp, #36	; 0x24
   c2932:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   c2934:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c2936:	2301      	movs	r3, #1
   c2938:	e8d5 2f4f 	ldrexb	r2, [r5]
   c293c:	2a00      	cmp	r2, #0
   c293e:	d103      	bne.n	c2948 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   c2940:	e8c5 3f41 	strexb	r1, r3, [r5]
   c2944:	2900      	cmp	r1, #0
   c2946:	d1f7      	bne.n	c2938 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   c2948:	d1ef      	bne.n	c292a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   c294a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   c294c:	f3bf 8f5b 	dmb	ish
   c2950:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c2952:	1d2b      	adds	r3, r5, #4
   c2954:	f3bf 8f5b 	dmb	ish
   c2958:	e853 6f00 	ldrex	r6, [r3]
   c295c:	e843 4200 	strex	r2, r4, [r3]
   c2960:	2a00      	cmp	r2, #0
   c2962:	d1f9      	bne.n	c2958 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   c2964:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c2968:	2e00      	cmp	r6, #0
   c296a:	d0de      	beq.n	c292a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   c296c:	4620      	mov	r0, r4
   c296e:	f7fd fbfb 	bl	c0168 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c2972:	4607      	mov	r7, r0
   c2974:	b160      	cbz	r0, c2990 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c2976:	f105 010c 	add.w	r1, r5, #12
   c297a:	4630      	mov	r0, r6
   c297c:	f7ff fe44 	bl	c2608 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   c2980:	4630      	mov	r0, r6
   c2982:	f7f1 fce1 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c2986:	2110      	movs	r1, #16
   c2988:	4630      	mov	r0, r6
   c298a:	f7f1 fb88 	bl	b409e <_ZdlPvj>
   c298e:	e7cc      	b.n	c292a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   c2990:	4631      	mov	r1, r6
   c2992:	a803      	add	r0, sp, #12
   c2994:	f7ff ffa0 	bl	c28d8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   c2998:	7b2b      	ldrb	r3, [r5, #12]
   c299a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c299e:	2010      	movs	r0, #16
   c29a0:	f7f1 fb79 	bl	b4096 <_Znwj>
   c29a4:	4605      	mov	r5, r0
   c29a6:	b1d0      	cbz	r0, c29de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   c29a8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c29aa:	2014      	movs	r0, #20
   c29ac:	f7f1 fb73 	bl	b4096 <_Znwj>
   c29b0:	4604      	mov	r4, r0
   c29b2:	b178      	cbz	r0, c29d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   c29b4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c29b6:	4601      	mov	r1, r0
   c29b8:	a803      	add	r0, sp, #12
   c29ba:	f7f7 fd50 	bl	ba45e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c29be:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c29c0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c29c2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c29c4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   c29c6:	9205      	str	r2, [sp, #20]
   c29c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c29ca:	60e3      	str	r3, [r4, #12]
   c29cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   c29d0:	9206      	str	r2, [sp, #24]
   c29d2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   c29d4:	4b06      	ldr	r3, [pc, #24]	; (c29f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   c29d6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c29d8:	4b06      	ldr	r3, [pc, #24]	; (c29f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c29da:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c29dc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   c29de:	a803      	add	r0, sp, #12
   c29e0:	f7f1 fcb2 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c29e4:	2200      	movs	r2, #0
   c29e6:	4629      	mov	r1, r5
   c29e8:	4803      	ldr	r0, [pc, #12]	; (c29f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   c29ea:	f7fd fbc5 	bl	c0178 <application_thread_invoke>
   c29ee:	e7c7      	b.n	c2980 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   c29f0:	000c261b 	.word	0x000c261b
   c29f4:	000c29fd 	.word	0x000c29fd
   c29f8:	000c2e45 	.word	0x000c2e45

000c29fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   c29fc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c29fe:	b570      	push	{r4, r5, r6, lr}
   c2a00:	4604      	mov	r4, r0
	switch (__op)
   c2a02:	d103      	bne.n	c2a0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c2a04:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c2a06:	6003      	str	r3, [r0, #0]
      }
   c2a08:	2000      	movs	r0, #0
   c2a0a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   c2a0c:	2a02      	cmp	r2, #2
   c2a0e:	d00c      	beq.n	c2a2a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   c2a10:	2a03      	cmp	r2, #3
   c2a12:	d1f9      	bne.n	c2a08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c2a14:	6804      	ldr	r4, [r0, #0]
   c2a16:	2c00      	cmp	r4, #0
   c2a18:	d0f6      	beq.n	c2a08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   c2a1a:	4620      	mov	r0, r4
   c2a1c:	f7f1 fc94 	bl	b4348 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c2a20:	2114      	movs	r1, #20
   c2a22:	4620      	mov	r0, r4
   c2a24:	f7f1 fb3b 	bl	b409e <_ZdlPvj>
   c2a28:	e7ee      	b.n	c2a08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c2a2a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   c2a2c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c2a2e:	f7f1 fb32 	bl	b4096 <_Znwj>
   c2a32:	4605      	mov	r5, r0
   c2a34:	b120      	cbz	r0, c2a40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   c2a36:	4631      	mov	r1, r6
   c2a38:	f7ff ff4e 	bl	c28d8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   c2a3c:	7c33      	ldrb	r3, [r6, #16]
   c2a3e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   c2a40:	6025      	str	r5, [r4, #0]
	}
   c2a42:	e7e1      	b.n	c2a08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000c2a44 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   c2a44:	4770      	bx	lr

000c2a46 <_ZN9IPAddressD0Ev>:
   c2a46:	b510      	push	{r4, lr}
   c2a48:	2118      	movs	r1, #24
   c2a4a:	4604      	mov	r4, r0
   c2a4c:	f7f1 fb27 	bl	b409e <_ZdlPvj>
   c2a50:	4620      	mov	r0, r4
   c2a52:	bd10      	pop	{r4, pc}

000c2a54 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   c2a54:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   c2a56:	7d03      	ldrb	r3, [r0, #20]
   c2a58:	2b06      	cmp	r3, #6
{
   c2a5a:	b08d      	sub	sp, #52	; 0x34
   c2a5c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c2a5e:	f100 0704 	add.w	r7, r0, #4
   c2a62:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   c2a66:	d012      	beq.n	c2a8e <_ZNK9IPAddress7printToER5Print+0x3a>
   c2a68:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   c2a6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   c2a70:	220a      	movs	r2, #10
   c2a72:	4630      	mov	r0, r6
   c2a74:	f7fe f95f 	bl	c0d36 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   c2a78:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   c2a7a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   c2a7c:	d019      	beq.n	c2ab2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   c2a7e:	2c00      	cmp	r4, #0
   c2a80:	d0f4      	beq.n	c2a6c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   c2a82:	212e      	movs	r1, #46	; 0x2e
   c2a84:	4630      	mov	r0, r6
   c2a86:	f7fe f947 	bl	c0d18 <_ZN5Print5printEc>
   c2a8a:	4404      	add	r4, r0
   c2a8c:	e7ee      	b.n	c2a6c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c2a8e:	232f      	movs	r3, #47	; 0x2f
   c2a90:	466a      	mov	r2, sp
   c2a92:	4639      	mov	r1, r7
   c2a94:	200a      	movs	r0, #10
		buf[0] = 0;
   c2a96:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c2a9a:	f7fd f9ad 	bl	bfdf8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   c2a9e:	4668      	mov	r0, sp
   c2aa0:	f002 fd81 	bl	c55a6 <strlen>
   c2aa4:	6833      	ldr	r3, [r6, #0]
   c2aa6:	4602      	mov	r2, r0
   c2aa8:	68db      	ldr	r3, [r3, #12]
   c2aaa:	4669      	mov	r1, sp
   c2aac:	4630      	mov	r0, r6
   c2aae:	4798      	blx	r3
   c2ab0:	4604      	mov	r4, r0
    }
    return n;
}
   c2ab2:	4620      	mov	r0, r4
   c2ab4:	b00d      	add	sp, #52	; 0x34
   c2ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c2ab8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   c2ab8:	b510      	push	{r4, lr}
   c2aba:	4b05      	ldr	r3, [pc, #20]	; (c2ad0 <_ZN9IPAddressC1Ev+0x18>)
   c2abc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   c2abe:	2211      	movs	r2, #17
   c2ac0:	f840 3b04 	str.w	r3, [r0], #4
   c2ac4:	2100      	movs	r1, #0
   c2ac6:	f002 fca3 	bl	c5410 <memset>
}
   c2aca:	4620      	mov	r0, r4
   c2acc:	bd10      	pop	{r4, pc}
   c2ace:	bf00      	nop
   c2ad0:	000c939c 	.word	0x000c939c

000c2ad4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   c2ad4:	4603      	mov	r3, r0
   c2ad6:	4a07      	ldr	r2, [pc, #28]	; (c2af4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   c2ad8:	b510      	push	{r4, lr}
   c2ada:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   c2ade:	f101 0210 	add.w	r2, r1, #16
   c2ae2:	f851 4b04 	ldr.w	r4, [r1], #4
   c2ae6:	f843 4b04 	str.w	r4, [r3], #4
   c2aea:	4291      	cmp	r1, r2
   c2aec:	d1f9      	bne.n	c2ae2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   c2aee:	780a      	ldrb	r2, [r1, #0]
   c2af0:	701a      	strb	r2, [r3, #0]
}
   c2af2:	bd10      	pop	{r4, pc}
   c2af4:	000c939c 	.word	0x000c939c

000c2af8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   c2af8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   c2afa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   c2afe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   c2b02:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   c2b06:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   c2b0a:	2304      	movs	r3, #4
   c2b0c:	6041      	str	r1, [r0, #4]
   c2b0e:	7503      	strb	r3, [r0, #20]
}
   c2b10:	bd10      	pop	{r4, pc}
	...

000c2b14 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   c2b14:	b507      	push	{r0, r1, r2, lr}
   c2b16:	4b06      	ldr	r3, [pc, #24]	; (c2b30 <_ZN9IPAddressC1EPKh+0x1c>)
   c2b18:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   c2b1a:	78cb      	ldrb	r3, [r1, #3]
   c2b1c:	9300      	str	r3, [sp, #0]
   c2b1e:	788b      	ldrb	r3, [r1, #2]
   c2b20:	784a      	ldrb	r2, [r1, #1]
   c2b22:	7809      	ldrb	r1, [r1, #0]
   c2b24:	f7ff ffe8 	bl	c2af8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   c2b28:	b003      	add	sp, #12
   c2b2a:	f85d fb04 	ldr.w	pc, [sp], #4
   c2b2e:	bf00      	nop
   c2b30:	000c939c 	.word	0x000c939c

000c2b34 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c2b34:	7441      	strb	r1, [r0, #17]
}
   c2b36:	4770      	bx	lr

000c2b38 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c2b38:	4770      	bx	lr

000c2b3a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c2b3a:	4770      	bx	lr

000c2b3c <_ZN9USBSerial4readEv>:
{
   c2b3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c2b3e:	2100      	movs	r1, #0
   c2b40:	7c00      	ldrb	r0, [r0, #16]
   c2b42:	f7fd fa91 	bl	c0068 <HAL_USB_USART_Receive_Data>
}
   c2b46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c2b4a:	bd08      	pop	{r3, pc}

000c2b4c <_ZN9USBSerial4peekEv>:
{
   c2b4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c2b4e:	2101      	movs	r1, #1
   c2b50:	7c00      	ldrb	r0, [r0, #16]
   c2b52:	f7fd fa89 	bl	c0068 <HAL_USB_USART_Receive_Data>
}
   c2b56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c2b5a:	bd08      	pop	{r3, pc}

000c2b5c <_ZN9USBSerial17availableForWriteEv>:
{
   c2b5c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c2b5e:	7c00      	ldrb	r0, [r0, #16]
   c2b60:	f7fd fa7a 	bl	c0058 <HAL_USB_USART_Available_Data_For_Write>
}
   c2b64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c2b68:	bd08      	pop	{r3, pc}

000c2b6a <_ZN9USBSerial9availableEv>:
{
   c2b6a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c2b6c:	7c00      	ldrb	r0, [r0, #16]
   c2b6e:	f7fd fa6b 	bl	c0048 <HAL_USB_USART_Available_Data>
}
   c2b72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c2b76:	bd08      	pop	{r3, pc}

000c2b78 <_ZN9USBSerial5writeEh>:
{
   c2b78:	b513      	push	{r0, r1, r4, lr}
   c2b7a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c2b7c:	7c00      	ldrb	r0, [r0, #16]
{
   c2b7e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c2b80:	f7fd fa6a 	bl	c0058 <HAL_USB_USART_Available_Data_For_Write>
   c2b84:	2800      	cmp	r0, #0
   c2b86:	9901      	ldr	r1, [sp, #4]
   c2b88:	dc01      	bgt.n	c2b8e <_ZN9USBSerial5writeEh+0x16>
   c2b8a:	7c60      	ldrb	r0, [r4, #17]
   c2b8c:	b120      	cbz	r0, c2b98 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c2b8e:	7c20      	ldrb	r0, [r4, #16]
   c2b90:	f7fd fa72 	bl	c0078 <HAL_USB_USART_Send_Data>
   c2b94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c2b98:	b002      	add	sp, #8
   c2b9a:	bd10      	pop	{r4, pc}

000c2b9c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c2b9c:	7c00      	ldrb	r0, [r0, #16]
   c2b9e:	f7fd ba73 	b.w	c0088 <HAL_USB_USART_Flush_Data>

000c2ba2 <_ZN9USBSerialD0Ev>:
   c2ba2:	b510      	push	{r4, lr}
   c2ba4:	2114      	movs	r1, #20
   c2ba6:	4604      	mov	r4, r0
   c2ba8:	f7f1 fa79 	bl	b409e <_ZdlPvj>
   c2bac:	4620      	mov	r0, r4
   c2bae:	bd10      	pop	{r4, pc}

000c2bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c2bb0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   c2bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c2bb6:	4604      	mov	r4, r0
   c2bb8:	4608      	mov	r0, r1
   c2bba:	2100      	movs	r1, #0
   c2bbc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c2bc0:	4b04      	ldr	r3, [pc, #16]	; (c2bd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c2bc2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c2bc4:	2301      	movs	r3, #1
  _serial = serial;
   c2bc6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c2bc8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c2bca:	4611      	mov	r1, r2
   c2bcc:	f7fd fa24 	bl	c0018 <HAL_USB_USART_Init>
}
   c2bd0:	4620      	mov	r0, r4
   c2bd2:	bd10      	pop	{r4, pc}
   c2bd4:	000c93b0 	.word	0x000c93b0

000c2bd8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c2bd8:	7c00      	ldrb	r0, [r0, #16]
   c2bda:	2200      	movs	r2, #0
   c2bdc:	f7fd ba24 	b.w	c0028 <HAL_USB_USART_Begin>

000c2be0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c2be0:	7c00      	ldrb	r0, [r0, #16]
   c2be2:	f7fd ba29 	b.w	c0038 <HAL_USB_USART_End>

000c2be6 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   c2be6:	7c00      	ldrb	r0, [r0, #16]
   c2be8:	f7fd ba56 	b.w	c0098 <HAL_USB_USART_Is_Connected>

000c2bec <_Z19acquireSerialBufferv>:
{
   c2bec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c2bee:	2214      	movs	r2, #20
{
   c2bf0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c2bf2:	2100      	movs	r1, #0
   c2bf4:	f002 fc0c 	bl	c5410 <memset>
}
   c2bf8:	4620      	mov	r0, r4
   c2bfa:	bd10      	pop	{r4, pc}

000c2bfc <_Z16_fetch_usbserialv>:
{
   c2bfc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c2bfe:	4c0f      	ldr	r4, [pc, #60]	; (c2c3c <_Z16_fetch_usbserialv+0x40>)
{
   c2c00:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c2c02:	a803      	add	r0, sp, #12
   c2c04:	f7ff fff2 	bl	c2bec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c2c08:	7821      	ldrb	r1, [r4, #0]
   c2c0a:	f3bf 8f5b 	dmb	ish
   c2c0e:	f011 0101 	ands.w	r1, r1, #1
   c2c12:	d10f      	bne.n	c2c34 <_Z16_fetch_usbserialv+0x38>
   c2c14:	4620      	mov	r0, r4
   c2c16:	9101      	str	r1, [sp, #4]
   c2c18:	f7f1 fa50 	bl	b40bc <__cxa_guard_acquire>
   c2c1c:	9901      	ldr	r1, [sp, #4]
   c2c1e:	b148      	cbz	r0, c2c34 <_Z16_fetch_usbserialv+0x38>
   c2c20:	aa03      	add	r2, sp, #12
   c2c22:	4807      	ldr	r0, [pc, #28]	; (c2c40 <_Z16_fetch_usbserialv+0x44>)
   c2c24:	f7ff ffc4 	bl	c2bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c2c28:	4620      	mov	r0, r4
   c2c2a:	f7f1 fa4c 	bl	b40c6 <__cxa_guard_release>
   c2c2e:	4805      	ldr	r0, [pc, #20]	; (c2c44 <_Z16_fetch_usbserialv+0x48>)
   c2c30:	f002 fb92 	bl	c5358 <atexit>
	return _usbserial;
}
   c2c34:	4802      	ldr	r0, [pc, #8]	; (c2c40 <_Z16_fetch_usbserialv+0x44>)
   c2c36:	b008      	add	sp, #32
   c2c38:	bd10      	pop	{r4, pc}
   c2c3a:	bf00      	nop
   c2c3c:	2003e6c0 	.word	0x2003e6c0
   c2c40:	2003e6c4 	.word	0x2003e6c4
   c2c44:	000c2b39 	.word	0x000c2b39

000c2c48 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   c2c48:	4700      	bx	r0
	...

000c2c4c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   c2c4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   c2c50:	2400      	movs	r4, #0
{
   c2c52:	461d      	mov	r5, r3
   c2c54:	460f      	mov	r7, r1
   c2c56:	4690      	mov	r8, r2
   c2c58:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   c2c5a:	f7fc ffad 	bl	bfbb8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   c2c5e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   c2c60:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   c2c64:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   c2c68:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   c2c6c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   c2c70:	bfa2      	ittt	ge
   c2c72:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   c2c76:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   c2c7a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   c2c7c:	4907      	ldr	r1, [pc, #28]	; (c2c9c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   c2c7e:	9400      	str	r4, [sp, #0]
   c2c80:	4643      	mov	r3, r8
   c2c82:	463a      	mov	r2, r7
   c2c84:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   c2c86:	bfa8      	it	ge
   c2c88:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   c2c8c:	f7fc ff8c 	bl	bfba8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   c2c90:	fab0 f080 	clz	r0, r0
   c2c94:	0940      	lsrs	r0, r0, #5
   c2c96:	b004      	add	sp, #16
   c2c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2c9c:	000c2c49 	.word	0x000c2c49

000c2ca0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   c2ca0:	2200      	movs	r2, #0
   c2ca2:	6840      	ldr	r0, [r0, #4]
   c2ca4:	4611      	mov	r1, r2
   c2ca6:	f7fd babf 	b.w	c0228 <network_ready>

000c2caa <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   c2caa:	2200      	movs	r2, #0
   c2cac:	6840      	ldr	r0, [r0, #4]
   c2cae:	4611      	mov	r1, r2
   c2cb0:	f7fd bada 	b.w	c0268 <network_listening>

000c2cb4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c2cb4:	2200      	movs	r2, #0
   c2cb6:	6840      	ldr	r0, [r0, #4]
   c2cb8:	4611      	mov	r1, r2
   c2cba:	f7fd bae5 	b.w	c0288 <network_get_listen_timeout>

000c2cbe <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c2cbe:	6840      	ldr	r0, [r0, #4]
   c2cc0:	2200      	movs	r2, #0
   c2cc2:	f7fd bad9 	b.w	c0278 <network_set_listen_timeout>

000c2cc6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c2cc6:	6840      	ldr	r0, [r0, #4]
   c2cc8:	2200      	movs	r2, #0
   c2cca:	f081 0101 	eor.w	r1, r1, #1
   c2cce:	f7fd bac3 	b.w	c0258 <network_listen>

000c2cd2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c2cd2:	2300      	movs	r3, #0
   c2cd4:	6840      	ldr	r0, [r0, #4]
   c2cd6:	461a      	mov	r2, r3
   c2cd8:	4619      	mov	r1, r3
   c2cda:	f7fd bab5 	b.w	c0248 <network_off>

000c2cde <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c2cde:	2300      	movs	r3, #0
   c2ce0:	6840      	ldr	r0, [r0, #4]
   c2ce2:	461a      	mov	r2, r3
   c2ce4:	4619      	mov	r1, r3
   c2ce6:	f7fd baa7 	b.w	c0238 <network_on>

000c2cea <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c2cea:	2200      	movs	r2, #0
   c2cec:	6840      	ldr	r0, [r0, #4]
   c2cee:	4611      	mov	r1, r2
   c2cf0:	f7fd ba8a 	b.w	c0208 <network_connecting>

000c2cf4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c2cf4:	6840      	ldr	r0, [r0, #4]
   c2cf6:	2200      	movs	r2, #0
   c2cf8:	2102      	movs	r1, #2
   c2cfa:	f7fd ba8d 	b.w	c0218 <network_disconnect>

000c2cfe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c2cfe:	2300      	movs	r3, #0
   c2d00:	6840      	ldr	r0, [r0, #4]
   c2d02:	461a      	mov	r2, r3
   c2d04:	f7fd ba78 	b.w	c01f8 <network_connect>

000c2d08 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   c2d08:	b570      	push	{r4, r5, r6, lr}
    CellularSignal() {}
   c2d0a:	4b13      	ldr	r3, [pc, #76]	; (c2d58 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   c2d0c:	6003      	str	r3, [r0, #0]
   c2d0e:	2518      	movs	r5, #24
   c2d10:	3330      	adds	r3, #48	; 0x30
   c2d12:	b086      	sub	sp, #24
   c2d14:	460e      	mov	r6, r1
   c2d16:	6043      	str	r3, [r0, #4]
   c2d18:	462a      	mov	r2, r5
   c2d1a:	2100      	movs	r1, #0
   c2d1c:	4604      	mov	r4, r0
   c2d1e:	3008      	adds	r0, #8
   c2d20:	f002 fb76 	bl	c5410 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   c2d24:	2200      	movs	r2, #0
   c2d26:	6870      	ldr	r0, [r6, #4]
   c2d28:	4611      	mov	r1, r2
   c2d2a:	f7fd fa7d 	bl	c0228 <network_ready>
   c2d2e:	b178      	cbz	r0, c2d50 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   c2d30:	2100      	movs	r1, #0
   c2d32:	462a      	mov	r2, r5
   c2d34:	4668      	mov	r0, sp
   c2d36:	f002 fb6b 	bl	c5410 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   c2d3a:	4669      	mov	r1, sp
   c2d3c:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   c2d3e:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   c2d42:	f7fd f961 	bl	c0008 <cellular_signal>
   c2d46:	b918      	cbnz	r0, c2d50 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   c2d48:	4669      	mov	r1, sp
   c2d4a:	4620      	mov	r0, r4
   c2d4c:	f7ff faa2 	bl	c2294 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   c2d50:	4620      	mov	r0, r4
   c2d52:	b006      	add	sp, #24
   c2d54:	bd70      	pop	{r4, r5, r6, pc}
   c2d56:	bf00      	nop
   c2d58:	000c9344 	.word	0x000c9344

000c2d5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   c2d5c:	4b08      	ldr	r3, [pc, #32]	; (c2d80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   c2d5e:	b510      	push	{r4, lr}
   c2d60:	2428      	movs	r4, #40	; 0x28
   c2d62:	4622      	mov	r2, r4
   c2d64:	4618      	mov	r0, r3
   c2d66:	2100      	movs	r1, #0
   c2d68:	f002 fb52 	bl	c5410 <memset>
   c2d6c:	4b05      	ldr	r3, [pc, #20]	; (c2d84 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   c2d6e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   c2d70:	f04f 32ff 	mov.w	r2, #4294967295
   c2d74:	6042      	str	r2, [r0, #4]
   c2d76:	2204      	movs	r2, #4
   c2d78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   c2d7a:	4a03      	ldr	r2, [pc, #12]	; (c2d88 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   c2d7c:	601a      	str	r2, [r3, #0]
   c2d7e:	bd10      	pop	{r4, pc}
   c2d80:	2003e6e0 	.word	0x2003e6e0
   c2d84:	2003e6d8 	.word	0x2003e6d8
   c2d88:	000c93e0 	.word	0x000c93e0

000c2d8c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c2d8c:	4770      	bx	lr

000c2d8e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c2d8e:	7441      	strb	r1, [r0, #17]
}
   c2d90:	4770      	bx	lr

000c2d92 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c2d92:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c2d94:	7c00      	ldrb	r0, [r0, #16]
   c2d96:	f7fd f86f 	bl	bfe78 <hal_usart_available_data_for_write>
}
   c2d9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c2d9e:	bd08      	pop	{r3, pc}

000c2da0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c2da0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c2da2:	7c00      	ldrb	r0, [r0, #16]
   c2da4:	f7fd f840 	bl	bfe28 <hal_usart_available>
}
   c2da8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c2dac:	bd08      	pop	{r3, pc}

000c2dae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c2dae:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c2db0:	7c00      	ldrb	r0, [r0, #16]
   c2db2:	f7fd f849 	bl	bfe48 <hal_usart_peek>
}
   c2db6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c2dba:	bd08      	pop	{r3, pc}

000c2dbc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c2dbc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c2dbe:	7c00      	ldrb	r0, [r0, #16]
   c2dc0:	f7fd f83a 	bl	bfe38 <hal_usart_read>
}
   c2dc4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c2dc8:	bd08      	pop	{r3, pc}

000c2dca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c2dca:	7c00      	ldrb	r0, [r0, #16]
   c2dcc:	f7fd b844 	b.w	bfe58 <hal_usart_flush>

000c2dd0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c2dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c2dd2:	7c45      	ldrb	r5, [r0, #17]
{
   c2dd4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c2dd6:	b12d      	cbz	r5, c2de4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c2dd8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c2dda:	b003      	add	sp, #12
   c2ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c2de0:	f7fd b81a 	b.w	bfe18 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c2de4:	7c00      	ldrb	r0, [r0, #16]
   c2de6:	9101      	str	r1, [sp, #4]
   c2de8:	f7fd f846 	bl	bfe78 <hal_usart_available_data_for_write>
   c2dec:	2800      	cmp	r0, #0
   c2dee:	9901      	ldr	r1, [sp, #4]
   c2df0:	dcf2      	bgt.n	c2dd8 <_ZN11USARTSerial5writeEh+0x8>
}
   c2df2:	4628      	mov	r0, r5
   c2df4:	b003      	add	sp, #12
   c2df6:	bd30      	pop	{r4, r5, pc}

000c2df8 <_ZN11USARTSerialD0Ev>:
   c2df8:	b510      	push	{r4, lr}
   c2dfa:	2114      	movs	r1, #20
   c2dfc:	4604      	mov	r4, r0
   c2dfe:	f7f1 f94e 	bl	b409e <_ZdlPvj>
   c2e02:	4620      	mov	r0, r4
   c2e04:	bd10      	pop	{r4, pc}
	...

000c2e08 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c2e08:	b510      	push	{r4, lr}
   c2e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c2e0e:	4604      	mov	r4, r0
   c2e10:	4608      	mov	r0, r1
   c2e12:	4611      	mov	r1, r2
   c2e14:	2200      	movs	r2, #0
   c2e16:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c2e1a:	4b04      	ldr	r3, [pc, #16]	; (c2e2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c2e1c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c2e1e:	2301      	movs	r3, #1
  _serial = serial;
   c2e20:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c2e22:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c2e24:	f7fd f838 	bl	bfe98 <hal_usart_init_ex>
}
   c2e28:	4620      	mov	r0, r4
   c2e2a:	bd10      	pop	{r4, pc}
   c2e2c:	000c941c 	.word	0x000c941c

000c2e30 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c2e30:	7c00      	ldrb	r0, [r0, #16]
   c2e32:	2300      	movs	r3, #0
   c2e34:	f7fd b828 	b.w	bfe88 <hal_usart_begin_config>

000c2e38 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c2e38:	2200      	movs	r2, #0
   c2e3a:	f7ff bff9 	b.w	c2e30 <_ZN11USARTSerial5beginEmm>

000c2e3e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c2e3e:	7c00      	ldrb	r0, [r0, #16]
   c2e40:	f7fc bfe2 	b.w	bfe08 <hal_usart_end>

000c2e44 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   c2e44:	b510      	push	{r4, lr}
      if (_M_empty())
   c2e46:	6883      	ldr	r3, [r0, #8]
   c2e48:	4604      	mov	r4, r0
   c2e4a:	b90b      	cbnz	r3, c2e50 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   c2e4c:	f000 fcce 	bl	c37ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c2e50:	68c3      	ldr	r3, [r0, #12]
   c2e52:	4798      	blx	r3
      if (_M_manager)
   c2e54:	68a3      	ldr	r3, [r4, #8]
   c2e56:	b11b      	cbz	r3, c2e60 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   c2e58:	2203      	movs	r2, #3
   c2e5a:	4621      	mov	r1, r4
   c2e5c:	4620      	mov	r0, r4
   c2e5e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   c2e60:	4620      	mov	r0, r4
   c2e62:	2110      	movs	r1, #16
}
   c2e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   c2e68:	f7f1 b919 	b.w	b409e <_ZdlPvj>

000c2e6c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   c2e6c:	4770      	bx	lr

000c2e6e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   c2e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c2e70:	4606      	mov	r6, r0
   c2e72:	4615      	mov	r5, r2
   c2e74:	460c      	mov	r4, r1
   c2e76:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   c2e78:	42bc      	cmp	r4, r7
   c2e7a:	d006      	beq.n	c2e8a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   c2e7c:	6833      	ldr	r3, [r6, #0]
   c2e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
   c2e82:	689b      	ldr	r3, [r3, #8]
   c2e84:	4630      	mov	r0, r6
   c2e86:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   c2e88:	e7f6      	b.n	c2e78 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   c2e8a:	4628      	mov	r0, r5
   c2e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c2e8e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   c2e8e:	7c00      	ldrb	r0, [r0, #16]
   c2e90:	2200      	movs	r2, #0
   c2e92:	f7fd b821 	b.w	bfed8 <hal_i2c_write>

000c2e96 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   c2e96:	7c00      	ldrb	r0, [r0, #16]
   c2e98:	2100      	movs	r1, #0
   c2e9a:	f7fd b825 	b.w	bfee8 <hal_i2c_available>

000c2e9e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   c2e9e:	7c00      	ldrb	r0, [r0, #16]
   c2ea0:	2100      	movs	r1, #0
   c2ea2:	f7fd b829 	b.w	bfef8 <hal_i2c_read>

000c2ea6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   c2ea6:	7c00      	ldrb	r0, [r0, #16]
   c2ea8:	2100      	movs	r1, #0
   c2eaa:	f7fd b82d 	b.w	bff08 <hal_i2c_peek>

000c2eae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   c2eae:	7c00      	ldrb	r0, [r0, #16]
   c2eb0:	2100      	movs	r1, #0
   c2eb2:	f7fd b831 	b.w	bff18 <hal_i2c_flush>

000c2eb6 <_ZN7TwoWireD0Ev>:
   c2eb6:	b510      	push	{r4, lr}
   c2eb8:	2114      	movs	r1, #20
   c2eba:	4604      	mov	r4, r0
   c2ebc:	f7f1 f8ef 	bl	b409e <_ZdlPvj>
   c2ec0:	4620      	mov	r0, r4
   c2ec2:	bd10      	pop	{r4, pc}

000c2ec4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   c2ec4:	b538      	push	{r3, r4, r5, lr}
   c2ec6:	4604      	mov	r4, r0
   c2ec8:	4615      	mov	r5, r2
   c2eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c2ece:	2200      	movs	r2, #0
   c2ed0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c2ed4:	4b09      	ldr	r3, [pc, #36]	; (c2efc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   c2ed6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   c2ed8:	4608      	mov	r0, r1
   c2eda:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   c2edc:	4629      	mov	r1, r5
   c2ede:	f7fd f82b 	bl	bff38 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   c2ee2:	30bf      	adds	r0, #191	; 0xbf
   c2ee4:	d108      	bne.n	c2ef8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   c2ee6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   c2ee8:	07db      	lsls	r3, r3, #31
   c2eea:	d505      	bpl.n	c2ef8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   c2eec:	6868      	ldr	r0, [r5, #4]
   c2eee:	f7fd fa43 	bl	c0378 <free>
    free(conf.tx_buffer);
   c2ef2:	68e8      	ldr	r0, [r5, #12]
   c2ef4:	f7fd fa40 	bl	c0378 <free>
}
   c2ef8:	4620      	mov	r0, r4
   c2efa:	bd38      	pop	{r3, r4, r5, pc}
   c2efc:	000c944c 	.word	0x000c944c

000c2f00 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   c2f00:	2300      	movs	r3, #0
   c2f02:	7c00      	ldrb	r0, [r0, #16]
   c2f04:	461a      	mov	r2, r3
   c2f06:	4619      	mov	r1, r3
   c2f08:	f7fc bfce 	b.w	bfea8 <hal_i2c_begin>

000c2f0c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   c2f0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   c2f0e:	2200      	movs	r2, #0
   c2f10:	2314      	movs	r3, #20
   c2f12:	e9cd 2201 	strd	r2, r2, [sp, #4]
   c2f16:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   c2f1a:	780b      	ldrb	r3, [r1, #0]
   c2f1c:	f88d 3008 	strb.w	r3, [sp, #8]
   c2f20:	684b      	ldr	r3, [r1, #4]
   c2f22:	9303      	str	r3, [sp, #12]
   c2f24:	68cb      	ldr	r3, [r1, #12]
   c2f26:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   c2f28:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   c2f2a:	7a0b      	ldrb	r3, [r1, #8]
   c2f2c:	9305      	str	r3, [sp, #20]
   c2f2e:	a901      	add	r1, sp, #4
   c2f30:	f7fd f81a 	bl	bff68 <hal_i2c_request_ex>
}
   c2f34:	b007      	add	sp, #28
   c2f36:	f85d fb04 	ldr.w	pc, [sp], #4

000c2f3a <_ZN7TwoWire11requestFromEhjh>:
{
   c2f3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   c2f3c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   c2f3e:	f88d 1000 	strb.w	r1, [sp]
   c2f42:	f04f 0164 	mov.w	r1, #100	; 0x64
   c2f46:	9103      	str	r1, [sp, #12]
   c2f48:	bf18      	it	ne
   c2f4a:	2301      	movne	r3, #1
   c2f4c:	4669      	mov	r1, sp
    size_ = size;
   c2f4e:	9201      	str	r2, [sp, #4]
   c2f50:	f88d 3008 	strb.w	r3, [sp, #8]
   c2f54:	f7ff ffda 	bl	c2f0c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   c2f58:	b005      	add	sp, #20
   c2f5a:	f85d fb04 	ldr.w	pc, [sp], #4

000c2f5e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   c2f5e:	7c00      	ldrb	r0, [r0, #16]
   c2f60:	2200      	movs	r2, #0
   c2f62:	f7fc bfa9 	b.w	bfeb8 <hal_i2c_begin_transmission>

000c2f66 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   c2f66:	b2c9      	uxtb	r1, r1
   c2f68:	f7ff bff9 	b.w	c2f5e <_ZN7TwoWire17beginTransmissionEh>

000c2f6c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   c2f6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   c2f6e:	2300      	movs	r3, #0
   c2f70:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   c2f74:	684a      	ldr	r2, [r1, #4]
   c2f76:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   c2f78:	2314      	movs	r3, #20
    };
   c2f7a:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   c2f7c:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   c2f80:	780b      	ldrb	r3, [r1, #0]
    };
   c2f82:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   c2f84:	7a0a      	ldrb	r2, [r1, #8]
   c2f86:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   c2f88:	7c00      	ldrb	r0, [r0, #16]
    };
   c2f8a:	f88d 3008 	strb.w	r3, [sp, #8]
   c2f8e:	aa01      	add	r2, sp, #4
   c2f90:	4619      	mov	r1, r3
   c2f92:	f7fc ff91 	bl	bfeb8 <hal_i2c_begin_transmission>
}
   c2f96:	b007      	add	sp, #28
   c2f98:	f85d fb04 	ldr.w	pc, [sp], #4

000c2f9c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   c2f9c:	7c00      	ldrb	r0, [r0, #16]
   c2f9e:	2200      	movs	r2, #0
   c2fa0:	f7fc bf92 	b.w	bfec8 <hal_i2c_end_transmission>

000c2fa4 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   c2fa4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   c2fa6:	2100      	movs	r1, #0
   c2fa8:	7c00      	ldrb	r0, [r0, #16]
   c2faa:	f7fc ffcd 	bl	bff48 <hal_i2c_lock>
}
   c2fae:	fab0 f080 	clz	r0, r0
   c2fb2:	0940      	lsrs	r0, r0, #5
   c2fb4:	bd08      	pop	{r3, pc}

000c2fb6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   c2fb6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   c2fb8:	2100      	movs	r1, #0
   c2fba:	7c00      	ldrb	r0, [r0, #16]
   c2fbc:	f7fc ffcc 	bl	bff58 <hal_i2c_unlock>
}
   c2fc0:	fab0 f080 	clz	r0, r0
   c2fc4:	0940      	lsrs	r0, r0, #5
   c2fc6:	bd08      	pop	{r3, pc}

000c2fc8 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   c2fc8:	b510      	push	{r4, lr}
  if (0 == max) {
   c2fca:	4604      	mov	r4, r0
   c2fcc:	b128      	cbz	r0, c2fda <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   c2fce:	f002 fa65 	bl	c549c <rand>
   c2fd2:	fb90 f3f4 	sdiv	r3, r0, r4
   c2fd6:	fb03 0414 	mls	r4, r3, r4, r0
}
   c2fda:	4620      	mov	r0, r4
   c2fdc:	bd10      	pop	{r4, pc}

000c2fde <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   c2fde:	4288      	cmp	r0, r1
{
   c2fe0:	b510      	push	{r4, lr}
   c2fe2:	4604      	mov	r4, r0
  if (min >= max) {
   c2fe4:	da03      	bge.n	c2fee <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   c2fe6:	1a08      	subs	r0, r1, r0
   c2fe8:	f7ff ffee 	bl	c2fc8 <_Z6randomi>
   c2fec:	4404      	add	r4, r0
}
   c2fee:	4620      	mov	r0, r4
   c2ff0:	bd10      	pop	{r4, pc}

000c2ff2 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c2ff2:	2300      	movs	r3, #0
   c2ff4:	6840      	ldr	r0, [r0, #4]
   c2ff6:	461a      	mov	r2, r3
   c2ff8:	f7fd b8fe 	b.w	c01f8 <network_connect>

000c2ffc <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c2ffc:	6840      	ldr	r0, [r0, #4]
   c2ffe:	2200      	movs	r2, #0
   c3000:	2102      	movs	r1, #2
   c3002:	f7fd b909 	b.w	c0218 <network_disconnect>

000c3006 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c3006:	2200      	movs	r2, #0
   c3008:	6840      	ldr	r0, [r0, #4]
   c300a:	4611      	mov	r1, r2
   c300c:	f7fd b8fc 	b.w	c0208 <network_connecting>

000c3010 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c3010:	2200      	movs	r2, #0
   c3012:	6840      	ldr	r0, [r0, #4]
   c3014:	4611      	mov	r1, r2
   c3016:	f7fd b907 	b.w	c0228 <network_ready>

000c301a <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c301a:	2300      	movs	r3, #0
   c301c:	6840      	ldr	r0, [r0, #4]
   c301e:	461a      	mov	r2, r3
   c3020:	4619      	mov	r1, r3
   c3022:	f7fd b909 	b.w	c0238 <network_on>

000c3026 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c3026:	2300      	movs	r3, #0
   c3028:	6840      	ldr	r0, [r0, #4]
   c302a:	461a      	mov	r2, r3
   c302c:	4619      	mov	r1, r3
   c302e:	f7fd b90b 	b.w	c0248 <network_off>

000c3032 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c3032:	6840      	ldr	r0, [r0, #4]
   c3034:	2100      	movs	r1, #0
   c3036:	f7fd b92f 	b.w	c0298 <network_is_on>

000c303a <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c303a:	6840      	ldr	r0, [r0, #4]
   c303c:	2100      	movs	r1, #0
   c303e:	f7fd b933 	b.w	c02a8 <network_is_off>

000c3042 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c3042:	6840      	ldr	r0, [r0, #4]
   c3044:	2200      	movs	r2, #0
   c3046:	f081 0101 	eor.w	r1, r1, #1
   c304a:	f7fd b905 	b.w	c0258 <network_listen>

000c304e <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c304e:	6840      	ldr	r0, [r0, #4]
   c3050:	2200      	movs	r2, #0
   c3052:	f7fd b911 	b.w	c0278 <network_set_listen_timeout>

000c3056 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c3056:	2200      	movs	r2, #0
   c3058:	6840      	ldr	r0, [r0, #4]
   c305a:	4611      	mov	r1, r2
   c305c:	f7fd b914 	b.w	c0288 <network_get_listen_timeout>

000c3060 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c3060:	2200      	movs	r2, #0
   c3062:	6840      	ldr	r0, [r0, #4]
   c3064:	4611      	mov	r1, r2
   c3066:	f7fd b8ff 	b.w	c0268 <network_listening>

000c306a <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c306a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c306e:	b095      	sub	sp, #84	; 0x54
   c3070:	4614      	mov	r4, r2
   c3072:	460d      	mov	r5, r1
   c3074:	4607      	mov	r7, r0
    IPAddress addr;
   c3076:	f7ff fd1f 	bl	c2ab8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c307a:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c307c:	221c      	movs	r2, #28
   c307e:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c3080:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c3082:	f002 f9c5 	bl	c5410 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c3086:	2340      	movs	r3, #64	; 0x40
   c3088:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c308a:	4620      	mov	r0, r4
   c308c:	466b      	mov	r3, sp
   c308e:	aa0c      	add	r2, sp, #48	; 0x30
   c3090:	2100      	movs	r1, #0
   c3092:	f7fc fd59 	bl	bfb48 <netdb_getaddrinfo>
    if (!r) {
   c3096:	4604      	mov	r4, r0
   c3098:	2800      	cmp	r0, #0
   c309a:	d14b      	bne.n	c3134 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c309c:	4602      	mov	r2, r0
   c309e:	2101      	movs	r1, #1
   c30a0:	6868      	ldr	r0, [r5, #4]
   c30a2:	f7fd f8c1 	bl	c0228 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c30a6:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c30a8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c30aa:	4622      	mov	r2, r4
   c30ac:	6868      	ldr	r0, [r5, #4]
   c30ae:	f7fd f8bb 	bl	c0228 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c30b2:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c30b4:	4681      	mov	r9, r0
        bool ok = false;
   c30b6:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c30b8:	2e00      	cmp	r6, #0
   c30ba:	d03b      	beq.n	c3134 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c30bc:	2900      	cmp	r1, #0
   c30be:	d139      	bne.n	c3134 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c30c0:	6873      	ldr	r3, [r6, #4]
   c30c2:	2b02      	cmp	r3, #2
   c30c4:	d003      	beq.n	c30ce <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c30c6:	2b0a      	cmp	r3, #10
   c30c8:	d011      	beq.n	c30ee <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c30ca:	69f6      	ldr	r6, [r6, #28]
   c30cc:	e7f4      	b.n	c30b8 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c30ce:	f1b8 0f00 	cmp.w	r8, #0
   c30d2:	d0fa      	beq.n	c30ca <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c30d4:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c30d6:	a806      	add	r0, sp, #24
   c30d8:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c30da:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c30dc:	f7ff fd1a 	bl	c2b14 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c30e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c30e2:	1d3c      	adds	r4, r7, #4
   c30e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c30e6:	682b      	ldr	r3, [r5, #0]
   c30e8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c30ea:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c30ec:	e7ed      	b.n	c30ca <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c30ee:	f1b9 0f00 	cmp.w	r9, #0
   c30f2:	d0ea      	beq.n	c30ca <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c30f4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c30f6:	2210      	movs	r2, #16
   c30f8:	a801      	add	r0, sp, #4
   c30fa:	f002 f989 	bl	c5410 <memset>
                    a.v = 6;
   c30fe:	2306      	movs	r3, #6
   c3100:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c3104:	ad01      	add	r5, sp, #4
   c3106:	f104 0308 	add.w	r3, r4, #8
   c310a:	3418      	adds	r4, #24
   c310c:	6818      	ldr	r0, [r3, #0]
   c310e:	6859      	ldr	r1, [r3, #4]
   c3110:	462a      	mov	r2, r5
   c3112:	c203      	stmia	r2!, {r0, r1}
   c3114:	3308      	adds	r3, #8
   c3116:	42a3      	cmp	r3, r4
   c3118:	4615      	mov	r5, r2
   c311a:	d1f7      	bne.n	c310c <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c311c:	a901      	add	r1, sp, #4
   c311e:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c3120:	ad07      	add	r5, sp, #28
   c3122:	f7ff fcd7 	bl	c2ad4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c3126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c3128:	1d3c      	adds	r4, r7, #4
   c312a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c312c:	682b      	ldr	r3, [r5, #0]
   c312e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c3130:	4649      	mov	r1, r9
   c3132:	e7ca      	b.n	c30ca <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c3134:	9800      	ldr	r0, [sp, #0]
   c3136:	f7fc fcff 	bl	bfb38 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c313a:	4638      	mov	r0, r7
   c313c:	b015      	add	sp, #84	; 0x54
   c313e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000c3144 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c3144:	4b02      	ldr	r3, [pc, #8]	; (c3150 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c3146:	4a03      	ldr	r2, [pc, #12]	; (c3154 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c3148:	601a      	str	r2, [r3, #0]
   c314a:	2200      	movs	r2, #0
   c314c:	605a      	str	r2, [r3, #4]

} // spark
   c314e:	4770      	bx	lr
   c3150:	2003e708 	.word	0x2003e708
   c3154:	000c9474 	.word	0x000c9474

000c3158 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   c3158:	f100 0310 	add.w	r3, r0, #16
   c315c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   c315e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   c3162:	2901      	cmp	r1, #1
   c3164:	4618      	mov	r0, r3
   c3166:	d108      	bne.n	c317a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   c3168:	f853 1c04 	ldr.w	r1, [r3, #-4]
   c316c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   c3170:	3a01      	subs	r2, #1
   c3172:	f103 0310 	add.w	r3, r3, #16
   c3176:	d1f2      	bne.n	c315e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   c3178:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   c317a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   c317c:	bf04      	itt	eq
   c317e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   c3182:	1852      	addeq	r2, r2, r1
   c3184:	e7f4      	b.n	c3170 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000c3186 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   c3186:	b40e      	push	{r1, r2, r3}
   c3188:	b5f0      	push	{r4, r5, r6, r7, lr}
   c318a:	b088      	sub	sp, #32
   c318c:	af00      	add	r7, sp, #0
   c318e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c3192:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   c3194:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c3198:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   c319a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c319c:	462b      	mov	r3, r5
   c319e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   c31a0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c31a2:	f7fd f911 	bl	c03c8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   c31a6:	280f      	cmp	r0, #15
   c31a8:	687a      	ldr	r2, [r7, #4]
   c31aa:	d91a      	bls.n	c31e2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   c31ac:	f100 0308 	add.w	r3, r0, #8
   c31b0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   c31b4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   c31b6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c31ba:	1c41      	adds	r1, r0, #1
   c31bc:	462b      	mov	r3, r5
   c31be:	4668      	mov	r0, sp
        va_start(args, fmt);
   c31c0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c31c2:	f7fd f901 	bl	c03c8 <vsnprintf>
        if (n > 0) {
   c31c6:	1e02      	subs	r2, r0, #0
   c31c8:	dd04      	ble.n	c31d4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   c31ca:	6823      	ldr	r3, [r4, #0]
   c31cc:	4669      	mov	r1, sp
   c31ce:	689b      	ldr	r3, [r3, #8]
   c31d0:	4620      	mov	r0, r4
   c31d2:	4798      	blx	r3
   c31d4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   c31d6:	3720      	adds	r7, #32
   c31d8:	46bd      	mov	sp, r7
   c31da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c31de:	b003      	add	sp, #12
   c31e0:	4770      	bx	lr
    } else if (n > 0) {
   c31e2:	2800      	cmp	r0, #0
   c31e4:	d0f7      	beq.n	c31d6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   c31e6:	6823      	ldr	r3, [r4, #0]
   c31e8:	4602      	mov	r2, r0
   c31ea:	689b      	ldr	r3, [r3, #8]
   c31ec:	f107 0110 	add.w	r1, r7, #16
   c31f0:	4620      	mov	r0, r4
   c31f2:	4798      	blx	r3
}
   c31f4:	e7ef      	b.n	c31d6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000c31f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c31f6:	b538      	push	{r3, r4, r5, lr}
   c31f8:	680b      	ldr	r3, [r1, #0]
   c31fa:	6003      	str	r3, [r0, #0]
   c31fc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   c31fe:	6843      	ldr	r3, [r0, #4]
   c3200:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c3202:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   c3204:	d008      	beq.n	c3218 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   c3206:	b115      	cbz	r5, c320e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   c3208:	686b      	ldr	r3, [r5, #4]
   c320a:	3301      	adds	r3, #1
   c320c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   c320e:	6860      	ldr	r0, [r4, #4]
   c3210:	b108      	cbz	r0, c3216 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   c3212:	f7fd fd27 	bl	c0c64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   c3216:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c3218:	bd38      	pop	{r3, r4, r5, pc}

000c321a <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   c321a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c321c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   c321e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c3222:	689b      	ldr	r3, [r3, #8]
   c3224:	2201      	movs	r2, #1
   c3226:	f10d 0107 	add.w	r1, sp, #7
   c322a:	4798      	blx	r3
}
   c322c:	b003      	add	sp, #12
   c322e:	f85d fb04 	ldr.w	pc, [sp], #4

000c3232 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   c3232:	460b      	mov	r3, r1
   c3234:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   c3236:	2200      	movs	r2, #0
   c3238:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   c323a:	e9c0 2200 	strd	r2, r2, [r0]
   c323e:	4604      	mov	r4, r0
        t_ = t;
   c3240:	6083      	str	r3, [r0, #8]
    if (t) {
   c3242:	b90b      	cbnz	r3, c3248 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   c3244:	4620      	mov	r0, r4
   c3246:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   c3248:	f7ff ffd5 	bl	c31f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   c324c:	e7fa      	b.n	c3244 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000c324e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   c324e:	6883      	ldr	r3, [r0, #8]
   c3250:	b1eb      	cbz	r3, c328e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   c3252:	781a      	ldrb	r2, [r3, #0]
   c3254:	2a03      	cmp	r2, #3
   c3256:	d81a      	bhi.n	c328e <_ZNK5spark9JSONValue4typeEv+0x40>
   c3258:	e8df f002 	tbb	[pc, r2]
   c325c:	1b021704 	.word	0x1b021704
   c3260:	2005      	movs	r0, #5
   c3262:	4770      	bx	lr
        const char c = d_->json[t_->start];
   c3264:	6802      	ldr	r2, [r0, #0]
   c3266:	685b      	ldr	r3, [r3, #4]
   c3268:	6852      	ldr	r2, [r2, #4]
   c326a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   c326c:	282d      	cmp	r0, #45	; 0x2d
   c326e:	d012      	beq.n	c3296 <_ZNK5spark9JSONValue4typeEv+0x48>
   c3270:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c3274:	2b09      	cmp	r3, #9
   c3276:	d90e      	bls.n	c3296 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   c3278:	2874      	cmp	r0, #116	; 0x74
   c327a:	d00e      	beq.n	c329a <_ZNK5spark9JSONValue4typeEv+0x4c>
   c327c:	2866      	cmp	r0, #102	; 0x66
   c327e:	d00c      	beq.n	c329a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   c3280:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   c3284:	4258      	negs	r0, r3
   c3286:	4158      	adcs	r0, r3
   c3288:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   c328a:	2006      	movs	r0, #6
   c328c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   c328e:	2000      	movs	r0, #0
   c3290:	4770      	bx	lr
        return JSON_TYPE_STRING;
   c3292:	2004      	movs	r0, #4
   c3294:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   c3296:	2003      	movs	r0, #3
   c3298:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   c329a:	2002      	movs	r0, #2
}
   c329c:	4770      	bx	lr

000c329e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   c329e:	b510      	push	{r4, lr}
   c32a0:	4604      	mov	r4, r0
    switch (type()) {
   c32a2:	f7ff ffd4 	bl	c324e <_ZNK5spark9JSONValue4typeEv>
   c32a6:	2802      	cmp	r0, #2
   c32a8:	d00e      	beq.n	c32c8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   c32aa:	1ec3      	subs	r3, r0, #3
   c32ac:	b2db      	uxtb	r3, r3
   c32ae:	2b01      	cmp	r3, #1
   c32b0:	d814      	bhi.n	c32dc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   c32b2:	6822      	ldr	r2, [r4, #0]
   c32b4:	68a3      	ldr	r3, [r4, #8]
   c32b6:	6850      	ldr	r0, [r2, #4]
   c32b8:	685b      	ldr	r3, [r3, #4]
}
   c32ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   c32be:	220a      	movs	r2, #10
   c32c0:	2100      	movs	r1, #0
   c32c2:	4418      	add	r0, r3
   c32c4:	f002 ba60 	b.w	c5788 <strtol>
        const char* const s = d_->json + t_->start;
   c32c8:	6822      	ldr	r2, [r4, #0]
   c32ca:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   c32cc:	6852      	ldr	r2, [r2, #4]
   c32ce:	685b      	ldr	r3, [r3, #4]
   c32d0:	5cd0      	ldrb	r0, [r2, r3]
   c32d2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   c32d6:	4258      	negs	r0, r3
   c32d8:	4158      	adcs	r0, r3
}
   c32da:	bd10      	pop	{r4, pc}
    switch (type()) {
   c32dc:	2000      	movs	r0, #0
   c32de:	e7fc      	b.n	c32da <_ZNK5spark9JSONValue5toIntEv+0x3c>

000c32e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   c32e0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c32e2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   c32e4:	e9c0 3300 	strd	r3, r3, [r0]
   c32e8:	4604      	mov	r4, r0
        n_(0) {
   c32ea:	480e      	ldr	r0, [pc, #56]	; (c3324 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   c32ec:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   c32f0:	b1a9      	cbz	r1, c331e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   c32f2:	780b      	ldrb	r3, [r1, #0]
   c32f4:	2b03      	cmp	r3, #3
   c32f6:	d006      	beq.n	c3306 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   c32f8:	b98b      	cbnz	r3, c331e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   c32fa:	6813      	ldr	r3, [r2, #0]
   c32fc:	6858      	ldr	r0, [r3, #4]
   c32fe:	684b      	ldr	r3, [r1, #4]
   c3300:	5cc3      	ldrb	r3, [r0, r3]
   c3302:	2b6e      	cmp	r3, #110	; 0x6e
   c3304:	d007      	beq.n	c3316 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   c3306:	6813      	ldr	r3, [r2, #0]
   c3308:	684d      	ldr	r5, [r1, #4]
   c330a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   c330c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   c330e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   c3310:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   c3312:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   c3314:	60e3      	str	r3, [r4, #12]
   c3316:	4611      	mov	r1, r2
   c3318:	4620      	mov	r0, r4
   c331a:	f7ff ff6c 	bl	c31f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c331e:	4620      	mov	r0, r4
   c3320:	bd38      	pop	{r3, r4, r5, pc}
   c3322:	bf00      	nop
   c3324:	000c9298 	.word	0x000c9298

000c3328 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   c3328:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c332a:	2500      	movs	r5, #0
   c332c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   c332e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   c3332:	e9c0 5502 	strd	r5, r5, [r0, #8]
   c3336:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c333a:	4604      	mov	r4, r0
   c333c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   c333e:	b14b      	cbz	r3, c3354 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   c3340:	781a      	ldrb	r2, [r3, #0]
   c3342:	2a01      	cmp	r2, #1
   c3344:	d106      	bne.n	c3354 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   c3346:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   c334a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   c334c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   c334e:	6143      	str	r3, [r0, #20]
   c3350:	f7ff ff51 	bl	c31f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c3354:	4620      	mov	r0, r4
   c3356:	bd38      	pop	{r3, r4, r5, pc}

000c3358 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   c3358:	b510      	push	{r4, lr}
    if (!n_) {
   c335a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   c335c:	4604      	mov	r4, r0
    if (!n_) {
   c335e:	b163      	cbz	r3, c337a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   c3360:	6880      	ldr	r0, [r0, #8]
   c3362:	60e0      	str	r0, [r4, #12]
    --n_;
   c3364:	3b01      	subs	r3, #1
    ++t_;
   c3366:	3010      	adds	r0, #16
   c3368:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   c336a:	6120      	str	r0, [r4, #16]
    --n_;
   c336c:	6163      	str	r3, [r4, #20]
    if (n_) {
   c336e:	b113      	cbz	r3, c3376 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   c3370:	f7ff fef2 	bl	c3158 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   c3374:	60a0      	str	r0, [r4, #8]
    return true;
   c3376:	2001      	movs	r0, #1
   c3378:	e000      	b.n	c337c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   c337a:	4618      	mov	r0, r3
}
   c337c:	bd10      	pop	{r4, pc}

000c337e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   c337e:	b510      	push	{r4, lr}
    write('}');
   c3380:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   c3382:	4604      	mov	r4, r0
    write('}');
   c3384:	f7ff ff49 	bl	c321a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c3388:	2301      	movs	r3, #1
   c338a:	7123      	strb	r3, [r4, #4]
}
   c338c:	4620      	mov	r0, r4
   c338e:	bd10      	pop	{r4, pc}

000c3390 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   c3390:	b508      	push	{r3, lr}
    switch (state_) {
   c3392:	7903      	ldrb	r3, [r0, #4]
   c3394:	2b01      	cmp	r3, #1
   c3396:	d002      	beq.n	c339e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c3398:	2b02      	cmp	r3, #2
   c339a:	d004      	beq.n	c33a6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   c339c:	bd08      	pop	{r3, pc}
        write(',');
   c339e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c33a0:	f7ff ff3b 	bl	c321a <_ZN5spark10JSONWriter5writeEc>
}
   c33a4:	e7fa      	b.n	c339c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c33a6:	213a      	movs	r1, #58	; 0x3a
   c33a8:	e7fa      	b.n	c33a0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c33aa <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c33aa:	b510      	push	{r4, lr}
   c33ac:	4604      	mov	r4, r0
    writeSeparator();
   c33ae:	f7ff ffef 	bl	c3390 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c33b2:	4620      	mov	r0, r4
   c33b4:	217b      	movs	r1, #123	; 0x7b
   c33b6:	f7ff ff30 	bl	c321a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c33ba:	2300      	movs	r3, #0
   c33bc:	7123      	strb	r3, [r4, #4]
}
   c33be:	4620      	mov	r0, r4
   c33c0:	bd10      	pop	{r4, pc}
	...

000c33c4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c33c4:	b513      	push	{r0, r1, r4, lr}
   c33c6:	4604      	mov	r4, r0
   c33c8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c33ca:	f7ff ffe1 	bl	c3390 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c33ce:	6823      	ldr	r3, [r4, #0]
   c33d0:	9a01      	ldr	r2, [sp, #4]
   c33d2:	68db      	ldr	r3, [r3, #12]
   c33d4:	4903      	ldr	r1, [pc, #12]	; (c33e4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   c33d6:	4620      	mov	r0, r4
   c33d8:	4798      	blx	r3
    state_ = NEXT;
   c33da:	2301      	movs	r3, #1
}
   c33dc:	4620      	mov	r0, r4
    state_ = NEXT;
   c33de:	7123      	strb	r3, [r4, #4]
}
   c33e0:	b002      	add	sp, #8
   c33e2:	bd10      	pop	{r4, pc}
   c33e4:	000c867d 	.word	0x000c867d

000c33e8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c33e8:	b513      	push	{r0, r1, r4, lr}
   c33ea:	4604      	mov	r4, r0
   c33ec:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c33ee:	f7ff ffcf 	bl	c3390 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c33f2:	6823      	ldr	r3, [r4, #0]
   c33f4:	9a01      	ldr	r2, [sp, #4]
   c33f6:	68db      	ldr	r3, [r3, #12]
   c33f8:	4903      	ldr	r1, [pc, #12]	; (c3408 <_ZN5spark10JSONWriter5valueEj+0x20>)
   c33fa:	4620      	mov	r0, r4
   c33fc:	4798      	blx	r3
    state_ = NEXT;
   c33fe:	2301      	movs	r3, #1
}
   c3400:	4620      	mov	r0, r4
    state_ = NEXT;
   c3402:	7123      	strb	r3, [r4, #4]
}
   c3404:	b002      	add	sp, #8
   c3406:	bd10      	pop	{r4, pc}
   c3408:	000c7c06 	.word	0x000c7c06

000c340c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c340c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c3410:	460d      	mov	r5, r1
    write('"');
   c3412:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c3414:	4690      	mov	r8, r2
   c3416:	4604      	mov	r4, r0
    write('"');
   c3418:	f7ff feff 	bl	c321a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   c341c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c34c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c3420:	44a8      	add	r8, r5
    const char *s = str;
   c3422:	462f      	mov	r7, r5
    while (s != end) {
   c3424:	4547      	cmp	r7, r8
   c3426:	46ba      	mov	sl, r7
   c3428:	d03d      	beq.n	c34a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c342a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c342e:	2e22      	cmp	r6, #34	; 0x22
   c3430:	d006      	beq.n	c3440 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c3432:	2e5c      	cmp	r6, #92	; 0x5c
   c3434:	d004      	beq.n	c3440 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c3436:	4630      	mov	r0, r6
   c3438:	f001 ffba 	bl	c53b0 <isprint>
   c343c:	2800      	cmp	r0, #0
   c343e:	d1f1      	bne.n	c3424 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c3440:	6823      	ldr	r3, [r4, #0]
   c3442:	ebaa 0205 	sub.w	r2, sl, r5
   c3446:	689b      	ldr	r3, [r3, #8]
   c3448:	4629      	mov	r1, r5
   c344a:	4620      	mov	r0, r4
   c344c:	4798      	blx	r3
            write('\\');
   c344e:	215c      	movs	r1, #92	; 0x5c
   c3450:	4620      	mov	r0, r4
   c3452:	f7ff fee2 	bl	c321a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c3456:	2e0d      	cmp	r6, #13
   c3458:	d80a      	bhi.n	c3470 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c345a:	2e07      	cmp	r6, #7
   c345c:	d91c      	bls.n	c3498 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c345e:	f1a6 0308 	sub.w	r3, r6, #8
   c3462:	2b05      	cmp	r3, #5
   c3464:	d818      	bhi.n	c3498 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c3466:	e8df f003 	tbb	[pc, r3]
   c346a:	0f0d      	.short	0x0f0d
   c346c:	15131711 	.word	0x15131711
   c3470:	2e22      	cmp	r6, #34	; 0x22
   c3472:	d001      	beq.n	c3478 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c3474:	2e5c      	cmp	r6, #92	; 0x5c
   c3476:	d10f      	bne.n	c3498 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c3478:	4631      	mov	r1, r6
                write('b');
   c347a:	4620      	mov	r0, r4
   c347c:	f7ff fecd 	bl	c321a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   c3480:	463d      	mov	r5, r7
    while (s != end) {
   c3482:	e7cf      	b.n	c3424 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c3484:	2162      	movs	r1, #98	; 0x62
   c3486:	e7f8      	b.n	c347a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c3488:	2174      	movs	r1, #116	; 0x74
   c348a:	e7f6      	b.n	c347a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c348c:	216e      	movs	r1, #110	; 0x6e
   c348e:	e7f4      	b.n	c347a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c3490:	2166      	movs	r1, #102	; 0x66
   c3492:	e7f2      	b.n	c347a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c3494:	2172      	movs	r1, #114	; 0x72
   c3496:	e7f0      	b.n	c347a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c3498:	6823      	ldr	r3, [r4, #0]
   c349a:	4632      	mov	r2, r6
   c349c:	68db      	ldr	r3, [r3, #12]
   c349e:	4649      	mov	r1, r9
   c34a0:	4620      	mov	r0, r4
   c34a2:	4798      	blx	r3
                break;
   c34a4:	e7ec      	b.n	c3480 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   c34a6:	42bd      	cmp	r5, r7
   c34a8:	d005      	beq.n	c34b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c34aa:	6823      	ldr	r3, [r4, #0]
   c34ac:	1b7a      	subs	r2, r7, r5
   c34ae:	689b      	ldr	r3, [r3, #8]
   c34b0:	4629      	mov	r1, r5
   c34b2:	4620      	mov	r0, r4
   c34b4:	4798      	blx	r3
    }
    write('"');
   c34b6:	2122      	movs	r1, #34	; 0x22
   c34b8:	4620      	mov	r0, r4
   c34ba:	f7ff feae 	bl	c321a <_ZN5spark10JSONWriter5writeEc>
}
   c34be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c34c2:	bf00      	nop
   c34c4:	000c94a8 	.word	0x000c94a8

000c34c8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c34c8:	b513      	push	{r0, r1, r4, lr}
   c34ca:	4604      	mov	r4, r0
   c34cc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c34d0:	f7ff ff5e 	bl	c3390 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c34d4:	4620      	mov	r0, r4
   c34d6:	e9dd 2100 	ldrd	r2, r1, [sp]
   c34da:	f7ff ff97 	bl	c340c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c34de:	2302      	movs	r3, #2
}
   c34e0:	4620      	mov	r0, r4
    state_ = VALUE;
   c34e2:	7123      	strb	r3, [r4, #4]
}
   c34e4:	b002      	add	sp, #8
   c34e6:	bd10      	pop	{r4, pc}

000c34e8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c34e8:	b513      	push	{r0, r1, r4, lr}
   c34ea:	4604      	mov	r4, r0
   c34ec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c34f0:	f7ff ff4e 	bl	c3390 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c34f4:	4620      	mov	r0, r4
   c34f6:	e9dd 2100 	ldrd	r2, r1, [sp]
   c34fa:	f7ff ff87 	bl	c340c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c34fe:	2301      	movs	r3, #1
}
   c3500:	4620      	mov	r0, r4
    state_ = NEXT;
   c3502:	7123      	strb	r3, [r4, #4]
}
   c3504:	b002      	add	sp, #8
   c3506:	bd10      	pop	{r4, pc}

000c3508 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   c3508:	b508      	push	{r3, lr}
   c350a:	4b02      	ldr	r3, [pc, #8]	; (c3514 <spark_protocol_instance+0xc>)
   c350c:	681b      	ldr	r3, [r3, #0]
   c350e:	681b      	ldr	r3, [r3, #0]
   c3510:	9301      	str	r3, [sp, #4]
   c3512:	bd08      	pop	{r3, pc}
   c3514:	0003025c 	.word	0x0003025c

000c3518 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   c3518:	b508      	push	{r3, lr}
   c351a:	4b02      	ldr	r3, [pc, #8]	; (c3524 <spark_protocol_set_product_id+0xc>)
   c351c:	681b      	ldr	r3, [r3, #0]
   c351e:	685b      	ldr	r3, [r3, #4]
   c3520:	9301      	str	r3, [sp, #4]
   c3522:	bd08      	pop	{r3, pc}
   c3524:	0003025c 	.word	0x0003025c

000c3528 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   c3528:	b508      	push	{r3, lr}
   c352a:	4b02      	ldr	r3, [pc, #8]	; (c3534 <spark_protocol_set_product_firmware_version+0xc>)
   c352c:	681b      	ldr	r3, [r3, #0]
   c352e:	689b      	ldr	r3, [r3, #8]
   c3530:	9301      	str	r3, [sp, #4]
   c3532:	bd08      	pop	{r3, pc}
   c3534:	0003025c 	.word	0x0003025c

000c3538 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c3538:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   c353a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c353c:	d902      	bls.n	c3544 <pinAvailable+0xc>
    return false;
   c353e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c3540:	b002      	add	sp, #8
   c3542:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c3544:	f1a0 030b 	sub.w	r3, r0, #11
   c3548:	2b02      	cmp	r3, #2
   c354a:	d81a      	bhi.n	c3582 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c354c:	4c17      	ldr	r4, [pc, #92]	; (c35ac <pinAvailable+0x74>)
   c354e:	7821      	ldrb	r1, [r4, #0]
   c3550:	f3bf 8f5b 	dmb	ish
   c3554:	f011 0101 	ands.w	r1, r1, #1
   c3558:	d10b      	bne.n	c3572 <pinAvailable+0x3a>
   c355a:	4620      	mov	r0, r4
   c355c:	9101      	str	r1, [sp, #4]
   c355e:	f7f0 fdad 	bl	b40bc <__cxa_guard_acquire>
   c3562:	9901      	ldr	r1, [sp, #4]
   c3564:	b128      	cbz	r0, c3572 <pinAvailable+0x3a>
   c3566:	4812      	ldr	r0, [pc, #72]	; (c35b0 <pinAvailable+0x78>)
   c3568:	f7fd f874 	bl	c0654 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c356c:	4620      	mov	r0, r4
   c356e:	f7f0 fdaa 	bl	b40c6 <__cxa_guard_release>
   c3572:	4b0f      	ldr	r3, [pc, #60]	; (c35b0 <pinAvailable+0x78>)
   c3574:	7818      	ldrb	r0, [r3, #0]
   c3576:	f7fc fd1f 	bl	bffb8 <hal_spi_is_enabled>
   c357a:	2800      	cmp	r0, #0
   c357c:	d1df      	bne.n	c353e <pinAvailable+0x6>
  return true; // 'pin' is available
   c357e:	2001      	movs	r0, #1
   c3580:	e7de      	b.n	c3540 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c3582:	2801      	cmp	r0, #1
   c3584:	d809      	bhi.n	c359a <pinAvailable+0x62>
   c3586:	f000 f8df 	bl	c3748 <_Z19__fetch_global_Wirev>
   c358a:	2100      	movs	r1, #0
   c358c:	7c00      	ldrb	r0, [r0, #16]
   c358e:	f7fc fccb 	bl	bff28 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c3592:	f080 0001 	eor.w	r0, r0, #1
   c3596:	b2c0      	uxtb	r0, r0
   c3598:	e7d2      	b.n	c3540 <pinAvailable+0x8>
   c359a:	3809      	subs	r0, #9
   c359c:	2801      	cmp	r0, #1
   c359e:	d8ee      	bhi.n	c357e <pinAvailable+0x46>
   c35a0:	f000 f878 	bl	c3694 <_Z22__fetch_global_Serial1v>
   c35a4:	7c00      	ldrb	r0, [r0, #16]
   c35a6:	f7fc fc5f 	bl	bfe68 <hal_usart_is_enabled>
   c35aa:	e7f2      	b.n	c3592 <pinAvailable+0x5a>
   c35ac:	2003b458 	.word	0x2003b458
   c35b0:	2003b45c 	.word	0x2003b45c

000c35b4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c35b4:	2823      	cmp	r0, #35	; 0x23
{
   c35b6:	b538      	push	{r3, r4, r5, lr}
   c35b8:	4604      	mov	r4, r0
   c35ba:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c35bc:	d80a      	bhi.n	c35d4 <pinMode+0x20>
   c35be:	29ff      	cmp	r1, #255	; 0xff
   c35c0:	d008      	beq.n	c35d4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c35c2:	f7ff ffb9 	bl	c3538 <pinAvailable>
   c35c6:	b128      	cbz	r0, c35d4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c35c8:	4629      	mov	r1, r5
   c35ca:	4620      	mov	r0, r4
}
   c35cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c35d0:	f7fc baca 	b.w	bfb68 <HAL_Pin_Mode>
}
   c35d4:	bd38      	pop	{r3, r4, r5, pc}

000c35d6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c35d6:	b538      	push	{r3, r4, r5, lr}
   c35d8:	4604      	mov	r4, r0
   c35da:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c35dc:	f7fc facc 	bl	bfb78 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c35e0:	28ff      	cmp	r0, #255	; 0xff
   c35e2:	d010      	beq.n	c3606 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c35e4:	2806      	cmp	r0, #6
   c35e6:	d804      	bhi.n	c35f2 <digitalWrite+0x1c>
   c35e8:	234d      	movs	r3, #77	; 0x4d
   c35ea:	fa23 f000 	lsr.w	r0, r3, r0
   c35ee:	07c3      	lsls	r3, r0, #31
   c35f0:	d409      	bmi.n	c3606 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c35f2:	4620      	mov	r0, r4
   c35f4:	f7ff ffa0 	bl	c3538 <pinAvailable>
   c35f8:	b128      	cbz	r0, c3606 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c35fa:	4629      	mov	r1, r5
   c35fc:	4620      	mov	r0, r4
}
   c35fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c3602:	f7fc bac1 	b.w	bfb88 <HAL_GPIO_Write>
}
   c3606:	bd38      	pop	{r3, r4, r5, pc}

000c3608 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c3608:	b510      	push	{r4, lr}
   c360a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c360c:	f7fc fab4 	bl	bfb78 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c3610:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c3612:	b2db      	uxtb	r3, r3
   c3614:	2b01      	cmp	r3, #1
   c3616:	d908      	bls.n	c362a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c3618:	4620      	mov	r0, r4
   c361a:	f7ff ff8d 	bl	c3538 <pinAvailable>
   c361e:	b120      	cbz	r0, c362a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c3620:	4620      	mov	r0, r4
}
   c3622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c3626:	f7fc bab7 	b.w	bfb98 <HAL_GPIO_Read>
}
   c362a:	2000      	movs	r0, #0
   c362c:	bd10      	pop	{r4, pc}

000c362e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c362e:	280d      	cmp	r0, #13
{
   c3630:	b510      	push	{r4, lr}
   c3632:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c3634:	bf9c      	itt	ls
   c3636:	340e      	addls	r4, #14
   c3638:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c363a:	4620      	mov	r0, r4
   c363c:	f7ff ff7c 	bl	c3538 <pinAvailable>
   c3640:	b150      	cbz	r0, c3658 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c3642:	2103      	movs	r1, #3
   c3644:	4620      	mov	r0, r4
   c3646:	f7fc fa87 	bl	bfb58 <HAL_Validate_Pin_Function>
   c364a:	2803      	cmp	r0, #3
   c364c:	d104      	bne.n	c3658 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c364e:	4620      	mov	r0, r4
}
   c3650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c3654:	f7fc bab8 	b.w	bfbc8 <hal_adc_read>
}
   c3658:	2000      	movs	r0, #0
   c365a:	bd10      	pop	{r4, pc}

000c365c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c365c:	4770      	bx	lr
	...

000c3660 <_Z20acquireSerial1Bufferv>:
{
   c3660:	b538      	push	{r3, r4, r5, lr}
   c3662:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c3664:	2514      	movs	r5, #20
   c3666:	462a      	mov	r2, r5
   c3668:	2100      	movs	r1, #0
   c366a:	f001 fed1 	bl	c5410 <memset>
   c366e:	8025      	strh	r5, [r4, #0]
   c3670:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c3672:	4907      	ldr	r1, [pc, #28]	; (c3690 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c3674:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c3676:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c3678:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c367a:	f000 f8af 	bl	c37dc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c367e:	4904      	ldr	r1, [pc, #16]	; (c3690 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c3680:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c3682:	4628      	mov	r0, r5
   c3684:	f000 f8aa 	bl	c37dc <_ZnajRKSt9nothrow_t>
    };
   c3688:	60e0      	str	r0, [r4, #12]
}
   c368a:	4620      	mov	r0, r4
   c368c:	bd38      	pop	{r3, r4, r5, pc}
   c368e:	bf00      	nop
   c3690:	000c94ae 	.word	0x000c94ae

000c3694 <_Z22__fetch_global_Serial1v>:
{
   c3694:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c3696:	4d0e      	ldr	r5, [pc, #56]	; (c36d0 <_Z22__fetch_global_Serial1v+0x3c>)
   c3698:	7829      	ldrb	r1, [r5, #0]
   c369a:	f3bf 8f5b 	dmb	ish
   c369e:	f011 0401 	ands.w	r4, r1, #1
{
   c36a2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c36a4:	d111      	bne.n	c36ca <_Z22__fetch_global_Serial1v+0x36>
   c36a6:	4628      	mov	r0, r5
   c36a8:	f7f0 fd08 	bl	b40bc <__cxa_guard_acquire>
   c36ac:	b168      	cbz	r0, c36ca <_Z22__fetch_global_Serial1v+0x36>
   c36ae:	a801      	add	r0, sp, #4
   c36b0:	f7ff ffd6 	bl	c3660 <_Z20acquireSerial1Bufferv>
   c36b4:	aa01      	add	r2, sp, #4
   c36b6:	4621      	mov	r1, r4
   c36b8:	4806      	ldr	r0, [pc, #24]	; (c36d4 <_Z22__fetch_global_Serial1v+0x40>)
   c36ba:	f7ff fba5 	bl	c2e08 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c36be:	4628      	mov	r0, r5
   c36c0:	f7f0 fd01 	bl	b40c6 <__cxa_guard_release>
   c36c4:	4804      	ldr	r0, [pc, #16]	; (c36d8 <_Z22__fetch_global_Serial1v+0x44>)
   c36c6:	f001 fe47 	bl	c5358 <atexit>
    return serial1;
}
   c36ca:	4802      	ldr	r0, [pc, #8]	; (c36d4 <_Z22__fetch_global_Serial1v+0x40>)
   c36cc:	b007      	add	sp, #28
   c36ce:	bd30      	pop	{r4, r5, pc}
   c36d0:	2003e710 	.word	0x2003e710
   c36d4:	2003e714 	.word	0x2003e714
   c36d8:	000c365d 	.word	0x000c365d

000c36dc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c36dc:	4770      	bx	lr

000c36de <__tcf_1>:
   c36de:	4770      	bx	lr

000c36e0 <_Z17acquireWireBufferv>:
{
   c36e0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c36e2:	4b0a      	ldr	r3, [pc, #40]	; (c370c <_Z17acquireWireBufferv+0x2c>)
   c36e4:	6003      	str	r3, [r0, #0]
   c36e6:	2301      	movs	r3, #1
{
   c36e8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c36ea:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c36ec:	4908      	ldr	r1, [pc, #32]	; (c3710 <_Z17acquireWireBufferv+0x30>)
   c36ee:	2020      	movs	r0, #32
   c36f0:	f000 f874 	bl	c37dc <_ZnajRKSt9nothrow_t>
	};
   c36f4:	2520      	movs	r5, #32
   c36f6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c36f8:	4905      	ldr	r1, [pc, #20]	; (c3710 <_Z17acquireWireBufferv+0x30>)
	};
   c36fa:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c36fc:	4628      	mov	r0, r5
   c36fe:	f000 f86d 	bl	c37dc <_ZnajRKSt9nothrow_t>
	};
   c3702:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c3706:	4620      	mov	r0, r4
   c3708:	bd38      	pop	{r3, r4, r5, pc}
   c370a:	bf00      	nop
   c370c:	00010018 	.word	0x00010018
   c3710:	000c94ae 	.word	0x000c94ae

000c3714 <_Z18acquireWire1Bufferv>:
{
   c3714:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c3716:	4b0a      	ldr	r3, [pc, #40]	; (c3740 <_Z18acquireWire1Bufferv+0x2c>)
   c3718:	6003      	str	r3, [r0, #0]
   c371a:	2301      	movs	r3, #1
{
   c371c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c371e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c3720:	4908      	ldr	r1, [pc, #32]	; (c3744 <_Z18acquireWire1Bufferv+0x30>)
   c3722:	2020      	movs	r0, #32
   c3724:	f000 f85a 	bl	c37dc <_ZnajRKSt9nothrow_t>
	};
   c3728:	2520      	movs	r5, #32
   c372a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c372c:	4905      	ldr	r1, [pc, #20]	; (c3744 <_Z18acquireWire1Bufferv+0x30>)
	};
   c372e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c3730:	4628      	mov	r0, r5
   c3732:	f000 f853 	bl	c37dc <_ZnajRKSt9nothrow_t>
	};
   c3736:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c373a:	4620      	mov	r0, r4
   c373c:	bd38      	pop	{r3, r4, r5, pc}
   c373e:	bf00      	nop
   c3740:	00010018 	.word	0x00010018
   c3744:	000c94ae 	.word	0x000c94ae

000c3748 <_Z19__fetch_global_Wirev>:
{
   c3748:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c374a:	4d0e      	ldr	r5, [pc, #56]	; (c3784 <_Z19__fetch_global_Wirev+0x3c>)
   c374c:	7829      	ldrb	r1, [r5, #0]
   c374e:	f3bf 8f5b 	dmb	ish
   c3752:	f011 0401 	ands.w	r4, r1, #1
{
   c3756:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c3758:	d111      	bne.n	c377e <_Z19__fetch_global_Wirev+0x36>
   c375a:	4628      	mov	r0, r5
   c375c:	f7f0 fcae 	bl	b40bc <__cxa_guard_acquire>
   c3760:	b168      	cbz	r0, c377e <_Z19__fetch_global_Wirev+0x36>
   c3762:	4668      	mov	r0, sp
   c3764:	f7ff ffbc 	bl	c36e0 <_Z17acquireWireBufferv>
   c3768:	466a      	mov	r2, sp
   c376a:	4621      	mov	r1, r4
   c376c:	4806      	ldr	r0, [pc, #24]	; (c3788 <_Z19__fetch_global_Wirev+0x40>)
   c376e:	f7ff fba9 	bl	c2ec4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c3772:	4628      	mov	r0, r5
   c3774:	f7f0 fca7 	bl	b40c6 <__cxa_guard_release>
   c3778:	4804      	ldr	r0, [pc, #16]	; (c378c <_Z19__fetch_global_Wirev+0x44>)
   c377a:	f001 fded 	bl	c5358 <atexit>
	return wire;
}
   c377e:	4802      	ldr	r0, [pc, #8]	; (c3788 <_Z19__fetch_global_Wirev+0x40>)
   c3780:	b007      	add	sp, #28
   c3782:	bd30      	pop	{r4, r5, pc}
   c3784:	2003e72c 	.word	0x2003e72c
   c3788:	2003e734 	.word	0x2003e734
   c378c:	000c36dd 	.word	0x000c36dd

000c3790 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   c3790:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c3792:	4c0e      	ldr	r4, [pc, #56]	; (c37cc <_Z20__fetch_global_Wire1v+0x3c>)
   c3794:	7823      	ldrb	r3, [r4, #0]
   c3796:	f3bf 8f5b 	dmb	ish
   c379a:	07db      	lsls	r3, r3, #31
{
   c379c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c379e:	d411      	bmi.n	c37c4 <_Z20__fetch_global_Wire1v+0x34>
   c37a0:	4620      	mov	r0, r4
   c37a2:	f7f0 fc8b 	bl	b40bc <__cxa_guard_acquire>
   c37a6:	b168      	cbz	r0, c37c4 <_Z20__fetch_global_Wire1v+0x34>
   c37a8:	4668      	mov	r0, sp
   c37aa:	f7ff ffb3 	bl	c3714 <_Z18acquireWire1Bufferv>
   c37ae:	466a      	mov	r2, sp
   c37b0:	2101      	movs	r1, #1
   c37b2:	4807      	ldr	r0, [pc, #28]	; (c37d0 <_Z20__fetch_global_Wire1v+0x40>)
   c37b4:	f7ff fb86 	bl	c2ec4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c37b8:	4620      	mov	r0, r4
   c37ba:	f7f0 fc84 	bl	b40c6 <__cxa_guard_release>
   c37be:	4805      	ldr	r0, [pc, #20]	; (c37d4 <_Z20__fetch_global_Wire1v+0x44>)
   c37c0:	f001 fdca 	bl	c5358 <atexit>
	return wire;
}
   c37c4:	4802      	ldr	r0, [pc, #8]	; (c37d0 <_Z20__fetch_global_Wire1v+0x40>)
   c37c6:	b006      	add	sp, #24
   c37c8:	bd10      	pop	{r4, pc}
   c37ca:	bf00      	nop
   c37cc:	2003e730 	.word	0x2003e730
   c37d0:	2003e748 	.word	0x2003e748
   c37d4:	000c36df 	.word	0x000c36df

000c37d8 <_ZnwjRKSt9nothrow_t>:
   c37d8:	f7f0 bc5d 	b.w	b4096 <_Znwj>

000c37dc <_ZnajRKSt9nothrow_t>:
   c37dc:	f7f0 bc5d 	b.w	b409a <_Znaj>

000c37e0 <_ZSt17__throw_bad_allocv>:
   c37e0:	b508      	push	{r3, lr}
   c37e2:	f7fc fdf9 	bl	c03d8 <abort>

000c37e6 <_ZSt20__throw_length_errorPKc>:
   c37e6:	b508      	push	{r3, lr}
   c37e8:	f7fc fdf6 	bl	c03d8 <abort>

000c37ec <_ZSt25__throw_bad_function_callv>:
   c37ec:	b508      	push	{r3, lr}
   c37ee:	f7fc fdf3 	bl	c03d8 <abort>
   c37f2:	0000      	movs	r0, r0
   c37f4:	0000      	movs	r0, r0
	...

000c37f8 <pow>:
   c37f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c37fa:	ed2d 8b02 	vpush	{d8}
   c37fe:	ec57 6b10 	vmov	r6, r7, d0
   c3802:	ec55 4b11 	vmov	r4, r5, d1
   c3806:	f000 f8cb 	bl	c39a0 <__ieee754_pow>
   c380a:	4b63      	ldr	r3, [pc, #396]	; (c3998 <pow+0x1a0>)
   c380c:	eeb0 8a40 	vmov.f32	s16, s0
   c3810:	eef0 8a60 	vmov.f32	s17, s1
   c3814:	f993 3000 	ldrsb.w	r3, [r3]
   c3818:	3301      	adds	r3, #1
   c381a:	d02a      	beq.n	c3872 <pow+0x7a>
   c381c:	4622      	mov	r2, r4
   c381e:	462b      	mov	r3, r5
   c3820:	4620      	mov	r0, r4
   c3822:	4629      	mov	r1, r5
   c3824:	f001 fcc4 	bl	c51b0 <__aeabi_dcmpun>
   c3828:	bb18      	cbnz	r0, c3872 <pow+0x7a>
   c382a:	4632      	mov	r2, r6
   c382c:	463b      	mov	r3, r7
   c382e:	4630      	mov	r0, r6
   c3830:	4639      	mov	r1, r7
   c3832:	f001 fcbd 	bl	c51b0 <__aeabi_dcmpun>
   c3836:	2800      	cmp	r0, #0
   c3838:	d144      	bne.n	c38c4 <pow+0xcc>
   c383a:	2200      	movs	r2, #0
   c383c:	2300      	movs	r3, #0
   c383e:	4630      	mov	r0, r6
   c3840:	4639      	mov	r1, r7
   c3842:	f001 fc83 	bl	c514c <__aeabi_dcmpeq>
   c3846:	b1d8      	cbz	r0, c3880 <pow+0x88>
   c3848:	2200      	movs	r2, #0
   c384a:	2300      	movs	r3, #0
   c384c:	4620      	mov	r0, r4
   c384e:	4629      	mov	r1, r5
   c3850:	f001 fc7c 	bl	c514c <__aeabi_dcmpeq>
   c3854:	2800      	cmp	r0, #0
   c3856:	d13d      	bne.n	c38d4 <pow+0xdc>
   c3858:	ec45 4b10 	vmov	d0, r4, r5
   c385c:	f000 ff10 	bl	c4680 <finite>
   c3860:	b138      	cbz	r0, c3872 <pow+0x7a>
   c3862:	4620      	mov	r0, r4
   c3864:	4629      	mov	r1, r5
   c3866:	2200      	movs	r2, #0
   c3868:	2300      	movs	r3, #0
   c386a:	f001 fc79 	bl	c5160 <__aeabi_dcmplt>
   c386e:	2800      	cmp	r0, #0
   c3870:	d15c      	bne.n	c392c <pow+0x134>
   c3872:	eeb0 0a48 	vmov.f32	s0, s16
   c3876:	eef0 0a68 	vmov.f32	s1, s17
   c387a:	ecbd 8b02 	vpop	{d8}
   c387e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3880:	eeb0 0a48 	vmov.f32	s0, s16
   c3884:	eef0 0a68 	vmov.f32	s1, s17
   c3888:	f000 fefa 	bl	c4680 <finite>
   c388c:	b358      	cbz	r0, c38e6 <pow+0xee>
   c388e:	ec51 0b18 	vmov	r0, r1, d8
   c3892:	2200      	movs	r2, #0
   c3894:	2300      	movs	r3, #0
   c3896:	f001 fc59 	bl	c514c <__aeabi_dcmpeq>
   c389a:	2800      	cmp	r0, #0
   c389c:	d0e9      	beq.n	c3872 <pow+0x7a>
   c389e:	ec47 6b10 	vmov	d0, r6, r7
   c38a2:	f000 feed 	bl	c4680 <finite>
   c38a6:	2800      	cmp	r0, #0
   c38a8:	d0e3      	beq.n	c3872 <pow+0x7a>
   c38aa:	ec45 4b10 	vmov	d0, r4, r5
   c38ae:	f000 fee7 	bl	c4680 <finite>
   c38b2:	2800      	cmp	r0, #0
   c38b4:	d0dd      	beq.n	c3872 <pow+0x7a>
   c38b6:	f7fc fd9f 	bl	c03f8 <__errno>
   c38ba:	2322      	movs	r3, #34	; 0x22
   c38bc:	ed9f 8b2e 	vldr	d8, [pc, #184]	; c3978 <pow+0x180>
   c38c0:	6003      	str	r3, [r0, #0]
   c38c2:	e7d6      	b.n	c3872 <pow+0x7a>
   c38c4:	4620      	mov	r0, r4
   c38c6:	4629      	mov	r1, r5
   c38c8:	2200      	movs	r2, #0
   c38ca:	2300      	movs	r3, #0
   c38cc:	f001 fc3e 	bl	c514c <__aeabi_dcmpeq>
   c38d0:	2800      	cmp	r0, #0
   c38d2:	d0ce      	beq.n	c3872 <pow+0x7a>
   c38d4:	ed9f 8b2a 	vldr	d8, [pc, #168]	; c3980 <pow+0x188>
   c38d8:	eeb0 0a48 	vmov.f32	s0, s16
   c38dc:	eef0 0a68 	vmov.f32	s1, s17
   c38e0:	ecbd 8b02 	vpop	{d8}
   c38e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c38e6:	ec47 6b10 	vmov	d0, r6, r7
   c38ea:	f000 fec9 	bl	c4680 <finite>
   c38ee:	2800      	cmp	r0, #0
   c38f0:	d0cd      	beq.n	c388e <pow+0x96>
   c38f2:	ec45 4b10 	vmov	d0, r4, r5
   c38f6:	f000 fec3 	bl	c4680 <finite>
   c38fa:	2800      	cmp	r0, #0
   c38fc:	d0c7      	beq.n	c388e <pow+0x96>
   c38fe:	ec53 2b18 	vmov	r2, r3, d8
   c3902:	ee18 0a10 	vmov	r0, s16
   c3906:	4619      	mov	r1, r3
   c3908:	f001 fc52 	bl	c51b0 <__aeabi_dcmpun>
   c390c:	bb20      	cbnz	r0, c3958 <pow+0x160>
   c390e:	f7fc fd73 	bl	c03f8 <__errno>
   c3912:	4603      	mov	r3, r0
   c3914:	2222      	movs	r2, #34	; 0x22
   c3916:	601a      	str	r2, [r3, #0]
   c3918:	4630      	mov	r0, r6
   c391a:	4639      	mov	r1, r7
   c391c:	2200      	movs	r2, #0
   c391e:	2300      	movs	r3, #0
   c3920:	f001 fc1e 	bl	c5160 <__aeabi_dcmplt>
   c3924:	b948      	cbnz	r0, c393a <pow+0x142>
   c3926:	ed9f 8b18 	vldr	d8, [pc, #96]	; c3988 <pow+0x190>
   c392a:	e7a2      	b.n	c3872 <pow+0x7a>
   c392c:	f7fc fd64 	bl	c03f8 <__errno>
   c3930:	2321      	movs	r3, #33	; 0x21
   c3932:	ed9f 8b17 	vldr	d8, [pc, #92]	; c3990 <pow+0x198>
   c3936:	6003      	str	r3, [r0, #0]
   c3938:	e79b      	b.n	c3872 <pow+0x7a>
   c393a:	ec45 4b10 	vmov	d0, r4, r5
   c393e:	f000 feb3 	bl	c46a8 <rint>
   c3942:	4622      	mov	r2, r4
   c3944:	ec51 0b10 	vmov	r0, r1, d0
   c3948:	462b      	mov	r3, r5
   c394a:	f001 fbff 	bl	c514c <__aeabi_dcmpeq>
   c394e:	2800      	cmp	r0, #0
   c3950:	d1e9      	bne.n	c3926 <pow+0x12e>
   c3952:	ed9f 8b0f 	vldr	d8, [pc, #60]	; c3990 <pow+0x198>
   c3956:	e78c      	b.n	c3872 <pow+0x7a>
   c3958:	f7fc fd4e 	bl	c03f8 <__errno>
   c395c:	2200      	movs	r2, #0
   c395e:	2300      	movs	r3, #0
   c3960:	2121      	movs	r1, #33	; 0x21
   c3962:	6001      	str	r1, [r0, #0]
   c3964:	4610      	mov	r0, r2
   c3966:	4619      	mov	r1, r3
   c3968:	f001 fab2 	bl	c4ed0 <__aeabi_ddiv>
   c396c:	ec41 0b18 	vmov	d8, r0, r1
   c3970:	e77f      	b.n	c3872 <pow+0x7a>
   c3972:	bf00      	nop
   c3974:	f3af 8000 	nop.w
	...
   c3984:	3ff00000 	.word	0x3ff00000
   c3988:	00000000 	.word	0x00000000
   c398c:	7ff00000 	.word	0x7ff00000
   c3990:	00000000 	.word	0x00000000
   c3994:	fff00000 	.word	0xfff00000
   c3998:	2003ace8 	.word	0x2003ace8
   c399c:	00000000 	.word	0x00000000

000c39a0 <__ieee754_pow>:
   c39a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c39a4:	ec57 6b11 	vmov	r6, r7, d1
   c39a8:	ed2d 8b0c 	vpush	{d8-d13}
   c39ac:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   c39b0:	ea5a 0206 	orrs.w	r2, sl, r6
   c39b4:	b087      	sub	sp, #28
   c39b6:	d03d      	beq.n	c3a34 <__ieee754_pow+0x94>
   c39b8:	ec55 4b10 	vmov	r4, r5, d0
   c39bc:	4972      	ldr	r1, [pc, #456]	; (c3b88 <__ieee754_pow+0x1e8>)
   c39be:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   c39c2:	4588      	cmp	r8, r1
   c39c4:	ee10 2a10 	vmov	r2, s0
   c39c8:	46a9      	mov	r9, r5
   c39ca:	dc2c      	bgt.n	c3a26 <__ieee754_pow+0x86>
   c39cc:	ee11 3a10 	vmov	r3, s2
   c39d0:	46bb      	mov	fp, r7
   c39d2:	d036      	beq.n	c3a42 <__ieee754_pow+0xa2>
   c39d4:	458a      	cmp	sl, r1
   c39d6:	dc26      	bgt.n	c3a26 <__ieee754_pow+0x86>
   c39d8:	496b      	ldr	r1, [pc, #428]	; (c3b88 <__ieee754_pow+0x1e8>)
   c39da:	458a      	cmp	sl, r1
   c39dc:	d021      	beq.n	c3a22 <__ieee754_pow+0x82>
   c39de:	f1b9 0f00 	cmp.w	r9, #0
   c39e2:	db39      	blt.n	c3a58 <__ieee754_pow+0xb8>
   c39e4:	2100      	movs	r1, #0
   c39e6:	9100      	str	r1, [sp, #0]
   c39e8:	2b00      	cmp	r3, #0
   c39ea:	d151      	bne.n	c3a90 <__ieee754_pow+0xf0>
   c39ec:	4b66      	ldr	r3, [pc, #408]	; (c3b88 <__ieee754_pow+0x1e8>)
   c39ee:	459a      	cmp	sl, r3
   c39f0:	f000 80a2 	beq.w	c3b38 <__ieee754_pow+0x198>
   c39f4:	4b65      	ldr	r3, [pc, #404]	; (c3b8c <__ieee754_pow+0x1ec>)
   c39f6:	459a      	cmp	sl, r3
   c39f8:	f000 80b0 	beq.w	c3b5c <__ieee754_pow+0x1bc>
   c39fc:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   c3a00:	f000 84c0 	beq.w	c4384 <__ieee754_pow+0x9e4>
   c3a04:	4b62      	ldr	r3, [pc, #392]	; (c3b90 <__ieee754_pow+0x1f0>)
   c3a06:	459b      	cmp	fp, r3
   c3a08:	d142      	bne.n	c3a90 <__ieee754_pow+0xf0>
   c3a0a:	f1b9 0f00 	cmp.w	r9, #0
   c3a0e:	db3f      	blt.n	c3a90 <__ieee754_pow+0xf0>
   c3a10:	ec45 4b10 	vmov	d0, r4, r5
   c3a14:	b007      	add	sp, #28
   c3a16:	ecbd 8b0c 	vpop	{d8-d13}
   c3a1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3a1e:	f000 bd59 	b.w	c44d4 <__ieee754_sqrt>
   c3a22:	2b00      	cmp	r3, #0
   c3a24:	d0db      	beq.n	c39de <__ieee754_pow+0x3e>
   c3a26:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   c3a2a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   c3a2e:	ea58 0302 	orrs.w	r3, r8, r2
   c3a32:	d109      	bne.n	c3a48 <__ieee754_pow+0xa8>
   c3a34:	ed9f 0b50 	vldr	d0, [pc, #320]	; c3b78 <__ieee754_pow+0x1d8>
   c3a38:	b007      	add	sp, #28
   c3a3a:	ecbd 8b0c 	vpop	{d8-d13}
   c3a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3a42:	b90c      	cbnz	r4, c3a48 <__ieee754_pow+0xa8>
   c3a44:	45c2      	cmp	sl, r8
   c3a46:	ddc7      	ble.n	c39d8 <__ieee754_pow+0x38>
   c3a48:	4852      	ldr	r0, [pc, #328]	; (c3b94 <__ieee754_pow+0x1f4>)
   c3a4a:	b007      	add	sp, #28
   c3a4c:	ecbd 8b0c 	vpop	{d8-d13}
   c3a50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3a54:	f000 be20 	b.w	c4698 <nan>
   c3a58:	494f      	ldr	r1, [pc, #316]	; (c3b98 <__ieee754_pow+0x1f8>)
   c3a5a:	458a      	cmp	sl, r1
   c3a5c:	f300 8085 	bgt.w	c3b6a <__ieee754_pow+0x1ca>
   c3a60:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   c3a64:	458a      	cmp	sl, r1
   c3a66:	dd0f      	ble.n	c3a88 <__ieee754_pow+0xe8>
   c3a68:	ea4f 512a 	mov.w	r1, sl, asr #20
   c3a6c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   c3a70:	2914      	cmp	r1, #20
   c3a72:	f340 849b 	ble.w	c43ac <__ieee754_pow+0xa0c>
   c3a76:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   c3a7a:	fa23 f001 	lsr.w	r0, r3, r1
   c3a7e:	fa00 f101 	lsl.w	r1, r0, r1
   c3a82:	4299      	cmp	r1, r3
   c3a84:	f000 84ed 	beq.w	c4462 <__ieee754_pow+0xac2>
   c3a88:	2100      	movs	r1, #0
   c3a8a:	9100      	str	r1, [sp, #0]
   c3a8c:	2b00      	cmp	r3, #0
   c3a8e:	d0b1      	beq.n	c39f4 <__ieee754_pow+0x54>
   c3a90:	ec45 4b10 	vmov	d0, r4, r5
   c3a94:	9202      	str	r2, [sp, #8]
   c3a96:	f000 fde9 	bl	c466c <fabs>
   c3a9a:	9a02      	ldr	r2, [sp, #8]
   c3a9c:	bb5a      	cbnz	r2, c3af6 <__ieee754_pow+0x156>
   c3a9e:	f1b8 0f00 	cmp.w	r8, #0
   c3aa2:	d004      	beq.n	c3aae <__ieee754_pow+0x10e>
   c3aa4:	4b39      	ldr	r3, [pc, #228]	; (c3b8c <__ieee754_pow+0x1ec>)
   c3aa6:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   c3aaa:	429a      	cmp	r2, r3
   c3aac:	d123      	bne.n	c3af6 <__ieee754_pow+0x156>
   c3aae:	f1bb 0f00 	cmp.w	fp, #0
   c3ab2:	da07      	bge.n	c3ac4 <__ieee754_pow+0x124>
   c3ab4:	ec53 2b10 	vmov	r2, r3, d0
   c3ab8:	4934      	ldr	r1, [pc, #208]	; (c3b8c <__ieee754_pow+0x1ec>)
   c3aba:	2000      	movs	r0, #0
   c3abc:	f001 fa08 	bl	c4ed0 <__aeabi_ddiv>
   c3ac0:	ec41 0b10 	vmov	d0, r0, r1
   c3ac4:	f1b9 0f00 	cmp.w	r9, #0
   c3ac8:	dab6      	bge.n	c3a38 <__ieee754_pow+0x98>
   c3aca:	9b00      	ldr	r3, [sp, #0]
   c3acc:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   c3ad0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   c3ad4:	ea58 0303 	orrs.w	r3, r8, r3
   c3ad8:	f040 848d 	bne.w	c43f6 <__ieee754_pow+0xa56>
   c3adc:	ec53 2b10 	vmov	r2, r3, d0
   c3ae0:	4610      	mov	r0, r2
   c3ae2:	4619      	mov	r1, r3
   c3ae4:	f000 ff12 	bl	c490c <__aeabi_dsub>
   c3ae8:	4602      	mov	r2, r0
   c3aea:	460b      	mov	r3, r1
   c3aec:	f001 f9f0 	bl	c4ed0 <__aeabi_ddiv>
   c3af0:	ec41 0b10 	vmov	d0, r0, r1
   c3af4:	e7a0      	b.n	c3a38 <__ieee754_pow+0x98>
   c3af6:	9a00      	ldr	r2, [sp, #0]
   c3af8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   c3afc:	3b01      	subs	r3, #1
   c3afe:	9304      	str	r3, [sp, #16]
   c3b00:	4313      	orrs	r3, r2
   c3b02:	d035      	beq.n	c3b70 <__ieee754_pow+0x1d0>
   c3b04:	4b25      	ldr	r3, [pc, #148]	; (c3b9c <__ieee754_pow+0x1fc>)
   c3b06:	459a      	cmp	sl, r3
   c3b08:	dd4c      	ble.n	c3ba4 <__ieee754_pow+0x204>
   c3b0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   c3b0e:	459a      	cmp	sl, r3
   c3b10:	4b23      	ldr	r3, [pc, #140]	; (c3ba0 <__ieee754_pow+0x200>)
   c3b12:	f340 83db 	ble.w	c42cc <__ieee754_pow+0x92c>
   c3b16:	4598      	cmp	r8, r3
   c3b18:	f340 8360 	ble.w	c41dc <__ieee754_pow+0x83c>
   c3b1c:	f1bb 0f00 	cmp.w	fp, #0
   c3b20:	f340 8360 	ble.w	c41e4 <__ieee754_pow+0x844>
   c3b24:	a316      	add	r3, pc, #88	; (adr r3, c3b80 <__ieee754_pow+0x1e0>)
   c3b26:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3b2a:	4610      	mov	r0, r2
   c3b2c:	4619      	mov	r1, r3
   c3b2e:	f001 f8a5 	bl	c4c7c <__aeabi_dmul>
   c3b32:	ec41 0b10 	vmov	d0, r0, r1
   c3b36:	e77f      	b.n	c3a38 <__ieee754_pow+0x98>
   c3b38:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   c3b3c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c3b40:	4313      	orrs	r3, r2
   c3b42:	f43f af77 	beq.w	c3a34 <__ieee754_pow+0x94>
   c3b46:	4b16      	ldr	r3, [pc, #88]	; (c3ba0 <__ieee754_pow+0x200>)
   c3b48:	4598      	cmp	r8, r3
   c3b4a:	f340 837a 	ble.w	c4242 <__ieee754_pow+0x8a2>
   c3b4e:	f1bb 0f00 	cmp.w	fp, #0
   c3b52:	f2c0 8347 	blt.w	c41e4 <__ieee754_pow+0x844>
   c3b56:	ec47 6b10 	vmov	d0, r6, r7
   c3b5a:	e76d      	b.n	c3a38 <__ieee754_pow+0x98>
   c3b5c:	f1bb 0f00 	cmp.w	fp, #0
   c3b60:	f2c0 841a 	blt.w	c4398 <__ieee754_pow+0x9f8>
   c3b64:	ec45 4b10 	vmov	d0, r4, r5
   c3b68:	e766      	b.n	c3a38 <__ieee754_pow+0x98>
   c3b6a:	2102      	movs	r1, #2
   c3b6c:	9100      	str	r1, [sp, #0]
   c3b6e:	e73b      	b.n	c39e8 <__ieee754_pow+0x48>
   c3b70:	4622      	mov	r2, r4
   c3b72:	462b      	mov	r3, r5
   c3b74:	e7b4      	b.n	c3ae0 <__ieee754_pow+0x140>
   c3b76:	bf00      	nop
   c3b78:	00000000 	.word	0x00000000
   c3b7c:	3ff00000 	.word	0x3ff00000
   c3b80:	8800759c 	.word	0x8800759c
   c3b84:	7e37e43c 	.word	0x7e37e43c
   c3b88:	7ff00000 	.word	0x7ff00000
   c3b8c:	3ff00000 	.word	0x3ff00000
   c3b90:	3fe00000 	.word	0x3fe00000
   c3b94:	000c94b0 	.word	0x000c94b0
   c3b98:	433fffff 	.word	0x433fffff
   c3b9c:	41e00000 	.word	0x41e00000
   c3ba0:	3fefffff 	.word	0x3fefffff
   c3ba4:	4be4      	ldr	r3, [pc, #912]	; (c3f38 <__ieee754_pow+0x598>)
   c3ba6:	ea09 0303 	and.w	r3, r9, r3
   c3baa:	2200      	movs	r2, #0
   c3bac:	b953      	cbnz	r3, c3bc4 <__ieee754_pow+0x224>
   c3bae:	ec51 0b10 	vmov	r0, r1, d0
   c3bb2:	4be2      	ldr	r3, [pc, #904]	; (c3f3c <__ieee754_pow+0x59c>)
   c3bb4:	f001 f862 	bl	c4c7c <__aeabi_dmul>
   c3bb8:	ec41 0b10 	vmov	d0, r0, r1
   c3bbc:	ee10 8a90 	vmov	r8, s1
   c3bc0:	f06f 0234 	mvn.w	r2, #52	; 0x34
   c3bc4:	ea4f 5328 	mov.w	r3, r8, asr #20
   c3bc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   c3bcc:	189a      	adds	r2, r3, r2
   c3bce:	4bdc      	ldr	r3, [pc, #880]	; (c3f40 <__ieee754_pow+0x5a0>)
   c3bd0:	9205      	str	r2, [sp, #20]
   c3bd2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   c3bd6:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   c3bda:	4598      	cmp	r8, r3
   c3bdc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   c3be0:	dd07      	ble.n	c3bf2 <__ieee754_pow+0x252>
   c3be2:	4bd8      	ldr	r3, [pc, #864]	; (c3f44 <__ieee754_pow+0x5a4>)
   c3be4:	4598      	cmp	r8, r3
   c3be6:	f340 8414 	ble.w	c4412 <__ieee754_pow+0xa72>
   c3bea:	3201      	adds	r2, #1
   c3bec:	9205      	str	r2, [sp, #20]
   c3bee:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   c3bf2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; c3ed8 <__ieee754_pow+0x538>
   c3bf6:	ed9f 7bba 	vldr	d7, [pc, #744]	; c3ee0 <__ieee754_pow+0x540>
   c3bfa:	ec53 2b16 	vmov	r2, r3, d6
   c3bfe:	eeb0 ca47 	vmov.f32	s24, s14
   c3c02:	eef0 ca67 	vmov.f32	s25, s15
   c3c06:	2500      	movs	r5, #0
   c3c08:	eeb0 da47 	vmov.f32	s26, s14
   c3c0c:	eef0 da67 	vmov.f32	s27, s15
   c3c10:	ec5b ab10 	vmov	sl, fp, d0
   c3c14:	46a3      	mov	fp, r4
   c3c16:	4650      	mov	r0, sl
   c3c18:	4659      	mov	r1, fp
   c3c1a:	ec43 2b1a 	vmov	d10, r2, r3
   c3c1e:	f000 fe75 	bl	c490c <__aeabi_dsub>
   c3c22:	ec53 2b1a 	vmov	r2, r3, d10
   c3c26:	4680      	mov	r8, r0
   c3c28:	4689      	mov	r9, r1
   c3c2a:	4650      	mov	r0, sl
   c3c2c:	4659      	mov	r1, fp
   c3c2e:	f000 fe6f 	bl	c4910 <__adddf3>
   c3c32:	4602      	mov	r2, r0
   c3c34:	460b      	mov	r3, r1
   c3c36:	2000      	movs	r0, #0
   c3c38:	49c3      	ldr	r1, [pc, #780]	; (c3f48 <__ieee754_pow+0x5a8>)
   c3c3a:	f001 f949 	bl	c4ed0 <__aeabi_ddiv>
   c3c3e:	ec41 0b1b 	vmov	d11, r0, r1
   c3c42:	4640      	mov	r0, r8
   c3c44:	ec53 2b1b 	vmov	r2, r3, d11
   c3c48:	4649      	mov	r1, r9
   c3c4a:	f001 f817 	bl	c4c7c <__aeabi_dmul>
   c3c4e:	ec41 0b18 	vmov	d8, r0, r1
   c3c52:	460a      	mov	r2, r1
   c3c54:	4601      	mov	r1, r0
   c3c56:	e9cd 1202 	strd	r1, r2, [sp, #8]
   c3c5a:	2100      	movs	r1, #0
   c3c5c:	9102      	str	r1, [sp, #8]
   c3c5e:	1064      	asrs	r4, r4, #1
   c3c60:	ec4b ab19 	vmov	d9, sl, fp
   c3c64:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   c3c68:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   c3c6c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   c3c70:	2000      	movs	r0, #0
   c3c72:	1959      	adds	r1, r3, r5
   c3c74:	4604      	mov	r4, r0
   c3c76:	460d      	mov	r5, r1
   c3c78:	4602      	mov	r2, r0
   c3c7a:	460b      	mov	r3, r1
   c3c7c:	4650      	mov	r0, sl
   c3c7e:	4659      	mov	r1, fp
   c3c80:	f000 fffc 	bl	c4c7c <__aeabi_dmul>
   c3c84:	4602      	mov	r2, r0
   c3c86:	460b      	mov	r3, r1
   c3c88:	4640      	mov	r0, r8
   c3c8a:	4649      	mov	r1, r9
   c3c8c:	f000 fe3e 	bl	c490c <__aeabi_dsub>
   c3c90:	ec53 2b1a 	vmov	r2, r3, d10
   c3c94:	4680      	mov	r8, r0
   c3c96:	4689      	mov	r9, r1
   c3c98:	4620      	mov	r0, r4
   c3c9a:	4629      	mov	r1, r5
   c3c9c:	f000 fe36 	bl	c490c <__aeabi_dsub>
   c3ca0:	4602      	mov	r2, r0
   c3ca2:	460b      	mov	r3, r1
   c3ca4:	ec51 0b19 	vmov	r0, r1, d9
   c3ca8:	f000 fe30 	bl	c490c <__aeabi_dsub>
   c3cac:	4652      	mov	r2, sl
   c3cae:	465b      	mov	r3, fp
   c3cb0:	f000 ffe4 	bl	c4c7c <__aeabi_dmul>
   c3cb4:	4602      	mov	r2, r0
   c3cb6:	460b      	mov	r3, r1
   c3cb8:	4640      	mov	r0, r8
   c3cba:	4649      	mov	r1, r9
   c3cbc:	f000 fe26 	bl	c490c <__aeabi_dsub>
   c3cc0:	ec53 2b1b 	vmov	r2, r3, d11
   c3cc4:	f000 ffda 	bl	c4c7c <__aeabi_dmul>
   c3cc8:	ec53 2b18 	vmov	r2, r3, d8
   c3ccc:	ec41 0b19 	vmov	d9, r0, r1
   c3cd0:	ec51 0b18 	vmov	r0, r1, d8
   c3cd4:	f000 ffd2 	bl	c4c7c <__aeabi_dmul>
   c3cd8:	a383      	add	r3, pc, #524	; (adr r3, c3ee8 <__ieee754_pow+0x548>)
   c3cda:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3cde:	4604      	mov	r4, r0
   c3ce0:	460d      	mov	r5, r1
   c3ce2:	f000 ffcb 	bl	c4c7c <__aeabi_dmul>
   c3ce6:	a382      	add	r3, pc, #520	; (adr r3, c3ef0 <__ieee754_pow+0x550>)
   c3ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3cec:	f000 fe10 	bl	c4910 <__adddf3>
   c3cf0:	4622      	mov	r2, r4
   c3cf2:	462b      	mov	r3, r5
   c3cf4:	f000 ffc2 	bl	c4c7c <__aeabi_dmul>
   c3cf8:	a37f      	add	r3, pc, #508	; (adr r3, c3ef8 <__ieee754_pow+0x558>)
   c3cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3cfe:	f000 fe07 	bl	c4910 <__adddf3>
   c3d02:	4622      	mov	r2, r4
   c3d04:	462b      	mov	r3, r5
   c3d06:	f000 ffb9 	bl	c4c7c <__aeabi_dmul>
   c3d0a:	a37d      	add	r3, pc, #500	; (adr r3, c3f00 <__ieee754_pow+0x560>)
   c3d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3d10:	f000 fdfe 	bl	c4910 <__adddf3>
   c3d14:	4622      	mov	r2, r4
   c3d16:	462b      	mov	r3, r5
   c3d18:	f000 ffb0 	bl	c4c7c <__aeabi_dmul>
   c3d1c:	a37a      	add	r3, pc, #488	; (adr r3, c3f08 <__ieee754_pow+0x568>)
   c3d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3d22:	f000 fdf5 	bl	c4910 <__adddf3>
   c3d26:	4622      	mov	r2, r4
   c3d28:	462b      	mov	r3, r5
   c3d2a:	f000 ffa7 	bl	c4c7c <__aeabi_dmul>
   c3d2e:	a378      	add	r3, pc, #480	; (adr r3, c3f10 <__ieee754_pow+0x570>)
   c3d30:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3d34:	f000 fdec 	bl	c4910 <__adddf3>
   c3d38:	4622      	mov	r2, r4
   c3d3a:	4680      	mov	r8, r0
   c3d3c:	4689      	mov	r9, r1
   c3d3e:	462b      	mov	r3, r5
   c3d40:	4620      	mov	r0, r4
   c3d42:	4629      	mov	r1, r5
   c3d44:	f000 ff9a 	bl	c4c7c <__aeabi_dmul>
   c3d48:	4602      	mov	r2, r0
   c3d4a:	460b      	mov	r3, r1
   c3d4c:	4640      	mov	r0, r8
   c3d4e:	4649      	mov	r1, r9
   c3d50:	f000 ff94 	bl	c4c7c <__aeabi_dmul>
   c3d54:	4652      	mov	r2, sl
   c3d56:	4604      	mov	r4, r0
   c3d58:	460d      	mov	r5, r1
   c3d5a:	465b      	mov	r3, fp
   c3d5c:	ec51 0b18 	vmov	r0, r1, d8
   c3d60:	f000 fdd6 	bl	c4910 <__adddf3>
   c3d64:	ec53 2b19 	vmov	r2, r3, d9
   c3d68:	f000 ff88 	bl	c4c7c <__aeabi_dmul>
   c3d6c:	4622      	mov	r2, r4
   c3d6e:	462b      	mov	r3, r5
   c3d70:	f000 fdce 	bl	c4910 <__adddf3>
   c3d74:	4652      	mov	r2, sl
   c3d76:	4680      	mov	r8, r0
   c3d78:	4689      	mov	r9, r1
   c3d7a:	465b      	mov	r3, fp
   c3d7c:	4650      	mov	r0, sl
   c3d7e:	4659      	mov	r1, fp
   c3d80:	f000 ff7c 	bl	c4c7c <__aeabi_dmul>
   c3d84:	4602      	mov	r2, r0
   c3d86:	460b      	mov	r3, r1
   c3d88:	ec43 2b1a 	vmov	d10, r2, r3
   c3d8c:	4b6f      	ldr	r3, [pc, #444]	; (c3f4c <__ieee754_pow+0x5ac>)
   c3d8e:	2200      	movs	r2, #0
   c3d90:	f000 fdbe 	bl	c4910 <__adddf3>
   c3d94:	4642      	mov	r2, r8
   c3d96:	464b      	mov	r3, r9
   c3d98:	f000 fdba 	bl	c4910 <__adddf3>
   c3d9c:	2400      	movs	r4, #0
   c3d9e:	460d      	mov	r5, r1
   c3da0:	4622      	mov	r2, r4
   c3da2:	462b      	mov	r3, r5
   c3da4:	4650      	mov	r0, sl
   c3da6:	4659      	mov	r1, fp
   c3da8:	f000 ff68 	bl	c4c7c <__aeabi_dmul>
   c3dac:	4b67      	ldr	r3, [pc, #412]	; (c3f4c <__ieee754_pow+0x5ac>)
   c3dae:	4682      	mov	sl, r0
   c3db0:	468b      	mov	fp, r1
   c3db2:	2200      	movs	r2, #0
   c3db4:	4620      	mov	r0, r4
   c3db6:	4629      	mov	r1, r5
   c3db8:	f000 fda8 	bl	c490c <__aeabi_dsub>
   c3dbc:	ec53 2b1a 	vmov	r2, r3, d10
   c3dc0:	f000 fda4 	bl	c490c <__aeabi_dsub>
   c3dc4:	4602      	mov	r2, r0
   c3dc6:	460b      	mov	r3, r1
   c3dc8:	4640      	mov	r0, r8
   c3dca:	4649      	mov	r1, r9
   c3dcc:	f000 fd9e 	bl	c490c <__aeabi_dsub>
   c3dd0:	ec53 2b18 	vmov	r2, r3, d8
   c3dd4:	f000 ff52 	bl	c4c7c <__aeabi_dmul>
   c3dd8:	4622      	mov	r2, r4
   c3dda:	462b      	mov	r3, r5
   c3ddc:	4604      	mov	r4, r0
   c3dde:	460d      	mov	r5, r1
   c3de0:	ec51 0b19 	vmov	r0, r1, d9
   c3de4:	f000 ff4a 	bl	c4c7c <__aeabi_dmul>
   c3de8:	4602      	mov	r2, r0
   c3dea:	460b      	mov	r3, r1
   c3dec:	4620      	mov	r0, r4
   c3dee:	4629      	mov	r1, r5
   c3df0:	f000 fd8e 	bl	c4910 <__adddf3>
   c3df4:	4680      	mov	r8, r0
   c3df6:	4689      	mov	r9, r1
   c3df8:	4642      	mov	r2, r8
   c3dfa:	464b      	mov	r3, r9
   c3dfc:	4650      	mov	r0, sl
   c3dfe:	4659      	mov	r1, fp
   c3e00:	f000 fd86 	bl	c4910 <__adddf3>
   c3e04:	a344      	add	r3, pc, #272	; (adr r3, c3f18 <__ieee754_pow+0x578>)
   c3e06:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3e0a:	2000      	movs	r0, #0
   c3e0c:	4604      	mov	r4, r0
   c3e0e:	460d      	mov	r5, r1
   c3e10:	f000 ff34 	bl	c4c7c <__aeabi_dmul>
   c3e14:	4652      	mov	r2, sl
   c3e16:	ec41 0b19 	vmov	d9, r0, r1
   c3e1a:	465b      	mov	r3, fp
   c3e1c:	4620      	mov	r0, r4
   c3e1e:	4629      	mov	r1, r5
   c3e20:	f000 fd74 	bl	c490c <__aeabi_dsub>
   c3e24:	4602      	mov	r2, r0
   c3e26:	460b      	mov	r3, r1
   c3e28:	4640      	mov	r0, r8
   c3e2a:	4649      	mov	r1, r9
   c3e2c:	f000 fd6e 	bl	c490c <__aeabi_dsub>
   c3e30:	a33b      	add	r3, pc, #236	; (adr r3, c3f20 <__ieee754_pow+0x580>)
   c3e32:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3e36:	f000 ff21 	bl	c4c7c <__aeabi_dmul>
   c3e3a:	4602      	mov	r2, r0
   c3e3c:	460b      	mov	r3, r1
   c3e3e:	4620      	mov	r0, r4
   c3e40:	4629      	mov	r1, r5
   c3e42:	4614      	mov	r4, r2
   c3e44:	461d      	mov	r5, r3
   c3e46:	a338      	add	r3, pc, #224	; (adr r3, c3f28 <__ieee754_pow+0x588>)
   c3e48:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3e4c:	f000 ff16 	bl	c4c7c <__aeabi_dmul>
   c3e50:	4602      	mov	r2, r0
   c3e52:	460b      	mov	r3, r1
   c3e54:	4620      	mov	r0, r4
   c3e56:	4629      	mov	r1, r5
   c3e58:	f000 fd5a 	bl	c4910 <__adddf3>
   c3e5c:	ec53 2b1d 	vmov	r2, r3, d13
   c3e60:	f000 fd56 	bl	c4910 <__adddf3>
   c3e64:	4680      	mov	r8, r0
   c3e66:	9805      	ldr	r0, [sp, #20]
   c3e68:	4689      	mov	r9, r1
   c3e6a:	f000 fe9d 	bl	c4ba8 <__aeabi_i2d>
   c3e6e:	4642      	mov	r2, r8
   c3e70:	4682      	mov	sl, r0
   c3e72:	468b      	mov	fp, r1
   c3e74:	464b      	mov	r3, r9
   c3e76:	ec51 0b19 	vmov	r0, r1, d9
   c3e7a:	f000 fd49 	bl	c4910 <__adddf3>
   c3e7e:	ec53 2b1c 	vmov	r2, r3, d12
   c3e82:	f000 fd45 	bl	c4910 <__adddf3>
   c3e86:	4652      	mov	r2, sl
   c3e88:	465b      	mov	r3, fp
   c3e8a:	f000 fd41 	bl	c4910 <__adddf3>
   c3e8e:	4652      	mov	r2, sl
   c3e90:	465b      	mov	r3, fp
   c3e92:	2000      	movs	r0, #0
   c3e94:	4604      	mov	r4, r0
   c3e96:	460d      	mov	r5, r1
   c3e98:	f000 fd38 	bl	c490c <__aeabi_dsub>
   c3e9c:	ec53 2b1c 	vmov	r2, r3, d12
   c3ea0:	f000 fd34 	bl	c490c <__aeabi_dsub>
   c3ea4:	ec53 2b19 	vmov	r2, r3, d9
   c3ea8:	f000 fd30 	bl	c490c <__aeabi_dsub>
   c3eac:	4602      	mov	r2, r0
   c3eae:	460b      	mov	r3, r1
   c3eb0:	4640      	mov	r0, r8
   c3eb2:	4649      	mov	r1, r9
   c3eb4:	f000 fd2a 	bl	c490c <__aeabi_dsub>
   c3eb8:	9b00      	ldr	r3, [sp, #0]
   c3eba:	9a04      	ldr	r2, [sp, #16]
   c3ebc:	3b01      	subs	r3, #1
   c3ebe:	4313      	orrs	r3, r2
   c3ec0:	4682      	mov	sl, r0
   c3ec2:	468b      	mov	fp, r1
   c3ec4:	f040 81b6 	bne.w	c4234 <__ieee754_pow+0x894>
   c3ec8:	ed9f 7b19 	vldr	d7, [pc, #100]	; c3f30 <__ieee754_pow+0x590>
   c3ecc:	eeb0 8a47 	vmov.f32	s16, s14
   c3ed0:	eef0 8a67 	vmov.f32	s17, s15
   c3ed4:	e03c      	b.n	c3f50 <__ieee754_pow+0x5b0>
   c3ed6:	bf00      	nop
   c3ed8:	00000000 	.word	0x00000000
   c3edc:	3ff00000 	.word	0x3ff00000
	...
   c3ee8:	4a454eef 	.word	0x4a454eef
   c3eec:	3fca7e28 	.word	0x3fca7e28
   c3ef0:	93c9db65 	.word	0x93c9db65
   c3ef4:	3fcd864a 	.word	0x3fcd864a
   c3ef8:	a91d4101 	.word	0xa91d4101
   c3efc:	3fd17460 	.word	0x3fd17460
   c3f00:	518f264d 	.word	0x518f264d
   c3f04:	3fd55555 	.word	0x3fd55555
   c3f08:	db6fabff 	.word	0xdb6fabff
   c3f0c:	3fdb6db6 	.word	0x3fdb6db6
   c3f10:	33333303 	.word	0x33333303
   c3f14:	3fe33333 	.word	0x3fe33333
   c3f18:	e0000000 	.word	0xe0000000
   c3f1c:	3feec709 	.word	0x3feec709
   c3f20:	dc3a03fd 	.word	0xdc3a03fd
   c3f24:	3feec709 	.word	0x3feec709
   c3f28:	145b01f5 	.word	0x145b01f5
   c3f2c:	be3e2fe0 	.word	0xbe3e2fe0
   c3f30:	00000000 	.word	0x00000000
   c3f34:	bff00000 	.word	0xbff00000
   c3f38:	7ff00000 	.word	0x7ff00000
   c3f3c:	43400000 	.word	0x43400000
   c3f40:	0003988e 	.word	0x0003988e
   c3f44:	000bb679 	.word	0x000bb679
   c3f48:	3ff00000 	.word	0x3ff00000
   c3f4c:	40080000 	.word	0x40080000
   c3f50:	2300      	movs	r3, #0
   c3f52:	e9cd 6700 	strd	r6, r7, [sp]
   c3f56:	9300      	str	r3, [sp, #0]
   c3f58:	e9dd 8900 	ldrd	r8, r9, [sp]
   c3f5c:	4630      	mov	r0, r6
   c3f5e:	4642      	mov	r2, r8
   c3f60:	464b      	mov	r3, r9
   c3f62:	4639      	mov	r1, r7
   c3f64:	f000 fcd2 	bl	c490c <__aeabi_dsub>
   c3f68:	4622      	mov	r2, r4
   c3f6a:	462b      	mov	r3, r5
   c3f6c:	f000 fe86 	bl	c4c7c <__aeabi_dmul>
   c3f70:	4632      	mov	r2, r6
   c3f72:	463b      	mov	r3, r7
   c3f74:	4606      	mov	r6, r0
   c3f76:	460f      	mov	r7, r1
   c3f78:	4650      	mov	r0, sl
   c3f7a:	4659      	mov	r1, fp
   c3f7c:	f000 fe7e 	bl	c4c7c <__aeabi_dmul>
   c3f80:	4602      	mov	r2, r0
   c3f82:	460b      	mov	r3, r1
   c3f84:	4630      	mov	r0, r6
   c3f86:	4639      	mov	r1, r7
   c3f88:	f000 fcc2 	bl	c4910 <__adddf3>
   c3f8c:	4642      	mov	r2, r8
   c3f8e:	464b      	mov	r3, r9
   c3f90:	4606      	mov	r6, r0
   c3f92:	460f      	mov	r7, r1
   c3f94:	4620      	mov	r0, r4
   c3f96:	4629      	mov	r1, r5
   c3f98:	f000 fe70 	bl	c4c7c <__aeabi_dmul>
   c3f9c:	4604      	mov	r4, r0
   c3f9e:	460d      	mov	r5, r1
   c3fa0:	462b      	mov	r3, r5
   c3fa2:	4630      	mov	r0, r6
   c3fa4:	4639      	mov	r1, r7
   c3fa6:	4622      	mov	r2, r4
   c3fa8:	f000 fcb2 	bl	c4910 <__adddf3>
   c3fac:	4bc2      	ldr	r3, [pc, #776]	; (c42b8 <__ieee754_pow+0x918>)
   c3fae:	4299      	cmp	r1, r3
   c3fb0:	4680      	mov	r8, r0
   c3fb2:	4689      	mov	r9, r1
   c3fb4:	468a      	mov	sl, r1
   c3fb6:	f340 8118 	ble.w	c41ea <__ieee754_pow+0x84a>
   c3fba:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   c3fbe:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   c3fc2:	4303      	orrs	r3, r0
   c3fc4:	f040 8207 	bne.w	c43d6 <__ieee754_pow+0xa36>
   c3fc8:	a3a3      	add	r3, pc, #652	; (adr r3, c4258 <__ieee754_pow+0x8b8>)
   c3fca:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3fce:	4630      	mov	r0, r6
   c3fd0:	4639      	mov	r1, r7
   c3fd2:	f000 fc9d 	bl	c4910 <__adddf3>
   c3fd6:	4602      	mov	r2, r0
   c3fd8:	460b      	mov	r3, r1
   c3fda:	4640      	mov	r0, r8
   c3fdc:	4649      	mov	r1, r9
   c3fde:	4690      	mov	r8, r2
   c3fe0:	4699      	mov	r9, r3
   c3fe2:	4622      	mov	r2, r4
   c3fe4:	462b      	mov	r3, r5
   c3fe6:	f000 fc91 	bl	c490c <__aeabi_dsub>
   c3fea:	4602      	mov	r2, r0
   c3fec:	460b      	mov	r3, r1
   c3fee:	4640      	mov	r0, r8
   c3ff0:	4649      	mov	r1, r9
   c3ff2:	f001 f8d3 	bl	c519c <__aeabi_dcmpgt>
   c3ff6:	2800      	cmp	r0, #0
   c3ff8:	f040 81ed 	bne.w	c43d6 <__ieee754_pow+0xa36>
   c3ffc:	f3ca 530a 	ubfx	r3, sl, #20, #11
   c4000:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   c4004:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   c4008:	fa42 f303 	asr.w	r3, r2, r3
   c400c:	4453      	add	r3, sl
   c400e:	49ab      	ldr	r1, [pc, #684]	; (c42bc <__ieee754_pow+0x91c>)
   c4010:	f3c3 520a 	ubfx	r2, r3, #20, #11
   c4014:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   c4018:	fa41 fc02 	asr.w	ip, r1, r2
   c401c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   c4020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4024:	f1c2 0214 	rsb	r2, r2, #20
   c4028:	fa41 f202 	asr.w	r2, r1, r2
   c402c:	2000      	movs	r0, #0
   c402e:	ea23 010c 	bic.w	r1, r3, ip
   c4032:	f1ba 0f00 	cmp.w	sl, #0
   c4036:	9200      	str	r2, [sp, #0]
   c4038:	460b      	mov	r3, r1
   c403a:	4602      	mov	r2, r0
   c403c:	da02      	bge.n	c4044 <__ieee754_pow+0x6a4>
   c403e:	9900      	ldr	r1, [sp, #0]
   c4040:	4249      	negs	r1, r1
   c4042:	9100      	str	r1, [sp, #0]
   c4044:	4620      	mov	r0, r4
   c4046:	4629      	mov	r1, r5
   c4048:	f000 fc60 	bl	c490c <__aeabi_dsub>
   c404c:	9b00      	ldr	r3, [sp, #0]
   c404e:	051b      	lsls	r3, r3, #20
   c4050:	9302      	str	r3, [sp, #8]
   c4052:	4602      	mov	r2, r0
   c4054:	460b      	mov	r3, r1
   c4056:	4604      	mov	r4, r0
   c4058:	460d      	mov	r5, r1
   c405a:	4630      	mov	r0, r6
   c405c:	4639      	mov	r1, r7
   c405e:	f000 fc57 	bl	c4910 <__adddf3>
   c4062:	4689      	mov	r9, r1
   c4064:	f04f 0800 	mov.w	r8, #0
   c4068:	a37d      	add	r3, pc, #500	; (adr r3, c4260 <__ieee754_pow+0x8c0>)
   c406a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c406e:	4640      	mov	r0, r8
   c4070:	4649      	mov	r1, r9
   c4072:	f000 fe03 	bl	c4c7c <__aeabi_dmul>
   c4076:	4622      	mov	r2, r4
   c4078:	462b      	mov	r3, r5
   c407a:	4682      	mov	sl, r0
   c407c:	468b      	mov	fp, r1
   c407e:	4640      	mov	r0, r8
   c4080:	4649      	mov	r1, r9
   c4082:	f000 fc43 	bl	c490c <__aeabi_dsub>
   c4086:	4602      	mov	r2, r0
   c4088:	460b      	mov	r3, r1
   c408a:	4630      	mov	r0, r6
   c408c:	4639      	mov	r1, r7
   c408e:	f000 fc3d 	bl	c490c <__aeabi_dsub>
   c4092:	a375      	add	r3, pc, #468	; (adr r3, c4268 <__ieee754_pow+0x8c8>)
   c4094:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4098:	f000 fdf0 	bl	c4c7c <__aeabi_dmul>
   c409c:	a374      	add	r3, pc, #464	; (adr r3, c4270 <__ieee754_pow+0x8d0>)
   c409e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c40a2:	4604      	mov	r4, r0
   c40a4:	460d      	mov	r5, r1
   c40a6:	4640      	mov	r0, r8
   c40a8:	4649      	mov	r1, r9
   c40aa:	f000 fde7 	bl	c4c7c <__aeabi_dmul>
   c40ae:	4602      	mov	r2, r0
   c40b0:	460b      	mov	r3, r1
   c40b2:	4620      	mov	r0, r4
   c40b4:	4629      	mov	r1, r5
   c40b6:	f000 fc2b 	bl	c4910 <__adddf3>
   c40ba:	4606      	mov	r6, r0
   c40bc:	460f      	mov	r7, r1
   c40be:	4632      	mov	r2, r6
   c40c0:	463b      	mov	r3, r7
   c40c2:	4650      	mov	r0, sl
   c40c4:	4659      	mov	r1, fp
   c40c6:	f000 fc23 	bl	c4910 <__adddf3>
   c40ca:	4652      	mov	r2, sl
   c40cc:	465b      	mov	r3, fp
   c40ce:	4604      	mov	r4, r0
   c40d0:	460d      	mov	r5, r1
   c40d2:	f000 fc1b 	bl	c490c <__aeabi_dsub>
   c40d6:	4602      	mov	r2, r0
   c40d8:	460b      	mov	r3, r1
   c40da:	4630      	mov	r0, r6
   c40dc:	4639      	mov	r1, r7
   c40de:	f000 fc15 	bl	c490c <__aeabi_dsub>
   c40e2:	4622      	mov	r2, r4
   c40e4:	4680      	mov	r8, r0
   c40e6:	4689      	mov	r9, r1
   c40e8:	462b      	mov	r3, r5
   c40ea:	4620      	mov	r0, r4
   c40ec:	4629      	mov	r1, r5
   c40ee:	f000 fdc5 	bl	c4c7c <__aeabi_dmul>
   c40f2:	a361      	add	r3, pc, #388	; (adr r3, c4278 <__ieee754_pow+0x8d8>)
   c40f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c40f8:	4606      	mov	r6, r0
   c40fa:	460f      	mov	r7, r1
   c40fc:	f000 fdbe 	bl	c4c7c <__aeabi_dmul>
   c4100:	a35f      	add	r3, pc, #380	; (adr r3, c4280 <__ieee754_pow+0x8e0>)
   c4102:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4106:	f000 fc01 	bl	c490c <__aeabi_dsub>
   c410a:	4632      	mov	r2, r6
   c410c:	463b      	mov	r3, r7
   c410e:	f000 fdb5 	bl	c4c7c <__aeabi_dmul>
   c4112:	a35d      	add	r3, pc, #372	; (adr r3, c4288 <__ieee754_pow+0x8e8>)
   c4114:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4118:	f000 fbfa 	bl	c4910 <__adddf3>
   c411c:	4632      	mov	r2, r6
   c411e:	463b      	mov	r3, r7
   c4120:	f000 fdac 	bl	c4c7c <__aeabi_dmul>
   c4124:	a35a      	add	r3, pc, #360	; (adr r3, c4290 <__ieee754_pow+0x8f0>)
   c4126:	e9d3 2300 	ldrd	r2, r3, [r3]
   c412a:	f000 fbef 	bl	c490c <__aeabi_dsub>
   c412e:	4632      	mov	r2, r6
   c4130:	463b      	mov	r3, r7
   c4132:	f000 fda3 	bl	c4c7c <__aeabi_dmul>
   c4136:	a358      	add	r3, pc, #352	; (adr r3, c4298 <__ieee754_pow+0x8f8>)
   c4138:	e9d3 2300 	ldrd	r2, r3, [r3]
   c413c:	f000 fbe8 	bl	c4910 <__adddf3>
   c4140:	4632      	mov	r2, r6
   c4142:	463b      	mov	r3, r7
   c4144:	f000 fd9a 	bl	c4c7c <__aeabi_dmul>
   c4148:	4602      	mov	r2, r0
   c414a:	460b      	mov	r3, r1
   c414c:	4620      	mov	r0, r4
   c414e:	4629      	mov	r1, r5
   c4150:	f000 fbdc 	bl	c490c <__aeabi_dsub>
   c4154:	4606      	mov	r6, r0
   c4156:	460f      	mov	r7, r1
   c4158:	4632      	mov	r2, r6
   c415a:	463b      	mov	r3, r7
   c415c:	4620      	mov	r0, r4
   c415e:	4629      	mov	r1, r5
   c4160:	f000 fd8c 	bl	c4c7c <__aeabi_dmul>
   c4164:	4602      	mov	r2, r0
   c4166:	460b      	mov	r3, r1
   c4168:	4630      	mov	r0, r6
   c416a:	4639      	mov	r1, r7
   c416c:	4616      	mov	r6, r2
   c416e:	461f      	mov	r7, r3
   c4170:	2200      	movs	r2, #0
   c4172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c4176:	f000 fbc9 	bl	c490c <__aeabi_dsub>
   c417a:	4602      	mov	r2, r0
   c417c:	460b      	mov	r3, r1
   c417e:	4630      	mov	r0, r6
   c4180:	4639      	mov	r1, r7
   c4182:	f000 fea5 	bl	c4ed0 <__aeabi_ddiv>
   c4186:	4642      	mov	r2, r8
   c4188:	4606      	mov	r6, r0
   c418a:	460f      	mov	r7, r1
   c418c:	464b      	mov	r3, r9
   c418e:	4620      	mov	r0, r4
   c4190:	4629      	mov	r1, r5
   c4192:	f000 fd73 	bl	c4c7c <__aeabi_dmul>
   c4196:	4642      	mov	r2, r8
   c4198:	464b      	mov	r3, r9
   c419a:	f000 fbb9 	bl	c4910 <__adddf3>
   c419e:	4602      	mov	r2, r0
   c41a0:	460b      	mov	r3, r1
   c41a2:	4630      	mov	r0, r6
   c41a4:	4639      	mov	r1, r7
   c41a6:	f000 fbb1 	bl	c490c <__aeabi_dsub>
   c41aa:	4622      	mov	r2, r4
   c41ac:	462b      	mov	r3, r5
   c41ae:	f000 fbad 	bl	c490c <__aeabi_dsub>
   c41b2:	4602      	mov	r2, r0
   c41b4:	460b      	mov	r3, r1
   c41b6:	2000      	movs	r0, #0
   c41b8:	4941      	ldr	r1, [pc, #260]	; (c42c0 <__ieee754_pow+0x920>)
   c41ba:	f000 fba7 	bl	c490c <__aeabi_dsub>
   c41be:	9a02      	ldr	r2, [sp, #8]
   c41c0:	460b      	mov	r3, r1
   c41c2:	4413      	add	r3, r2
   c41c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   c41c8:	f2c0 8143 	blt.w	c4452 <__ieee754_pow+0xab2>
   c41cc:	4619      	mov	r1, r3
   c41ce:	ec53 2b18 	vmov	r2, r3, d8
   c41d2:	f000 fd53 	bl	c4c7c <__aeabi_dmul>
   c41d6:	ec41 0b10 	vmov	d0, r0, r1
   c41da:	e42d      	b.n	c3a38 <__ieee754_pow+0x98>
   c41dc:	f1bb 0f00 	cmp.w	fp, #0
   c41e0:	f6ff aca0 	blt.w	c3b24 <__ieee754_pow+0x184>
   c41e4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c42a0 <__ieee754_pow+0x900>
   c41e8:	e426      	b.n	c3a38 <__ieee754_pow+0x98>
   c41ea:	f8df c0dc 	ldr.w	ip, [pc, #220]	; c42c8 <__ieee754_pow+0x928>
   c41ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c41f2:	4563      	cmp	r3, ip
   c41f4:	f340 80e7 	ble.w	c43c6 <__ieee754_pow+0xa26>
   c41f8:	4b32      	ldr	r3, [pc, #200]	; (c42c4 <__ieee754_pow+0x924>)
   c41fa:	440b      	add	r3, r1
   c41fc:	4303      	orrs	r3, r0
   c41fe:	d10a      	bne.n	c4216 <__ieee754_pow+0x876>
   c4200:	4622      	mov	r2, r4
   c4202:	462b      	mov	r3, r5
   c4204:	f000 fb82 	bl	c490c <__aeabi_dsub>
   c4208:	4632      	mov	r2, r6
   c420a:	463b      	mov	r3, r7
   c420c:	f000 ffbc 	bl	c5188 <__aeabi_dcmpge>
   c4210:	2800      	cmp	r0, #0
   c4212:	f43f aef3 	beq.w	c3ffc <__ieee754_pow+0x65c>
   c4216:	a324      	add	r3, pc, #144	; (adr r3, c42a8 <__ieee754_pow+0x908>)
   c4218:	e9d3 2300 	ldrd	r2, r3, [r3]
   c421c:	ec51 0b18 	vmov	r0, r1, d8
   c4220:	f000 fd2c 	bl	c4c7c <__aeabi_dmul>
   c4224:	a320      	add	r3, pc, #128	; (adr r3, c42a8 <__ieee754_pow+0x908>)
   c4226:	e9d3 2300 	ldrd	r2, r3, [r3]
   c422a:	f000 fd27 	bl	c4c7c <__aeabi_dmul>
   c422e:	ec41 0b10 	vmov	d0, r0, r1
   c4232:	e401      	b.n	c3a38 <__ieee754_pow+0x98>
   c4234:	ed9f 7b1e 	vldr	d7, [pc, #120]	; c42b0 <__ieee754_pow+0x910>
   c4238:	eeb0 8a47 	vmov.f32	s16, s14
   c423c:	eef0 8a67 	vmov.f32	s17, s15
   c4240:	e686      	b.n	c3f50 <__ieee754_pow+0x5b0>
   c4242:	f1bb 0f00 	cmp.w	fp, #0
   c4246:	dacd      	bge.n	c41e4 <__ieee754_pow+0x844>
   c4248:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   c424c:	ee00 6a10 	vmov	s0, r6
   c4250:	ee00 3a90 	vmov	s1, r3
   c4254:	f7ff bbf0 	b.w	c3a38 <__ieee754_pow+0x98>
   c4258:	652b82fe 	.word	0x652b82fe
   c425c:	3c971547 	.word	0x3c971547
   c4260:	00000000 	.word	0x00000000
   c4264:	3fe62e43 	.word	0x3fe62e43
   c4268:	fefa39ef 	.word	0xfefa39ef
   c426c:	3fe62e42 	.word	0x3fe62e42
   c4270:	0ca86c39 	.word	0x0ca86c39
   c4274:	be205c61 	.word	0xbe205c61
   c4278:	72bea4d0 	.word	0x72bea4d0
   c427c:	3e663769 	.word	0x3e663769
   c4280:	c5d26bf1 	.word	0xc5d26bf1
   c4284:	3ebbbd41 	.word	0x3ebbbd41
   c4288:	af25de2c 	.word	0xaf25de2c
   c428c:	3f11566a 	.word	0x3f11566a
   c4290:	16bebd93 	.word	0x16bebd93
   c4294:	3f66c16c 	.word	0x3f66c16c
   c4298:	5555553e 	.word	0x5555553e
   c429c:	3fc55555 	.word	0x3fc55555
	...
   c42a8:	c2f8f359 	.word	0xc2f8f359
   c42ac:	01a56e1f 	.word	0x01a56e1f
   c42b0:	00000000 	.word	0x00000000
   c42b4:	3ff00000 	.word	0x3ff00000
   c42b8:	408fffff 	.word	0x408fffff
   c42bc:	000fffff 	.word	0x000fffff
   c42c0:	3ff00000 	.word	0x3ff00000
   c42c4:	3f6f3400 	.word	0x3f6f3400
   c42c8:	4090cbff 	.word	0x4090cbff
   c42cc:	4598      	cmp	r8, r3
   c42ce:	db85      	blt.n	c41dc <__ieee754_pow+0x83c>
   c42d0:	4b7d      	ldr	r3, [pc, #500]	; (c44c8 <__ieee754_pow+0xb28>)
   c42d2:	4598      	cmp	r8, r3
   c42d4:	f73f ac22 	bgt.w	c3b1c <__ieee754_pow+0x17c>
   c42d8:	ec51 0b10 	vmov	r0, r1, d0
   c42dc:	4b7a      	ldr	r3, [pc, #488]	; (c44c8 <__ieee754_pow+0xb28>)
   c42de:	2200      	movs	r2, #0
   c42e0:	f000 fb14 	bl	c490c <__aeabi_dsub>
   c42e4:	a368      	add	r3, pc, #416	; (adr r3, c4488 <__ieee754_pow+0xae8>)
   c42e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c42ea:	4604      	mov	r4, r0
   c42ec:	460d      	mov	r5, r1
   c42ee:	f000 fcc5 	bl	c4c7c <__aeabi_dmul>
   c42f2:	a367      	add	r3, pc, #412	; (adr r3, c4490 <__ieee754_pow+0xaf0>)
   c42f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c42f8:	4682      	mov	sl, r0
   c42fa:	468b      	mov	fp, r1
   c42fc:	4620      	mov	r0, r4
   c42fe:	4629      	mov	r1, r5
   c4300:	f000 fcbc 	bl	c4c7c <__aeabi_dmul>
   c4304:	4b71      	ldr	r3, [pc, #452]	; (c44cc <__ieee754_pow+0xb2c>)
   c4306:	ec41 0b18 	vmov	d8, r0, r1
   c430a:	2200      	movs	r2, #0
   c430c:	4620      	mov	r0, r4
   c430e:	4629      	mov	r1, r5
   c4310:	f000 fcb4 	bl	c4c7c <__aeabi_dmul>
   c4314:	4602      	mov	r2, r0
   c4316:	460b      	mov	r3, r1
   c4318:	a15f      	add	r1, pc, #380	; (adr r1, c4498 <__ieee754_pow+0xaf8>)
   c431a:	e9d1 0100 	ldrd	r0, r1, [r1]
   c431e:	f000 faf5 	bl	c490c <__aeabi_dsub>
   c4322:	4622      	mov	r2, r4
   c4324:	462b      	mov	r3, r5
   c4326:	f000 fca9 	bl	c4c7c <__aeabi_dmul>
   c432a:	4602      	mov	r2, r0
   c432c:	460b      	mov	r3, r1
   c432e:	2000      	movs	r0, #0
   c4330:	4967      	ldr	r1, [pc, #412]	; (c44d0 <__ieee754_pow+0xb30>)
   c4332:	f000 faeb 	bl	c490c <__aeabi_dsub>
   c4336:	4622      	mov	r2, r4
   c4338:	4680      	mov	r8, r0
   c433a:	4689      	mov	r9, r1
   c433c:	462b      	mov	r3, r5
   c433e:	4620      	mov	r0, r4
   c4340:	4629      	mov	r1, r5
   c4342:	f000 fc9b 	bl	c4c7c <__aeabi_dmul>
   c4346:	4602      	mov	r2, r0
   c4348:	460b      	mov	r3, r1
   c434a:	4640      	mov	r0, r8
   c434c:	4649      	mov	r1, r9
   c434e:	f000 fc95 	bl	c4c7c <__aeabi_dmul>
   c4352:	a353      	add	r3, pc, #332	; (adr r3, c44a0 <__ieee754_pow+0xb00>)
   c4354:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4358:	f000 fc90 	bl	c4c7c <__aeabi_dmul>
   c435c:	4602      	mov	r2, r0
   c435e:	460b      	mov	r3, r1
   c4360:	ec51 0b18 	vmov	r0, r1, d8
   c4364:	f000 fad2 	bl	c490c <__aeabi_dsub>
   c4368:	4680      	mov	r8, r0
   c436a:	4689      	mov	r9, r1
   c436c:	4642      	mov	r2, r8
   c436e:	464b      	mov	r3, r9
   c4370:	4650      	mov	r0, sl
   c4372:	4659      	mov	r1, fp
   c4374:	f000 facc 	bl	c4910 <__adddf3>
   c4378:	2000      	movs	r0, #0
   c437a:	4652      	mov	r2, sl
   c437c:	465b      	mov	r3, fp
   c437e:	4604      	mov	r4, r0
   c4380:	460d      	mov	r5, r1
   c4382:	e591      	b.n	c3ea8 <__ieee754_pow+0x508>
   c4384:	4622      	mov	r2, r4
   c4386:	462b      	mov	r3, r5
   c4388:	4620      	mov	r0, r4
   c438a:	4629      	mov	r1, r5
   c438c:	f000 fc76 	bl	c4c7c <__aeabi_dmul>
   c4390:	ec41 0b10 	vmov	d0, r0, r1
   c4394:	f7ff bb50 	b.w	c3a38 <__ieee754_pow+0x98>
   c4398:	494b      	ldr	r1, [pc, #300]	; (c44c8 <__ieee754_pow+0xb28>)
   c439a:	2000      	movs	r0, #0
   c439c:	4622      	mov	r2, r4
   c439e:	462b      	mov	r3, r5
   c43a0:	f000 fd96 	bl	c4ed0 <__aeabi_ddiv>
   c43a4:	ec41 0b10 	vmov	d0, r0, r1
   c43a8:	f7ff bb46 	b.w	c3a38 <__ieee754_pow+0x98>
   c43ac:	2b00      	cmp	r3, #0
   c43ae:	d144      	bne.n	c443a <__ieee754_pow+0xa9a>
   c43b0:	f1c1 0114 	rsb	r1, r1, #20
   c43b4:	fa4a f001 	asr.w	r0, sl, r1
   c43b8:	fa00 f101 	lsl.w	r1, r0, r1
   c43bc:	4551      	cmp	r1, sl
   c43be:	d05a      	beq.n	c4476 <__ieee754_pow+0xad6>
   c43c0:	9300      	str	r3, [sp, #0]
   c43c2:	f7ff bb17 	b.w	c39f4 <__ieee754_pow+0x54>
   c43c6:	4a42      	ldr	r2, [pc, #264]	; (c44d0 <__ieee754_pow+0xb30>)
   c43c8:	4293      	cmp	r3, r2
   c43ca:	dc5b      	bgt.n	c4484 <__ieee754_pow+0xae4>
   c43cc:	e9dd 1200 	ldrd	r1, r2, [sp]
   c43d0:	9102      	str	r1, [sp, #8]
   c43d2:	9100      	str	r1, [sp, #0]
   c43d4:	e646      	b.n	c4064 <__ieee754_pow+0x6c4>
   c43d6:	a334      	add	r3, pc, #208	; (adr r3, c44a8 <__ieee754_pow+0xb08>)
   c43d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c43dc:	ec51 0b18 	vmov	r0, r1, d8
   c43e0:	f000 fc4c 	bl	c4c7c <__aeabi_dmul>
   c43e4:	a330      	add	r3, pc, #192	; (adr r3, c44a8 <__ieee754_pow+0xb08>)
   c43e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c43ea:	f000 fc47 	bl	c4c7c <__aeabi_dmul>
   c43ee:	ec41 0b10 	vmov	d0, r0, r1
   c43f2:	f7ff bb21 	b.w	c3a38 <__ieee754_pow+0x98>
   c43f6:	9b00      	ldr	r3, [sp, #0]
   c43f8:	2b01      	cmp	r3, #1
   c43fa:	f47f ab1d 	bne.w	c3a38 <__ieee754_pow+0x98>
   c43fe:	ee10 1a90 	vmov	r1, s1
   c4402:	ee10 2a10 	vmov	r2, s0
   c4406:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c440a:	ec43 2b10 	vmov	d0, r2, r3
   c440e:	f7ff bb13 	b.w	c3a38 <__ieee754_pow+0x98>
   c4412:	ed9f 7b27 	vldr	d7, [pc, #156]	; c44b0 <__ieee754_pow+0xb10>
   c4416:	eeb0 ca47 	vmov.f32	s24, s14
   c441a:	eef0 ca67 	vmov.f32	s25, s15
   c441e:	ed9f 7b26 	vldr	d7, [pc, #152]	; c44b8 <__ieee754_pow+0xb18>
   c4422:	eeb0 da47 	vmov.f32	s26, s14
   c4426:	eef0 da67 	vmov.f32	s27, s15
   c442a:	ed9f 7b25 	vldr	d7, [pc, #148]	; c44c0 <__ieee754_pow+0xb20>
   c442e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   c4432:	ec53 2b17 	vmov	r2, r3, d7
   c4436:	f7ff bbeb 	b.w	c3c10 <__ieee754_pow+0x270>
   c443a:	ec45 4b10 	vmov	d0, r4, r5
   c443e:	9200      	str	r2, [sp, #0]
   c4440:	f000 f914 	bl	c466c <fabs>
   c4444:	9a00      	ldr	r2, [sp, #0]
   c4446:	2a00      	cmp	r2, #0
   c4448:	f47f ab92 	bne.w	c3b70 <__ieee754_pow+0x1d0>
   c444c:	9200      	str	r2, [sp, #0]
   c444e:	f7ff bb26 	b.w	c3a9e <__ieee754_pow+0xfe>
   c4452:	ec41 0b10 	vmov	d0, r0, r1
   c4456:	9800      	ldr	r0, [sp, #0]
   c4458:	f000 f9c2 	bl	c47e0 <scalbn>
   c445c:	ec51 0b10 	vmov	r0, r1, d0
   c4460:	e6b5      	b.n	c41ce <__ieee754_pow+0x82e>
   c4462:	f000 0001 	and.w	r0, r0, #1
   c4466:	f1c0 0102 	rsb	r1, r0, #2
   c446a:	9100      	str	r1, [sp, #0]
   c446c:	2b00      	cmp	r3, #0
   c446e:	f43f aac1 	beq.w	c39f4 <__ieee754_pow+0x54>
   c4472:	f7ff bb0d 	b.w	c3a90 <__ieee754_pow+0xf0>
   c4476:	f000 0001 	and.w	r0, r0, #1
   c447a:	f1c0 0302 	rsb	r3, r0, #2
   c447e:	9300      	str	r3, [sp, #0]
   c4480:	f7ff bab8 	b.w	c39f4 <__ieee754_pow+0x54>
   c4484:	151b      	asrs	r3, r3, #20
   c4486:	e5bb      	b.n	c4000 <__ieee754_pow+0x660>
   c4488:	60000000 	.word	0x60000000
   c448c:	3ff71547 	.word	0x3ff71547
   c4490:	f85ddf44 	.word	0xf85ddf44
   c4494:	3e54ae0b 	.word	0x3e54ae0b
   c4498:	55555555 	.word	0x55555555
   c449c:	3fd55555 	.word	0x3fd55555
   c44a0:	652b82fe 	.word	0x652b82fe
   c44a4:	3ff71547 	.word	0x3ff71547
   c44a8:	8800759c 	.word	0x8800759c
   c44ac:	7e37e43c 	.word	0x7e37e43c
   c44b0:	40000000 	.word	0x40000000
   c44b4:	3fe2b803 	.word	0x3fe2b803
   c44b8:	43cfd006 	.word	0x43cfd006
   c44bc:	3e4cfdeb 	.word	0x3e4cfdeb
   c44c0:	00000000 	.word	0x00000000
   c44c4:	3ff80000 	.word	0x3ff80000
   c44c8:	3ff00000 	.word	0x3ff00000
   c44cc:	3fd00000 	.word	0x3fd00000
   c44d0:	3fe00000 	.word	0x3fe00000

000c44d4 <__ieee754_sqrt>:
   c44d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c44d8:	4a63      	ldr	r2, [pc, #396]	; (c4668 <__ieee754_sqrt+0x194>)
   c44da:	ec55 4b10 	vmov	r4, r5, d0
   c44de:	43aa      	bics	r2, r5
   c44e0:	f000 809f 	beq.w	c4622 <__ieee754_sqrt+0x14e>
   c44e4:	2d00      	cmp	r5, #0
   c44e6:	ee10 ca10 	vmov	ip, s0
   c44ea:	462b      	mov	r3, r5
   c44ec:	dd54      	ble.n	c4598 <__ieee754_sqrt+0xc4>
   c44ee:	1529      	asrs	r1, r5, #20
   c44f0:	d063      	beq.n	c45ba <__ieee754_sqrt+0xe6>
   c44f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c44f6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c44fa:	07c9      	lsls	r1, r1, #31
   c44fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c4500:	d404      	bmi.n	c450c <__ieee754_sqrt+0x38>
   c4502:	005b      	lsls	r3, r3, #1
   c4504:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c4508:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c450c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c4510:	2600      	movs	r6, #0
   c4512:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c4516:	107f      	asrs	r7, r7, #1
   c4518:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c451c:	f04f 0e16 	mov.w	lr, #22
   c4520:	4634      	mov	r4, r6
   c4522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c4526:	18a1      	adds	r1, r4, r2
   c4528:	4299      	cmp	r1, r3
   c452a:	dc02      	bgt.n	c4532 <__ieee754_sqrt+0x5e>
   c452c:	1a5b      	subs	r3, r3, r1
   c452e:	188c      	adds	r4, r1, r2
   c4530:	4416      	add	r6, r2
   c4532:	005b      	lsls	r3, r3, #1
   c4534:	f1be 0e01 	subs.w	lr, lr, #1
   c4538:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c453c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c4540:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c4544:	d1ef      	bne.n	c4526 <__ieee754_sqrt+0x52>
   c4546:	4675      	mov	r5, lr
   c4548:	2020      	movs	r0, #32
   c454a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c454e:	e00a      	b.n	c4566 <__ieee754_sqrt+0x92>
   c4550:	d044      	beq.n	c45dc <__ieee754_sqrt+0x108>
   c4552:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c4556:	3801      	subs	r0, #1
   c4558:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c455c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c4560:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c4564:	d043      	beq.n	c45ee <__ieee754_sqrt+0x11a>
   c4566:	42a3      	cmp	r3, r4
   c4568:	eb02 010e 	add.w	r1, r2, lr
   c456c:	ddf0      	ble.n	c4550 <__ieee754_sqrt+0x7c>
   c456e:	2900      	cmp	r1, #0
   c4570:	eb01 0e02 	add.w	lr, r1, r2
   c4574:	db0a      	blt.n	c458c <__ieee754_sqrt+0xb8>
   c4576:	46a0      	mov	r8, r4
   c4578:	1b1b      	subs	r3, r3, r4
   c457a:	4561      	cmp	r1, ip
   c457c:	bf88      	it	hi
   c457e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   c4582:	ebac 0c01 	sub.w	ip, ip, r1
   c4586:	4415      	add	r5, r2
   c4588:	4644      	mov	r4, r8
   c458a:	e7e2      	b.n	c4552 <__ieee754_sqrt+0x7e>
   c458c:	f1be 0f00 	cmp.w	lr, #0
   c4590:	dbf1      	blt.n	c4576 <__ieee754_sqrt+0xa2>
   c4592:	f104 0801 	add.w	r8, r4, #1
   c4596:	e7ef      	b.n	c4578 <__ieee754_sqrt+0xa4>
   c4598:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c459c:	4322      	orrs	r2, r4
   c459e:	d038      	beq.n	c4612 <__ieee754_sqrt+0x13e>
   c45a0:	2d00      	cmp	r5, #0
   c45a2:	d14e      	bne.n	c4642 <__ieee754_sqrt+0x16e>
   c45a4:	4629      	mov	r1, r5
   c45a6:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c45aa:	3915      	subs	r1, #21
   c45ac:	4613      	mov	r3, r2
   c45ae:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c45b2:	2a00      	cmp	r2, #0
   c45b4:	d0f7      	beq.n	c45a6 <__ieee754_sqrt+0xd2>
   c45b6:	02d6      	lsls	r6, r2, #11
   c45b8:	d450      	bmi.n	c465c <__ieee754_sqrt+0x188>
   c45ba:	2000      	movs	r0, #0
   c45bc:	005b      	lsls	r3, r3, #1
   c45be:	02dd      	lsls	r5, r3, #11
   c45c0:	4604      	mov	r4, r0
   c45c2:	f100 0001 	add.w	r0, r0, #1
   c45c6:	d5f9      	bpl.n	c45bc <__ieee754_sqrt+0xe8>
   c45c8:	461a      	mov	r2, r3
   c45ca:	4663      	mov	r3, ip
   c45cc:	fa0c fc00 	lsl.w	ip, ip, r0
   c45d0:	f1c0 0020 	rsb	r0, r0, #32
   c45d4:	40c3      	lsrs	r3, r0
   c45d6:	1b09      	subs	r1, r1, r4
   c45d8:	4313      	orrs	r3, r2
   c45da:	e78a      	b.n	c44f2 <__ieee754_sqrt+0x1e>
   c45dc:	4561      	cmp	r1, ip
   c45de:	d8b8      	bhi.n	c4552 <__ieee754_sqrt+0x7e>
   c45e0:	2900      	cmp	r1, #0
   c45e2:	eb01 0e02 	add.w	lr, r1, r2
   c45e6:	dbd1      	blt.n	c458c <__ieee754_sqrt+0xb8>
   c45e8:	4698      	mov	r8, r3
   c45ea:	2300      	movs	r3, #0
   c45ec:	e7c9      	b.n	c4582 <__ieee754_sqrt+0xae>
   c45ee:	ea53 030c 	orrs.w	r3, r3, ip
   c45f2:	d110      	bne.n	c4616 <__ieee754_sqrt+0x142>
   c45f4:	0868      	lsrs	r0, r5, #1
   c45f6:	1071      	asrs	r1, r6, #1
   c45f8:	07f3      	lsls	r3, r6, #31
   c45fa:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c45fe:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c4602:	bf48      	it	mi
   c4604:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c4608:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c460c:	4602      	mov	r2, r0
   c460e:	ec43 2b10 	vmov	d0, r2, r3
   c4612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c4616:	1c6a      	adds	r2, r5, #1
   c4618:	bf16      	itet	ne
   c461a:	1c68      	addne	r0, r5, #1
   c461c:	3601      	addeq	r6, #1
   c461e:	0840      	lsrne	r0, r0, #1
   c4620:	e7e9      	b.n	c45f6 <__ieee754_sqrt+0x122>
   c4622:	ee10 2a10 	vmov	r2, s0
   c4626:	ee10 0a10 	vmov	r0, s0
   c462a:	462b      	mov	r3, r5
   c462c:	4629      	mov	r1, r5
   c462e:	f000 fb25 	bl	c4c7c <__aeabi_dmul>
   c4632:	4622      	mov	r2, r4
   c4634:	462b      	mov	r3, r5
   c4636:	f000 f96b 	bl	c4910 <__adddf3>
   c463a:	ec41 0b10 	vmov	d0, r0, r1
   c463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c4642:	ee10 2a10 	vmov	r2, s0
   c4646:	4620      	mov	r0, r4
   c4648:	4629      	mov	r1, r5
   c464a:	f000 f95f 	bl	c490c <__aeabi_dsub>
   c464e:	4602      	mov	r2, r0
   c4650:	460b      	mov	r3, r1
   c4652:	f000 fc3d 	bl	c4ed0 <__aeabi_ddiv>
   c4656:	ec41 0b10 	vmov	d0, r0, r1
   c465a:	e7da      	b.n	c4612 <__ieee754_sqrt+0x13e>
   c465c:	4663      	mov	r3, ip
   c465e:	2020      	movs	r0, #32
   c4660:	f04f 34ff 	mov.w	r4, #4294967295
   c4664:	e7b6      	b.n	c45d4 <__ieee754_sqrt+0x100>
   c4666:	bf00      	nop
   c4668:	7ff00000 	.word	0x7ff00000

000c466c <fabs>:
   c466c:	ec51 0b10 	vmov	r0, r1, d0
   c4670:	ee10 2a10 	vmov	r2, s0
   c4674:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c4678:	ec43 2b10 	vmov	d0, r2, r3
   c467c:	4770      	bx	lr
   c467e:	bf00      	nop

000c4680 <finite>:
   c4680:	b082      	sub	sp, #8
   c4682:	ed8d 0b00 	vstr	d0, [sp]
   c4686:	9801      	ldr	r0, [sp, #4]
   c4688:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   c468c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   c4690:	0fc0      	lsrs	r0, r0, #31
   c4692:	b002      	add	sp, #8
   c4694:	4770      	bx	lr
   c4696:	bf00      	nop

000c4698 <nan>:
   c4698:	ed9f 0b01 	vldr	d0, [pc, #4]	; c46a0 <nan+0x8>
   c469c:	4770      	bx	lr
   c469e:	bf00      	nop
   c46a0:	00000000 	.word	0x00000000
   c46a4:	7ff80000 	.word	0x7ff80000

000c46a8 <rint>:
   c46a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   c46aa:	ec53 2b10 	vmov	r2, r3, d0
   c46ae:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   c46b2:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   c46b6:	2913      	cmp	r1, #19
   c46b8:	ee10 0a10 	vmov	r0, s0
   c46bc:	b083      	sub	sp, #12
   c46be:	461c      	mov	r4, r3
   c46c0:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   c46c4:	dc3a      	bgt.n	c473c <rint+0x94>
   c46c6:	2900      	cmp	r1, #0
   c46c8:	db30      	blt.n	c472c <rint+0x84>
   c46ca:	4d42      	ldr	r5, [pc, #264]	; (c47d4 <rint+0x12c>)
   c46cc:	fa45 fc01 	asr.w	ip, r5, r1
   c46d0:	ea03 050c 	and.w	r5, r3, ip
   c46d4:	4315      	orrs	r5, r2
   c46d6:	d02d      	beq.n	c4734 <rint+0x8c>
   c46d8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   c46dc:	4318      	orrs	r0, r3
   c46de:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   c46e2:	d00c      	beq.n	c46fe <rint+0x56>
   c46e4:	ea24 0c0c 	bic.w	ip, r4, ip
   c46e8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   c46ec:	2913      	cmp	r1, #19
   c46ee:	fa44 f101 	asr.w	r1, r4, r1
   c46f2:	bf0c      	ite	eq
   c46f4:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   c46f8:	2000      	movne	r0, #0
   c46fa:	ea4c 0401 	orr.w	r4, ip, r1
   c46fe:	4936      	ldr	r1, [pc, #216]	; (c47d8 <rint+0x130>)
   c4700:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   c4704:	4623      	mov	r3, r4
   c4706:	e9de 4500 	ldrd	r4, r5, [lr]
   c470a:	4602      	mov	r2, r0
   c470c:	4629      	mov	r1, r5
   c470e:	4620      	mov	r0, r4
   c4710:	f000 f8fe 	bl	c4910 <__adddf3>
   c4714:	e9cd 0100 	strd	r0, r1, [sp]
   c4718:	e9dd 0100 	ldrd	r0, r1, [sp]
   c471c:	4622      	mov	r2, r4
   c471e:	462b      	mov	r3, r5
   c4720:	f000 f8f4 	bl	c490c <__aeabi_dsub>
   c4724:	ec41 0b10 	vmov	d0, r0, r1
   c4728:	b003      	add	sp, #12
   c472a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c472c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   c4730:	4311      	orrs	r1, r2
   c4732:	d124      	bne.n	c477e <rint+0xd6>
   c4734:	ec43 2b10 	vmov	d0, r2, r3
   c4738:	b003      	add	sp, #12
   c473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c473c:	2933      	cmp	r1, #51	; 0x33
   c473e:	dd08      	ble.n	c4752 <rint+0xaa>
   c4740:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   c4744:	d1f6      	bne.n	c4734 <rint+0x8c>
   c4746:	4619      	mov	r1, r3
   c4748:	f000 f8e2 	bl	c4910 <__adddf3>
   c474c:	ec41 0b10 	vmov	d0, r0, r1
   c4750:	e7f2      	b.n	c4738 <rint+0x90>
   c4752:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   c4756:	f04f 31ff 	mov.w	r1, #4294967295
   c475a:	fa21 f10c 	lsr.w	r1, r1, ip
   c475e:	420a      	tst	r2, r1
   c4760:	d0e8      	beq.n	c4734 <rint+0x8c>
   c4762:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   c4766:	ea4f 0351 	mov.w	r3, r1, lsr #1
   c476a:	d0c8      	beq.n	c46fe <rint+0x56>
   c476c:	ea20 0303 	bic.w	r3, r0, r3
   c4770:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   c4774:	fa40 fc0c 	asr.w	ip, r0, ip
   c4778:	ea43 000c 	orr.w	r0, r3, ip
   c477c:	e7bf      	b.n	c46fe <rint+0x56>
   c477e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c4782:	4318      	orrs	r0, r3
   c4784:	4a14      	ldr	r2, [pc, #80]	; (c47d8 <rint+0x130>)
   c4786:	4243      	negs	r3, r0
   c4788:	4303      	orrs	r3, r0
   c478a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   c478e:	0b1b      	lsrs	r3, r3, #12
   c4790:	0c62      	lsrs	r2, r4, #17
   c4792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   c4796:	0452      	lsls	r2, r2, #17
   c4798:	ea43 0702 	orr.w	r7, r3, r2
   c479c:	463b      	mov	r3, r7
   c479e:	e9de 6700 	ldrd	r6, r7, [lr]
   c47a2:	ee10 2a10 	vmov	r2, s0
   c47a6:	4630      	mov	r0, r6
   c47a8:	4639      	mov	r1, r7
   c47aa:	f000 f8b1 	bl	c4910 <__adddf3>
   c47ae:	e9cd 0100 	strd	r0, r1, [sp]
   c47b2:	4632      	mov	r2, r6
   c47b4:	463b      	mov	r3, r7
   c47b6:	e9dd 0100 	ldrd	r0, r1, [sp]
   c47ba:	f000 f8a7 	bl	c490c <__aeabi_dsub>
   c47be:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   c47c2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c47c6:	4602      	mov	r2, r0
   c47c8:	ea41 0304 	orr.w	r3, r1, r4
   c47cc:	ec43 2b10 	vmov	d0, r2, r3
   c47d0:	b003      	add	sp, #12
   c47d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c47d4:	000fffff 	.word	0x000fffff
   c47d8:	000c94b8 	.word	0x000c94b8
   c47dc:	00000000 	.word	0x00000000

000c47e0 <scalbn>:
   c47e0:	b538      	push	{r3, r4, r5, lr}
   c47e2:	ec53 2b10 	vmov	r2, r3, d0
   c47e6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   c47ea:	4604      	mov	r4, r0
   c47ec:	469c      	mov	ip, r3
   c47ee:	bb89      	cbnz	r1, c4854 <scalbn+0x74>
   c47f0:	ee10 1a10 	vmov	r1, s0
   c47f4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   c47f8:	ea5c 0101 	orrs.w	r1, ip, r1
   c47fc:	d029      	beq.n	c4852 <scalbn+0x72>
   c47fe:	4619      	mov	r1, r3
   c4800:	2200      	movs	r2, #0
   c4802:	4b3d      	ldr	r3, [pc, #244]	; (c48f8 <scalbn+0x118>)
   c4804:	4d3d      	ldr	r5, [pc, #244]	; (c48fc <scalbn+0x11c>)
   c4806:	ee10 0a10 	vmov	r0, s0
   c480a:	f000 fa37 	bl	c4c7c <__aeabi_dmul>
   c480e:	42ac      	cmp	r4, r5
   c4810:	4602      	mov	r2, r0
   c4812:	460b      	mov	r3, r1
   c4814:	db16      	blt.n	c4844 <scalbn+0x64>
   c4816:	468c      	mov	ip, r1
   c4818:	f3c1 510a 	ubfx	r1, r1, #20, #11
   c481c:	3936      	subs	r1, #54	; 0x36
   c481e:	4421      	add	r1, r4
   c4820:	f240 70fe 	movw	r0, #2046	; 0x7fe
   c4824:	4281      	cmp	r1, r0
   c4826:	dc21      	bgt.n	c486c <scalbn+0x8c>
   c4828:	2900      	cmp	r1, #0
   c482a:	dc47      	bgt.n	c48bc <scalbn+0xdc>
   c482c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   c4830:	da34      	bge.n	c489c <scalbn+0xbc>
   c4832:	f24c 3150 	movw	r1, #50000	; 0xc350
   c4836:	428c      	cmp	r4, r1
   c4838:	dc18      	bgt.n	c486c <scalbn+0x8c>
   c483a:	2b00      	cmp	r3, #0
   c483c:	a126      	add	r1, pc, #152	; (adr r1, c48d8 <scalbn+0xf8>)
   c483e:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4842:	db44      	blt.n	c48ce <scalbn+0xee>
   c4844:	a324      	add	r3, pc, #144	; (adr r3, c48d8 <scalbn+0xf8>)
   c4846:	e9d3 2300 	ldrd	r2, r3, [r3]
   c484a:	f000 fa17 	bl	c4c7c <__aeabi_dmul>
   c484e:	ec41 0b10 	vmov	d0, r0, r1
   c4852:	bd38      	pop	{r3, r4, r5, pc}
   c4854:	f240 70ff 	movw	r0, #2047	; 0x7ff
   c4858:	4281      	cmp	r1, r0
   c485a:	d1e0      	bne.n	c481e <scalbn+0x3e>
   c485c:	ee10 0a10 	vmov	r0, s0
   c4860:	4619      	mov	r1, r3
   c4862:	f000 f855 	bl	c4910 <__adddf3>
   c4866:	ec41 0b10 	vmov	d0, r0, r1
   c486a:	bd38      	pop	{r3, r4, r5, pc}
   c486c:	2b00      	cmp	r3, #0
   c486e:	a11c      	add	r1, pc, #112	; (adr r1, c48e0 <scalbn+0x100>)
   c4870:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4874:	db07      	blt.n	c4886 <scalbn+0xa6>
   c4876:	a31a      	add	r3, pc, #104	; (adr r3, c48e0 <scalbn+0x100>)
   c4878:	e9d3 2300 	ldrd	r2, r3, [r3]
   c487c:	f000 f9fe 	bl	c4c7c <__aeabi_dmul>
   c4880:	ec41 0b10 	vmov	d0, r0, r1
   c4884:	bd38      	pop	{r3, r4, r5, pc}
   c4886:	a118      	add	r1, pc, #96	; (adr r1, c48e8 <scalbn+0x108>)
   c4888:	e9d1 0100 	ldrd	r0, r1, [r1]
   c488c:	a314      	add	r3, pc, #80	; (adr r3, c48e0 <scalbn+0x100>)
   c488e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4892:	f000 f9f3 	bl	c4c7c <__aeabi_dmul>
   c4896:	ec41 0b10 	vmov	d0, r0, r1
   c489a:	e7f3      	b.n	c4884 <scalbn+0xa4>
   c489c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   c48a0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   c48a4:	3136      	adds	r1, #54	; 0x36
   c48a6:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   c48aa:	4610      	mov	r0, r2
   c48ac:	4619      	mov	r1, r3
   c48ae:	2200      	movs	r2, #0
   c48b0:	4b13      	ldr	r3, [pc, #76]	; (c4900 <scalbn+0x120>)
   c48b2:	f000 f9e3 	bl	c4c7c <__aeabi_dmul>
   c48b6:	ec41 0b10 	vmov	d0, r0, r1
   c48ba:	bd38      	pop	{r3, r4, r5, pc}
   c48bc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   c48c0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   c48c4:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   c48c8:	ec43 2b10 	vmov	d0, r2, r3
   c48cc:	bd38      	pop	{r3, r4, r5, pc}
   c48ce:	a108      	add	r1, pc, #32	; (adr r1, c48f0 <scalbn+0x110>)
   c48d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   c48d4:	e7b6      	b.n	c4844 <scalbn+0x64>
   c48d6:	bf00      	nop
   c48d8:	c2f8f359 	.word	0xc2f8f359
   c48dc:	01a56e1f 	.word	0x01a56e1f
   c48e0:	8800759c 	.word	0x8800759c
   c48e4:	7e37e43c 	.word	0x7e37e43c
   c48e8:	8800759c 	.word	0x8800759c
   c48ec:	fe37e43c 	.word	0xfe37e43c
   c48f0:	c2f8f359 	.word	0xc2f8f359
   c48f4:	81a56e1f 	.word	0x81a56e1f
   c48f8:	43500000 	.word	0x43500000
   c48fc:	ffff3cb0 	.word	0xffff3cb0
   c4900:	3c900000 	.word	0x3c900000

000c4904 <__aeabi_drsub>:
   c4904:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c4908:	e002      	b.n	c4910 <__adddf3>
   c490a:	bf00      	nop

000c490c <__aeabi_dsub>:
   c490c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c4910 <__adddf3>:
   c4910:	b530      	push	{r4, r5, lr}
   c4912:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c4916:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c491a:	ea94 0f05 	teq	r4, r5
   c491e:	bf08      	it	eq
   c4920:	ea90 0f02 	teqeq	r0, r2
   c4924:	bf1f      	itttt	ne
   c4926:	ea54 0c00 	orrsne.w	ip, r4, r0
   c492a:	ea55 0c02 	orrsne.w	ip, r5, r2
   c492e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c4932:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c4936:	f000 80e2 	beq.w	c4afe <__adddf3+0x1ee>
   c493a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c493e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c4942:	bfb8      	it	lt
   c4944:	426d      	neglt	r5, r5
   c4946:	dd0c      	ble.n	c4962 <__adddf3+0x52>
   c4948:	442c      	add	r4, r5
   c494a:	ea80 0202 	eor.w	r2, r0, r2
   c494e:	ea81 0303 	eor.w	r3, r1, r3
   c4952:	ea82 0000 	eor.w	r0, r2, r0
   c4956:	ea83 0101 	eor.w	r1, r3, r1
   c495a:	ea80 0202 	eor.w	r2, r0, r2
   c495e:	ea81 0303 	eor.w	r3, r1, r3
   c4962:	2d36      	cmp	r5, #54	; 0x36
   c4964:	bf88      	it	hi
   c4966:	bd30      	pophi	{r4, r5, pc}
   c4968:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c496c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c4970:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c4974:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c4978:	d002      	beq.n	c4980 <__adddf3+0x70>
   c497a:	4240      	negs	r0, r0
   c497c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c4980:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c4984:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c4988:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c498c:	d002      	beq.n	c4994 <__adddf3+0x84>
   c498e:	4252      	negs	r2, r2
   c4990:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c4994:	ea94 0f05 	teq	r4, r5
   c4998:	f000 80a7 	beq.w	c4aea <__adddf3+0x1da>
   c499c:	f1a4 0401 	sub.w	r4, r4, #1
   c49a0:	f1d5 0e20 	rsbs	lr, r5, #32
   c49a4:	db0d      	blt.n	c49c2 <__adddf3+0xb2>
   c49a6:	fa02 fc0e 	lsl.w	ip, r2, lr
   c49aa:	fa22 f205 	lsr.w	r2, r2, r5
   c49ae:	1880      	adds	r0, r0, r2
   c49b0:	f141 0100 	adc.w	r1, r1, #0
   c49b4:	fa03 f20e 	lsl.w	r2, r3, lr
   c49b8:	1880      	adds	r0, r0, r2
   c49ba:	fa43 f305 	asr.w	r3, r3, r5
   c49be:	4159      	adcs	r1, r3
   c49c0:	e00e      	b.n	c49e0 <__adddf3+0xd0>
   c49c2:	f1a5 0520 	sub.w	r5, r5, #32
   c49c6:	f10e 0e20 	add.w	lr, lr, #32
   c49ca:	2a01      	cmp	r2, #1
   c49cc:	fa03 fc0e 	lsl.w	ip, r3, lr
   c49d0:	bf28      	it	cs
   c49d2:	f04c 0c02 	orrcs.w	ip, ip, #2
   c49d6:	fa43 f305 	asr.w	r3, r3, r5
   c49da:	18c0      	adds	r0, r0, r3
   c49dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c49e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c49e4:	d507      	bpl.n	c49f6 <__adddf3+0xe6>
   c49e6:	f04f 0e00 	mov.w	lr, #0
   c49ea:	f1dc 0c00 	rsbs	ip, ip, #0
   c49ee:	eb7e 0000 	sbcs.w	r0, lr, r0
   c49f2:	eb6e 0101 	sbc.w	r1, lr, r1
   c49f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c49fa:	d31b      	bcc.n	c4a34 <__adddf3+0x124>
   c49fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c4a00:	d30c      	bcc.n	c4a1c <__adddf3+0x10c>
   c4a02:	0849      	lsrs	r1, r1, #1
   c4a04:	ea5f 0030 	movs.w	r0, r0, rrx
   c4a08:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c4a0c:	f104 0401 	add.w	r4, r4, #1
   c4a10:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c4a14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c4a18:	f080 809a 	bcs.w	c4b50 <__adddf3+0x240>
   c4a1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c4a20:	bf08      	it	eq
   c4a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c4a26:	f150 0000 	adcs.w	r0, r0, #0
   c4a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c4a2e:	ea41 0105 	orr.w	r1, r1, r5
   c4a32:	bd30      	pop	{r4, r5, pc}
   c4a34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c4a38:	4140      	adcs	r0, r0
   c4a3a:	eb41 0101 	adc.w	r1, r1, r1
   c4a3e:	3c01      	subs	r4, #1
   c4a40:	bf28      	it	cs
   c4a42:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c4a46:	d2e9      	bcs.n	c4a1c <__adddf3+0x10c>
   c4a48:	f091 0f00 	teq	r1, #0
   c4a4c:	bf04      	itt	eq
   c4a4e:	4601      	moveq	r1, r0
   c4a50:	2000      	moveq	r0, #0
   c4a52:	fab1 f381 	clz	r3, r1
   c4a56:	bf08      	it	eq
   c4a58:	3320      	addeq	r3, #32
   c4a5a:	f1a3 030b 	sub.w	r3, r3, #11
   c4a5e:	f1b3 0220 	subs.w	r2, r3, #32
   c4a62:	da0c      	bge.n	c4a7e <__adddf3+0x16e>
   c4a64:	320c      	adds	r2, #12
   c4a66:	dd08      	ble.n	c4a7a <__adddf3+0x16a>
   c4a68:	f102 0c14 	add.w	ip, r2, #20
   c4a6c:	f1c2 020c 	rsb	r2, r2, #12
   c4a70:	fa01 f00c 	lsl.w	r0, r1, ip
   c4a74:	fa21 f102 	lsr.w	r1, r1, r2
   c4a78:	e00c      	b.n	c4a94 <__adddf3+0x184>
   c4a7a:	f102 0214 	add.w	r2, r2, #20
   c4a7e:	bfd8      	it	le
   c4a80:	f1c2 0c20 	rsble	ip, r2, #32
   c4a84:	fa01 f102 	lsl.w	r1, r1, r2
   c4a88:	fa20 fc0c 	lsr.w	ip, r0, ip
   c4a8c:	bfdc      	itt	le
   c4a8e:	ea41 010c 	orrle.w	r1, r1, ip
   c4a92:	4090      	lslle	r0, r2
   c4a94:	1ae4      	subs	r4, r4, r3
   c4a96:	bfa2      	ittt	ge
   c4a98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c4a9c:	4329      	orrge	r1, r5
   c4a9e:	bd30      	popge	{r4, r5, pc}
   c4aa0:	ea6f 0404 	mvn.w	r4, r4
   c4aa4:	3c1f      	subs	r4, #31
   c4aa6:	da1c      	bge.n	c4ae2 <__adddf3+0x1d2>
   c4aa8:	340c      	adds	r4, #12
   c4aaa:	dc0e      	bgt.n	c4aca <__adddf3+0x1ba>
   c4aac:	f104 0414 	add.w	r4, r4, #20
   c4ab0:	f1c4 0220 	rsb	r2, r4, #32
   c4ab4:	fa20 f004 	lsr.w	r0, r0, r4
   c4ab8:	fa01 f302 	lsl.w	r3, r1, r2
   c4abc:	ea40 0003 	orr.w	r0, r0, r3
   c4ac0:	fa21 f304 	lsr.w	r3, r1, r4
   c4ac4:	ea45 0103 	orr.w	r1, r5, r3
   c4ac8:	bd30      	pop	{r4, r5, pc}
   c4aca:	f1c4 040c 	rsb	r4, r4, #12
   c4ace:	f1c4 0220 	rsb	r2, r4, #32
   c4ad2:	fa20 f002 	lsr.w	r0, r0, r2
   c4ad6:	fa01 f304 	lsl.w	r3, r1, r4
   c4ada:	ea40 0003 	orr.w	r0, r0, r3
   c4ade:	4629      	mov	r1, r5
   c4ae0:	bd30      	pop	{r4, r5, pc}
   c4ae2:	fa21 f004 	lsr.w	r0, r1, r4
   c4ae6:	4629      	mov	r1, r5
   c4ae8:	bd30      	pop	{r4, r5, pc}
   c4aea:	f094 0f00 	teq	r4, #0
   c4aee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c4af2:	bf06      	itte	eq
   c4af4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c4af8:	3401      	addeq	r4, #1
   c4afa:	3d01      	subne	r5, #1
   c4afc:	e74e      	b.n	c499c <__adddf3+0x8c>
   c4afe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c4b02:	bf18      	it	ne
   c4b04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c4b08:	d029      	beq.n	c4b5e <__adddf3+0x24e>
   c4b0a:	ea94 0f05 	teq	r4, r5
   c4b0e:	bf08      	it	eq
   c4b10:	ea90 0f02 	teqeq	r0, r2
   c4b14:	d005      	beq.n	c4b22 <__adddf3+0x212>
   c4b16:	ea54 0c00 	orrs.w	ip, r4, r0
   c4b1a:	bf04      	itt	eq
   c4b1c:	4619      	moveq	r1, r3
   c4b1e:	4610      	moveq	r0, r2
   c4b20:	bd30      	pop	{r4, r5, pc}
   c4b22:	ea91 0f03 	teq	r1, r3
   c4b26:	bf1e      	ittt	ne
   c4b28:	2100      	movne	r1, #0
   c4b2a:	2000      	movne	r0, #0
   c4b2c:	bd30      	popne	{r4, r5, pc}
   c4b2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c4b32:	d105      	bne.n	c4b40 <__adddf3+0x230>
   c4b34:	0040      	lsls	r0, r0, #1
   c4b36:	4149      	adcs	r1, r1
   c4b38:	bf28      	it	cs
   c4b3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c4b3e:	bd30      	pop	{r4, r5, pc}
   c4b40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c4b44:	bf3c      	itt	cc
   c4b46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c4b4a:	bd30      	popcc	{r4, r5, pc}
   c4b4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c4b50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c4b54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c4b58:	f04f 0000 	mov.w	r0, #0
   c4b5c:	bd30      	pop	{r4, r5, pc}
   c4b5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c4b62:	bf1a      	itte	ne
   c4b64:	4619      	movne	r1, r3
   c4b66:	4610      	movne	r0, r2
   c4b68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c4b6c:	bf1c      	itt	ne
   c4b6e:	460b      	movne	r3, r1
   c4b70:	4602      	movne	r2, r0
   c4b72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c4b76:	bf06      	itte	eq
   c4b78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c4b7c:	ea91 0f03 	teqeq	r1, r3
   c4b80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c4b84:	bd30      	pop	{r4, r5, pc}
   c4b86:	bf00      	nop

000c4b88 <__aeabi_ui2d>:
   c4b88:	f090 0f00 	teq	r0, #0
   c4b8c:	bf04      	itt	eq
   c4b8e:	2100      	moveq	r1, #0
   c4b90:	4770      	bxeq	lr
   c4b92:	b530      	push	{r4, r5, lr}
   c4b94:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c4b98:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c4b9c:	f04f 0500 	mov.w	r5, #0
   c4ba0:	f04f 0100 	mov.w	r1, #0
   c4ba4:	e750      	b.n	c4a48 <__adddf3+0x138>
   c4ba6:	bf00      	nop

000c4ba8 <__aeabi_i2d>:
   c4ba8:	f090 0f00 	teq	r0, #0
   c4bac:	bf04      	itt	eq
   c4bae:	2100      	moveq	r1, #0
   c4bb0:	4770      	bxeq	lr
   c4bb2:	b530      	push	{r4, r5, lr}
   c4bb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c4bb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c4bbc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c4bc0:	bf48      	it	mi
   c4bc2:	4240      	negmi	r0, r0
   c4bc4:	f04f 0100 	mov.w	r1, #0
   c4bc8:	e73e      	b.n	c4a48 <__adddf3+0x138>
   c4bca:	bf00      	nop

000c4bcc <__aeabi_f2d>:
   c4bcc:	0042      	lsls	r2, r0, #1
   c4bce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c4bd2:	ea4f 0131 	mov.w	r1, r1, rrx
   c4bd6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c4bda:	bf1f      	itttt	ne
   c4bdc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c4be0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c4be4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c4be8:	4770      	bxne	lr
   c4bea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c4bee:	bf08      	it	eq
   c4bf0:	4770      	bxeq	lr
   c4bf2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c4bf6:	bf04      	itt	eq
   c4bf8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c4bfc:	4770      	bxeq	lr
   c4bfe:	b530      	push	{r4, r5, lr}
   c4c00:	f44f 7460 	mov.w	r4, #896	; 0x380
   c4c04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c4c08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c4c0c:	e71c      	b.n	c4a48 <__adddf3+0x138>
   c4c0e:	bf00      	nop

000c4c10 <__aeabi_ul2d>:
   c4c10:	ea50 0201 	orrs.w	r2, r0, r1
   c4c14:	bf08      	it	eq
   c4c16:	4770      	bxeq	lr
   c4c18:	b530      	push	{r4, r5, lr}
   c4c1a:	f04f 0500 	mov.w	r5, #0
   c4c1e:	e00a      	b.n	c4c36 <__aeabi_l2d+0x16>

000c4c20 <__aeabi_l2d>:
   c4c20:	ea50 0201 	orrs.w	r2, r0, r1
   c4c24:	bf08      	it	eq
   c4c26:	4770      	bxeq	lr
   c4c28:	b530      	push	{r4, r5, lr}
   c4c2a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c4c2e:	d502      	bpl.n	c4c36 <__aeabi_l2d+0x16>
   c4c30:	4240      	negs	r0, r0
   c4c32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c4c36:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c4c3a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c4c3e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c4c42:	f43f aed8 	beq.w	c49f6 <__adddf3+0xe6>
   c4c46:	f04f 0203 	mov.w	r2, #3
   c4c4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c4c4e:	bf18      	it	ne
   c4c50:	3203      	addne	r2, #3
   c4c52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c4c56:	bf18      	it	ne
   c4c58:	3203      	addne	r2, #3
   c4c5a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c4c5e:	f1c2 0320 	rsb	r3, r2, #32
   c4c62:	fa00 fc03 	lsl.w	ip, r0, r3
   c4c66:	fa20 f002 	lsr.w	r0, r0, r2
   c4c6a:	fa01 fe03 	lsl.w	lr, r1, r3
   c4c6e:	ea40 000e 	orr.w	r0, r0, lr
   c4c72:	fa21 f102 	lsr.w	r1, r1, r2
   c4c76:	4414      	add	r4, r2
   c4c78:	e6bd      	b.n	c49f6 <__adddf3+0xe6>
   c4c7a:	bf00      	nop

000c4c7c <__aeabi_dmul>:
   c4c7c:	b570      	push	{r4, r5, r6, lr}
   c4c7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c4c82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c4c86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c4c8a:	bf1d      	ittte	ne
   c4c8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c4c90:	ea94 0f0c 	teqne	r4, ip
   c4c94:	ea95 0f0c 	teqne	r5, ip
   c4c98:	f000 f8de 	bleq	c4e58 <__aeabi_dmul+0x1dc>
   c4c9c:	442c      	add	r4, r5
   c4c9e:	ea81 0603 	eor.w	r6, r1, r3
   c4ca2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c4ca6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c4caa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c4cae:	bf18      	it	ne
   c4cb0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c4cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4cb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c4cbc:	d038      	beq.n	c4d30 <__aeabi_dmul+0xb4>
   c4cbe:	fba0 ce02 	umull	ip, lr, r0, r2
   c4cc2:	f04f 0500 	mov.w	r5, #0
   c4cc6:	fbe1 e502 	umlal	lr, r5, r1, r2
   c4cca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c4cce:	fbe0 e503 	umlal	lr, r5, r0, r3
   c4cd2:	f04f 0600 	mov.w	r6, #0
   c4cd6:	fbe1 5603 	umlal	r5, r6, r1, r3
   c4cda:	f09c 0f00 	teq	ip, #0
   c4cde:	bf18      	it	ne
   c4ce0:	f04e 0e01 	orrne.w	lr, lr, #1
   c4ce4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c4ce8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c4cec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c4cf0:	d204      	bcs.n	c4cfc <__aeabi_dmul+0x80>
   c4cf2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c4cf6:	416d      	adcs	r5, r5
   c4cf8:	eb46 0606 	adc.w	r6, r6, r6
   c4cfc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c4d00:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c4d04:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c4d08:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c4d0c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c4d10:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c4d14:	bf88      	it	hi
   c4d16:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c4d1a:	d81e      	bhi.n	c4d5a <__aeabi_dmul+0xde>
   c4d1c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c4d20:	bf08      	it	eq
   c4d22:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c4d26:	f150 0000 	adcs.w	r0, r0, #0
   c4d2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c4d2e:	bd70      	pop	{r4, r5, r6, pc}
   c4d30:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c4d34:	ea46 0101 	orr.w	r1, r6, r1
   c4d38:	ea40 0002 	orr.w	r0, r0, r2
   c4d3c:	ea81 0103 	eor.w	r1, r1, r3
   c4d40:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c4d44:	bfc2      	ittt	gt
   c4d46:	ebd4 050c 	rsbsgt	r5, r4, ip
   c4d4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c4d4e:	bd70      	popgt	{r4, r5, r6, pc}
   c4d50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4d54:	f04f 0e00 	mov.w	lr, #0
   c4d58:	3c01      	subs	r4, #1
   c4d5a:	f300 80ab 	bgt.w	c4eb4 <__aeabi_dmul+0x238>
   c4d5e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c4d62:	bfde      	ittt	le
   c4d64:	2000      	movle	r0, #0
   c4d66:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c4d6a:	bd70      	pople	{r4, r5, r6, pc}
   c4d6c:	f1c4 0400 	rsb	r4, r4, #0
   c4d70:	3c20      	subs	r4, #32
   c4d72:	da35      	bge.n	c4de0 <__aeabi_dmul+0x164>
   c4d74:	340c      	adds	r4, #12
   c4d76:	dc1b      	bgt.n	c4db0 <__aeabi_dmul+0x134>
   c4d78:	f104 0414 	add.w	r4, r4, #20
   c4d7c:	f1c4 0520 	rsb	r5, r4, #32
   c4d80:	fa00 f305 	lsl.w	r3, r0, r5
   c4d84:	fa20 f004 	lsr.w	r0, r0, r4
   c4d88:	fa01 f205 	lsl.w	r2, r1, r5
   c4d8c:	ea40 0002 	orr.w	r0, r0, r2
   c4d90:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c4d94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c4d98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c4d9c:	fa21 f604 	lsr.w	r6, r1, r4
   c4da0:	eb42 0106 	adc.w	r1, r2, r6
   c4da4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c4da8:	bf08      	it	eq
   c4daa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c4dae:	bd70      	pop	{r4, r5, r6, pc}
   c4db0:	f1c4 040c 	rsb	r4, r4, #12
   c4db4:	f1c4 0520 	rsb	r5, r4, #32
   c4db8:	fa00 f304 	lsl.w	r3, r0, r4
   c4dbc:	fa20 f005 	lsr.w	r0, r0, r5
   c4dc0:	fa01 f204 	lsl.w	r2, r1, r4
   c4dc4:	ea40 0002 	orr.w	r0, r0, r2
   c4dc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4dcc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c4dd0:	f141 0100 	adc.w	r1, r1, #0
   c4dd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c4dd8:	bf08      	it	eq
   c4dda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c4dde:	bd70      	pop	{r4, r5, r6, pc}
   c4de0:	f1c4 0520 	rsb	r5, r4, #32
   c4de4:	fa00 f205 	lsl.w	r2, r0, r5
   c4de8:	ea4e 0e02 	orr.w	lr, lr, r2
   c4dec:	fa20 f304 	lsr.w	r3, r0, r4
   c4df0:	fa01 f205 	lsl.w	r2, r1, r5
   c4df4:	ea43 0302 	orr.w	r3, r3, r2
   c4df8:	fa21 f004 	lsr.w	r0, r1, r4
   c4dfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4e00:	fa21 f204 	lsr.w	r2, r1, r4
   c4e04:	ea20 0002 	bic.w	r0, r0, r2
   c4e08:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c4e0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c4e10:	bf08      	it	eq
   c4e12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c4e16:	bd70      	pop	{r4, r5, r6, pc}
   c4e18:	f094 0f00 	teq	r4, #0
   c4e1c:	d10f      	bne.n	c4e3e <__aeabi_dmul+0x1c2>
   c4e1e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c4e22:	0040      	lsls	r0, r0, #1
   c4e24:	eb41 0101 	adc.w	r1, r1, r1
   c4e28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4e2c:	bf08      	it	eq
   c4e2e:	3c01      	subeq	r4, #1
   c4e30:	d0f7      	beq.n	c4e22 <__aeabi_dmul+0x1a6>
   c4e32:	ea41 0106 	orr.w	r1, r1, r6
   c4e36:	f095 0f00 	teq	r5, #0
   c4e3a:	bf18      	it	ne
   c4e3c:	4770      	bxne	lr
   c4e3e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c4e42:	0052      	lsls	r2, r2, #1
   c4e44:	eb43 0303 	adc.w	r3, r3, r3
   c4e48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c4e4c:	bf08      	it	eq
   c4e4e:	3d01      	subeq	r5, #1
   c4e50:	d0f7      	beq.n	c4e42 <__aeabi_dmul+0x1c6>
   c4e52:	ea43 0306 	orr.w	r3, r3, r6
   c4e56:	4770      	bx	lr
   c4e58:	ea94 0f0c 	teq	r4, ip
   c4e5c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c4e60:	bf18      	it	ne
   c4e62:	ea95 0f0c 	teqne	r5, ip
   c4e66:	d00c      	beq.n	c4e82 <__aeabi_dmul+0x206>
   c4e68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4e6c:	bf18      	it	ne
   c4e6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c4e72:	d1d1      	bne.n	c4e18 <__aeabi_dmul+0x19c>
   c4e74:	ea81 0103 	eor.w	r1, r1, r3
   c4e78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4e7c:	f04f 0000 	mov.w	r0, #0
   c4e80:	bd70      	pop	{r4, r5, r6, pc}
   c4e82:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4e86:	bf06      	itte	eq
   c4e88:	4610      	moveq	r0, r2
   c4e8a:	4619      	moveq	r1, r3
   c4e8c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c4e90:	d019      	beq.n	c4ec6 <__aeabi_dmul+0x24a>
   c4e92:	ea94 0f0c 	teq	r4, ip
   c4e96:	d102      	bne.n	c4e9e <__aeabi_dmul+0x222>
   c4e98:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c4e9c:	d113      	bne.n	c4ec6 <__aeabi_dmul+0x24a>
   c4e9e:	ea95 0f0c 	teq	r5, ip
   c4ea2:	d105      	bne.n	c4eb0 <__aeabi_dmul+0x234>
   c4ea4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c4ea8:	bf1c      	itt	ne
   c4eaa:	4610      	movne	r0, r2
   c4eac:	4619      	movne	r1, r3
   c4eae:	d10a      	bne.n	c4ec6 <__aeabi_dmul+0x24a>
   c4eb0:	ea81 0103 	eor.w	r1, r1, r3
   c4eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4eb8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c4ebc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c4ec0:	f04f 0000 	mov.w	r0, #0
   c4ec4:	bd70      	pop	{r4, r5, r6, pc}
   c4ec6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c4eca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c4ece:	bd70      	pop	{r4, r5, r6, pc}

000c4ed0 <__aeabi_ddiv>:
   c4ed0:	b570      	push	{r4, r5, r6, lr}
   c4ed2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c4ed6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c4eda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c4ede:	bf1d      	ittte	ne
   c4ee0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c4ee4:	ea94 0f0c 	teqne	r4, ip
   c4ee8:	ea95 0f0c 	teqne	r5, ip
   c4eec:	f000 f8a7 	bleq	c503e <__aeabi_ddiv+0x16e>
   c4ef0:	eba4 0405 	sub.w	r4, r4, r5
   c4ef4:	ea81 0e03 	eor.w	lr, r1, r3
   c4ef8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c4efc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c4f00:	f000 8088 	beq.w	c5014 <__aeabi_ddiv+0x144>
   c4f04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c4f08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c4f0c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c4f10:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c4f14:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c4f18:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c4f1c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c4f20:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c4f24:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c4f28:	429d      	cmp	r5, r3
   c4f2a:	bf08      	it	eq
   c4f2c:	4296      	cmpeq	r6, r2
   c4f2e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c4f32:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c4f36:	d202      	bcs.n	c4f3e <__aeabi_ddiv+0x6e>
   c4f38:	085b      	lsrs	r3, r3, #1
   c4f3a:	ea4f 0232 	mov.w	r2, r2, rrx
   c4f3e:	1ab6      	subs	r6, r6, r2
   c4f40:	eb65 0503 	sbc.w	r5, r5, r3
   c4f44:	085b      	lsrs	r3, r3, #1
   c4f46:	ea4f 0232 	mov.w	r2, r2, rrx
   c4f4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c4f4e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c4f52:	ebb6 0e02 	subs.w	lr, r6, r2
   c4f56:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4f5a:	bf22      	ittt	cs
   c4f5c:	1ab6      	subcs	r6, r6, r2
   c4f5e:	4675      	movcs	r5, lr
   c4f60:	ea40 000c 	orrcs.w	r0, r0, ip
   c4f64:	085b      	lsrs	r3, r3, #1
   c4f66:	ea4f 0232 	mov.w	r2, r2, rrx
   c4f6a:	ebb6 0e02 	subs.w	lr, r6, r2
   c4f6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4f72:	bf22      	ittt	cs
   c4f74:	1ab6      	subcs	r6, r6, r2
   c4f76:	4675      	movcs	r5, lr
   c4f78:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c4f7c:	085b      	lsrs	r3, r3, #1
   c4f7e:	ea4f 0232 	mov.w	r2, r2, rrx
   c4f82:	ebb6 0e02 	subs.w	lr, r6, r2
   c4f86:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4f8a:	bf22      	ittt	cs
   c4f8c:	1ab6      	subcs	r6, r6, r2
   c4f8e:	4675      	movcs	r5, lr
   c4f90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c4f94:	085b      	lsrs	r3, r3, #1
   c4f96:	ea4f 0232 	mov.w	r2, r2, rrx
   c4f9a:	ebb6 0e02 	subs.w	lr, r6, r2
   c4f9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4fa2:	bf22      	ittt	cs
   c4fa4:	1ab6      	subcs	r6, r6, r2
   c4fa6:	4675      	movcs	r5, lr
   c4fa8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c4fac:	ea55 0e06 	orrs.w	lr, r5, r6
   c4fb0:	d018      	beq.n	c4fe4 <__aeabi_ddiv+0x114>
   c4fb2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c4fb6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c4fba:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c4fbe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c4fc2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c4fc6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c4fca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c4fce:	d1c0      	bne.n	c4f52 <__aeabi_ddiv+0x82>
   c4fd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4fd4:	d10b      	bne.n	c4fee <__aeabi_ddiv+0x11e>
   c4fd6:	ea41 0100 	orr.w	r1, r1, r0
   c4fda:	f04f 0000 	mov.w	r0, #0
   c4fde:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c4fe2:	e7b6      	b.n	c4f52 <__aeabi_ddiv+0x82>
   c4fe4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4fe8:	bf04      	itt	eq
   c4fea:	4301      	orreq	r1, r0
   c4fec:	2000      	moveq	r0, #0
   c4fee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c4ff2:	bf88      	it	hi
   c4ff4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c4ff8:	f63f aeaf 	bhi.w	c4d5a <__aeabi_dmul+0xde>
   c4ffc:	ebb5 0c03 	subs.w	ip, r5, r3
   c5000:	bf04      	itt	eq
   c5002:	ebb6 0c02 	subseq.w	ip, r6, r2
   c5006:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c500a:	f150 0000 	adcs.w	r0, r0, #0
   c500e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c5012:	bd70      	pop	{r4, r5, r6, pc}
   c5014:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c5018:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c501c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c5020:	bfc2      	ittt	gt
   c5022:	ebd4 050c 	rsbsgt	r5, r4, ip
   c5026:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c502a:	bd70      	popgt	{r4, r5, r6, pc}
   c502c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c5030:	f04f 0e00 	mov.w	lr, #0
   c5034:	3c01      	subs	r4, #1
   c5036:	e690      	b.n	c4d5a <__aeabi_dmul+0xde>
   c5038:	ea45 0e06 	orr.w	lr, r5, r6
   c503c:	e68d      	b.n	c4d5a <__aeabi_dmul+0xde>
   c503e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c5042:	ea94 0f0c 	teq	r4, ip
   c5046:	bf08      	it	eq
   c5048:	ea95 0f0c 	teqeq	r5, ip
   c504c:	f43f af3b 	beq.w	c4ec6 <__aeabi_dmul+0x24a>
   c5050:	ea94 0f0c 	teq	r4, ip
   c5054:	d10a      	bne.n	c506c <__aeabi_ddiv+0x19c>
   c5056:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c505a:	f47f af34 	bne.w	c4ec6 <__aeabi_dmul+0x24a>
   c505e:	ea95 0f0c 	teq	r5, ip
   c5062:	f47f af25 	bne.w	c4eb0 <__aeabi_dmul+0x234>
   c5066:	4610      	mov	r0, r2
   c5068:	4619      	mov	r1, r3
   c506a:	e72c      	b.n	c4ec6 <__aeabi_dmul+0x24a>
   c506c:	ea95 0f0c 	teq	r5, ip
   c5070:	d106      	bne.n	c5080 <__aeabi_ddiv+0x1b0>
   c5072:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c5076:	f43f aefd 	beq.w	c4e74 <__aeabi_dmul+0x1f8>
   c507a:	4610      	mov	r0, r2
   c507c:	4619      	mov	r1, r3
   c507e:	e722      	b.n	c4ec6 <__aeabi_dmul+0x24a>
   c5080:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c5084:	bf18      	it	ne
   c5086:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c508a:	f47f aec5 	bne.w	c4e18 <__aeabi_dmul+0x19c>
   c508e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c5092:	f47f af0d 	bne.w	c4eb0 <__aeabi_dmul+0x234>
   c5096:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c509a:	f47f aeeb 	bne.w	c4e74 <__aeabi_dmul+0x1f8>
   c509e:	e712      	b.n	c4ec6 <__aeabi_dmul+0x24a>

000c50a0 <__gedf2>:
   c50a0:	f04f 3cff 	mov.w	ip, #4294967295
   c50a4:	e006      	b.n	c50b4 <__cmpdf2+0x4>
   c50a6:	bf00      	nop

000c50a8 <__ledf2>:
   c50a8:	f04f 0c01 	mov.w	ip, #1
   c50ac:	e002      	b.n	c50b4 <__cmpdf2+0x4>
   c50ae:	bf00      	nop

000c50b0 <__cmpdf2>:
   c50b0:	f04f 0c01 	mov.w	ip, #1
   c50b4:	f84d cd04 	str.w	ip, [sp, #-4]!
   c50b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c50bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c50c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c50c4:	bf18      	it	ne
   c50c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c50ca:	d01b      	beq.n	c5104 <__cmpdf2+0x54>
   c50cc:	b001      	add	sp, #4
   c50ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c50d2:	bf0c      	ite	eq
   c50d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c50d8:	ea91 0f03 	teqne	r1, r3
   c50dc:	bf02      	ittt	eq
   c50de:	ea90 0f02 	teqeq	r0, r2
   c50e2:	2000      	moveq	r0, #0
   c50e4:	4770      	bxeq	lr
   c50e6:	f110 0f00 	cmn.w	r0, #0
   c50ea:	ea91 0f03 	teq	r1, r3
   c50ee:	bf58      	it	pl
   c50f0:	4299      	cmppl	r1, r3
   c50f2:	bf08      	it	eq
   c50f4:	4290      	cmpeq	r0, r2
   c50f6:	bf2c      	ite	cs
   c50f8:	17d8      	asrcs	r0, r3, #31
   c50fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c50fe:	f040 0001 	orr.w	r0, r0, #1
   c5102:	4770      	bx	lr
   c5104:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c5108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c510c:	d102      	bne.n	c5114 <__cmpdf2+0x64>
   c510e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c5112:	d107      	bne.n	c5124 <__cmpdf2+0x74>
   c5114:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c5118:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c511c:	d1d6      	bne.n	c50cc <__cmpdf2+0x1c>
   c511e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c5122:	d0d3      	beq.n	c50cc <__cmpdf2+0x1c>
   c5124:	f85d 0b04 	ldr.w	r0, [sp], #4
   c5128:	4770      	bx	lr
   c512a:	bf00      	nop

000c512c <__aeabi_cdrcmple>:
   c512c:	4684      	mov	ip, r0
   c512e:	4610      	mov	r0, r2
   c5130:	4662      	mov	r2, ip
   c5132:	468c      	mov	ip, r1
   c5134:	4619      	mov	r1, r3
   c5136:	4663      	mov	r3, ip
   c5138:	e000      	b.n	c513c <__aeabi_cdcmpeq>
   c513a:	bf00      	nop

000c513c <__aeabi_cdcmpeq>:
   c513c:	b501      	push	{r0, lr}
   c513e:	f7ff ffb7 	bl	c50b0 <__cmpdf2>
   c5142:	2800      	cmp	r0, #0
   c5144:	bf48      	it	mi
   c5146:	f110 0f00 	cmnmi.w	r0, #0
   c514a:	bd01      	pop	{r0, pc}

000c514c <__aeabi_dcmpeq>:
   c514c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c5150:	f7ff fff4 	bl	c513c <__aeabi_cdcmpeq>
   c5154:	bf0c      	ite	eq
   c5156:	2001      	moveq	r0, #1
   c5158:	2000      	movne	r0, #0
   c515a:	f85d fb08 	ldr.w	pc, [sp], #8
   c515e:	bf00      	nop

000c5160 <__aeabi_dcmplt>:
   c5160:	f84d ed08 	str.w	lr, [sp, #-8]!
   c5164:	f7ff ffea 	bl	c513c <__aeabi_cdcmpeq>
   c5168:	bf34      	ite	cc
   c516a:	2001      	movcc	r0, #1
   c516c:	2000      	movcs	r0, #0
   c516e:	f85d fb08 	ldr.w	pc, [sp], #8
   c5172:	bf00      	nop

000c5174 <__aeabi_dcmple>:
   c5174:	f84d ed08 	str.w	lr, [sp, #-8]!
   c5178:	f7ff ffe0 	bl	c513c <__aeabi_cdcmpeq>
   c517c:	bf94      	ite	ls
   c517e:	2001      	movls	r0, #1
   c5180:	2000      	movhi	r0, #0
   c5182:	f85d fb08 	ldr.w	pc, [sp], #8
   c5186:	bf00      	nop

000c5188 <__aeabi_dcmpge>:
   c5188:	f84d ed08 	str.w	lr, [sp, #-8]!
   c518c:	f7ff ffce 	bl	c512c <__aeabi_cdrcmple>
   c5190:	bf94      	ite	ls
   c5192:	2001      	movls	r0, #1
   c5194:	2000      	movhi	r0, #0
   c5196:	f85d fb08 	ldr.w	pc, [sp], #8
   c519a:	bf00      	nop

000c519c <__aeabi_dcmpgt>:
   c519c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c51a0:	f7ff ffc4 	bl	c512c <__aeabi_cdrcmple>
   c51a4:	bf34      	ite	cc
   c51a6:	2001      	movcc	r0, #1
   c51a8:	2000      	movcs	r0, #0
   c51aa:	f85d fb08 	ldr.w	pc, [sp], #8
   c51ae:	bf00      	nop

000c51b0 <__aeabi_dcmpun>:
   c51b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c51b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c51b8:	d102      	bne.n	c51c0 <__aeabi_dcmpun+0x10>
   c51ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c51be:	d10a      	bne.n	c51d6 <__aeabi_dcmpun+0x26>
   c51c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c51c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c51c8:	d102      	bne.n	c51d0 <__aeabi_dcmpun+0x20>
   c51ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c51ce:	d102      	bne.n	c51d6 <__aeabi_dcmpun+0x26>
   c51d0:	f04f 0000 	mov.w	r0, #0
   c51d4:	4770      	bx	lr
   c51d6:	f04f 0001 	mov.w	r0, #1
   c51da:	4770      	bx	lr

000c51dc <__aeabi_d2iz>:
   c51dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c51e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c51e4:	d215      	bcs.n	c5212 <__aeabi_d2iz+0x36>
   c51e6:	d511      	bpl.n	c520c <__aeabi_d2iz+0x30>
   c51e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c51ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c51f0:	d912      	bls.n	c5218 <__aeabi_d2iz+0x3c>
   c51f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c51f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c51fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c51fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c5202:	fa23 f002 	lsr.w	r0, r3, r2
   c5206:	bf18      	it	ne
   c5208:	4240      	negne	r0, r0
   c520a:	4770      	bx	lr
   c520c:	f04f 0000 	mov.w	r0, #0
   c5210:	4770      	bx	lr
   c5212:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c5216:	d105      	bne.n	c5224 <__aeabi_d2iz+0x48>
   c5218:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c521c:	bf08      	it	eq
   c521e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c5222:	4770      	bx	lr
   c5224:	f04f 0000 	mov.w	r0, #0
   c5228:	4770      	bx	lr
   c522a:	bf00      	nop

000c522c <__aeabi_d2uiz>:
   c522c:	004a      	lsls	r2, r1, #1
   c522e:	d211      	bcs.n	c5254 <__aeabi_d2uiz+0x28>
   c5230:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c5234:	d211      	bcs.n	c525a <__aeabi_d2uiz+0x2e>
   c5236:	d50d      	bpl.n	c5254 <__aeabi_d2uiz+0x28>
   c5238:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c523c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c5240:	d40e      	bmi.n	c5260 <__aeabi_d2uiz+0x34>
   c5242:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c5246:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c524a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c524e:	fa23 f002 	lsr.w	r0, r3, r2
   c5252:	4770      	bx	lr
   c5254:	f04f 0000 	mov.w	r0, #0
   c5258:	4770      	bx	lr
   c525a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c525e:	d102      	bne.n	c5266 <__aeabi_d2uiz+0x3a>
   c5260:	f04f 30ff 	mov.w	r0, #4294967295
   c5264:	4770      	bx	lr
   c5266:	f04f 0000 	mov.w	r0, #0
   c526a:	4770      	bx	lr

000c526c <__aeabi_d2f>:
   c526c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c5270:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c5274:	bf24      	itt	cs
   c5276:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c527a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c527e:	d90d      	bls.n	c529c <__aeabi_d2f+0x30>
   c5280:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c5284:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c5288:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c528c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c5290:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c5294:	bf08      	it	eq
   c5296:	f020 0001 	biceq.w	r0, r0, #1
   c529a:	4770      	bx	lr
   c529c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c52a0:	d121      	bne.n	c52e6 <__aeabi_d2f+0x7a>
   c52a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c52a6:	bfbc      	itt	lt
   c52a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c52ac:	4770      	bxlt	lr
   c52ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c52b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c52b6:	f1c2 0218 	rsb	r2, r2, #24
   c52ba:	f1c2 0c20 	rsb	ip, r2, #32
   c52be:	fa10 f30c 	lsls.w	r3, r0, ip
   c52c2:	fa20 f002 	lsr.w	r0, r0, r2
   c52c6:	bf18      	it	ne
   c52c8:	f040 0001 	orrne.w	r0, r0, #1
   c52cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c52d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c52d4:	fa03 fc0c 	lsl.w	ip, r3, ip
   c52d8:	ea40 000c 	orr.w	r0, r0, ip
   c52dc:	fa23 f302 	lsr.w	r3, r3, r2
   c52e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c52e4:	e7cc      	b.n	c5280 <__aeabi_d2f+0x14>
   c52e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c52ea:	d107      	bne.n	c52fc <__aeabi_d2f+0x90>
   c52ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c52f0:	bf1e      	ittt	ne
   c52f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c52f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c52fa:	4770      	bxne	lr
   c52fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c5300:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c5304:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c5308:	4770      	bx	lr
   c530a:	bf00      	nop

000c530c <asctime_r>:
   c530c:	b510      	push	{r4, lr}
   c530e:	460c      	mov	r4, r1
   c5310:	6941      	ldr	r1, [r0, #20]
   c5312:	6903      	ldr	r3, [r0, #16]
   c5314:	6982      	ldr	r2, [r0, #24]
   c5316:	b086      	sub	sp, #24
   c5318:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c531c:	9104      	str	r1, [sp, #16]
   c531e:	6801      	ldr	r1, [r0, #0]
   c5320:	9103      	str	r1, [sp, #12]
   c5322:	6841      	ldr	r1, [r0, #4]
   c5324:	9102      	str	r1, [sp, #8]
   c5326:	6881      	ldr	r1, [r0, #8]
   c5328:	9101      	str	r1, [sp, #4]
   c532a:	68c1      	ldr	r1, [r0, #12]
   c532c:	9100      	str	r1, [sp, #0]
   c532e:	4907      	ldr	r1, [pc, #28]	; (c534c <asctime_r+0x40>)
   c5330:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c5334:	440b      	add	r3, r1
   c5336:	4906      	ldr	r1, [pc, #24]	; (c5350 <asctime_r+0x44>)
   c5338:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c533c:	440a      	add	r2, r1
   c533e:	4620      	mov	r0, r4
   c5340:	4904      	ldr	r1, [pc, #16]	; (c5354 <asctime_r+0x48>)
   c5342:	f7fb f829 	bl	c0398 <siprintf>
   c5346:	4620      	mov	r0, r4
   c5348:	b006      	add	sp, #24
   c534a:	bd10      	pop	{r4, pc}
   c534c:	000c94fd 	.word	0x000c94fd
   c5350:	000c94e8 	.word	0x000c94e8
   c5354:	000c94c8 	.word	0x000c94c8

000c5358 <atexit>:
   c5358:	2300      	movs	r3, #0
   c535a:	4601      	mov	r1, r0
   c535c:	461a      	mov	r2, r3
   c535e:	4618      	mov	r0, r3
   c5360:	f000 ba88 	b.w	c5874 <__register_exitproc>

000c5364 <calloc>:
   c5364:	4b02      	ldr	r3, [pc, #8]	; (c5370 <calloc+0xc>)
   c5366:	460a      	mov	r2, r1
   c5368:	4601      	mov	r1, r0
   c536a:	6818      	ldr	r0, [r3, #0]
   c536c:	f000 b858 	b.w	c5420 <_calloc_r>
   c5370:	2003acec 	.word	0x2003acec

000c5374 <gmtime>:
   c5374:	b538      	push	{r3, r4, r5, lr}
   c5376:	4b0b      	ldr	r3, [pc, #44]	; (c53a4 <gmtime+0x30>)
   c5378:	681d      	ldr	r5, [r3, #0]
   c537a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c537c:	4604      	mov	r4, r0
   c537e:	b953      	cbnz	r3, c5396 <gmtime+0x22>
   c5380:	2024      	movs	r0, #36	; 0x24
   c5382:	f7fa fff1 	bl	c0368 <malloc>
   c5386:	4602      	mov	r2, r0
   c5388:	63e8      	str	r0, [r5, #60]	; 0x3c
   c538a:	b920      	cbnz	r0, c5396 <gmtime+0x22>
   c538c:	4b06      	ldr	r3, [pc, #24]	; (c53a8 <gmtime+0x34>)
   c538e:	4807      	ldr	r0, [pc, #28]	; (c53ac <gmtime+0x38>)
   c5390:	2139      	movs	r1, #57	; 0x39
   c5392:	f7fb f839 	bl	c0408 <__assert_func>
   c5396:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c5398:	4620      	mov	r0, r4
   c539a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c539e:	f7fb b853 	b.w	c0448 <gmtime_r>
   c53a2:	bf00      	nop
   c53a4:	2003acec 	.word	0x2003acec
   c53a8:	000c9521 	.word	0x000c9521
   c53ac:	000c9538 	.word	0x000c9538

000c53b0 <isprint>:
   c53b0:	4b02      	ldr	r3, [pc, #8]	; (c53bc <isprint+0xc>)
   c53b2:	4418      	add	r0, r3
   c53b4:	7840      	ldrb	r0, [r0, #1]
   c53b6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c53ba:	4770      	bx	lr
   c53bc:	000c9632 	.word	0x000c9632

000c53c0 <memcpy>:
   c53c0:	440a      	add	r2, r1
   c53c2:	4291      	cmp	r1, r2
   c53c4:	f100 33ff 	add.w	r3, r0, #4294967295
   c53c8:	d100      	bne.n	c53cc <memcpy+0xc>
   c53ca:	4770      	bx	lr
   c53cc:	b510      	push	{r4, lr}
   c53ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   c53d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   c53d6:	4291      	cmp	r1, r2
   c53d8:	d1f9      	bne.n	c53ce <memcpy+0xe>
   c53da:	bd10      	pop	{r4, pc}

000c53dc <memmove>:
   c53dc:	4288      	cmp	r0, r1
   c53de:	b510      	push	{r4, lr}
   c53e0:	eb01 0402 	add.w	r4, r1, r2
   c53e4:	d902      	bls.n	c53ec <memmove+0x10>
   c53e6:	4284      	cmp	r4, r0
   c53e8:	4623      	mov	r3, r4
   c53ea:	d807      	bhi.n	c53fc <memmove+0x20>
   c53ec:	1e43      	subs	r3, r0, #1
   c53ee:	42a1      	cmp	r1, r4
   c53f0:	d008      	beq.n	c5404 <memmove+0x28>
   c53f2:	f811 2b01 	ldrb.w	r2, [r1], #1
   c53f6:	f803 2f01 	strb.w	r2, [r3, #1]!
   c53fa:	e7f8      	b.n	c53ee <memmove+0x12>
   c53fc:	4402      	add	r2, r0
   c53fe:	4601      	mov	r1, r0
   c5400:	428a      	cmp	r2, r1
   c5402:	d100      	bne.n	c5406 <memmove+0x2a>
   c5404:	bd10      	pop	{r4, pc}
   c5406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c540a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c540e:	e7f7      	b.n	c5400 <memmove+0x24>

000c5410 <memset>:
   c5410:	4402      	add	r2, r0
   c5412:	4603      	mov	r3, r0
   c5414:	4293      	cmp	r3, r2
   c5416:	d100      	bne.n	c541a <memset+0xa>
   c5418:	4770      	bx	lr
   c541a:	f803 1b01 	strb.w	r1, [r3], #1
   c541e:	e7f9      	b.n	c5414 <memset+0x4>

000c5420 <_calloc_r>:
   c5420:	b513      	push	{r0, r1, r4, lr}
   c5422:	434a      	muls	r2, r1
   c5424:	4611      	mov	r1, r2
   c5426:	9201      	str	r2, [sp, #4]
   c5428:	f7fa ffde 	bl	c03e8 <_malloc_r>
   c542c:	4604      	mov	r4, r0
   c542e:	b118      	cbz	r0, c5438 <_calloc_r+0x18>
   c5430:	9a01      	ldr	r2, [sp, #4]
   c5432:	2100      	movs	r1, #0
   c5434:	f7ff ffec 	bl	c5410 <memset>
   c5438:	4620      	mov	r0, r4
   c543a:	b002      	add	sp, #8
   c543c:	bd10      	pop	{r4, pc}
	...

000c5440 <srand>:
   c5440:	b538      	push	{r3, r4, r5, lr}
   c5442:	4b10      	ldr	r3, [pc, #64]	; (c5484 <srand+0x44>)
   c5444:	681d      	ldr	r5, [r3, #0]
   c5446:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c5448:	4604      	mov	r4, r0
   c544a:	b9b3      	cbnz	r3, c547a <srand+0x3a>
   c544c:	2018      	movs	r0, #24
   c544e:	f7fa ff8b 	bl	c0368 <malloc>
   c5452:	4602      	mov	r2, r0
   c5454:	63a8      	str	r0, [r5, #56]	; 0x38
   c5456:	b920      	cbnz	r0, c5462 <srand+0x22>
   c5458:	4b0b      	ldr	r3, [pc, #44]	; (c5488 <srand+0x48>)
   c545a:	480c      	ldr	r0, [pc, #48]	; (c548c <srand+0x4c>)
   c545c:	2142      	movs	r1, #66	; 0x42
   c545e:	f7fa ffd3 	bl	c0408 <__assert_func>
   c5462:	490b      	ldr	r1, [pc, #44]	; (c5490 <srand+0x50>)
   c5464:	4b0b      	ldr	r3, [pc, #44]	; (c5494 <srand+0x54>)
   c5466:	e9c0 1300 	strd	r1, r3, [r0]
   c546a:	4b0b      	ldr	r3, [pc, #44]	; (c5498 <srand+0x58>)
   c546c:	6083      	str	r3, [r0, #8]
   c546e:	230b      	movs	r3, #11
   c5470:	8183      	strh	r3, [r0, #12]
   c5472:	2100      	movs	r1, #0
   c5474:	2001      	movs	r0, #1
   c5476:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c547a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c547c:	2200      	movs	r2, #0
   c547e:	611c      	str	r4, [r3, #16]
   c5480:	615a      	str	r2, [r3, #20]
   c5482:	bd38      	pop	{r3, r4, r5, pc}
   c5484:	2003acec 	.word	0x2003acec
   c5488:	000c9521 	.word	0x000c9521
   c548c:	000c95b5 	.word	0x000c95b5
   c5490:	abcd330e 	.word	0xabcd330e
   c5494:	e66d1234 	.word	0xe66d1234
   c5498:	0005deec 	.word	0x0005deec

000c549c <rand>:
   c549c:	4b16      	ldr	r3, [pc, #88]	; (c54f8 <rand+0x5c>)
   c549e:	b510      	push	{r4, lr}
   c54a0:	681c      	ldr	r4, [r3, #0]
   c54a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c54a4:	b9b3      	cbnz	r3, c54d4 <rand+0x38>
   c54a6:	2018      	movs	r0, #24
   c54a8:	f7fa ff5e 	bl	c0368 <malloc>
   c54ac:	63a0      	str	r0, [r4, #56]	; 0x38
   c54ae:	b928      	cbnz	r0, c54bc <rand+0x20>
   c54b0:	4602      	mov	r2, r0
   c54b2:	4b12      	ldr	r3, [pc, #72]	; (c54fc <rand+0x60>)
   c54b4:	4812      	ldr	r0, [pc, #72]	; (c5500 <rand+0x64>)
   c54b6:	214e      	movs	r1, #78	; 0x4e
   c54b8:	f7fa ffa6 	bl	c0408 <__assert_func>
   c54bc:	4a11      	ldr	r2, [pc, #68]	; (c5504 <rand+0x68>)
   c54be:	4b12      	ldr	r3, [pc, #72]	; (c5508 <rand+0x6c>)
   c54c0:	e9c0 2300 	strd	r2, r3, [r0]
   c54c4:	4b11      	ldr	r3, [pc, #68]	; (c550c <rand+0x70>)
   c54c6:	6083      	str	r3, [r0, #8]
   c54c8:	230b      	movs	r3, #11
   c54ca:	8183      	strh	r3, [r0, #12]
   c54cc:	2201      	movs	r2, #1
   c54ce:	2300      	movs	r3, #0
   c54d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c54d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c54d6:	4a0e      	ldr	r2, [pc, #56]	; (c5510 <rand+0x74>)
   c54d8:	6920      	ldr	r0, [r4, #16]
   c54da:	6963      	ldr	r3, [r4, #20]
   c54dc:	490d      	ldr	r1, [pc, #52]	; (c5514 <rand+0x78>)
   c54de:	4342      	muls	r2, r0
   c54e0:	fb01 2203 	mla	r2, r1, r3, r2
   c54e4:	fba0 0101 	umull	r0, r1, r0, r1
   c54e8:	1c43      	adds	r3, r0, #1
   c54ea:	eb42 0001 	adc.w	r0, r2, r1
   c54ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c54f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c54f6:	bd10      	pop	{r4, pc}
   c54f8:	2003acec 	.word	0x2003acec
   c54fc:	000c9521 	.word	0x000c9521
   c5500:	000c95b5 	.word	0x000c95b5
   c5504:	abcd330e 	.word	0xabcd330e
   c5508:	e66d1234 	.word	0xe66d1234
   c550c:	0005deec 	.word	0x0005deec
   c5510:	5851f42d 	.word	0x5851f42d
   c5514:	4c957f2d 	.word	0x4c957f2d

000c5518 <strchr>:
   c5518:	b2c9      	uxtb	r1, r1
   c551a:	4603      	mov	r3, r0
   c551c:	f810 2b01 	ldrb.w	r2, [r0], #1
   c5520:	b11a      	cbz	r2, c552a <strchr+0x12>
   c5522:	428a      	cmp	r2, r1
   c5524:	d1f9      	bne.n	c551a <strchr+0x2>
   c5526:	4618      	mov	r0, r3
   c5528:	4770      	bx	lr
   c552a:	2900      	cmp	r1, #0
   c552c:	bf18      	it	ne
   c552e:	2300      	movne	r3, #0
   c5530:	e7f9      	b.n	c5526 <strchr+0xe>

000c5532 <strchrnul>:
   c5532:	b510      	push	{r4, lr}
   c5534:	4604      	mov	r4, r0
   c5536:	f7ff ffef 	bl	c5518 <strchr>
   c553a:	b918      	cbnz	r0, c5544 <strchrnul+0x12>
   c553c:	4620      	mov	r0, r4
   c553e:	f000 f832 	bl	c55a6 <strlen>
   c5542:	4420      	add	r0, r4
   c5544:	bd10      	pop	{r4, pc}

000c5546 <strcmp>:
   c5546:	f810 2b01 	ldrb.w	r2, [r0], #1
   c554a:	f811 3b01 	ldrb.w	r3, [r1], #1
   c554e:	2a01      	cmp	r2, #1
   c5550:	bf28      	it	cs
   c5552:	429a      	cmpcs	r2, r3
   c5554:	d0f7      	beq.n	c5546 <strcmp>
   c5556:	1ad0      	subs	r0, r2, r3
   c5558:	4770      	bx	lr

000c555a <strcpy>:
   c555a:	4603      	mov	r3, r0
   c555c:	f811 2b01 	ldrb.w	r2, [r1], #1
   c5560:	f803 2b01 	strb.w	r2, [r3], #1
   c5564:	2a00      	cmp	r2, #0
   c5566:	d1f9      	bne.n	c555c <strcpy+0x2>
   c5568:	4770      	bx	lr
	...

000c556c <strdup>:
   c556c:	4b02      	ldr	r3, [pc, #8]	; (c5578 <strdup+0xc>)
   c556e:	4601      	mov	r1, r0
   c5570:	6818      	ldr	r0, [r3, #0]
   c5572:	f000 b803 	b.w	c557c <_strdup_r>
   c5576:	bf00      	nop
   c5578:	2003acec 	.word	0x2003acec

000c557c <_strdup_r>:
   c557c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c557e:	4604      	mov	r4, r0
   c5580:	4608      	mov	r0, r1
   c5582:	460d      	mov	r5, r1
   c5584:	f000 f80f 	bl	c55a6 <strlen>
   c5588:	1c42      	adds	r2, r0, #1
   c558a:	4611      	mov	r1, r2
   c558c:	4620      	mov	r0, r4
   c558e:	9201      	str	r2, [sp, #4]
   c5590:	f7fa ff2a 	bl	c03e8 <_malloc_r>
   c5594:	4604      	mov	r4, r0
   c5596:	b118      	cbz	r0, c55a0 <_strdup_r+0x24>
   c5598:	9a01      	ldr	r2, [sp, #4]
   c559a:	4629      	mov	r1, r5
   c559c:	f7ff ff10 	bl	c53c0 <memcpy>
   c55a0:	4620      	mov	r0, r4
   c55a2:	b003      	add	sp, #12
   c55a4:	bd30      	pop	{r4, r5, pc}

000c55a6 <strlen>:
   c55a6:	4603      	mov	r3, r0
   c55a8:	f813 2b01 	ldrb.w	r2, [r3], #1
   c55ac:	2a00      	cmp	r2, #0
   c55ae:	d1fb      	bne.n	c55a8 <strlen+0x2>
   c55b0:	1a18      	subs	r0, r3, r0
   c55b2:	3801      	subs	r0, #1
   c55b4:	4770      	bx	lr

000c55b6 <strncmp>:
   c55b6:	b510      	push	{r4, lr}
   c55b8:	b17a      	cbz	r2, c55da <strncmp+0x24>
   c55ba:	4603      	mov	r3, r0
   c55bc:	3901      	subs	r1, #1
   c55be:	1884      	adds	r4, r0, r2
   c55c0:	f813 0b01 	ldrb.w	r0, [r3], #1
   c55c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c55c8:	4290      	cmp	r0, r2
   c55ca:	d101      	bne.n	c55d0 <strncmp+0x1a>
   c55cc:	42a3      	cmp	r3, r4
   c55ce:	d101      	bne.n	c55d4 <strncmp+0x1e>
   c55d0:	1a80      	subs	r0, r0, r2
   c55d2:	bd10      	pop	{r4, pc}
   c55d4:	2800      	cmp	r0, #0
   c55d6:	d1f3      	bne.n	c55c0 <strncmp+0xa>
   c55d8:	e7fa      	b.n	c55d0 <strncmp+0x1a>
   c55da:	4610      	mov	r0, r2
   c55dc:	e7f9      	b.n	c55d2 <strncmp+0x1c>

000c55de <strncpy>:
   c55de:	b510      	push	{r4, lr}
   c55e0:	3901      	subs	r1, #1
   c55e2:	4603      	mov	r3, r0
   c55e4:	b132      	cbz	r2, c55f4 <strncpy+0x16>
   c55e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c55ea:	f803 4b01 	strb.w	r4, [r3], #1
   c55ee:	3a01      	subs	r2, #1
   c55f0:	2c00      	cmp	r4, #0
   c55f2:	d1f7      	bne.n	c55e4 <strncpy+0x6>
   c55f4:	441a      	add	r2, r3
   c55f6:	2100      	movs	r1, #0
   c55f8:	4293      	cmp	r3, r2
   c55fa:	d100      	bne.n	c55fe <strncpy+0x20>
   c55fc:	bd10      	pop	{r4, pc}
   c55fe:	f803 1b01 	strb.w	r1, [r3], #1
   c5602:	e7f9      	b.n	c55f8 <strncpy+0x1a>

000c5604 <strrchr>:
   c5604:	b538      	push	{r3, r4, r5, lr}
   c5606:	4603      	mov	r3, r0
   c5608:	460c      	mov	r4, r1
   c560a:	b969      	cbnz	r1, c5628 <strrchr+0x24>
   c560c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c5610:	f7ff bf82 	b.w	c5518 <strchr>
   c5614:	1c43      	adds	r3, r0, #1
   c5616:	4605      	mov	r5, r0
   c5618:	4621      	mov	r1, r4
   c561a:	4618      	mov	r0, r3
   c561c:	f7ff ff7c 	bl	c5518 <strchr>
   c5620:	2800      	cmp	r0, #0
   c5622:	d1f7      	bne.n	c5614 <strrchr+0x10>
   c5624:	4628      	mov	r0, r5
   c5626:	bd38      	pop	{r3, r4, r5, pc}
   c5628:	2500      	movs	r5, #0
   c562a:	e7f5      	b.n	c5618 <strrchr+0x14>

000c562c <__strtok_r>:
   c562c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c562e:	b908      	cbnz	r0, c5634 <__strtok_r+0x8>
   c5630:	6810      	ldr	r0, [r2, #0]
   c5632:	b188      	cbz	r0, c5658 <__strtok_r+0x2c>
   c5634:	4604      	mov	r4, r0
   c5636:	4620      	mov	r0, r4
   c5638:	f814 5b01 	ldrb.w	r5, [r4], #1
   c563c:	460f      	mov	r7, r1
   c563e:	f817 6b01 	ldrb.w	r6, [r7], #1
   c5642:	b91e      	cbnz	r6, c564c <__strtok_r+0x20>
   c5644:	b965      	cbnz	r5, c5660 <__strtok_r+0x34>
   c5646:	6015      	str	r5, [r2, #0]
   c5648:	4628      	mov	r0, r5
   c564a:	e005      	b.n	c5658 <__strtok_r+0x2c>
   c564c:	42b5      	cmp	r5, r6
   c564e:	d1f6      	bne.n	c563e <__strtok_r+0x12>
   c5650:	2b00      	cmp	r3, #0
   c5652:	d1f0      	bne.n	c5636 <__strtok_r+0xa>
   c5654:	6014      	str	r4, [r2, #0]
   c5656:	7003      	strb	r3, [r0, #0]
   c5658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c565a:	461c      	mov	r4, r3
   c565c:	e00c      	b.n	c5678 <__strtok_r+0x4c>
   c565e:	b915      	cbnz	r5, c5666 <__strtok_r+0x3a>
   c5660:	f814 3b01 	ldrb.w	r3, [r4], #1
   c5664:	460e      	mov	r6, r1
   c5666:	f816 5b01 	ldrb.w	r5, [r6], #1
   c566a:	42ab      	cmp	r3, r5
   c566c:	d1f7      	bne.n	c565e <__strtok_r+0x32>
   c566e:	2b00      	cmp	r3, #0
   c5670:	d0f3      	beq.n	c565a <__strtok_r+0x2e>
   c5672:	2300      	movs	r3, #0
   c5674:	f804 3c01 	strb.w	r3, [r4, #-1]
   c5678:	6014      	str	r4, [r2, #0]
   c567a:	e7ed      	b.n	c5658 <__strtok_r+0x2c>

000c567c <strtok_r>:
   c567c:	2301      	movs	r3, #1
   c567e:	f7ff bfd5 	b.w	c562c <__strtok_r>
	...

000c5684 <_strtol_l.constprop.0>:
   c5684:	2b01      	cmp	r3, #1
   c5686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c568a:	d001      	beq.n	c5690 <_strtol_l.constprop.0+0xc>
   c568c:	2b24      	cmp	r3, #36	; 0x24
   c568e:	d906      	bls.n	c569e <_strtol_l.constprop.0+0x1a>
   c5690:	f7fa feb2 	bl	c03f8 <__errno>
   c5694:	2316      	movs	r3, #22
   c5696:	6003      	str	r3, [r0, #0]
   c5698:	2000      	movs	r0, #0
   c569a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c569e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c5784 <_strtol_l.constprop.0+0x100>
   c56a2:	460d      	mov	r5, r1
   c56a4:	462e      	mov	r6, r5
   c56a6:	f815 4b01 	ldrb.w	r4, [r5], #1
   c56aa:	f814 700c 	ldrb.w	r7, [r4, ip]
   c56ae:	f017 0708 	ands.w	r7, r7, #8
   c56b2:	d1f7      	bne.n	c56a4 <_strtol_l.constprop.0+0x20>
   c56b4:	2c2d      	cmp	r4, #45	; 0x2d
   c56b6:	d132      	bne.n	c571e <_strtol_l.constprop.0+0x9a>
   c56b8:	782c      	ldrb	r4, [r5, #0]
   c56ba:	2701      	movs	r7, #1
   c56bc:	1cb5      	adds	r5, r6, #2
   c56be:	2b00      	cmp	r3, #0
   c56c0:	d05b      	beq.n	c577a <_strtol_l.constprop.0+0xf6>
   c56c2:	2b10      	cmp	r3, #16
   c56c4:	d109      	bne.n	c56da <_strtol_l.constprop.0+0x56>
   c56c6:	2c30      	cmp	r4, #48	; 0x30
   c56c8:	d107      	bne.n	c56da <_strtol_l.constprop.0+0x56>
   c56ca:	782c      	ldrb	r4, [r5, #0]
   c56cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c56d0:	2c58      	cmp	r4, #88	; 0x58
   c56d2:	d14d      	bne.n	c5770 <_strtol_l.constprop.0+0xec>
   c56d4:	786c      	ldrb	r4, [r5, #1]
   c56d6:	2310      	movs	r3, #16
   c56d8:	3502      	adds	r5, #2
   c56da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c56de:	f108 38ff 	add.w	r8, r8, #4294967295
   c56e2:	f04f 0c00 	mov.w	ip, #0
   c56e6:	fbb8 f9f3 	udiv	r9, r8, r3
   c56ea:	4666      	mov	r6, ip
   c56ec:	fb03 8a19 	mls	sl, r3, r9, r8
   c56f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c56f4:	f1be 0f09 	cmp.w	lr, #9
   c56f8:	d816      	bhi.n	c5728 <_strtol_l.constprop.0+0xa4>
   c56fa:	4674      	mov	r4, lr
   c56fc:	42a3      	cmp	r3, r4
   c56fe:	dd24      	ble.n	c574a <_strtol_l.constprop.0+0xc6>
   c5700:	f1bc 0f00 	cmp.w	ip, #0
   c5704:	db1e      	blt.n	c5744 <_strtol_l.constprop.0+0xc0>
   c5706:	45b1      	cmp	r9, r6
   c5708:	d31c      	bcc.n	c5744 <_strtol_l.constprop.0+0xc0>
   c570a:	d101      	bne.n	c5710 <_strtol_l.constprop.0+0x8c>
   c570c:	45a2      	cmp	sl, r4
   c570e:	db19      	blt.n	c5744 <_strtol_l.constprop.0+0xc0>
   c5710:	fb06 4603 	mla	r6, r6, r3, r4
   c5714:	f04f 0c01 	mov.w	ip, #1
   c5718:	f815 4b01 	ldrb.w	r4, [r5], #1
   c571c:	e7e8      	b.n	c56f0 <_strtol_l.constprop.0+0x6c>
   c571e:	2c2b      	cmp	r4, #43	; 0x2b
   c5720:	bf04      	itt	eq
   c5722:	782c      	ldrbeq	r4, [r5, #0]
   c5724:	1cb5      	addeq	r5, r6, #2
   c5726:	e7ca      	b.n	c56be <_strtol_l.constprop.0+0x3a>
   c5728:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c572c:	f1be 0f19 	cmp.w	lr, #25
   c5730:	d801      	bhi.n	c5736 <_strtol_l.constprop.0+0xb2>
   c5732:	3c37      	subs	r4, #55	; 0x37
   c5734:	e7e2      	b.n	c56fc <_strtol_l.constprop.0+0x78>
   c5736:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c573a:	f1be 0f19 	cmp.w	lr, #25
   c573e:	d804      	bhi.n	c574a <_strtol_l.constprop.0+0xc6>
   c5740:	3c57      	subs	r4, #87	; 0x57
   c5742:	e7db      	b.n	c56fc <_strtol_l.constprop.0+0x78>
   c5744:	f04f 3cff 	mov.w	ip, #4294967295
   c5748:	e7e6      	b.n	c5718 <_strtol_l.constprop.0+0x94>
   c574a:	f1bc 0f00 	cmp.w	ip, #0
   c574e:	da05      	bge.n	c575c <_strtol_l.constprop.0+0xd8>
   c5750:	2322      	movs	r3, #34	; 0x22
   c5752:	6003      	str	r3, [r0, #0]
   c5754:	4646      	mov	r6, r8
   c5756:	b942      	cbnz	r2, c576a <_strtol_l.constprop.0+0xe6>
   c5758:	4630      	mov	r0, r6
   c575a:	e79e      	b.n	c569a <_strtol_l.constprop.0+0x16>
   c575c:	b107      	cbz	r7, c5760 <_strtol_l.constprop.0+0xdc>
   c575e:	4276      	negs	r6, r6
   c5760:	2a00      	cmp	r2, #0
   c5762:	d0f9      	beq.n	c5758 <_strtol_l.constprop.0+0xd4>
   c5764:	f1bc 0f00 	cmp.w	ip, #0
   c5768:	d000      	beq.n	c576c <_strtol_l.constprop.0+0xe8>
   c576a:	1e69      	subs	r1, r5, #1
   c576c:	6011      	str	r1, [r2, #0]
   c576e:	e7f3      	b.n	c5758 <_strtol_l.constprop.0+0xd4>
   c5770:	2430      	movs	r4, #48	; 0x30
   c5772:	2b00      	cmp	r3, #0
   c5774:	d1b1      	bne.n	c56da <_strtol_l.constprop.0+0x56>
   c5776:	2308      	movs	r3, #8
   c5778:	e7af      	b.n	c56da <_strtol_l.constprop.0+0x56>
   c577a:	2c30      	cmp	r4, #48	; 0x30
   c577c:	d0a5      	beq.n	c56ca <_strtol_l.constprop.0+0x46>
   c577e:	230a      	movs	r3, #10
   c5780:	e7ab      	b.n	c56da <_strtol_l.constprop.0+0x56>
   c5782:	bf00      	nop
   c5784:	000c9633 	.word	0x000c9633

000c5788 <strtol>:
   c5788:	4613      	mov	r3, r2
   c578a:	460a      	mov	r2, r1
   c578c:	4601      	mov	r1, r0
   c578e:	4802      	ldr	r0, [pc, #8]	; (c5798 <strtol+0x10>)
   c5790:	6800      	ldr	r0, [r0, #0]
   c5792:	f7ff bf77 	b.w	c5684 <_strtol_l.constprop.0>
   c5796:	bf00      	nop
   c5798:	2003acec 	.word	0x2003acec

000c579c <close>:
   c579c:	4b02      	ldr	r3, [pc, #8]	; (c57a8 <close+0xc>)
   c579e:	4601      	mov	r1, r0
   c57a0:	6818      	ldr	r0, [r3, #0]
   c57a2:	f000 b8c9 	b.w	c5938 <_close_r>
   c57a6:	bf00      	nop
   c57a8:	2003acec 	.word	0x2003acec

000c57ac <fstat>:
   c57ac:	4b02      	ldr	r3, [pc, #8]	; (c57b8 <fstat+0xc>)
   c57ae:	460a      	mov	r2, r1
   c57b0:	4601      	mov	r1, r0
   c57b2:	6818      	ldr	r0, [r3, #0]
   c57b4:	f000 b8d0 	b.w	c5958 <_fstat_r>
   c57b8:	2003acec 	.word	0x2003acec

000c57bc <lseek>:
   c57bc:	4613      	mov	r3, r2
   c57be:	460a      	mov	r2, r1
   c57c0:	4601      	mov	r1, r0
   c57c2:	4802      	ldr	r0, [pc, #8]	; (c57cc <lseek+0x10>)
   c57c4:	6800      	ldr	r0, [r0, #0]
   c57c6:	f000 b8dd 	b.w	c5984 <_lseek_r>
   c57ca:	bf00      	nop
   c57cc:	2003acec 	.word	0x2003acec

000c57d0 <open>:
   c57d0:	b40e      	push	{r1, r2, r3}
   c57d2:	b503      	push	{r0, r1, lr}
   c57d4:	ab03      	add	r3, sp, #12
   c57d6:	4601      	mov	r1, r0
   c57d8:	4806      	ldr	r0, [pc, #24]	; (c57f4 <open+0x24>)
   c57da:	f853 2b04 	ldr.w	r2, [r3], #4
   c57de:	9301      	str	r3, [sp, #4]
   c57e0:	6800      	ldr	r0, [r0, #0]
   c57e2:	9b04      	ldr	r3, [sp, #16]
   c57e4:	f000 f8e0 	bl	c59a8 <_open_r>
   c57e8:	b002      	add	sp, #8
   c57ea:	f85d eb04 	ldr.w	lr, [sp], #4
   c57ee:	b003      	add	sp, #12
   c57f0:	4770      	bx	lr
   c57f2:	bf00      	nop
   c57f4:	2003acec 	.word	0x2003acec

000c57f8 <read>:
   c57f8:	4613      	mov	r3, r2
   c57fa:	460a      	mov	r2, r1
   c57fc:	4601      	mov	r1, r0
   c57fe:	4802      	ldr	r0, [pc, #8]	; (c5808 <read+0x10>)
   c5800:	6800      	ldr	r0, [r0, #0]
   c5802:	f000 b8e3 	b.w	c59cc <_read_r>
   c5806:	bf00      	nop
   c5808:	2003acec 	.word	0x2003acec

000c580c <unlink>:
   c580c:	4b02      	ldr	r3, [pc, #8]	; (c5818 <unlink+0xc>)
   c580e:	4601      	mov	r1, r0
   c5810:	6818      	ldr	r0, [r3, #0]
   c5812:	f000 b80d 	b.w	c5830 <_unlink_r>
   c5816:	bf00      	nop
   c5818:	2003acec 	.word	0x2003acec

000c581c <write>:
   c581c:	4613      	mov	r3, r2
   c581e:	460a      	mov	r2, r1
   c5820:	4601      	mov	r1, r0
   c5822:	4802      	ldr	r0, [pc, #8]	; (c582c <write+0x10>)
   c5824:	6800      	ldr	r0, [r0, #0]
   c5826:	f000 b813 	b.w	c5850 <_write_r>
   c582a:	bf00      	nop
   c582c:	2003acec 	.word	0x2003acec

000c5830 <_unlink_r>:
   c5830:	b538      	push	{r3, r4, r5, lr}
   c5832:	4d06      	ldr	r5, [pc, #24]	; (c584c <_unlink_r+0x1c>)
   c5834:	2300      	movs	r3, #0
   c5836:	4604      	mov	r4, r0
   c5838:	4608      	mov	r0, r1
   c583a:	602b      	str	r3, [r5, #0]
   c583c:	f7fa fa5c 	bl	bfcf8 <_unlink>
   c5840:	1c43      	adds	r3, r0, #1
   c5842:	d102      	bne.n	c584a <_unlink_r+0x1a>
   c5844:	682b      	ldr	r3, [r5, #0]
   c5846:	b103      	cbz	r3, c584a <_unlink_r+0x1a>
   c5848:	6023      	str	r3, [r4, #0]
   c584a:	bd38      	pop	{r3, r4, r5, pc}
   c584c:	2003e7f0 	.word	0x2003e7f0

000c5850 <_write_r>:
   c5850:	b538      	push	{r3, r4, r5, lr}
   c5852:	4d07      	ldr	r5, [pc, #28]	; (c5870 <_write_r+0x20>)
   c5854:	4604      	mov	r4, r0
   c5856:	4608      	mov	r0, r1
   c5858:	4611      	mov	r1, r2
   c585a:	2200      	movs	r2, #0
   c585c:	602a      	str	r2, [r5, #0]
   c585e:	461a      	mov	r2, r3
   c5860:	f7fa fa12 	bl	bfc88 <_write>
   c5864:	1c43      	adds	r3, r0, #1
   c5866:	d102      	bne.n	c586e <_write_r+0x1e>
   c5868:	682b      	ldr	r3, [r5, #0]
   c586a:	b103      	cbz	r3, c586e <_write_r+0x1e>
   c586c:	6023      	str	r3, [r4, #0]
   c586e:	bd38      	pop	{r3, r4, r5, pc}
   c5870:	2003e7f0 	.word	0x2003e7f0

000c5874 <__register_exitproc>:
   c5874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5878:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c5934 <__register_exitproc+0xc0>
   c587c:	4606      	mov	r6, r0
   c587e:	f8d8 0000 	ldr.w	r0, [r8]
   c5882:	461f      	mov	r7, r3
   c5884:	460d      	mov	r5, r1
   c5886:	4691      	mov	r9, r2
   c5888:	f000 f878 	bl	c597c <__retarget_lock_acquire_recursive>
   c588c:	4b25      	ldr	r3, [pc, #148]	; (c5924 <__register_exitproc+0xb0>)
   c588e:	681c      	ldr	r4, [r3, #0]
   c5890:	b934      	cbnz	r4, c58a0 <__register_exitproc+0x2c>
   c5892:	4c25      	ldr	r4, [pc, #148]	; (c5928 <__register_exitproc+0xb4>)
   c5894:	601c      	str	r4, [r3, #0]
   c5896:	4b25      	ldr	r3, [pc, #148]	; (c592c <__register_exitproc+0xb8>)
   c5898:	b113      	cbz	r3, c58a0 <__register_exitproc+0x2c>
   c589a:	681b      	ldr	r3, [r3, #0]
   c589c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c58a0:	6863      	ldr	r3, [r4, #4]
   c58a2:	2b1f      	cmp	r3, #31
   c58a4:	dd07      	ble.n	c58b6 <__register_exitproc+0x42>
   c58a6:	f8d8 0000 	ldr.w	r0, [r8]
   c58aa:	f000 f869 	bl	c5980 <__retarget_lock_release_recursive>
   c58ae:	f04f 30ff 	mov.w	r0, #4294967295
   c58b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c58b6:	b34e      	cbz	r6, c590c <__register_exitproc+0x98>
   c58b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c58bc:	b988      	cbnz	r0, c58e2 <__register_exitproc+0x6e>
   c58be:	4b1c      	ldr	r3, [pc, #112]	; (c5930 <__register_exitproc+0xbc>)
   c58c0:	b923      	cbnz	r3, c58cc <__register_exitproc+0x58>
   c58c2:	f8d8 0000 	ldr.w	r0, [r8]
   c58c6:	f000 f85a 	bl	c597e <__retarget_lock_release>
   c58ca:	e7f0      	b.n	c58ae <__register_exitproc+0x3a>
   c58cc:	f44f 7084 	mov.w	r0, #264	; 0x108
   c58d0:	f7fa fd4a 	bl	c0368 <malloc>
   c58d4:	2800      	cmp	r0, #0
   c58d6:	d0f4      	beq.n	c58c2 <__register_exitproc+0x4e>
   c58d8:	2300      	movs	r3, #0
   c58da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c58de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c58e2:	6863      	ldr	r3, [r4, #4]
   c58e4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c58e8:	2201      	movs	r2, #1
   c58ea:	409a      	lsls	r2, r3
   c58ec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c58f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c58f4:	4313      	orrs	r3, r2
   c58f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c58fa:	2e02      	cmp	r6, #2
   c58fc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c5900:	bf02      	ittt	eq
   c5902:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c5906:	4313      	orreq	r3, r2
   c5908:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c590c:	6863      	ldr	r3, [r4, #4]
   c590e:	f8d8 0000 	ldr.w	r0, [r8]
   c5912:	1c5a      	adds	r2, r3, #1
   c5914:	3302      	adds	r3, #2
   c5916:	6062      	str	r2, [r4, #4]
   c5918:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c591c:	f000 f830 	bl	c5980 <__retarget_lock_release_recursive>
   c5920:	2000      	movs	r0, #0
   c5922:	e7c6      	b.n	c58b2 <__register_exitproc+0x3e>
   c5924:	2003e7e8 	.word	0x2003e7e8
   c5928:	2003e75c 	.word	0x2003e75c
   c592c:	00000000 	.word	0x00000000
   c5930:	000c0369 	.word	0x000c0369
   c5934:	2003ad50 	.word	0x2003ad50

000c5938 <_close_r>:
   c5938:	b538      	push	{r3, r4, r5, lr}
   c593a:	4d06      	ldr	r5, [pc, #24]	; (c5954 <_close_r+0x1c>)
   c593c:	2300      	movs	r3, #0
   c593e:	4604      	mov	r4, r0
   c5940:	4608      	mov	r0, r1
   c5942:	602b      	str	r3, [r5, #0]
   c5944:	f7fa f9b0 	bl	bfca8 <_close>
   c5948:	1c43      	adds	r3, r0, #1
   c594a:	d102      	bne.n	c5952 <_close_r+0x1a>
   c594c:	682b      	ldr	r3, [r5, #0]
   c594e:	b103      	cbz	r3, c5952 <_close_r+0x1a>
   c5950:	6023      	str	r3, [r4, #0]
   c5952:	bd38      	pop	{r3, r4, r5, pc}
   c5954:	2003e7f0 	.word	0x2003e7f0

000c5958 <_fstat_r>:
   c5958:	b538      	push	{r3, r4, r5, lr}
   c595a:	4d07      	ldr	r5, [pc, #28]	; (c5978 <_fstat_r+0x20>)
   c595c:	2300      	movs	r3, #0
   c595e:	4604      	mov	r4, r0
   c5960:	4608      	mov	r0, r1
   c5962:	4611      	mov	r1, r2
   c5964:	602b      	str	r3, [r5, #0]
   c5966:	f7fa f9a7 	bl	bfcb8 <_fstat>
   c596a:	1c43      	adds	r3, r0, #1
   c596c:	d102      	bne.n	c5974 <_fstat_r+0x1c>
   c596e:	682b      	ldr	r3, [r5, #0]
   c5970:	b103      	cbz	r3, c5974 <_fstat_r+0x1c>
   c5972:	6023      	str	r3, [r4, #0]
   c5974:	bd38      	pop	{r3, r4, r5, pc}
   c5976:	bf00      	nop
   c5978:	2003e7f0 	.word	0x2003e7f0

000c597c <__retarget_lock_acquire_recursive>:
   c597c:	4770      	bx	lr

000c597e <__retarget_lock_release>:
   c597e:	4770      	bx	lr

000c5980 <__retarget_lock_release_recursive>:
   c5980:	4770      	bx	lr
	...

000c5984 <_lseek_r>:
   c5984:	b538      	push	{r3, r4, r5, lr}
   c5986:	4d07      	ldr	r5, [pc, #28]	; (c59a4 <_lseek_r+0x20>)
   c5988:	4604      	mov	r4, r0
   c598a:	4608      	mov	r0, r1
   c598c:	4611      	mov	r1, r2
   c598e:	2200      	movs	r2, #0
   c5990:	602a      	str	r2, [r5, #0]
   c5992:	461a      	mov	r2, r3
   c5994:	f7fa f998 	bl	bfcc8 <_lseek>
   c5998:	1c43      	adds	r3, r0, #1
   c599a:	d102      	bne.n	c59a2 <_lseek_r+0x1e>
   c599c:	682b      	ldr	r3, [r5, #0]
   c599e:	b103      	cbz	r3, c59a2 <_lseek_r+0x1e>
   c59a0:	6023      	str	r3, [r4, #0]
   c59a2:	bd38      	pop	{r3, r4, r5, pc}
   c59a4:	2003e7f0 	.word	0x2003e7f0

000c59a8 <_open_r>:
   c59a8:	b538      	push	{r3, r4, r5, lr}
   c59aa:	4d07      	ldr	r5, [pc, #28]	; (c59c8 <_open_r+0x20>)
   c59ac:	4604      	mov	r4, r0
   c59ae:	4608      	mov	r0, r1
   c59b0:	4611      	mov	r1, r2
   c59b2:	2200      	movs	r2, #0
   c59b4:	602a      	str	r2, [r5, #0]
   c59b6:	461a      	mov	r2, r3
   c59b8:	f7fa f95e 	bl	bfc78 <_open>
   c59bc:	1c43      	adds	r3, r0, #1
   c59be:	d102      	bne.n	c59c6 <_open_r+0x1e>
   c59c0:	682b      	ldr	r3, [r5, #0]
   c59c2:	b103      	cbz	r3, c59c6 <_open_r+0x1e>
   c59c4:	6023      	str	r3, [r4, #0]
   c59c6:	bd38      	pop	{r3, r4, r5, pc}
   c59c8:	2003e7f0 	.word	0x2003e7f0

000c59cc <_read_r>:
   c59cc:	b538      	push	{r3, r4, r5, lr}
   c59ce:	4d07      	ldr	r5, [pc, #28]	; (c59ec <_read_r+0x20>)
   c59d0:	4604      	mov	r4, r0
   c59d2:	4608      	mov	r0, r1
   c59d4:	4611      	mov	r1, r2
   c59d6:	2200      	movs	r2, #0
   c59d8:	602a      	str	r2, [r5, #0]
   c59da:	461a      	mov	r2, r3
   c59dc:	f7fa f95c 	bl	bfc98 <_read>
   c59e0:	1c43      	adds	r3, r0, #1
   c59e2:	d102      	bne.n	c59ea <_read_r+0x1e>
   c59e4:	682b      	ldr	r3, [r5, #0]
   c59e6:	b103      	cbz	r3, c59ea <_read_r+0x1e>
   c59e8:	6023      	str	r3, [r4, #0]
   c59ea:	bd38      	pop	{r3, r4, r5, pc}
   c59ec:	2003e7f0 	.word	0x2003e7f0

000c59f0 <dynalib_user>:
   c59f0:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   c5a00:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   c5a10:	72697620 6c617574 6b6e5500 6e776f6e      virtual.Unknown
   c5a20:	6e6f4e00 69570065 47006946 55004d53     .None.WiFi.GSM.U
   c5a30:	0053544d 414d4443 45544c00 45454900     MTS.CDMA.LTE.IEE
   c5a40:	32303845 00343531 5f45544c 5f544143     E802154.LTE_CAT_
   c5a50:	4c00314d 435f4554 4e5f5441 4e003142     M1.LTE_CAT_NB1.N
   c5a60:	4320746f 67726168 00676e69 72616843     ot Charging.Char
   c5a70:	00646567 63736944 67726168 00676e69     ged.Discharging.
   c5a80:	6c756146 69440074 6e6e6f63 65746365     Fault.Diconnecte
   c5a90:	73250064 253a5320 66302e32 202c2525     d.%s S:%2.0f%%, 
   c5aa0:	32253a51 2566302e 00002025 000c5a19     Q:%2.0f%% ...Z..
   c5ab0:	000c5a21 000c5a26 000c5a2b 000c5a2f     !Z..&Z..+Z../Z..
   c5ac0:	000c5a34 000c5a39 000c5a3d 000c5a48     4Z..9Z..=Z..HZ..
   c5ad0:	000c5a53 6d6f7246 20732520 25206f74     SZ..From %s to %
   c5ae0:	69772073 69206874 6c61766e 74206469     s with invalid t
   c5af0:	00656d69 6d6f7246 20732520 25206f74     ime.From %s to %
   c5b00:	65530073 726f736e 73695600 74617469     s.Sensor.Visitat
   c5b10:	206e6f69 6e756f43 00726574 7563634f     ion Counter.Occu
   c5b20:	636e6170 6f432079 65746e75 75500072     pancy Counter.Pu
   c5b30:	73696c62 676e6968 62657720 6b6f6f68     blishing webhook
   c5b40:	726f6620 646f6e20 64252065 62755000      for node %d.Pub
   c5b50:	6873696c 20676e69 20726f66 65746147     lishing for Gate
   c5b60:	00796177 6564227b 65636976 3a226469     way.{"deviceid":
   c5b70:	22732522 6222202c 65747461 3a227972     "%s", "battery":
   c5b80:	222c6425 3179656b 25223a22 222c2273     %d,"key1":"%s","
   c5b90:	706d6574 64253a22 7222202c 74657365     temp":%d, "reset
   c5ba0:	253a2273 22202c64 72656c61 3a227374     s":%d, "alerts":
   c5bb0:	2c642520 736d2220 253a2267 22202c64      %d, "msg":%d, "
   c5bc0:	656d6974 6d617473 253a2270 3030756c     timestamp":%lu00
   c5bd0:	55007d30 6f646962 4c2d7374 2d41526f     0}.Ubidots-LoRA-
   c5be0:	65746147 2d796177 50003176 696c6275     Gateway-v1.Publi
   c5bf0:	6e696873 6f662067 6f6e2072 754e6564     shing for nodeNu
   c5c00:	7265626d 20736920 6f206925 65732066     mber is %i of se
   c5c10:	726f736e 65707954 20666f20 7b007325     nsorType of %s.{
   c5c20:	696e7522 69657571 223a2264 22756c25     "uniqueid":"%lu"
   c5c30:	6822202c 6c72756f 253a2279 22202c75     , "hourly":%u, "
   c5c40:	6c696164 253a2279 22202c75 736e6573     daily":%u, "sens
   c5c50:	7974726f 3a226570 202c6425 74616222     ortype":%d, "bat
   c5c60:	79726574 64253a22 656b222c 3a223179     tery":%d,"key1":
   c5c70:	22732522 6574222c 3a22706d 202c6425     "%s","temp":%d, 
   c5c80:	73657222 22737465 2c64253a 656c6122     "resets":%d,"ale
   c5c90:	22737472 6425203a 6e22202c 2265646f     rts": %d, "node"
   c5ca0:	6425203a 7222202c 22697373 2c64253a     : %d, "rssi":%d,
   c5cb0:	73222020 3a22726e 202c6425 706f6822       "snr":%d, "hop
   c5cc0:	253a2273 74222c64 73656d69 706d6174     s":%d,"timestamp
   c5cd0:	6c253a22 30303075 6144007d 69206174     ":%lu000}.Data i
   c5ce0:	73252073 69625500 73746f64 526f4c2d     s %s.Ubidots-LoR
   c5cf0:	6f432d41 65746e75 31762d72 75227b00     A-Counter-v1.{"u
   c5d00:	7571696e 22646965 6c25223a 202c2275     niqueid":"%lu", 
   c5d10:	6f726722 3a227373 202c7525 74656e22     "gross":%u, "net
   c5d20:	69253a22 7322202c 65636170 64253a22     ":%i, "space":%d
   c5d30:	7022202c 6563616c 746e656d 64253a22     , "placement":%d
   c5d40:	6d22202c 69746c75 64253a22 7a22202c     , "multi":%d, "z
   c5d50:	4d656e6f 2265646f 2c64253a 65732220     oneMode":%d, "se
   c5d60:	726f736e 65707974 64253a22 6222202c     nsortype":%d, "b
   c5d70:	65747461 3a227972 222c6425 3179656b     attery":%d,"key1
   c5d80:	25223a22 222c2273 706d6574 64253a22     ":"%s","temp":%d
   c5d90:	7222202c 74657365 253a2273 61222c64     , "resets":%d,"a
   c5da0:	7472656c 253a2273 22202c64 65646f6e     lerts":%d, "node
   c5db0:	64253a22 7222202c 22697373 2c64253a     ":%d, "rssi":%d,
   c5dc0:	6e732220 253a2272 68222c64 2273706f      "snr":%d,"hops"
   c5dd0:	2c64253a 6d697422 61747365 3a22706d     :%d,"timestamp":
   c5de0:	30756c25 007d3030 65646f4e 74614420     %lu000}.Node Dat
   c5df0:	227b0061 65646f6e 71696e55 44496575     a.{"nodeUniqueID
   c5e00:	25223a22 2c22756c 74616222 79726574     ":"%lu","battery
   c5e10:	64253a22 7073222c 22656361 2c64253a     ":%d,"space":%d,
   c5e20:	61707322 654e6563 253a2274 73222c64     "spaceNet":%d,"s
   c5e30:	65636170 736f7247 253a2273 55007d64     paceGross":%d}.U
   c5e40:	6f646962 4c2d7374 2d41526f 7563634f     bidots-LoRA-Occu
   c5e50:	636e6170 32762d79 75227b00 7571696e     pancy-v2.{"uniqu
   c5e60:	22646965 6c25223a 202c2275 696f7322     eid":"%lu", "soi
   c5e70:	6377766c 75253a22 7322202c 746c696f     lvwc":%u, "soilt
   c5e80:	22706d65 2c75253a 70732220 22656361     emp":%u, "space"
   c5e90:	2c64253a 6c702220 6d656361 22746e65     :%d, "placement"
   c5ea0:	2c64253a 65732220 726f736e 65707974     :%d, "sensortype
   c5eb0:	64253a22 6222202c 65747461 3a227972     ":%d, "battery":
   c5ec0:	222c6425 3179656b 25223a22 222c2273     %d,"key1":"%s","
   c5ed0:	706d6574 64253a22 7222202c 74657365     temp":%d, "reset
   c5ee0:	253a2273 61222c64 7472656c 203a2273     s":%d,"alerts": 
   c5ef0:	202c6425 646f6e22 203a2265 202c6425     %d, "node": %d, 
   c5f00:	73737222 253a2269 20202c64 726e7322     "rssi":%d,  "snr
   c5f10:	64253a22 6822202c 2273706f 2c64253a     ":%d, "hops":%d,
   c5f20:	6d697422 61747365 3a22706d 30756c25     "timestamp":%lu0
   c5f30:	007d3030 64696255 2d73746f 41526f4c     00}.Ubidots-LoRA
   c5f40:	6e65532d 2d726f73 55003176 6f6e6b6e     -Sensor-v1.Unkno
   c5f50:	73206e77 6f736e65 79742072 69206570     wn sensor type i
   c5f60:	6167206e 61776574 75702079 73696c62     n gateway publis
   c5f70:	64252068 6b6e5500 6e776f6e 6e657320     h %d.Unknown sen
   c5f80:	20726f73 65707974 206e6920 65746167     sor type in gate
   c5f90:	20796177 6c627570 00687369 72656c41     way publish.Aler
   c5fa0:	73690074 20736900 00746f6e 35545345     t.is.is not.EST5
   c5fb0:	2c544445 322e334d 322f302e 3a30303a     EDT,M3.2.0/2:00:
   c5fc0:	4d2c3030 312e3131 322f302e 3a30303a     00,M11.1.0/2:00:
   c5fd0:	25003030 4d253a49 2553253a 6f4c0070     00.%I:%M:%S%p.Lo
   c5fe0:	546c6163 20656d69 74696e69 696c6169     calTime initiali
   c5ff0:	2c64657a 6d697420 73692065 20732520     zed, time is %s 
   c6000:	20646e61 20435452 73207325 4c007465     and RTC %s set.L
   c6010:	6c61636f 656d6954 746f6e20 696e6920     ocalTime not ini
   c6020:	6c616974 64657a69 206f7320 6c6c6977     tialized so will
   c6030:	65656e20 6f742064 6e6f4320 7463656e      need to Connect
   c6040:	206f7420 74726150 656c6369 65655700      to Particle.Wee
   c6050:	646e656b 65655700 7961646b 73655900     kend.Weekday.Yes
   c6060:	006f4e00 53005425 7065656c 726f6620     .No.%T.Sleep for
   c6070:	756c2520 63657320 73646e6f 746e7520      %lu seconds unt
   c6080:	6e206c69 20747865 6e657665 74612074     il next event at
   c6090:	00732520 656b6f57 74697720 73752068      %s.Woke with us
   c60a0:	62207265 6f747475 7741006e 20656b6f     er button.Awoke 
   c60b0:	25207461 69772073 25206874 6620696c     at %s with %li f
   c60c0:	20656572 6f6d656d 43007972 6b636568     ree memory.Check
   c60d0:	20676e69 20726f66 63616e69 65766974     ing for inactive
   c60e0:	61707320 2e736563 52002e2e 74657365      spaces....Reset
   c60f0:	676e6974 6c6c6120 756f6320 2073746e     ting all counts 
   c6100:	6f6e202d 6e692074 65706f20 6f68206e     - not in open ho
   c6110:	2e737275 65704f20 6f68206e 203a7275     urs. Open hour: 
   c6120:	202c6425 736f6c43 6f482065 203a7275     %d, Close Hour: 
   c6130:	202c6425 72727543 20746e65 72756f48     %d, Current Hour
   c6140:	6425203a 74615300 6e755300 20732500     : %d.Sat.Sun.%s 
   c6150:	61657242 7453206b 73747261 20746120     Break Starts at 
   c6160:	77206425 20687469 676e656c 6f206874     %d with length o
   c6170:	64252066 6e696d20 73657475 7543202e     f %d minutes. Cu
   c6180:	6e657272 6f682074 3d207275 2c642520     rrent hour = %d,
   c6190:	6e696d20 20657475 6425203d 206e4f20      minute = %d On 
   c61a0:	61657242 25203f6b 61470073 61776574     Break? %s.Gatewa
   c61b0:	73692079 73696c20 696e6574 6620676e     y is listening f
   c61c0:	2520726f 696d2064 6574756e 6f662073     or %d minutes fo
   c61d0:	6f4c2072 6d204152 61737365 20736567     r LoRA messages 
   c61e0:	20642528 6425202f 25202f20 52002964     (%d / %d / %d).R
   c61f0:	69656365 20646576 41526f4c 73656d20     eceived LoRA mes
   c6200:	65676173 6f726620 6f6e206d 25206564     sage from node %
   c6210:	694c0064 6e657473 20676e69 646e6977     d.Listening wind
   c6220:	6f20776f 00726576 2077654e 20796144     ow over.New Day 
   c6230:	6552202d 74746573 20676e69 72657665     - Resetting ever
   c6240:	69687479 4300676e 756c6c65 2072616c     ything.Cellular 
   c6250:	6e676953 53206c61 6e657274 3a687467     Signal Strength:
   c6260:	20642520 006d4264 6c696146 74206465      %d dBm.Failed t
   c6270:	6f63206f 63656e6e 6e692074 20303120     o connect in 10 
   c6280:	756e696d 20736574 6967202d 676e6976     minutes - giving
   c6290:	00707520 70656544 776f7020 64207265      up.Deep power d
   c62a0:	206e776f 33206e69 65732030 646e6f63     own in 30 second
   c62b0:	65440073 70207065 7265776f 776f6420     s.Deep power dow
   c62c0:	6564206e 65636976 73655200 69747465     n device.Resetti
   c62d0:	6420676e 74206575 6f6c206f 656d2077     ng due to low me
   c62e0:	79726f6d 696e6900 61662074 64656c69     mory.init failed
   c62f0:	526f4c00 61522041 206f6964 74696e69     .LoRA Radio init
   c6300:	696c6169 2064657a 61207361 74616720     ialized as a gat
   c6310:	79617765 64612820 73657264 64252073     eway (address %d
   c6320:	69772029 61206874 76656420 49656369     ) with a deviceI
   c6330:	666f2044 00732520 41526f4c 64615220     D of %s.LoRA Rad
   c6340:	69206f69 6974696e 7a696c61 61206465     io initialized a
   c6350:	6f6e2073 25206564 6e612069 20612064     s node %i and a 
   c6360:	69766564 44496563 20666f20 4c007325     deviceID of %s.L
   c6370:	2041526f 69646152 6e69206f 61697469     oRA Radio initia
   c6380:	657a696c 73612064 206e6120 6f636e75     lized as an unco
   c6390:	6769666e 64657275 646f6e20 69252065     nfigured node %i
   c63a0:	646e6120 64206120 63697665 20444965      and a deviceID 
   c63b0:	2520666f 6e550073 776f6e6b 6573206e     of %s.Unknown se
   c63c0:	726f736e 70797420 6e692065 63656420     nsor type in dec
   c63d0:	65687069 74614472 70655261 4774726f     ipherDataReportG
   c63e0:	77657461 25207961 6e550064 776f6e6b     ateway %d.Unknow
   c63f0:	6573206e 726f736e 70797420 6e692065     n sensor type in
   c6400:	63656420 65687069 74614472 70655261      decipherDataRep
   c6410:	4774726f 77657461 4f007961 7262206e     ortGateway.On br
   c6420:	2c6b6165 73657220 646e6f70 20676e69     eak, responding 
   c6430:	68746977 656c6120 63207472 2065646f     with alert code 
   c6440:	61203231 6120646e 7472656c 6e6f6320     12 and alert con
   c6450:	74786574 202e3020 73657228 69747465     text 0. (resetti
   c6460:	6e20676e 63207465 746e756f 726f6620     ng net count for
   c6470:	76656420 20656369 30206f74 6e550029      device to 0).Un
   c6480:	776f6e6b 6573206e 726f736e 70797420     known sensor typ
   c6490:	6e692065 6b636120 6c776f6e 65676465     e in acknowledge
   c64a0:	61746144 6f706552 61477472 61776574     DataReportGatewa
   c64b0:	64252079 6b6e5500 6e776f6e 6e657320     y %d.Unknown sen
   c64c0:	20726f73 65707974 206e6920 6e6b6361     sor type in ackn
   c64d0:	656c776f 44656764 52617461 726f7065     owledgeDataRepor
   c64e0:	74614774 79617765 65724600 6e657571     tGateway.Frequen
   c64f0:	6f207963 65722066 74726f70 73692073     cy of reports is
   c6500:	20642520 6f636573 0073646e 65646f4e      %d seconds.Node
   c6510:	20642520 6e207369 6320746f 69666e6f      %d is not confi
   c6520:	65727567 6f732064 74657320 676e6974     gured so setting
   c6530:	656c6120 63207472 2065646f 31206f74      alert code to 1
   c6540:	61202d20 6e696167 6e490021 65687420      - again!.In the
   c6550:	74616420 656d2061 67617373 63612065      data message ac
   c6560:	6f63206b 736f706d 6f697469 61202c6e     k composition, a
   c6570:	7472656c 646f6320 6f662065 6f6e2072     lert code for no
   c6580:	25206564 73692064 00642520 65646f4e     de %d is %d.Node
   c6590:	20642520 61746164 70657220 2074726f      %d data report 
   c65a0:	61206425 6f6e6b63 64656c77 20646567     %d acknowledged 
   c65b0:	68746977 656c6120 25207472 61202c64     with alert %d, a
   c65c0:	5220646e 20495353 4e53202f 666f2052     nd RSSI / SNR of
   c65d0:	20642520 6425202f 61747300 00737574      %d / %d.status.
   c65e0:	65646f4e 20642520 61746164 70657220     Node %d data rep
   c65f0:	2074726f 70736572 65736e6f 746f6e20     ort response not
   c6600:	6b636120 6c776f6e 65676465 61630064      acknowledged.ca
   c6610:	65700072 6e6f7372 6b634100 6c776f6e     r.person.Acknowl
   c6620:	65676465 696f4a20 6552206e 73657571     edge Join Reques
   c6630:	6f4e0074 25206564 6f6a2064 72206e69     t.Node %d join r
   c6640:	65757165 77207473 206c6c69 61647075     equest will upda
   c6650:	73206574 6f736e65 70795472 6f742065     te sensorType to
   c6660:	00642520 65646f4e 20642520 6e696f6a      %d.Node %d join
   c6670:	71657220 74736575 6c697720 7075206c      request will up
   c6680:	65746164 74697720 61702068 616f6c79     date with payloa
   c6690:	255b2064 25202c64 25202c64 25202c64     d [%d, %d, %d, %
   c66a0:	66005d64 4e646e69 4e65646f 65626d75     d].findNodeNumbe
   c66b0:	61662072 64656c69 206f7420 20646461     r failed to add 
   c66c0:	20656874 65646f6e 206f7420 20656874     the node to the 
   c66d0:	61746164 65736162 6553002e 6e69646e     database..Sendin
   c66e0:	65722067 6e6f7073 74206573 6425206f     g response to %d
   c66f0:	74697720 72662068 6d206565 726f6d65      with free memor
   c6700:	203d2079 00696c25 65646f4e 20642520     y = %li.Node %d 
   c6710:	6e696f6a 202e6465 2077654e 65646f6e     joined. New node
   c6720:	626d754e 25207265 73202c64 6f736e65     Number %d, senso
   c6730:	70795472 73252065 6c61202c 20747265     rType %s, alert 
   c6740:	61206425 5220646e 20495353 4e53202f     %d and RSSI / SN
   c6750:	666f2052 20642520 6425202f 646f4e00     R of %d / %d.Nod
   c6760:	64252065 696f6a20 6572206e 6e6f7073     e %d join respon
   c6770:	6e206573 6120746f 6f6e6b63 64656c77     se not acknowled
   c6780:	00646567 74746553 20676e69 656b6f74     ged.Setting toke
   c6790:	6f66206e 6f6e2072 25206564 6f742064     n for node %d to
   c67a0:	00642520 63656843 676e696b 726f6620      %d.Checking for
   c67b0:	76206120 64696c61 6b6f7420 2d206e65      a valid token -
   c67c0:	646f6e20 6d754e65 20726562 202c6425      nodeNumber %d, 
   c67d0:	656b6f74 6425206e 6f74202c 436e656b     token %d, tokenC
   c67e0:	2065726f 54006425 6e656b6f 20736920     ore %d.Token is 
   c67f0:	696c6176 6f4e0064 25206564 73692064     valid.Node %d is
   c6800:	76206120 69677269 6f6e206e 202c6564      a virgin node, 
   c6810:	69737361 6e696e67 6e752067 65757169     assigning unique
   c6820:	6f204449 6c252066 6f4e0075 25206564     ID of %lu.Node %
   c6830:	6f6a2064 72206e69 65757165 77207473     d join request w
   c6840:	206c6c69 6e616863 6e206567 2065646f     ill change node 
   c6850:	626d756e 74207265 6425206f 74697720     number to %d wit
   c6860:	20612068 656b6f74 666f206e 00642520     h a token of %d.
   c6870:	65646f4e 20642520 7373656d 20656761     Node %d message 
   c6880:	6967616d 756e2063 7265626d 20666f20     magic number of 
   c6890:	64206425 6e206469 6d20746f 68637461     %d did not match
   c68a0:	65687420 67614d20 4e206369 65626d75      the Magic Numbe
   c68b0:	6e692072 6d656d20 2079726f 2d206425     r in memory %d -
   c68c0:	6e674920 6e69726f 6f4e0067 25206564      Ignoring.Node %
   c68d0:	69772064 75206874 7571696e 20444965     d with uniqueID 
   c68e0:	20756c25 73252061 73656d20 65676173     %lu a %s message
   c68f0:	74697720 53522068 532f4953 6f20524e      with RSSI/SNR o
   c6900:	64252066 25202f20 6e692064 20642520     f %d / %d in %d 
   c6910:	73706f68 646f4e00 64252065 20736920     hops.Node %d is 
   c6920:	666e6f63 72756769 62206465 74207475     configured but t
   c6930:	74206568 6e656b6f 20736920 61766e69     he token is inva
   c6940:	2064696c 6572202d 74746573 20676e69     lid - resetting 
   c6950:	656b6f74 6f4e006e 25206564 73692064     token.Node %d is
   c6960:	636e7520 69666e6f 65727567 6f732064      unconfigured so
   c6970:	74657320 676e6974 656c6120 6f437472      setting alertCo
   c6980:	74206564 6425206f 766e4900 64696c61     de to %d.Invalid
   c6990:	73656d20 65676173 616c6620 72202c67      message flag, r
   c69a0:	72757465 676e696e 20655700 20657261     eturning.We are 
   c69b0:	61647075 676e6974 65687420 62757020     updating the pub
   c69c0:	6873696c 65726620 6e657571 74207963     lish frequency t
   c69d0:	6925206f 63657320 73646e6f 766e4900     o %i seconds.Inv
   c69e0:	64696c61 73656d20 65676173 616c6620     alid message fla
   c69f0:	00000067                                g...

000c69f4 <_ZTV14LoRA_Functions>:
	...
   c69fc:	000b5615 000b5617 74696e49 7a696c61     .V...V..Initaliz
   c6a0c:	20676e69 20656874 4d6e6970 7365646f     ing the pinModes
	...

000c6a1e <BLUE_LED>:
   c6a1e:	                                         ..

000c6a20 <BUTTON_PIN>:
   c6a20:	                                         ..

000c6a22 <RFM95_CS>:
   c6a22:	                                         ..

000c6a24 <RFM95_INT>:
   c6a24:	                                         ..

000c6a26 <RFM95_RST>:
   c6a26:	                                         ..

000c6a28 <TMP36_SENSE_PIN>:
   c6a28:	6e49000f 61697469 697a696c 5020676e     ..Initializing P
   c6a38:	69747261 20656c63 636e7566 6e6f6974     article function
   c6a48:	6e612073 61762064 62616972 0073656c     s and variables.
   c6a58:	6d6d6f43 73646e61 206e4900 20656874     Commands.In the 
   c6a68:	63736964 656e6e6f 66207463 206d6f72     disconnect from 
   c6a78:	74726150 656c6369 6e756620 6f697463     Particle functio
   c6a88:	6146006e 64656c69 206f7420 63736964     n.Failed to disc
   c6a98:	656e6e6f 66207463 206d6f72 74726150     onnect from Part
   c6aa8:	656c6369 73694400 6e6e6f63 65746365     icle.Disconnecte
   c6ab8:	72662064 50206d6f 69747261 20656c63     d from Particle 
   c6ac8:	25206e69 65732069 646e6f63 61500073     in %i seconds.Pa
   c6ad8:	6e697372 61662067 64656c69 63202d20     rsing failed - c
   c6ae8:	6b636568 6e797320 00786174 00646d63     heck syntax.cmd.
   c6af8:	6f63227b 6e616d6d 3a227364 222c6925     {"commands":%i,"
   c6b08:	746e6f63 22747865 7325223a 6974222c     context":"%s,"ti
   c6b18:	7473656d 22706d61 756c253a 20303030     mestamp":%lu000 
   c6b28:	6255007d 746f6469 6f435f73 6e616d6d     }.Ubidots_Comman
   c6b38:	6f485f64 7b006b6f 6d6f6322 646e616d     d_Hook.{"command
   c6b48:	253a2273 63222c69 65746e6f 3a227478     s":%i,"context":
   c6b58:	22732522 6974222c 7473656d 22706d61     "%s","timestamp"
   c6b68:	756c253a 20303030 6f6e007d 66006564     :%lu000 }.node.f
   c6b78:	6572006e 00746573 65646f6e 61746144     n.reset.nodeData
   c6b88:	73655200 69747465 7420676e 67206568     .Resetting the g
   c6b98:	77657461 73277961 646f6e20 61442065     ateway's node Da
   c6ba8:	52006174 74657365 676e6974 65687420     ta.Resetting the
   c6bb8:	74614720 79617765 646f6e20 6f732065      Gateway node so
   c6bc8:	77656e20 74616420 73616261 73692065      new database is
   c6bd8:	206e6920 65666665 52007463 74657365      in effect.Reset
   c6be8:	676e6974 74614720 79617765 6c6c6100     ting Gateway.all
   c6bf8:	73655200 69747465 7420676e 67206568     .Resetting the g
   c6c08:	77657461 73277961 73797320 206d6574     ateway's system 
   c6c18:	20646e61 72727563 20746e65 61746164     and current data
   c6c28:	73655200 69747465 7420676e 67206568     .Resetting the g
   c6c38:	77657461 73277961 72756320 746e6572     ateway's current
   c6c48:	74616420 65520061 74746573 20676e69      data.Resetting 
   c6c58:	65646f6e 27642520 79732073 6d657473     node %d's system
   c6c68:	646e6120 72756320 746e6572 74616420      and current dat
   c6c78:	65520061 74746573 20676e69 65646f6e     a.Resetting node
   c6c88:	27642520 75632073 6e657272 61642074      %d's current da
   c6c98:	4e006174 6120746f 6c617620 6e206469     ta.Not a valid n
   c6ca8:	2065646f 71696e75 44496575 65726600     ode uniqueID.fre
   c6cb8:	65530071 6e697474 65722067 74726f70     q.Setting report
   c6cc8:	20676e69 71657266 636e6575 6f742079     ing frequency to
   c6cd8:	20642520 756e696d 00736574 20746f4e      %d minutes.Not 
   c6ce8:	61762061 2064696c 6f706572 6e697472     a valid reportin
   c6cf8:	72662067 65757165 0079636e 79617473     g frequency.stay
   c6d08:	696f4700 7420676e 656b206f 47207065     .Going to keep G
   c6d18:	77657461 6f207961 6150206e 63697472     ateway on Partic
   c6d28:	6120656c 4c20646e 2041526f 7774656e     le and LoRA netw
   c6d38:	736b726f 696f4700 6220676e 206b6361     orks.Going back 
   c6d48:	6e206f74 616d726f 6f63206c 63656e6e     to normal connec
   c6d58:	69766974 72007974 50007470 746e6972     tivity.rpt.Print
   c6d68:	20676e69 65646f6e 44204449 00617461     ing nodeID Data.
   c6d78:	6e65706f 74655300 676e6974 65706f20     open.Setting ope
   c6d88:	676e696e 756f6820 6f742072 3a642520     ning hour to %d:
   c6d98:	4f003030 206e6570 72756f68 6d202d20     00.Open hour - m
   c6da8:	20747375 30206562 0032312d 736f6c63     ust be 0-12.clos
   c6db8:	65530065 6e697474 6c632067 6e69736f     e.Setting closin
   c6dc8:	6f682067 74207275 6425206f 0030303a     g hour to %d:00.
   c6dd8:	736f6c43 6f682065 2d207275 73756d20     Close hour - mus
   c6de8:	65622074 2d333120 62003432 6b616572     t be 13-24.break
   c6df8:	74655300 676e6974 65726220 73206b61     .Setting break s
   c6e08:	74726174 756f6820 6f742072 3a642520     tart hour to %d:
   c6e18:	42003030 6b616572 61747320 68207472     00.Break start h
   c6e28:	2072756f 756d202d 62207473 2d302065     our - must be 0-
   c6e38:	62003432 6b616572 676e654c 694d6874     24.breakLengthMi
   c6e48:	6574756e 65530073 6e697474 72622067     nutes.Setting br
   c6e58:	206b6165 676e656c 74206874 6425206f     eak length to %d
   c6e68:	6e696d20 73657475 65724200 6c206b61      minutes.Break l
   c6e78:	74676e65 6d282068 74756e69 20297365     ength (minutes) 
   c6e88:	756d202d 62207473 2d302065 00303432     - must be 0-240.
   c6e98:	6b656577 42646e65 6b616572 74655300     weekendBreak.Set
   c6ea8:	676e6974 65657720 646e656b 65726220     ting weekend bre
   c6eb8:	73206b61 74726174 756f6820 6f742072     ak start hour to
   c6ec8:	3a642520 57003030 656b6565 6220646e      %d:00.Weekend b
   c6ed8:	6b616572 61747320 68207472 2072756f     reak start hour 
   c6ee8:	756d202d 62207473 2d302065 77003432     - must be 0-24.w
   c6ef8:	656b6565 7242646e 4c6b6165 74676e65     eekendBreakLengt
   c6f08:	6e694d68 73657475 74655300 676e6974     hMinutes.Setting
   c6f18:	65657720 646e656b 65726220 6c206b61      weekend break l
   c6f28:	74676e65 6f742068 20642520 756e696d     ength to %d minu
   c6f38:	00736574 6b656557 20646e65 61657262     tes.Weekend brea
   c6f48:	656c206b 6874676e 696d2820 6574756e     k length (minute
   c6f58:	2d202973 73756d20 65622074 322d3020     s) - must be 0-2
   c6f68:	70003034 53007277 69747465 4120676e     40.pwr.Setting A
   c6f78:	7472656c 646f4320 6f742065 69725420     lert Code to Tri
   c6f88:	72656767 73655220 50007465 7265776f     gger Reset.Power
   c6f98:	63794320 7620656c 65756c61 746f6e20      Cycle value not
   c6fa8:	31203d20 79740029 53006570 69747465      = 1).type.Setti
   c6fb8:	7320676e 6f736e65 79742072 74206570     ng sensor type t
   c6fc8:	6425206f 726f6620 646f6e20 64252065     o %d for node %d
   c6fd8:	6e655300 20726f73 65707954 6d202d20     .Sensor Type - m
   c6fe8:	20747375 30206562 0039322d 6e206f4e     ust be 0-29.No n
   c6ff8:	2065646f 73697865 69207374 6874206e     ode exists in th
   c7008:	61642065 61626174 77206573 20687469     e database with 
   c7018:	74616874 696e7520 49657571 6f6d0044     that uniqueID.mo
   c7028:	43746e75 69666e6f 756e0067 53006c6c     untConfig.null.S
   c7038:	70207465 6f6c7961 66206461 6e20726f     et payload for n
   c7048:	2065646f 202e6425 63617073 25203a65     ode %d. space: %
   c7058:	70202c64 6563616c 746e656d 7325203a     d, placement: %s
   c7068:	756d202c 3a69746c 00732520 6f727245     , multi: %s.Erro
   c7078:	6e692072 756f6d20 6f43746e 6769666e     r in mountConfig
   c7088:	5322202e 65636170 756d2022 62207473     . "Space" must b
   c7098:	65622065 65657774 2031206e 20646e61     e between 1 and 
   c70a8:	002e3436 6f727245 6e692072 756f6d20     64..Error in mou
   c70b8:	6f43746e 6769666e 6f43202e 20646c75     ntConfig. Could 
   c70c8:	20746f6e 20746573 6c796170 2e64616f     not set payload.
   c70d8:	72724500 6520726f 75636578 676e6974     .Error executing
   c70e8:	756f6d20 6f43746e 6769666e 56202d20      mountConfig - V
   c70f8:	77207261 6e207361 6120746f 7261206e     ar was not an ar
   c7108:	00796172 656e6f7a 65646f4d 74655300     ray.zoneMode.Set
   c7118:	676e6974 6e6f7a20 6f6d2065 74206564     ting zone mode t
   c7128:	6425206f 726f6620 646f6e20 64252065     o %d for node %d
   c7138:	6e6f5a00 6f4d2065 6d206564 20747375     .Zone Mode must 
   c7148:	30206562 6400342d 61747369 4d65636e     be 0-4.distanceM
   c7158:	0065646f 74746553 20676e69 74736964     ode.Setting dist
   c7168:	65636e61 65646f4d 206f7420 66206425     anceMode to %d f
   c7178:	6e20726f 2065646f 64006425 61747369     or node %d.dista
   c7188:	4d65636e 2065646f 7473756d 20656220     nceMode must be 
   c7198:	73282030 74726f68 31202c29 64656d28     0 (short), 1(med
   c71a8:	296d7569 20726f20 6f6c2832 0029676e     ium) or 2(long).
   c71b8:	65746e69 72656672 65636e65 66667542     interferenceBuff
   c71c8:	53007265 69747465 6920676e 7265746e     er.Setting inter
   c71d8:	65726566 4265636e 65666675 6f742072     ferenceBuffer to
   c71e8:	20642520 20726f66 65646f6e 00642520      %d for node %d.
   c71f8:	6f6f6c46 6e492072 66726574 6e657265     Floor Interferen
   c7208:	42206563 65666675 756d2072 62207473     ce Buffer must b
   c7218:	2d302065 30303032 6f006d6d 70756363     e 0-2000mm.occup
   c7228:	79636e61 696c6143 74617262 4c6e6f69     ancyCalibrationL
   c7238:	73706f6f 74655300 676e6974 63636f20     oops.Setting occ
   c7248:	6e617075 61437963 7262696c 6f697461     upancyCalibratio
   c7258:	6f6f4c6e 74207370 6425206f 726f6620     nLoops to %d for
   c7268:	646f6e20 64252065 65687400 6d756e20      node %d.the num
   c7278:	20726562 6320666f 62696c61 69746172     ber of calibrati
   c7288:	6c206e6f 73706f6f 73756d20 65622074     on loops must be
   c7298:	312d3020 00303030 61636572 7262696c      0-1000.recalibr
   c72a8:	00657461 74696e49 69746169 7220676e     ate.Initiating r
   c72b8:	6c616365 61726269 6e6f6974 726f6620     ecalibration for
   c72c8:	646f6e20 64252065 636e4900 6572726f      node %d.Incorre
   c72d8:	76207463 65756c61 726f6620 72617620     ct value for var
   c72e8:	754d202e 62207473 74222065 22657572     . Must be "true"
   c72f8:	73657200 6f527465 6f436d6f 73746e75     .resetRoomCounts
   c7308:	73655200 69747465 5220676e 206d6f6f     .Resetting Room 
   c7318:	736f7267 4e412073 656e2044 6f632074     gross AND net co
   c7328:	73746e75 74656e00 73655200 69747465     unts.net.Resetti
   c7338:	5220676e 206d6f6f 2074656e 6e756f63     ng Room net coun
   c7348:	4d007374 20747375 65746e65 61222072     ts.Must enter "a
   c7358:	20226c6c 2220726f 2274656e 726f6620     ll" or "net" for
   c7368:	72617620 6e614300 6c6e6f20 65722079      var.Can only re
   c7378:	20746573 6e756f63 66207374 4720726f     set counts for G
   c7388:	77657461 28207961 65646f6e 00293020     ateway (node 0).
   c7398:	65736552 6e697474 70532067 20656361     Resetting Space 
   c73a8:	53006425 65636170 6d756e20 20726562     %d.Space number 
   c73b8:	7473756d 20656220 77746562 206e6565     must be between 
   c73c8:	6e612031 34362064 6e614300 6c6e6f20     1 and 64.Can onl
   c73d8:	65722079 20746573 63617073 74207365     y reset spaces t
   c73e8:	756f7268 47206867 77657461 28207961     hrough Gateway (
   c73f8:	65646f6e 00293020 4f746573 70756363     node 0).setOccup
   c7408:	79636e61 4674654e 6f4e726f 53006564     ancyNetForNode.S
   c7418:	69747465 6e20676e 6f207465 70756363     etting net occup
   c7428:	79636e61 206f7420 66206425 6e20726f     ancy to %d for n
   c7438:	2065646f 73006425 6f547465 74654466     ode %d.setTofDet
   c7448:	69746365 50736e6f 65537265 646e6f63     ectionsPerSecond
   c7458:	74655300 676e6974 666f7420 65746544     .Setting tofDete
   c7468:	6f697463 6550736e 63655372 20646e6f     ctionsPerSecond 
   c7478:	25206f74 65732f64 646e6f63 726f6620     to %d/second for
   c7488:	646f6e20 64252065 666f7400 65746544      node %d.tofDete
   c7498:	6f697463 6550736e 63655372 20646e6f     ctionsPerSecond 
   c74a8:	7473756d 20656220 30332d31 74657300     must be 1-30.set
   c74b8:	6e617254 74696d73 6574614c 5379636e     TransmitLatencyS
   c74c8:	6e6f6365 53007364 69747465 7420676e     econds.Setting t
   c74d8:	6544666f 74636574 736e6f69 53726550     ofDetectionsPerS
   c74e8:	6e6f6365 6f742064 6d642520 6f662073     econd to %dms fo
   c74f8:	6f6e2072 25206564 72740064 6d736e61     r node %d.transm
   c7508:	614c7469 636e6574 63655379 73646e6f     itLatencySeconds
   c7518:	73756d20 65622074 362d3120 6f4e0030      must be 1-60.No
   c7528:	20612074 696c6176 6f632064 6e616d6d     t a valid comman
   c7538:	00000064                                d...

000c753c <_ZTVN5spark10LogHandlerE>:
	...
   c754c:	000b40a5 000b6549                       .@..Ie..

000c7554 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c755c:	000b6655 000b6689 000c1add 000b654b     Uf...f......Ke..

000c756c <_ZTV16JsonParserStaticILj1024ELj80EE>:
	...
   c7574:	000b6565 000b6579                       ee..ye..

000c757c <_ZTV18Particle_Functions>:
	...
   c7584:	000b6553 000b6555 20746f6e 696c6176     Se..Ue..not vali
   c7594:	75630064 6e657272 61642074 69206174     d.current data i
   c75a4:	73252073 72754300 746e6572 74614420     s %s.Current Dat
   c75b4:	6e492061 61697469 657a696c 6f6e0064     a Initialized.no
   c75c4:	44496564 74616420 73692061 00732520     deID data is %s.
   c75d4:	6f6e227b 22736564 7d5d5b3a 73655200     {"nodes":[]}.Res
   c75e4:	69747465 4e20676e 4965646f 6f632044     etting NodeID co
   c75f4:	6769666e 3a6f7420 00732520 65646f4e     nfig to: %s.Node
   c7604:	64204449 20617461 6e207369 2520776f     ID data is now %
   c7614:	72450073 6e697361 52462067 72204d41     s.Erasing FRAM r
   c7624:	6f696765 6e49006e 61697469 697a696c     egion.Initializi
   c7634:	6420676e 00617461 656b6f54 6f43206e     ng data.Token Co
   c7644:	69206572 64252073 74616400 6f6e2061     re is %d.data no
   c7654:	61762074 2064696c 6e65706f 656d6954     t valid openTime
   c7664:	2064253d 20646e61 736f6c63 6d695465     =%d and closeTim
   c7674:	64253d65 74616400 6f6e2061 61762074     e=%d.data not va
   c7684:	2064696c 71657266 636e6575 696d2079     lid frequency mi
   c7694:	6574756e 253d2073 61640064 6e206174     nutes =%d.data n
   c76a4:	7620746f 64696c61 646f6e20 756e2065     ot valid node nu
   c76b4:	7265626d 64253d20 73797300 74617453     mber =%d.sysStat
   c76c4:	64207375 20617461 25207369 61640073     us data is %s.da
   c76d4:	69206174 6974696e 7a696c61 00006465     ta initialized..

000c76e4 <_ZTV8MB85RC64>:
	...
   c76ec:	000b74ed 000b7501 000b8fc1 000b9057     .t...u......W...
   c76fc:	000b90d9                                ....

000c7700 <_ZTV10nodeIDData>:
	...
   c7708:	000b7895 000b75bf 000b7597 000b918f     .x...u...u......
   c7718:	000b91b7 000b755d 000b796d 000b7661     ....]u..my..av..
   c7728:	000b7675                                uv..

000c772c <_ZTV13sysStatusData>:
	...
   c7734:	000b7bc5 000b75bf 000b7597 000b918f     .{...u...u......
   c7744:	000b91b7 000b7d45 000b7f15 000b7611     ....E}.......v..
   c7754:	000b7625                                %v..

000c7758 <_ZTV17currentStatusData>:
	...
   c7760:	000b775d 000b75bf 000b7597 000b918f     ]w...u...u......
   c7770:	000b91b7 000b7515 000b7539 000b7639     .....u..9u..9v..
   c7780:	000b764d                                Mv..

000c7784 <_ZTV11BlockCipher>:
	...
   c7794:	000b40a5 000b40a5 000b40a5 000b40a5     .@...@...@...@..
   c77a4:	000b40a5 000b40a5                       .@...@..

000c77ac <_ZTV5Speck>:
	...
   c77b4:	000b80b5 000b80d5 000b80ab 000b80af     ................
   c77c4:	000b8235 000b80eb 000b8191 000b8389     5...............
   c77d4:	6c696166 74206465 6572206f 72206461     failed to read r
   c77e4:	64416765 253d7264 20783230 6e756f63     egAddr=%02x coun
   c77f4:	75253d74 69616600 2064656c 72206f74     t=%u.failed to r
   c7804:	20646165 41676572 3d726464 78323025     ead regAddr=%02x
   c7814:	61747320 64253d74 746f6e00 74656420      stat=%d.not det
   c7824:	65746365 61660064 64656c69 206f7420     ected.failed to 
   c7834:	74697277 65722065 64644167 30253d72     write regAddr=%0
   c7844:	73207832 3d746174 73006425 44577465     2x stat=%d.setWD
   c7854:	64252054 74617700 6f646863 6c632067     T %d.watchdog cl
   c7864:	65726165 52622064 6c757365 64253d74     eared bResult=%d
   c7874:	74617700 6f646863 65732067 6f662074     .watchdog set fo
   c7884:	65537275 253d7363 52622064 6c757365     urSecs=%d bResul
   c7894:	64253d74 54415700 4f444843 45440047     t=%d.WATCHDOG.DE
   c78a4:	505f5045 5245574f 574f445f 4f43004e     EP_POWER_DOWN.CO
   c78b4:	44544e55 5f4e574f 454d4954 4c410052     UNTDOWN_TIMER.AL
   c78c4:	004d5241 6c696166 20657275 75206e69     ARM.failure in u
   c78d4:	74616470 6b615765 61655265 206e6f73     pdateWakeReason 
   c78e4:	77006425 20656b61 73616572 3d206e6f     %d.wake reason =
   c78f4:	00732520 6c696166 20657275 73206e69      %s.failure in s
   c7904:	6f437465 64746e75 546e776f 72656d69     etCountdownTimer
   c7914:	00642520 6c696166 20657275 64206e69      %d.failure in d
   c7924:	50706565 7265776f 6e776f44 00642520     eepPowerDown %d.
   c7934:	5f474552 45454c53 54435f50 303d4c52     REG_SLEEP_CTRL=0
   c7944:	78322578 64696400 2074276e 65776f70     x%2x.didn't powe
   c7954:	6f642072 25006e77 2d643430 64323025     r down.%04d-%02d
   c7964:	3230252d 30252064 253a6432 3a643230     -%02d %02d:%02d:
   c7974:	64323025 74656700 41637452 206d5473     %02d.getRtcAsTm 
   c7984:	252e7325 65730064 63745274 6d547341     %s.%d.setRtcAsTm
   c7994:	2e732520 66006425 756c6961 69206572      %s.%d.failure i
   c79a4:	6573206e 63745274 6d6f7246 25206d54     n setRtcFromTm %
   c79b4:	65730064 54522074 72662043 63206d6f     d.set RTC from c
   c79c4:	64756f6c 00732520 20746573 74737973     loud %s.set syst
   c79d4:	63206d65 6b636f6c 6f726620 5452206d     em clock from RT
   c79e4:	73252043 69616600 2064656c 64206f74     C %s.failed to d
   c79f4:	63657465 42412074 35303831 70706100     etect AB1805.app
   c7a04:	3162612e 00353038                       .ab1805.

000c7a0c <_ZTV6AB1805>:
	...
   c7a14:	000b83b1 000b83b3 000b8a19 000b8a9f     ................

000c7a24 <_ZTV6MB85RC>:
	...
   c7a2c:	000b8f81 000b8f83 000b8fc1 000b9057     ............W...
   c7a3c:	000b90d9 69766173 6420676e 20617461     ....saving data 
   c7a4c:	657a6973 0064253d 696c6176 69746164     size=%d.validati
   c7a5c:	6420676e 20617461 657a6973 0064253d     ng data size=%d.
   c7a6c:	3a746f67 67616d20 253d6369 20783830     got: magic=%08x 
   c7a7c:	73726576 3d6e6f69 78343025 7a697320     version=%04x siz
   c7a8c:	30253d65 68207834 3d687361 78383025     e=%04x hash=%08x
   c7a9c:	70786500 616d203a 3d636967 78383025     .exp: magic=%08x
   c7aac:	72657620 6e6f6973 3430253d 69732078      version=%04x si
   c7abc:	253d657a 20783430 68736168 3830253d     ze=%04x hash=%08
   c7acc:	00000078                                x...

000c7ad0 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c7ad8:	000b9189 000b9235 000b91f1 000b918f     ....5...........
   c7ae8:	000b91b7 000b93b9 000b9485 3025755c     ............\u%0
   c7af8:	00005834                                4X..

000c7afc <_ZTV10JsonBuffer>:
	...
   c7b04:	000b94b1 000b94cd                       ........

000c7b0c <_ZTV10JsonParser>:
	...
   c7b14:	000b9531 000b9555                       1...U...

000c7b1c <_ZTV10JsonWriter>:
	...
   c7b24:	000b94e1 000b94f5                       ........

000c7b2c <_ZTV12JsonModifier>:
	...
   c7b34:	000b9509 000b951d 6b636142 756f7267     ........Backgrou
   c7b44:	7550646e 73696c62 004b5268              ndPublishRK.

000c7b50 <_ZTV19BackgroundPublishRK>:
	...
   c7b58:	000ba30d 000ba329 656c6966 3d6d754e     ....)...fileNum=
   c7b68:	73206425 3d657a69 00646c25 64616572     %d size=%ld.read
   c7b78:	75657551 6c694665 64252065 65766520     QueueFile %d eve
   c7b88:	253d746e 61642073 253d6174 65720073     nt=%s data=%s.re
   c7b98:	75516461 46657565 20656c69 63206425     adQueueFile %d c
   c7ba8:	7572726f 64657470 65766520 6e20746e     orrupted event n
   c7bb8:	20656d61 6420726f 00617461 64616572     ame or data.read
   c7bc8:	75657551 6c694665 64252065 64616220     QueueFile %d bad
   c7bd8:	67616d20 253d6369 786c3830 72657620      magic=%08lx ver
   c7be8:	6e6f6973 2075253d 64616568 69537265     sion=%u headerSi
   c7bf8:	253d657a 616e2075 654c656d 75253d6e     ze=%u nameLen=%u
   c7c08:	73752f00 75702f72 65757162 77006575     ./usr/pubqueue.w
   c7c18:	65746972 75657551 466f5465 73656c69     riteQueueToFiles
   c7c28:	6c696620 6d754e65 0064253d 63736964      fileNum=%d.disc
   c7c38:	65647261 76652064 20746e65 72006425     arded event %d.r
   c7c48:	74657365 20726f20 63736964 656e6e6f     eset or disconne
   c7c58:	65207463 746e6576 6173202c 66206576     ct event, save f
   c7c68:	73656c69 206f7420 75657571 61720065     iles to queue.ra
   c7c78:	6964006d 72616373 676e6964 726f6320     m.discarding cor
   c7c88:	74707572 66206465 20656c69 70006425     rupted file %d.p
   c7c98:	696c6275 6e696873 73252067 65766520     ublishing %s eve
   c7ca8:	253d746e 61642073 253d6174 59530073     nt=%s data=%s.SY
   c7cb8:	4d455453 5248545f 28444145 42414e45     STEM_THREAD(ENAB
   c7cc8:	2944454c 20736920 75716572 64657269     LED) is required
   c7cd8:	62757000 6873696c 6d6d6f43 65206e6f     .publishCommon e
   c7ce8:	746e6576 656d614e 2073253d 6e657665     ventName=%s even
   c7cf8:	74614474 73253d61 6e616300 20746f6e     tData=%s.cannot 
   c7d08:	61657263 73206574 3a3a6474 75716564     create std::dequ
   c7d18:	616c2065 72656772 61687420 616d206e     e larger than ma
   c7d28:	69735f78 2928657a 6c696600 65755165     x_size().fileQue
   c7d38:	654c6575 75253d6e 6d617220 75657551     ueLen=%u ramQueu
   c7d48:	6e654c65 2075253d 6e6e6f63 65746365     eLen=%u connecte
   c7d58:	64253d64 65757100 20646575 72206f74     d=%d.queued to r
   c7d68:	75516d61 00657565 6c627570 20687369     amQueue.publish 
   c7d78:	63637573 20737365 72006425 766f6d65     success %d.remov
   c7d88:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   c7d98:	66206873 656c6961 64252064 69727700     sh failed %d.wri
   c7da8:	676e6974 206f7420 656c6966 66612073     ting to files af
   c7db8:	20726574 6c627570 20687369 6c696166     ter publish fail
   c7dc8:	00657275 2e707061 71627570 00000000     ure.app.pubq....

000c7dd8 <_ZTV17PublishQueuePosix>:
	...
   c7de0:	000baeb9 000bb175 000bb199 64383025     ....u.......%08d
   c7df0:	72002f00 766f6d65 25206465 73250073     ./.removed %s.%s
   c7e00:	69786520 20737473 20646e61 61207369      exists and is a
   c7e10:	72696420 6f746365 66007972 20656c69      directory.file 
   c7e20:	74206e69 77206568 202c7961 656c6564     in the way, dele
   c7e30:	676e6974 00732520 74617473 6c696620     ting %s.stat fil
   c7e40:	65206465 6f6e7272 0064253d 61657263     ed errno=%d.crea
   c7e50:	20646574 20726964 6d007325 7269646b     ted dir %s.mkdir
   c7e60:	69616620 2064656c 6e727265 64253d6f      failed errno=%d
   c7e70:	636e7500 69666e6f 65727567 69642064     .unconfigured di
   c7e80:	74615072 63730068 696e6e61 2520676e     rPath.scanning %
   c7e90:	69772073 70206874 65747461 25206e72     s with pattern %
   c7ea0:	64610073 676e6964 206f7420 75657571     s.adding to queu
   c7eb0:	64252065 00732520 46746567 46656c69     e %d %s.getFileF
   c7ec0:	516d6f72 65756575 74657220 656e7275     romQueue returne
   c7ed0:	64252064 70706100 7165732e 656c6966     d %d.app.seqfile
   c7ee0:	00000000                                ....

000c7ee4 <_ZTV14SequentialFile>:
	...
   c7eec:	000bb501 000bb52d 000bb1ad 253a6425     ....-.......%d:%
   c7efc:	64253a64 3a303000 303a3030 33320030     d:%d.00:00:00.23
   c7f0c:	3a39353a 4d003935 252e6425 64252e64     :59:59.M%d.%d.%d
   c7f1c:	5a002c00 302b2500 253a6433 00753230     .,.Z.%+03d:%02u.

000c7f2c <_ZTV9LocalTime>:
	...
   c7f34:	000bb8a9 000bb8c1                       ........

000c7f3c <_ZTV12LocalTimeHMS>:
	...
   c7f44:	000bb859 000bb85d                       Y...]...

000c7f4c <_ZTV15LocalTimeChange>:
	...
   c7f54:	000bb85b 000bb86b                       [...k...

000c7f5c <_ZTV22LocalTimePosixTimezone>:
	...
   c7f64:	000bb879 000bb895                       y.......

000c7f6c <_ZTV15RHGenericDriver>:
	...
   c7f7c:	000bc1a9 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c7f8c:	000b40a5 000bc20b 000bc1ad 000bc25b     .@..........[...
   c7f9c:	000bc229 000bc27f 000bc1b7 000bc1bf     )...............
   c7fac:	000bc1c3 000bc1c7 000bc1cb 000bc1cf     ................
   c7fbc:	000bc1bb 000bc1db 000bc1df 000bc1e3     ................
   c7fcc:	000bc1e7 000bc1eb 000bc1f1 000bc1f5     ................
   c7fdc:	000bc1b7 000bc1f9 000bc1ff 000bc205     ................
   c7fec:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
   c7ffc:	50533c00 74655349 676e6974 65642073     .<SPISettings de
   c800c:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
   c801c:	2073676e 75257325 20732520 45444f4d     ngs %s%u %s MODE
   c802c:	003e7525                                %u>.

000c8030 <_ZTVN8particle11SPISettingsE>:
	...
   c8038:	000bc309 000bc2dd 000bc2df              ............

000c8044 <_ZTV13RHHardwareSPI>:
	...
   c804c:	000bc3bd 000bc3d1 000bc3df 000bc3ed     ................
   c805c:	000bc459 000bc78b 000bc78f 000bc793     Y...............
   c806c:	000bc467 000bc47b 000bc489              g...{.......

000c8078 <_ZTV8RHRouter>:
	...
   c8080:	000bc4a1 000bc4e5                       ........

000c8088 <_ZTV12RHGenericSPI>:
	...
   c8090:	000b40a5 000bc781 000bc783 000b40a5     .@...........@..
   c80a0:	000b40a5 000bc78b 000bc78f 000bc793     .@..............
   c80b0:	000bc785 000bc787 000bc789 40f9999a     ...............@
   c80c0:	41266666 4179999a 41a66666 41fa0000     ff&A..yAff.A...A
   c80d0:	4226cccd 427a0000 42fa0000 437a0000     ..&B..zB...B..zC
   c80e0:	43fa0000 45f3c000 46228000 4673c000     ...C...E.."F..sF
   c80f0:	46a28000 46f42400 4722e400 47742400     ...F.$.F.."G.$tG
   c8100:	47f42400 48742400 48f42400              .$.G.$tH.$.H

000c810c <_ZL18MODEM_CONFIG_TABLE>:
   c810c:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c811c <_ZTV7RH_RF95>:
	...
   c8124:	000bcb0b 000bcb43 000bd009 000bce9f     ....C...........
   c8134:	000bcb79 000bcee7 000bcb07 000bc20b     y...............
   c8144:	000bc1ad 000bc25b 000bc229 000bc27f     ....[...).......
   c8154:	000bcb0d 000bc1bf 000bc1c3 000bc1c7     ................
   c8164:	000bc1cb 000bc1cf 000bc1bb 000bc1db     ................
   c8174:	000bc1df 000bc1e3 000bc1e7 000bc1eb     ................
   c8184:	000bc1f1 000bc1f5 000bcb53 000bc1f9     ........S.......
   c8194:	000bc1ff 000bc205 000bd491 000bd49b     ................
   c81a4:	000bcb03                                ....

000c81a8 <_ZTV17RHEncryptedDriver>:
	...
   c81b0:	000bd2c5 000bd2c7 000bd1d9 000bd1e1     ................
   c81c0:	000bd2d5 000bd375 000bd29b 000bc20b     ....u...........
   c81d0:	000bd1e9 000bd1f1 000bc229 000bd203     ........).......
   c81e0:	000bd20b 000bd213 000bd21b 000bd223     ............#...
   c81f0:	000bd22b 000bd233 000bd23b 000bd243     +...3...;...C...
   c8200:	000bd24b 000bd253 000bd25b 000bd263     K...S...[...c...
   c8210:	000bd26b 000bd273 000bd27b 000bd283     k...s...{.......
   c8220:	000bd28b 000bd293 000bd1f9              ............

000c822c <_ZTV11RHSPIDriver>:
	...
   c823c:	000bd465 000b40a5 000b40a5 000b40a5     e....@...@...@..
   c824c:	000b40a5 000bc20b 000bc1ad 000bc25b     .@..........[...
   c825c:	000bc229 000bc27f 000bc1b7 000bc1bf     )...............
   c826c:	000bc1c3 000bc1c7 000bc1cb 000bc1cf     ................
   c827c:	000bc1bb 000bc1db 000bc1df 000bc1e3     ................
   c828c:	000bc1e7 000bc1eb 000bc1f1 000bc1f5     ................
   c829c:	000bc1b7 000bc1f9 000bc1ff 000bc205     ................
   c82ac:	000bd491 000bd49b                       ........

000c82b4 <_ZTV6RHMesh>:
	...
   c82bc:	000bd6b1 000bd989 000bd611 000bd5fb     ................

000c82cc <_ZTV14Room_Occupancy>:
	...
   c82d4:	000bd9f1 000bd9f3 20656854 65646f6e     ........The node
   c82e4:	72747320 20676e69 203a7369 50007325      string is: %s.P
   c82f4:	65737261 75532064 73656363 6c756673     arsed Successful
   c8304:	5000796c 69737261 6520676e 726f7272     ly.Parsing error
   c8314:	646f6e00 46007365 206d6f72 54746567     .nodes.From getT
   c8324:	20657079 636e7566 6e6f6974 646f4e20     ype function Nod
   c8334:	756e2065 7265626d 746f6e20 756f6620     e number not fou
   c8344:	7320646e 6572206f 6e727574 20676e69     nd so returning 
   c8354:	52006425 72757465 676e696e 6e657320     %d.Returning sen
   c8364:	20726f73 65707974 20642520 67206e69     sor type %d in g
   c8374:	79547465 46006570 206d6f72 41746567     etType.From getA
   c8384:	7472656c 65646f43 6e756620 6f697463     lertCode functio
   c8394:	4e202c6e 2065646f 626d756e 6e207265     n, Node number n
   c83a4:	6620746f 646e756f 6e657000 72460064     ot found.pend.Fr
   c83b4:	67206d6f 6c417465 43747265 65746e6f     om getAlertConte
   c83c4:	66207478 74636e75 2c6e6f69 646f4e20     xt function, Nod
   c83d4:	756e2065 7265626d 746f6e20 756f6620     e number not fou
   c83e4:	6300646e 00746e6f 206e6152 2074756f     nd.cont.Ran out 
   c83f4:	6520666f 6972746e 69207365 6f6e206e     of entries in no
   c8404:	64206564 62617461 20657361 6f6e202d     de database - no
   c8414:	6f436564 6769666e 64657275 6a626f20     deConfigured obj
   c8424:	20746365 73726170 00676e69 00444975     ect parsing.uID.
   c8434:	65646f4e 6d756e20 20726562 66207369     Node number is f
   c8444:	646e756f 74756220 696e7520 49657571     ound but uniqueI
   c8454:	73692044 746f6e20 6d206120 68637461     D is not a match
   c8464:	6e202d20 4365646f 69666e6f 65727567      - nodeConfigure
   c8474:	6e750064 65757169 78454449 73747369     d.uniqueIDExists
   c8484:	61446e49 61626174 72206573 6f206e61     InDatabase ran o
   c8494:	6f207475 6e652066 65697274 74612073     ut of entries at
   c84a4:	3d206920 00642520 71696e75 44496575      i = %d.uniqueID
   c84b4:	73697845 6e497374 61746144 65736162     ExistsInDatabase
   c84c4:	74657220 656e7275 72742064 73006575      returned true.s
   c84d4:	63726165 676e6968 72726120 66207961     earching array f
   c84e4:	6e20726f 2065646f 68746977 696e7520     or node with uni
   c84f4:	20657571 3d206469 756c2520 74656700     que id = %lu.get
   c8504:	65646f4e 626d754e 6f467265 696e5572     NodeNumberForUni
   c8514:	49657571 61722044 756f206e 666f2074     queID ran out of
   c8524:	746e6520 73656972 20746120 203d2069      entries at i = 
   c8534:	63006425 61706d6f 676e6972 20646920     %d.comparing id 
   c8544:	20756c25 75206f74 7571696e 20444965     %lu to uniqueID 
   c8554:	00756c25 6e6b6e55 206e776f 736e6573     %lu.Unknown sens
   c8564:	7420726f 20657079 67206e69 6f437465     or type in getCo
   c8574:	6572706d 64657373 6e696f4a 6c796150     mpressedJoinPayl
   c8584:	2064616f 55006425 6f6e6b6e 73206e77     oad %d.Unknown s
   c8594:	6f736e65 79742072 69206570 6567206e     ensor type in ge
   c85a4:	6d6f4374 73657270 4a646573 506e696f     tCompressedJoinP
   c85b4:	6f6c7961 55006461 6f6e6b6e 73206e77     ayload.Unknown s
   c85c4:	6f736e65 79742072 69206570 7968206e     ensor type in hy
   c85d4:	74617264 696f4a65 7961506e 64616f6c     drateJoinPayload
   c85e4:	00642520 6e6b6e55 206e776f 736e6573      %d.Unknown sens
   c85f4:	7420726f 20657079 68206e69 61726479     or type in hydra
   c8604:	6f4a6574 61506e69 616f6c79 72460064     teJoinPayload.Fr
   c8614:	67206d6f 6f4a7465 61506e69 616f6c79     om getJoinPayloa
   c8624:	75662064 6974636e 4e206e6f 2065646f     d function Node 
   c8634:	626d756e 6e207265 6620746f 646e756f     number not found
   c8644:	206f7320 75746572 6e696e72 61662067      so returning fa
   c8654:	0065736c 64616f4c 70206465 6f6c7961     lse.Loaded paylo
   c8664:	76206461 65756c61 666f2073 2c642520     ad values of %d,
   c8674:	2c642520 2c642520 00642520 6e6b6e55      %d, %d, %d.Unkn
   c8684:	206e776f 736e6573 7420726f 20657079     own sensor type 
   c8694:	70206e69 65737261 6e696f4a 6c796150     in parseJoinPayl
   c86a4:	5664616f 65756c61 64252073 6b6e5500     oadValues %d.Unk
   c86b4:	6e776f6e 6e657320 20726f73 65707974     nown sensor type
   c86c4:	206e6920 73726170 696f4a65 7961506e      in parseJoinPay
   c86d4:	64616f6c 756c6156 53007365 63726165     loadValues.Searc
   c86e4:	676e6968 72726120 66207961 6e20726f     hing array for n
   c86f4:	7365646f 74697720 70732068 20656361     odes with space 
   c8704:	6425203d 67202d20 634f7465 61707563     = %d - getOccupa
   c8714:	4779636e 73736f72 70537942 00656361     ncyGrossBySpace.
   c8724:	0032646a 0031646a 7065726c 646f4e00     jd2.jd1.lrep.Nod
   c8734:	64252065 6e75202c 65757169 25204449     e %d, uniqueID %
   c8744:	202c756c 65707974 2c642520 79617020     lu, type %d, pay
   c8754:	64616f6c 64252820 2f64252f 252f6425     load (%d/%d/%d/%
   c8764:	77202964 20687469 646e6570 20676e69     d) with pending 
   c8774:	72656c61 64252074 646e6120 656c6120     alert %d and ale
   c8784:	63207472 65746e6f 25207478 6c202c64     rt context %d, l
   c8794:	52747361 726f7065 73252074 646f4e00     astReport %s.Nod
   c87a4:	64252065 6e75202c 65757169 25204449     e %d, uniqueID %
   c87b4:	202c756c 65707974 2c642520 74656e20     lu, type %d, net
   c87c4:	2c642520 6f726720 25207373 70202c64      %d, gross %d, p
   c87d4:	6f6c7961 28206461 252f6425 64252f64     ayload (%d/%d/%d
   c87e4:	2964252f 74697720 65702068 6e69646e     /%d) with pendin
   c87f4:	6c612067 20747265 61206425 6120646e     g alert %d and a
   c8804:	7472656c 6e6f6320 74786574 2c642520     lert context %d,
   c8814:	73616c20 70655274 2074726f 55007325      lastReport %s.U
   c8824:	6f6e6b6e 73206e77 6f736e65 79742072     nknown sensor ty
   c8834:	69206570 7270206e 4e746e69 4465646f     pe in printNodeD
   c8844:	20617461 55006425 6f6e6b6e 73206e77     ata %d.Unknown s
   c8854:	6f736e65 79742072 69206570 7270206e     ensor type in pr
   c8864:	4e746e69 4465646f 00617461 74636576     intNodeData.vect
   c8874:	3a3a726f 725f4d5f 6c6c6165 695f636f     or::_M_realloc_i
   c8884:	7265736e 61520074 756f206e 666f2074     nsert.Ran out of
   c8894:	746e6520 73656972 206e6920 65646f6e      entries in node
   c88a4:	74616420 73616261 202d2065 54746573      database - setT
   c88b4:	20657079 656a626f 70207463 69737261     ype object parsi
   c88c4:	4300676e 676e6168 20676e69 736e6573     ng.Changing sens
   c88d4:	7420726f 20657079 6d6f7266 20642520     or type from %d 
   c88e4:	25206f74 61520064 756f206e 666f2074     to %d.Ran out of
   c88f4:	746e6520 73656972 206e6920 65646f6e      entries in node
   c8904:	74616420 73616261 202d2065 4a746573      database - setJ
   c8914:	506e696f 6f6c7961 6f206461 63656a62     oinPayload objec
   c8924:	61702074 6e697372 68430067 69676e61     t parsing.Changi
   c8934:	7020676e 6f6c7961 76206461 65756c61     ng payload value
   c8944:	72662073 25206d6f 25202c64 25202c64     s from %d, %d, %
   c8954:	25202c64 68430064 65676e61 61702064     d, %d.Changed pa
   c8964:	616f6c79 61762064 7365756c 206f7420     yload values to 
   c8974:	202c6425 202c6425 202c6425 52006425     %d, %d, %d, %d.R
   c8984:	6f206e61 6f207475 6e652066 65697274     an out of entrie
   c8994:	6e692073 646f6e20 61642065 61626174     s in node databa
   c89a4:	2d206573 74657320 72656c41 646f4374     se - setAlertCod
   c89b4:	626f2065 7463656a 72617020 676e6973     e object parsing
   c89c4:	61684300 6e69676e 65702067 6e69646e     .Changing pendin
   c89d4:	6c612067 20747265 6d6f7266 20642520     g alert from %d 
   c89e4:	25206f74 61520064 756f206e 666f2074     to %d.Ran out of
   c89f4:	746e6520 73656972 206e6920 65646f6e      entries in node
   c8a04:	74616420 73616261 202d2065 41746573      database - setA
   c8a14:	7472656c 746e6f43 20747865 656a626f     lertContext obje
   c8a24:	70207463 69737261 4300676e 676e6168     ct parsing.Chang
   c8a34:	20676e69 646e6570 20676e69 72656c61     ing pending aler
   c8a44:	6f632074 7865746e 72662074 25206d6f     t context from %
   c8a54:	6f742064 00642520 206e6152 2074756f     d to %d.Ran out 
   c8a64:	6520666f 6972746e 69207365 6f6e206e     of entries in no
   c8a74:	64206564 62617461 20657361 6573202d     de database - se
   c8a84:	6f734a74 7461446e 6f203161 63656a62     tJsonData1 objec
   c8a94:	61702074 6e697372 70550067 69746164     t parsing.Updati
   c8aa4:	6a20676e 446e6f73 31617461 6c617620     ng jsonData1 val
   c8ab4:	66206575 206d6f72 74206425 6425206f     ue from %d to %d
   c8ac4:	6e615200 74756f20 20666f20 72746e65     .Ran out of entr
   c8ad4:	20736569 6e206e69 2065646f 61746164     ies in node data
   c8ae4:	65736162 73202d20 634f7465 61707563     base - setOccupa
   c8af4:	4e79636e 6f467465 646f4e72 626f2065     ncyNetForNode ob
   c8b04:	7463656a 72617020 676e6973 646f4e00     ject parsing.Nod
   c8b14:	6c252065 656e2075 6f632074 20746e75     e %lu net count 
   c8b24:	20746573 25206f74 65530064 6e697474     set to %d.Settin
   c8b34:	634f2067 61707563 0079636e 65646f4e     g Occupancy.Node
   c8b44:	746f6e20 73657220 64207465 74206575      not reset due t
   c8b54:	6166206f 72756c69 6e692065 74657320     o failure in set
   c8b64:	72656c41 646f4374 726f2065 74657320     AlertCode or set
   c8b74:	72656c41 6e6f4374 74786574 4975202e     AlertContext. uI
   c8b84:	25203a44 5200756c 74657365 676e6974     D: %lu.Resetting
   c8b94:	63636f20 6e617075 6e207963 63207465      occupancy net c
   c8ba4:	746e756f 61520073 756f206e 666f2074     ounts.Ran out of
   c8bb4:	746e6520 73656972 206e6920 65646f6e      entries in node
   c8bc4:	74616420 73616261 202d2065 4a746573      database - setJ
   c8bd4:	446e6f73 32617461 6a626f20 20746365     sonData2 object 
   c8be4:	73726170 00676e69 61647055 676e6974     parsing.Updating
   c8bf4:	6f736a20 7461446e 76203261 65756c61      jsonData2 value
   c8c04:	6f726620 6425206d 206f7420 52006425      from %d to %d.R
   c8c14:	74657365 676e6974 72756320 746e6572     esetting current
   c8c24:	74616420 6f662061 6f6e2072 25206564      data for node %
   c8c34:	202d2064 65736572 72754374 746e6572     d - resetCurrent
   c8c44:	61746144 4e726f46 0065646f 206e6152     DataForNode.Ran 
   c8c54:	2074756f 6520666f 6972746e 69207365     out of entries i
   c8c64:	6f6e206e 64206564 62617461 20657361     n node database 
   c8c74:	6572202d 43746573 65727275 6144746e     - resetCurrentDa
   c8c84:	6f466174 646f4e72 626f2065 7463656a     taForNode object
   c8c94:	72617020 676e6973 646f4e00 6f6e2065      parsing.Node no
   c8ca4:	65722074 20746573 20657564 66206f74     t reset due to f
   c8cb4:	756c6961 69206572 6573206e 656c4174     ailure in setAle
   c8cc4:	6f437472 202e6564 3a444975 756c2520     rtCode. uID: %lu
   c8cd4:	6b6e5500 6e776f6e 6e657320 20726f73     .Unknown sensor 
   c8ce4:	65707974 206e6920 65736572 72754374     type in resetCur
   c8cf4:	746e6572 61746144 4e726f46 2065646f     rentDataForNode 
   c8d04:	52006425 74657365 676e6974 6c6c6120     %d.Resetting all
   c8d14:	63636f20 6e617075 63207963 746e756f      occupancy count
   c8d24:	202d2073 65736572 63634f74 6e617075     s - resetOccupan
   c8d34:	6f437963 73746e75 73655200 69747465     cyCounts.Resetti
   c8d44:	6320676e 65727275 6120746e 7320646e     ng current and s
   c8d54:	65747379 6164206d 66206174 6e20726f     ystem data for n
   c8d64:	2065646f 2d206425 73657220 6c417465     ode %d - resetAl
   c8d74:	7461446c 726f4661 65646f4e 6e615200     lDataForNode.Ran
   c8d84:	74756f20 20666f20 72746e65 20736569      out of entries 
   c8d94:	6e206e69 2065646f 61746164 65736162     in node database
   c8da4:	72202d20 74657365 446c6c41 46617461      - resetAllDataF
   c8db4:	6f4e726f 6f206564 63656a62 61702074     orNode object pa
   c8dc4:	6e697372 6e550067 776f6e6b 6573206e     rsing.Unknown se
   c8dd4:	726f736e 70797420 6e692065 73657220     nsor type in res
   c8de4:	6c417465 7461446c 726f4661 65646f4e     etAllDataForNode
   c8df4:	00642520 6e6b6e55 206e776f 736e6573      %d.Unknown sens
   c8e04:	7420726f 20657079 72206e69 74657365     or type in reset
   c8e14:	446c6c41 46617461 6f4e726f 52006564     AllDataForNode.R
   c8e24:	6f206e61 6f207475 6e652066 65697274     an out of entrie
   c8e34:	6e692073 646f6e20 61642065 61626174     s in node databa
   c8e44:	2d206573 74657320 7473614c 6f706552     se - setLastRepo
   c8e54:	6f207472 63656a62 61702074 6e697372     rt object parsin
   c8e64:	614c0067 65527473 74726f70 6c617620     g.LastReport val
   c8e74:	66206575 6e20726f 2065646f 73206425     ue for node %d s
   c8e84:	74207465 6425206f 73655200 69747465     et to %d.Resetti
   c8e94:	6e20676e 2065646f 2d206425 73657220     ng node %d - res
   c8ea4:	70537465 00656361 63617053 65522065     etSpace.Space Re
   c8eb4:	00746573 6c756f43 6f6e2064 65722074     set.Could not re
   c8ec4:	20746573 65646f6e 20642520 6572202d     set node %d - re
   c8ed4:	53746573 65636170 6b6e5500 6e776f6e     setSpace.Unknown
   c8ee4:	6e657320 20726f73 65707974 20642520      sensor type %d 
   c8ef4:	72206e69 74657365 63617053 65530065     in resetSpace.Se
   c8f04:	68637261 20676e69 4e4f534a 74616420     arching JSON dat
   c8f14:	73616261 6f662065 6f6e2072 20736564     abase for nodes 
   c8f24:	68746977 61707320 3d206563 6425203d     with space == %d
   c8f34:	67202d20 634f7465 61707563 4e79636e      - getOccupancyN
   c8f44:	79427465 63617053 6f4e0065 69206564     etBySpace.Node i
   c8f54:	7073206e 20656361 68206425 77207361     n space %d has w
   c8f64:	676e6f72 6e657320 54726f73 20657079     rong sensorType 
   c8f74:	6425203d 4975202e 25203a44 4e00756c     = %d. uID: %lu.N
   c8f84:	2065646f 73206e69 65636170 20642520     ode in space %d 
   c8f94:	6e207369 7320746f 74207465 756d206f     is not set to mu
   c8fa4:	4569746c 6172746e 2e65636e 44497520     ltiEntrance. uID
   c8fb4:	6c25203a 70530075 20656361 68206425     : %lu.Space %d h
   c8fc4:	61207361 67656e20 76697461 61762065     as a negative va
   c8fd4:	2e65756c 73655220 69747465 6120676e     lue. Resetting a
   c8fe4:	6e206c6c 2065646f 6e756f63 74207374     ll node counts t
   c8ff4:	2e30206f 61655300 69686372 6620676e     o 0..Searching f
   c9004:	6920726f 7463616e 20657669 63617073     or inactive spac
   c9014:	74207365 6572206f 20746573 6572202d     es to reset - re
   c9024:	49746573 7463616e 53657669 65636170     setInactiveSpace
   c9034:	65720073 49746573 7463616e 53657669     s.resetInactiveS
   c9044:	65636170 61722073 756f206e 666f2074     paces ran out of
   c9054:	746e6520 73656972 20746120 203d2069      entries at i = 
   c9064:	4e006425 3a65646f 2c642520 61705320     %d.Node: %d, Spa
   c9074:	253d6563 4c202c64 52747361 726f7065     ce=%d, LastRepor
   c9084:	64253d74 6f4e202c 64253d77 656c202c     t=%d, Now=%d, le
   c9094:	6874676e 636e6953 70655265 2074726f     ngthSinceReport 
   c90a4:	6425203d 61705300 25206563 61682064     = %d.Space %d ha
   c90b4:	65622073 69206e65 7463616e 20657669     s been inactive 
   c90c4:	20726f66 20313d3e 72756f68 6552202e     for >=1 hour. Re
   c90d4:	74746573 20676e69 20656874 63617073     setting the spac
   c90e4:	6e612065 74692064 6f6e2073 2e736564     e and its nodes.
   c90f4:	616e4900 76697463 70532065 00656361     .Inactive Space.
   c9104:	646e6966 65646f4e 626d754e 72207265     findNodeNumber r
   c9114:	6f206e61 6f207475 6e652066 65697274     an out of entrie
   c9124:	74612073 3d206920 00642520 2077654e     s at i = %d.New 
   c9134:	65646f6e 6c697720 6562206c 73736120     node will be ass
   c9144:	656e6769 6f6e2064 6e206564 65626d75     igned node numbe
   c9154:	64252072 6f6e202c 44496564 20666f20     r %d, nodeID of 
   c9164:	20756c25 74657300 646f6e5f 4a444965     %lu .set_nodeIDJ
   c9174:	206e6f73 6c696166 74206465 6461206f     son failed to ad
   c9184:	20612064 65646f6e 206f7420 20656874     d a node to the 
   c9194:	61746164 65736162 00002121              database!!..

000c91a0 <_ZTV16JsonParserStaticILj3072ELj550EE>:
	...
   c91a8:	000bda91 000bdaa5                       ........

000c91b0 <_ZTV15JsonDataManager>:
	...
   c91b8:	000bda81 000bda83                       ........

000c91c0 <_ZTVN5spark13EthernetClassE>:
	...
   c91c8:	000c062b 000c0621 000c0617 000c060d     +...!...........
   c91d8:	000c0601 000c05f5 000c3033 000c303b     ........30..;0..
   c91e8:	000c05e9 000c05e1 000c05d7 000c05cd     ................
   c91f8:	000c306b                                k0..

000c91fc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c91fc:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c920c:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c921c:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c922c:	64696c61 616e002e 6e69006e 766f0066     alid..nan.inf.ov
   c923c:	61620066 53006475 61697265 6553006c     f.baud.Serial.Se
   c924c:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c925c:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c926c:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c927c:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   c928c:	69617465 3d20736c 0a0d0020 006e6c00     etails = ....ln.
   c929c:	65646f63 74656400 006c6961              code.detail.

000c92a8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c92b0:	000c0fa1 000c0fc7 000c0f85 000c3187     .............1..

000c92c0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c92c8:	000c1385 000c139d 000c1add 000b654b     ............Ke..

000c92d8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c92e0:	000c13b1 000c13c5 000c1c81 000c0f8d     ................

000c92f0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c92f8:	000c0f9f 000c0fd5 000c1a41 000c0f8f     ........A.......

000c9308 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c9310:	000c0f9d 000c0fe3 000c12ed 000c1005     ................
   c9320:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   c9330:	007a2553 74637361 00656d69              S%z.asctime.

000c933c <_ZTV14CellularSignal>:
	...
   c9344:	000c2161 000c21c5 000c2163 000c21d5     a!...!..c!...!..
   c9354:	000c2209 000c2235 000c2269 000c2189     ."..5"..i"...!..
   c9364:	000c2167 000c2183 fffffffc 00000000     g!...!..........
   c9374:	000c21bd                                .!..

000c9378 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c9380:	000c2499 000c249f 000c24dd 000c24ad     .$...$...$...$..
   c9390:	000c249b                                .$..

000c9394 <_ZTV9IPAddress>:
	...
   c939c:	000c2a55 000c2a45 000c2a47              U*..E*..G*..

000c93a8 <_ZTV9USBSerial>:
	...
   c93b0:	000c2b3b 000c2ba3 000c2b79 000c0cc1     ;+...+..y+......
   c93c0:	000c2b6b 000c2b3d 000c2b4d 000c2b9d     k+..=+..M+...+..
   c93d0:	000c2b5d 000c2b35                       ]+..5+..

000c93d8 <_ZTVN5spark13CellularClassE>:
	...
   c93e0:	000c2cff 000c2cf5 000c2ceb 000c2ca1     .,...,...,...,..
   c93f0:	000c2cdf 000c2cd3 000c3033 000c303b     .,...,..30..;0..
   c9400:	000c2cc7 000c2cbf 000c2cb5 000c2cab     .,...,...,...,..
   c9410:	000c306b                                k0..

000c9414 <_ZTV11USARTSerial>:
	...
   c941c:	000c2d8d 000c2df9 000c2dd1 000c0cc1     .-...-...-......
   c942c:	000c2da1 000c2dbd 000c2daf 000c2dcb     .-...-...-...-..
   c943c:	000c2d8f 000c2d93                       .-...-..

000c9444 <_ZTV7TwoWire>:
	...
   c944c:	000c2e6d 000c2eb7 000c2e8f 000c2e6f     m...........o...
   c945c:	000c2e97 000c2e9f 000c2ea7 000c2eaf     ................

000c946c <_ZTVN5spark12NetworkClassE>:
	...
   c9474:	000c2ff3 000c2ffd 000c3007 000c3011     ./.../...0...0..
   c9484:	000c301b 000c3027 000c3033 000c303b     .0..'0..30..;0..
   c9494:	000c3043 000c304f 000c3057 000c3061     C0..O0..W0..a0..
   c94a4:	000c306b 34302575                        k0..u%04x.

000c94ae <_ZSt7nothrow>:
	...

000c94b8 <TWO52>:
   c94b8:	00000000 43300000 00000000 c3300000     ......0C......0.
   c94c8:	73332e25 332e2520 64332573 322e2520     %.3s %.3s%3d %.2
   c94d8:	2e253a64 253a6432 2064322e 000a6425     d:%.2d:%.2d %d..

000c94e8 <day_name.1>:
   c94e8:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c94f8:	61536972                                 riSat

000c94fd <mon_name.0>:
   c94fd:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c950d:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c951d:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c952d:	63757320 64656563 2f006465 2f746e6d      succeeded./mnt/
   c953d:	6b726f77 63617073 6f772f65 70736b72     workspace/worksp
   c954d:	2f656361 2d434347 702d3031 6c657069     ace/GCC-10-pipel
   c955d:	2f656e69 6b6e656a 2d736e69 2d434347     ine/jenkins-GCC-
   c956d:	702d3031 6c657069 2d656e69 325f3834     10-pipeline-48_2
   c957d:	31303230 5f343231 36303631 36303831     0201124_16061806
   c958d:	732f3134 6e2f6372 696c7765 656e2f62     41/src/newlib/ne
   c959d:	62696c77 62696c2f 69742f63 672f656d     wlib/libc/time/g
   c95ad:	6d69746d 00632e65 746e6d2f 726f772f     mtime.c./mnt/wor
   c95bd:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   c95cd:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   c95dd:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   c95ed:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   c95fd:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   c960d:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   c961d:	696c2f62 732f6362 696c6474 61722f62     b/libc/stdlib/ra
   c962d:	632e646e                                 nd.c.

000c9632 <_ctype_>:
   c9632:	20202000 20202020 28282020 20282828     .         ((((( 
   c9642:	20202020 20202020 20202020 20202020                     
   c9652:	10108820 10101010 10101010 10101010      ...............
   c9662:	04040410 04040404 10040404 10101010     ................
   c9672:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c9682:	01010101 01010101 01010101 10101010     ................
   c9692:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c96a2:	02020202 02020202 02020202 10101010     ................
   c96b2:	00000020 00000000 00000000 00000000      ...............
	...

000c9733 <link_const_variable_data_end>:
	...

000c9734 <link_constructors_location>:
   c9734:	000b4285 	.word	0x000b4285
   c9738:	000b4b35 	.word	0x000b4b35
   c973c:	000b6481 	.word	0x000b6481
   c9740:	000b7431 	.word	0x000b7431
   c9744:	000b8069 	.word	0x000b8069
   c9748:	000b8f71 	.word	0x000b8f71
   c974c:	000bb165 	.word	0x000bb165
   c9750:	000bb849 	.word	0x000bb849
   c9754:	000bc491 	.word	0x000bc491
   c9758:	000be709 	.word	0x000be709
   c975c:	000c0635 	.word	0x000c0635
   c9760:	000c093d 	.word	0x000c093d
   c9764:	000c0cb1 	.word	0x000c0cb1
   c9768:	000c1acd 	.word	0x000c1acd
   c976c:	000c2139 	.word	0x000c2139
   c9770:	000c2155 	.word	0x000c2155
   c9774:	000c2d5d 	.word	0x000c2d5d
   c9778:	000c3145 	.word	0x000c3145

000c977c <link_constructors_end>:
   c977c:	00000000 	.word	0x00000000
